//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/image/StreamImageProxy.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/RuntimeException.h"
#include "org/oss/pdfreporter/image/AbstractImageManager.h"
#include "org/oss/pdfreporter/image/AbstractImageProxy.h"
#include "org/oss/pdfreporter/image/IImage.h"
#include "org/oss/pdfreporter/image/StreamImageProxy.h"

@interface OrgOssPdfreporterImageStreamImageProxy () {
 @public
  JavaIoInputStream *image_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterImageStreamImageProxy, image_, JavaIoInputStream *)

@implementation OrgOssPdfreporterImageStreamImageProxy

- (instancetype)initWithOrgOssPdfreporterImageAbstractImageManager:(OrgOssPdfreporterImageAbstractImageManager *)imageManager
                                             withJavaIoInputStream:(JavaIoInputStream *)image
                                                         withFloat:(jfloat)quality
                                                         withFloat:(jfloat)scale_ {
  OrgOssPdfreporterImageStreamImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withJavaIoInputStream_withFloat_withFloat_(self, imageManager, image, quality, scale_);
  return self;
}

- (NSString *)getResourcePath {
  return JreStrcat("$@", @"InputSrream@", image_);
}

- (void)load__ {
  @try {
    if (nil == delegate_) {
      self->delegate_ = [((OrgOssPdfreporterImageAbstractImageManager *) nil_chk(imageManager_)) loadImageInternalWithJavaIoInputStream:image_ withFloat:quality_ withFloat:scale__];
    }
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"Exception while loading image resource :", [self getResourcePath]), e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterImageAbstractImageManager:withJavaIoInputStream:withFloat:withFloat:", "StreamImageProxy", NULL, 0x1, NULL, NULL },
    { "getResourcePath", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "load__", "load", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "image_", NULL, 0x12, "Ljava.io.InputStream;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterImageStreamImageProxy = { 2, "StreamImageProxy", "org.oss.pdfreporter.image", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterImageStreamImageProxy;
}

@end

void OrgOssPdfreporterImageStreamImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withJavaIoInputStream_withFloat_withFloat_(OrgOssPdfreporterImageStreamImageProxy *self, OrgOssPdfreporterImageAbstractImageManager *imageManager, JavaIoInputStream *image, jfloat quality, jfloat scale_) {
  OrgOssPdfreporterImageAbstractImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withFloat_withFloat_(self, imageManager, quality, scale_);
  self->image_ = image;
}

OrgOssPdfreporterImageStreamImageProxy *new_OrgOssPdfreporterImageStreamImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withJavaIoInputStream_withFloat_withFloat_(OrgOssPdfreporterImageAbstractImageManager *imageManager, JavaIoInputStream *image, jfloat quality, jfloat scale_) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterImageStreamImageProxy, initWithOrgOssPdfreporterImageAbstractImageManager_withJavaIoInputStream_withFloat_withFloat_, imageManager, image, quality, scale_)
}

OrgOssPdfreporterImageStreamImageProxy *create_OrgOssPdfreporterImageStreamImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withJavaIoInputStream_withFloat_withFloat_(OrgOssPdfreporterImageAbstractImageManager *imageManager, JavaIoInputStream *image, jfloat quality, jfloat scale_) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterImageStreamImageProxy, initWithOrgOssPdfreporterImageAbstractImageManager_withJavaIoInputStream_withFloat_withFloat_, imageManager, image, quality, scale_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterImageStreamImageProxy)
