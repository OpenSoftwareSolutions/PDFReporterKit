//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/image/UrlImageProxy.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/RuntimeException.h"
#include "org/oss/pdfreporter/image/AbstractImageManager.h"
#include "org/oss/pdfreporter/image/AbstractImageProxy.h"
#include "org/oss/pdfreporter/image/IImage.h"
#include "org/oss/pdfreporter/image/UrlImageProxy.h"
#include "org/oss/pdfreporter/net/IURL.h"

@interface OrgOssPdfreporterImageUrlImageProxy () {
 @public
  id<OrgOssPdfreporterNetIURL> urlPath_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterImageUrlImageProxy, urlPath_, id<OrgOssPdfreporterNetIURL>)

@implementation OrgOssPdfreporterImageUrlImageProxy

- (instancetype)initWithOrgOssPdfreporterImageAbstractImageManager:(OrgOssPdfreporterImageAbstractImageManager *)imageManager
                                      withOrgOssPdfreporterNetIURL:(id<OrgOssPdfreporterNetIURL>)urlPath
                                                         withFloat:(jfloat)quality
                                                         withFloat:(jfloat)scale_ {
  OrgOssPdfreporterImageUrlImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withOrgOssPdfreporterNetIURL_withFloat_withFloat_(self, imageManager, urlPath, quality, scale_);
  return self;
}

- (NSString *)getResourcePath {
  return [((id<OrgOssPdfreporterNetIURL>) nil_chk(urlPath_)) getPath];
}

- (void)load__ {
  @try {
    if (nil == delegate_) {
      self->delegate_ = [((OrgOssPdfreporterImageAbstractImageManager *) nil_chk(imageManager_)) loadImageInternalWithOrgOssPdfreporterNetIURL:urlPath_ withFloat:quality_ withFloat:scale__];
    }
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"Exception while loading image resource :", [self getResourcePath]), e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterImageAbstractImageManager:withOrgOssPdfreporterNetIURL:withFloat:withFloat:", "UrlImageProxy", NULL, 0x1, NULL, NULL },
    { "getResourcePath", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "load__", "load", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "urlPath_", NULL, 0x12, "Lorg.oss.pdfreporter.net.IURL;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterImageUrlImageProxy = { 2, "UrlImageProxy", "org.oss.pdfreporter.image", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterImageUrlImageProxy;
}

@end

void OrgOssPdfreporterImageUrlImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withOrgOssPdfreporterNetIURL_withFloat_withFloat_(OrgOssPdfreporterImageUrlImageProxy *self, OrgOssPdfreporterImageAbstractImageManager *imageManager, id<OrgOssPdfreporterNetIURL> urlPath, jfloat quality, jfloat scale_) {
  OrgOssPdfreporterImageAbstractImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withFloat_withFloat_(self, imageManager, quality, scale_);
  self->urlPath_ = urlPath;
}

OrgOssPdfreporterImageUrlImageProxy *new_OrgOssPdfreporterImageUrlImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withOrgOssPdfreporterNetIURL_withFloat_withFloat_(OrgOssPdfreporterImageAbstractImageManager *imageManager, id<OrgOssPdfreporterNetIURL> urlPath, jfloat quality, jfloat scale_) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterImageUrlImageProxy, initWithOrgOssPdfreporterImageAbstractImageManager_withOrgOssPdfreporterNetIURL_withFloat_withFloat_, imageManager, urlPath, quality, scale_)
}

OrgOssPdfreporterImageUrlImageProxy *create_OrgOssPdfreporterImageUrlImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withOrgOssPdfreporterNetIURL_withFloat_withFloat_(OrgOssPdfreporterImageAbstractImageManager *imageManager, id<OrgOssPdfreporterNetIURL> urlPath, jfloat quality, jfloat scale_) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterImageUrlImageProxy, initWithOrgOssPdfreporterImageAbstractImageManager_withOrgOssPdfreporterNetIURL_withFloat_withFloat_, imageManager, urlPath, quality, scale_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterImageUrlImageProxy)
