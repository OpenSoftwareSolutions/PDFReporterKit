//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/image/FileImageProxy.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/RuntimeException.h"
#include "org/oss/pdfreporter/image/AbstractImageManager.h"
#include "org/oss/pdfreporter/image/AbstractImageProxy.h"
#include "org/oss/pdfreporter/image/FileImageProxy.h"
#include "org/oss/pdfreporter/image/IImage.h"

@interface OrgOssPdfreporterImageFileImageProxy () {
 @public
  NSString *filePath_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterImageFileImageProxy, filePath_, NSString *)

@implementation OrgOssPdfreporterImageFileImageProxy

- (instancetype)initWithOrgOssPdfreporterImageAbstractImageManager:(OrgOssPdfreporterImageAbstractImageManager *)imageManager
                                                      withNSString:(NSString *)filePath
                                                         withFloat:(jfloat)quality
                                                         withFloat:(jfloat)scale_ {
  OrgOssPdfreporterImageFileImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withNSString_withFloat_withFloat_(self, imageManager, filePath, quality, scale_);
  return self;
}

- (NSString *)getResourcePath {
  return filePath_;
}

- (void)load__ {
  @try {
    if (nil == delegate_) {
      self->delegate_ = [((OrgOssPdfreporterImageAbstractImageManager *) nil_chk(imageManager_)) loadImageInternalWithNSString:filePath_ withFloat:quality_ withFloat:scale__];
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"Exception while loading image resource :", [self getResourcePath]), e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterImageAbstractImageManager:withNSString:withFloat:withFloat:", "FileImageProxy", NULL, 0x1, NULL, NULL },
    { "getResourcePath", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "load__", "load", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "filePath_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterImageFileImageProxy = { 2, "FileImageProxy", "org.oss.pdfreporter.image", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterImageFileImageProxy;
}

@end

void OrgOssPdfreporterImageFileImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withNSString_withFloat_withFloat_(OrgOssPdfreporterImageFileImageProxy *self, OrgOssPdfreporterImageAbstractImageManager *imageManager, NSString *filePath, jfloat quality, jfloat scale_) {
  OrgOssPdfreporterImageAbstractImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withFloat_withFloat_(self, imageManager, quality, scale_);
  self->filePath_ = filePath;
}

OrgOssPdfreporterImageFileImageProxy *new_OrgOssPdfreporterImageFileImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withNSString_withFloat_withFloat_(OrgOssPdfreporterImageAbstractImageManager *imageManager, NSString *filePath, jfloat quality, jfloat scale_) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterImageFileImageProxy, initWithOrgOssPdfreporterImageAbstractImageManager_withNSString_withFloat_withFloat_, imageManager, filePath, quality, scale_)
}

OrgOssPdfreporterImageFileImageProxy *create_OrgOssPdfreporterImageFileImageProxy_initWithOrgOssPdfreporterImageAbstractImageManager_withNSString_withFloat_withFloat_(OrgOssPdfreporterImageAbstractImageManager *imageManager, NSString *filePath, jfloat quality, jfloat scale_) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterImageFileImageProxy, initWithOrgOssPdfreporterImageAbstractImageManager_withNSString_withFloat_withFloat_, imageManager, filePath, quality, scale_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterImageFileImageProxy)
