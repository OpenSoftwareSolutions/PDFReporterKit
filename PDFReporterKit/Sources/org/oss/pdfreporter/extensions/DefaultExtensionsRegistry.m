//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/extensions/DefaultExtensionsRegistry.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/util/ClassUtils.h"
#include "org/oss/pdfreporter/engine/util/JRLoader.h"
#include "org/oss/pdfreporter/extensions/DefaultExtensionsRegistry.h"
#include "org/oss/pdfreporter/extensions/ExtensionsEnvironment.h"
#include "org/oss/pdfreporter/extensions/ExtensionsRegistry.h"
#include "org/oss/pdfreporter/extensions/ExtensionsRegistryFactory.h"
#include "org/oss/pdfreporter/net/IURL.h"
#include "org/oss/pdfreporter/repo/FileSystemResource.h"

@interface OrgOssPdfreporterExtensionsDefaultExtensionsRegistry () {
 @public
  id<JavaUtilMap> registrySetCache_;
  id<JavaUtilMap> registryCache_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterExtensionsDefaultExtensionsRegistry, registrySetCache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterExtensionsDefaultExtensionsRegistry, registryCache_, id<JavaUtilMap>)

inline JavaUtilLoggingLogger *OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterExtensionsDefaultExtensionsRegistry, logger, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterExtensionsDefaultExtensionsRegistry)

NSString *OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_EXTENSION_RESOURCE_NAME = @"jasperreports_extension.properties";
NSString *OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_PROPERTY_REGISTRY_FACTORY_PREFIX = @"net.sf.jasperreports.extension.registry.factory.";
NSString *OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_PROPERTY_REGISTRY_PREFIX = @"net.sf.jasperreports.extension.";

@implementation OrgOssPdfreporterExtensionsDefaultExtensionsRegistry

+ (NSString *)EXTENSION_RESOURCE_NAME {
  return OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_EXTENSION_RESOURCE_NAME;
}

+ (NSString *)PROPERTY_REGISTRY_FACTORY_PREFIX {
  return OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_PROPERTY_REGISTRY_FACTORY_PREFIX;
}

+ (NSString *)PROPERTY_REGISTRY_PREFIX {
  return OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_PROPERTY_REGISTRY_PREFIX;
}

- (id<JavaUtilList>)getExtensionsWithIOSClass:(IOSClass *)extensionType {
  id<JavaUtilList> registries = [self getRegistries];
  id<JavaUtilList> extensions = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(registries)) size]);
  for (id<JavaUtilIterator> it = [registries iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterExtensionsExtensionsRegistry> registry = [it next];
    id<JavaUtilList> registryExtensions = [((id<OrgOssPdfreporterExtensionsExtensionsRegistry>) nil_chk(registry)) getExtensionsWithIOSClass:extensionType];
    if (registryExtensions != nil && ![registryExtensions isEmpty]) {
      [extensions addAllWithJavaUtilCollection:registryExtensions];
    }
  }
  return extensions;
}

- (id<JavaUtilList>)getRegistries {
  id<JavaUtilList> registries;
  id cacheKey = OrgOssPdfreporterExtensionsExtensionsEnvironment_getExtensionsCacheKey();
  @synchronized(registrySetCache_) {
    registries = (id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(registrySetCache_)) getWithId:cacheKey], JavaUtilList_class_());
    if (registries == nil) {
      registries = [self loadRegistries];
      (void) [registrySetCache_ putWithId:cacheKey withId:registries];
    }
  }
  return registries;
}

- (id<JavaUtilList>)loadRegistries {
  id<JavaUtilList> allRegistries = new_JavaUtilArrayList_init();
  id<JavaUtilList> extensionResources = [self loadExtensionPropertyResources];
  for (OrgOssPdfreporterRepoFileSystemResource * __strong extensionResource in nil_chk(extensionResources)) {
    NSString *folderPath = [((OrgOssPdfreporterRepoFileSystemResource *) nil_chk(extensionResource)) getFolderPath];
    id<JavaUtilMap> classLoaderRegistries = [self getFileFolderRegistriesWithNSString:folderPath];
    id<OrgOssPdfreporterNetIURL> url = [extensionResource getUrl];
    id<JavaUtilList> registries;
    @synchronized(classLoaderRegistries) {
      registries = [((id<JavaUtilMap>) nil_chk(classLoaderRegistries)) getWithId:url];
      if (registries == nil) {
        if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
          [OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_logger finestWithNSString:JreStrcat("$$", @"Loading JasperReports extension properties resource ", [((id<OrgOssPdfreporterNetIURL>) nil_chk(url)) getPath])];
        }
        registries = [self loadRegistriesWithOrgOssPdfreporterNetIURL:url];
        (void) [classLoaderRegistries putWithId:url withId:registries];
      }
    }
    [allRegistries addAllWithJavaUtilCollection:registries];
  }
  return allRegistries;
}

- (id<JavaUtilList>)loadExtensionPropertyResources {
  return OrgOssPdfreporterEngineUtilJRLoader_getFileSystemResourcesWithNSString_(OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_EXTENSION_RESOURCE_NAME);
}

- (id<JavaUtilMap>)getFileFolderRegistriesWithNSString:(NSString *)folderPath {
  @synchronized(registryCache_) {
    id<JavaUtilMap> registries = (id<JavaUtilMap>) cast_check([((id<JavaUtilMap>) nil_chk(registryCache_)) getWithId:folderPath], JavaUtilMap_class_());
    if (registries == nil) {
      registries = new_JavaUtilHashMap_init();
      (void) [registryCache_ putWithId:folderPath withId:registries];
    }
    return registries;
  }
}

- (id<JavaUtilList>)loadRegistriesWithOrgOssPdfreporterNetIURL:(id<OrgOssPdfreporterNetIURL>)url {
  OrgOssPdfreporterEngineJRPropertiesMap *properties = OrgOssPdfreporterEngineJRPropertiesMap_loadPropertiesWithOrgOssPdfreporterNetIURL_(url);
  id<JavaUtilList> registries = new_JavaUtilArrayList_init();
  id<JavaUtilList> factoryProps = OrgOssPdfreporterEngineJRPropertiesUtil_getPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap_withNSString_(properties, OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_PROPERTY_REGISTRY_FACTORY_PREFIX);
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(factoryProps)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *factoryProp = [it next];
    NSString *registryId = [((OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *) nil_chk(factoryProp)) getSuffix];
    NSString *factoryClass = [factoryProp getValue];
    if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
      [OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_logger finestWithNSString:JreStrcat("$$$$", @"Instantiating registry of type ", factoryClass, @" for property ", [factoryProp getKey])];
    }
    @try {
      id<OrgOssPdfreporterExtensionsExtensionsRegistry> registry = [self instantiateRegistryWithOrgOssPdfreporterEngineJRPropertiesMap:properties withNSString:registryId withNSString:factoryClass];
      [registries addWithId:registry];
    }
    @catch (JavaLangException *e) {
      [OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_logger logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$$", @"Exception loading Registry ", registryId) withNSException:e];
    }
  }
  return registries;
}

- (id<OrgOssPdfreporterExtensionsExtensionsRegistry>)instantiateRegistryWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)props
                                                                                                      withNSString:(NSString *)registryId
                                                                                                      withNSString:(NSString *)factoryClass {
  id<OrgOssPdfreporterExtensionsExtensionsRegistryFactory> factory = (id<OrgOssPdfreporterExtensionsExtensionsRegistryFactory>) cast_check(OrgOssPdfreporterEngineUtilClassUtils_instantiateClassWithNSString_withIOSClass_(factoryClass, OrgOssPdfreporterExtensionsExtensionsRegistryFactory_class_()), OrgOssPdfreporterExtensionsExtensionsRegistryFactory_class_());
  return [((id<OrgOssPdfreporterExtensionsExtensionsRegistryFactory>) nil_chk(factory)) createRegistryWithNSString:registryId withOrgOssPdfreporterEngineJRPropertiesMap:props];
}

- (void)reset {
  [((id<JavaUtilMap>) nil_chk(registrySetCache_)) clear];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [OrgOssPdfreporterExtensionsDefaultExtensionsRegistry class]) {
    OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterExtensionsDefaultExtensionsRegistry)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getExtensionsWithIOSClass:", "getExtensions", "Ljava.util.List;", 0x1, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Ljava/util/List<TT;>;" },
    { "getRegistries", NULL, "Ljava.util.List;", 0x4, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/extensions/ExtensionsRegistry;>;" },
    { "loadRegistries", NULL, "Ljava.util.List;", 0x4, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/extensions/ExtensionsRegistry;>;" },
    { "loadExtensionPropertyResources", NULL, "Ljava.util.List;", 0x4, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/repo/FileSystemResource;>;" },
    { "getFileFolderRegistriesWithNSString:", "getFileFolderRegistries", "Ljava.util.Map;", 0x4, NULL, "(Ljava/lang/String;)Ljava/util/Map<Lorg/oss/pdfreporter/net/IURL;Ljava/util/List<Lorg/oss/pdfreporter/extensions/ExtensionsRegistry;>;>;" },
    { "loadRegistriesWithOrgOssPdfreporterNetIURL:", "loadRegistries", "Ljava.util.List;", 0x4, NULL, "(Lorg/oss/pdfreporter/net/IURL;)Ljava/util/List<Lorg/oss/pdfreporter/extensions/ExtensionsRegistry;>;" },
    { "instantiateRegistryWithOrgOssPdfreporterEngineJRPropertiesMap:withNSString:withNSString:", "instantiateRegistry", "Lorg.oss.pdfreporter.extensions.ExtensionsRegistry;", 0x4, NULL, NULL },
    { "reset", NULL, "V", 0x0, NULL, NULL },
    { "init", "DefaultExtensionsRegistry", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_logger, NULL, .constantValue.asLong = 0 },
    { "EXTENSION_RESOURCE_NAME", "EXTENSION_RESOURCE_NAME", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_EXTENSION_RESOURCE_NAME, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_REGISTRY_FACTORY_PREFIX", "PROPERTY_REGISTRY_FACTORY_PREFIX", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_PROPERTY_REGISTRY_FACTORY_PREFIX, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_REGISTRY_PREFIX", "PROPERTY_REGISTRY_PREFIX", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_PROPERTY_REGISTRY_PREFIX, NULL, .constantValue.asLong = 0 },
    { "registrySetCache_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL, .constantValue.asLong = 0 },
    { "registryCache_", NULL, 0x12, "Ljava.util.Map;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterExtensionsDefaultExtensionsRegistry = { 2, "DefaultExtensionsRegistry", "org.oss.pdfreporter.extensions", NULL, 0x1, 9, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterExtensionsDefaultExtensionsRegistry;
}

@end

void OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_init(OrgOssPdfreporterExtensionsDefaultExtensionsRegistry *self) {
  NSObject_init(self);
  self->registrySetCache_ = new_JavaUtilHashMap_init();
  self->registryCache_ = new_JavaUtilHashMap_init();
}

OrgOssPdfreporterExtensionsDefaultExtensionsRegistry *new_OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterExtensionsDefaultExtensionsRegistry, init)
}

OrgOssPdfreporterExtensionsDefaultExtensionsRegistry *create_OrgOssPdfreporterExtensionsDefaultExtensionsRegistry_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterExtensionsDefaultExtensionsRegistry, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterExtensionsDefaultExtensionsRegistry)
