//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/repo/RepositoryUtil.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/ReportContext.h"
#include "org/oss/pdfreporter/repo/FileResourceLoader.h"
#include "org/oss/pdfreporter/repo/JasperDesignCache.h"
#include "org/oss/pdfreporter/repo/ReportResource.h"
#include "org/oss/pdfreporter/repo/RepositoryService.h"
#include "org/oss/pdfreporter/repo/RepositoryUtil.h"
#include "org/oss/pdfreporter/repo/Resource.h"

@interface OrgOssPdfreporterRepoRepositoryUtil () {
 @public
  id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext_;
}

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext;

+ (OrgOssPdfreporterRepoRepositoryUtil *)getDefaultInstance;

- (id<JavaUtilList>)getServices;

- (JavaIoInputStream *)findInputStreamWithNSString:(NSString *)location;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterRepoRepositoryUtil, jasperReportsContext_, id<OrgOssPdfreporterEngineJasperReportsContext>)

__attribute__((unused)) static void OrgOssPdfreporterRepoRepositoryUtil_initWithOrgOssPdfreporterEngineJasperReportsContext_(OrgOssPdfreporterRepoRepositoryUtil *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext);

__attribute__((unused)) static OrgOssPdfreporterRepoRepositoryUtil *new_OrgOssPdfreporterRepoRepositoryUtil_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterRepoRepositoryUtil *create_OrgOssPdfreporterRepoRepositoryUtil_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext);

__attribute__((unused)) static OrgOssPdfreporterRepoRepositoryUtil *OrgOssPdfreporterRepoRepositoryUtil_getDefaultInstance();

__attribute__((unused)) static id<JavaUtilList> OrgOssPdfreporterRepoRepositoryUtil_getServices(OrgOssPdfreporterRepoRepositoryUtil *self);

__attribute__((unused)) static JavaIoInputStream *OrgOssPdfreporterRepoRepositoryUtil_findInputStreamWithNSString_(OrgOssPdfreporterRepoRepositoryUtil *self, NSString *location);

@implementation OrgOssPdfreporterRepoRepositoryUtil

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  OrgOssPdfreporterRepoRepositoryUtil_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, jasperReportsContext);
  return self;
}

+ (OrgOssPdfreporterRepoRepositoryUtil *)getDefaultInstance {
  return OrgOssPdfreporterRepoRepositoryUtil_getDefaultInstance();
}

+ (OrgOssPdfreporterRepoRepositoryUtil *)getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return OrgOssPdfreporterRepoRepositoryUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext);
}

- (id<JavaUtilList>)getServices {
  return OrgOssPdfreporterRepoRepositoryUtil_getServices(self);
}

+ (id<JavaUtilList>)getRepositoryServices {
  return OrgOssPdfreporterRepoRepositoryUtil_getRepositoryServices();
}

- (OrgOssPdfreporterEngineJasperReport *)getReportWithOrgOssPdfreporterEngineReportContext:(id<OrgOssPdfreporterEngineReportContext>)reportContext
                                                                              withNSString:(NSString *)location {
  OrgOssPdfreporterEngineJasperReport *jasperReport = nil;
  OrgOssPdfreporterRepoJasperDesignCache *cache = OrgOssPdfreporterRepoJasperDesignCache_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineReportContext_(jasperReportsContext_, reportContext);
  if (cache != nil) {
    jasperReport = [cache getJasperReportWithNSString:location];
  }
  if (jasperReport == nil) {
    OrgOssPdfreporterRepoReportResource *resource = [self getResourceFromLocationWithNSString:location withIOSClass:OrgOssPdfreporterRepoReportResource_class_()];
    if (resource == nil) {
      @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(JreStrcat("$$", @"Report not found at : ", location));
    }
    jasperReport = [resource getReport];
    if (cache != nil) {
      [cache setWithNSString:location withOrgOssPdfreporterEngineJasperReport:jasperReport];
    }
  }
  return jasperReport;
}

- (id)getResourceFromLocationWithNSString:(NSString *)location
                             withIOSClass:(IOSClass *)resourceType {
  id<OrgOssPdfreporterRepoResource> resource = nil;
  id<JavaUtilList> services = OrgOssPdfreporterRepoRepositoryUtil_getServices(self);
  if (services != nil) {
    for (id<OrgOssPdfreporterRepoRepositoryService> __strong service in services) {
      resource = [((id<OrgOssPdfreporterRepoRepositoryService>) nil_chk(service)) getResourceWithNSString:location withIOSClass:resourceType];
      if (resource != nil) {
        break;
      }
    }
  }
  if (resource == nil) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(JreStrcat("$$", @"Resource not found at : ", location));
  }
  return resource;
}

+ (id)getResourceWithNSString:(NSString *)location
                 withIOSClass:(IOSClass *)resourceType {
  return OrgOssPdfreporterRepoRepositoryUtil_getResourceWithNSString_withIOSClass_(location, resourceType);
}

- (JavaIoInputStream *)getInputStreamFromLocationWithNSString:(NSString *)location {
  JavaIoInputStream *is = OrgOssPdfreporterRepoRepositoryUtil_findInputStreamWithNSString_(self, location);
  if (is == nil) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(JreStrcat("$$", @"Input stream not found at : ", location));
  }
  return is;
}

+ (JavaIoInputStream *)getInputStreamWithNSString:(NSString *)location {
  return OrgOssPdfreporterRepoRepositoryUtil_getInputStreamWithNSString_(location);
}

- (JavaIoInputStream *)findInputStreamWithNSString:(NSString *)location {
  return OrgOssPdfreporterRepoRepositoryUtil_findInputStreamWithNSString_(self, location);
}

- (IOSByteArray *)getBytesFromLocationWithNSString:(NSString *)location {
  JavaIoInputStream *is = OrgOssPdfreporterRepoRepositoryUtil_findInputStreamWithNSString_(self, location);
  if (is == nil) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(JreStrcat("$$", @"Byte data not found at : ", location));
  }
  JavaIoByteArrayOutputStream *baos = nil;
  @try {
    baos = new_JavaIoByteArrayOutputStream_init();
    IOSByteArray *bytes = [IOSByteArray newArrayWithLength:10000];
    jint ln = 0;
    while ((ln = [is readWithByteArray:bytes]) > 0) {
      [baos writeWithByteArray:bytes withInt:0 withInt:ln];
    }
    [baos flush];
  }
  @catch (JavaIoIOException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(JreStrcat("$$", @"Error loading byte data from : ", location), e);
  }
  @finally {
    if (baos != nil) {
      @try {
        [baos close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
    if (is != nil) {
      @try {
        [is close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  return [((JavaIoByteArrayOutputStream *) nil_chk(baos)) toByteArray];
}

+ (IOSByteArray *)getBytesWithNSString:(NSString *)location {
  return OrgOssPdfreporterRepoRepositoryUtil_getBytesWithNSString_(location);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineJasperReportsContext:", "RepositoryUtil", NULL, 0x2, NULL, NULL },
    { "getDefaultInstance", NULL, "Lorg.oss.pdfreporter.repo.RepositoryUtil;", 0xa, NULL, NULL },
    { "getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:", "getInstance", "Lorg.oss.pdfreporter.repo.RepositoryUtil;", 0x9, NULL, NULL },
    { "getServices", NULL, "Ljava.util.List;", 0x2, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/repo/RepositoryService;>;" },
    { "getRepositoryServices", NULL, "Ljava.util.List;", 0x9, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/repo/RepositoryService;>;" },
    { "getReportWithOrgOssPdfreporterEngineReportContext:withNSString:", "getReport", "Lorg.oss.pdfreporter.engine.JasperReport;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "getResourceFromLocationWithNSString:withIOSClass:", "getResourceFromLocation", "TK;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", "<K::Lorg/oss/pdfreporter/repo/Resource;>(Ljava/lang/String;Ljava/lang/Class<TK;>;)TK;" },
    { "getResourceWithNSString:withIOSClass:", "getResource", "TK;", 0x9, "Lorg.oss.pdfreporter.engine.JRException;", "<K::Lorg/oss/pdfreporter/repo/Resource;>(Ljava/lang/String;Ljava/lang/Class<TK;>;)TK;" },
    { "getInputStreamFromLocationWithNSString:", "getInputStreamFromLocation", "Ljava.io.InputStream;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "getInputStreamWithNSString:", "getInputStream", "Ljava.io.InputStream;", 0x9, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "findInputStreamWithNSString:", "findInputStream", "Ljava.io.InputStream;", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "getBytesFromLocationWithNSString:", "getBytesFromLocation", "[B", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "getBytesWithNSString:", "getBytes", "[B", 0x9, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "jasperReportsContext_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.JasperReportsContext;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterRepoRepositoryUtil = { 2, "RepositoryUtil", "org.oss.pdfreporter.repo", NULL, 0x11, 13, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterRepoRepositoryUtil;
}

@end

void OrgOssPdfreporterRepoRepositoryUtil_initWithOrgOssPdfreporterEngineJasperReportsContext_(OrgOssPdfreporterRepoRepositoryUtil *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  NSObject_init(self);
  self->jasperReportsContext_ = jasperReportsContext;
}

OrgOssPdfreporterRepoRepositoryUtil *new_OrgOssPdfreporterRepoRepositoryUtil_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterRepoRepositoryUtil, initWithOrgOssPdfreporterEngineJasperReportsContext_, jasperReportsContext)
}

OrgOssPdfreporterRepoRepositoryUtil *create_OrgOssPdfreporterRepoRepositoryUtil_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterRepoRepositoryUtil, initWithOrgOssPdfreporterEngineJasperReportsContext_, jasperReportsContext)
}

OrgOssPdfreporterRepoRepositoryUtil *OrgOssPdfreporterRepoRepositoryUtil_getDefaultInstance() {
  OrgOssPdfreporterRepoRepositoryUtil_initialize();
  return new_OrgOssPdfreporterRepoRepositoryUtil_initWithOrgOssPdfreporterEngineJasperReportsContext_(OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance());
}

OrgOssPdfreporterRepoRepositoryUtil *OrgOssPdfreporterRepoRepositoryUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  OrgOssPdfreporterRepoRepositoryUtil_initialize();
  return new_OrgOssPdfreporterRepoRepositoryUtil_initWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext);
}

id<JavaUtilList> OrgOssPdfreporterRepoRepositoryUtil_getServices(OrgOssPdfreporterRepoRepositoryUtil *self) {
  return [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk(self->jasperReportsContext_)) getExtensionsWithIOSClass:OrgOssPdfreporterRepoRepositoryService_class_()];
}

id<JavaUtilList> OrgOssPdfreporterRepoRepositoryUtil_getRepositoryServices() {
  OrgOssPdfreporterRepoRepositoryUtil_initialize();
  return OrgOssPdfreporterRepoRepositoryUtil_getServices(nil_chk(OrgOssPdfreporterRepoRepositoryUtil_getDefaultInstance()));
}

id OrgOssPdfreporterRepoRepositoryUtil_getResourceWithNSString_withIOSClass_(NSString *location, IOSClass *resourceType) {
  OrgOssPdfreporterRepoRepositoryUtil_initialize();
  return [((OrgOssPdfreporterRepoRepositoryUtil *) nil_chk(OrgOssPdfreporterRepoRepositoryUtil_getDefaultInstance())) getResourceFromLocationWithNSString:location withIOSClass:resourceType];
}

JavaIoInputStream *OrgOssPdfreporterRepoRepositoryUtil_getInputStreamWithNSString_(NSString *location) {
  OrgOssPdfreporterRepoRepositoryUtil_initialize();
  return [((OrgOssPdfreporterRepoRepositoryUtil *) nil_chk(OrgOssPdfreporterRepoRepositoryUtil_getDefaultInstance())) getInputStreamFromLocationWithNSString:location];
}

JavaIoInputStream *OrgOssPdfreporterRepoRepositoryUtil_findInputStreamWithNSString_(OrgOssPdfreporterRepoRepositoryUtil *self, NSString *location) {
  return OrgOssPdfreporterRepoFileResourceLoader_getInputStreamWithNSString_(location);
}

IOSByteArray *OrgOssPdfreporterRepoRepositoryUtil_getBytesWithNSString_(NSString *location) {
  OrgOssPdfreporterRepoRepositoryUtil_initialize();
  return [((OrgOssPdfreporterRepoRepositoryUtil *) nil_chk(OrgOssPdfreporterRepoRepositoryUtil_getDefaultInstance())) getBytesFromLocationWithNSString:location];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterRepoRepositoryUtil)
