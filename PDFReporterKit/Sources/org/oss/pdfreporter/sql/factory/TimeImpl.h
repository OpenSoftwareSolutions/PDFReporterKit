//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/sql/factory/TimeImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgOssPdfreporterSqlFactoryTimeImpl")
#ifdef RESTRICT_OrgOssPdfreporterSqlFactoryTimeImpl
#define INCLUDE_ALL_OrgOssPdfreporterSqlFactoryTimeImpl 0
#else
#define INCLUDE_ALL_OrgOssPdfreporterSqlFactoryTimeImpl 1
#endif
#undef RESTRICT_OrgOssPdfreporterSqlFactoryTimeImpl

#if !defined (OrgOssPdfreporterSqlFactoryTimeImpl_) && (INCLUDE_ALL_OrgOssPdfreporterSqlFactoryTimeImpl || defined(INCLUDE_OrgOssPdfreporterSqlFactoryTimeImpl))
#define OrgOssPdfreporterSqlFactoryTimeImpl_

#define RESTRICT_OrgOssPdfreporterSqlITime 1
#define INCLUDE_OrgOssPdfreporterSqlITime 1
#include "org/oss/pdfreporter/sql/ITime.h"

@class JavaUtilCalendar;
@class JavaUtilDate;

@interface OrgOssPdfreporterSqlFactoryTimeImpl : NSObject < OrgOssPdfreporterSqlITime >

#pragma mark Public

- (JavaUtilDate *)getDate;

- (jint)getHours;

- (jint)getMinutes;

- (jint)getSeconds;

#pragma mark Package-Private

- (instancetype)initWithJavaUtilCalendar:(JavaUtilCalendar *)time;

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time;

- (instancetype)initWithInt:(jint)hour
                    withInt:(jint)minute
                    withInt:(jint)second;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgOssPdfreporterSqlFactoryTimeImpl)

FOUNDATION_EXPORT void OrgOssPdfreporterSqlFactoryTimeImpl_initWithInt_withInt_withInt_(OrgOssPdfreporterSqlFactoryTimeImpl *self, jint hour, jint minute, jint second);

FOUNDATION_EXPORT OrgOssPdfreporterSqlFactoryTimeImpl *new_OrgOssPdfreporterSqlFactoryTimeImpl_initWithInt_withInt_withInt_(jint hour, jint minute, jint second) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgOssPdfreporterSqlFactoryTimeImpl *create_OrgOssPdfreporterSqlFactoryTimeImpl_initWithInt_withInt_withInt_(jint hour, jint minute, jint second);

FOUNDATION_EXPORT void OrgOssPdfreporterSqlFactoryTimeImpl_initWithJavaUtilDate_(OrgOssPdfreporterSqlFactoryTimeImpl *self, JavaUtilDate *time);

FOUNDATION_EXPORT OrgOssPdfreporterSqlFactoryTimeImpl *new_OrgOssPdfreporterSqlFactoryTimeImpl_initWithJavaUtilDate_(JavaUtilDate *time) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgOssPdfreporterSqlFactoryTimeImpl *create_OrgOssPdfreporterSqlFactoryTimeImpl_initWithJavaUtilDate_(JavaUtilDate *time);

FOUNDATION_EXPORT void OrgOssPdfreporterSqlFactoryTimeImpl_initWithJavaUtilCalendar_(OrgOssPdfreporterSqlFactoryTimeImpl *self, JavaUtilCalendar *time);

FOUNDATION_EXPORT OrgOssPdfreporterSqlFactoryTimeImpl *new_OrgOssPdfreporterSqlFactoryTimeImpl_initWithJavaUtilCalendar_(JavaUtilCalendar *time) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgOssPdfreporterSqlFactoryTimeImpl *create_OrgOssPdfreporterSqlFactoryTimeImpl_initWithJavaUtilCalendar_(JavaUtilCalendar *time);

J2OBJC_TYPE_LITERAL_HEADER(OrgOssPdfreporterSqlFactoryTimeImpl)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgOssPdfreporterSqlFactoryTimeImpl")
