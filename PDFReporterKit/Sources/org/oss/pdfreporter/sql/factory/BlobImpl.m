//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/sql/factory/BlobImpl.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "org/oss/pdfreporter/sql/SQLException.h"
#include "org/oss/pdfreporter/sql/factory/BlobImpl.h"

@interface OrgOssPdfreporterSqlFactoryBlobImpl () {
 @public
  JavaIoInputStream *in_;
  jboolean consumed_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterSqlFactoryBlobImpl, in_, JavaIoInputStream *)

@implementation OrgOssPdfreporterSqlFactoryBlobImpl

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is {
  OrgOssPdfreporterSqlFactoryBlobImpl_initWithJavaIoInputStream_(self, is);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)bytes {
  OrgOssPdfreporterSqlFactoryBlobImpl_initWithByteArray_(self, bytes);
  return self;
}

- (JavaIoInputStream *)getInputStream {
  @try {
    if (!consumed_) {
      return in_;
    }
    @throw new_OrgOssPdfreporterSqlSQLException_initWithNSString_(@"Data already consumed.");
  }
  @finally {
    consumed_ = true;
  }
}

- (IOSByteArray *)getBytes {
  @try {
    if (!consumed_) {
      JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_init();
      IOSByteArray *buffer = [IOSByteArray newArrayWithLength:1024];
      jint len = [((JavaIoInputStream *) nil_chk(in_)) readWithByteArray:buffer];
      while (len != -1) {
        [out writeWithByteArray:buffer withInt:0 withInt:len];
        len = [in_ readWithByteArray:buffer];
      }
      [in_ close];
      return [out toByteArray];
    }
    @throw new_OrgOssPdfreporterSqlSQLException_initWithNSString_(@"Data already consumed.");
  }
  @catch (JavaIoIOException *e) {
    @throw new_OrgOssPdfreporterSqlSQLException_initWithNSString_([((JavaIoIOException *) nil_chk(e)) getMessage]);
  }
  @finally {
    consumed_ = true;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoInputStream:", "BlobImpl", NULL, 0x0, NULL, NULL },
    { "initWithByteArray:", "BlobImpl", NULL, 0x0, NULL, NULL },
    { "getInputStream", NULL, "Ljava.io.InputStream;", 0x1, "Lorg.oss.pdfreporter.sql.SQLException;", NULL },
    { "getBytes", NULL, "[B", 0x1, "Lorg.oss.pdfreporter.sql.SQLException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "in_", NULL, 0x12, "Ljava.io.InputStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "consumed_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterSqlFactoryBlobImpl = { 2, "BlobImpl", "org.oss.pdfreporter.sql.factory", NULL, 0x1, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterSqlFactoryBlobImpl;
}

@end

void OrgOssPdfreporterSqlFactoryBlobImpl_initWithJavaIoInputStream_(OrgOssPdfreporterSqlFactoryBlobImpl *self, JavaIoInputStream *is) {
  NSObject_init(self);
  self->consumed_ = false;
  self->in_ = is;
}

OrgOssPdfreporterSqlFactoryBlobImpl *new_OrgOssPdfreporterSqlFactoryBlobImpl_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterSqlFactoryBlobImpl, initWithJavaIoInputStream_, is)
}

OrgOssPdfreporterSqlFactoryBlobImpl *create_OrgOssPdfreporterSqlFactoryBlobImpl_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterSqlFactoryBlobImpl, initWithJavaIoInputStream_, is)
}

void OrgOssPdfreporterSqlFactoryBlobImpl_initWithByteArray_(OrgOssPdfreporterSqlFactoryBlobImpl *self, IOSByteArray *bytes) {
  OrgOssPdfreporterSqlFactoryBlobImpl_initWithJavaIoInputStream_(self, new_JavaIoByteArrayInputStream_initWithByteArray_(bytes));
}

OrgOssPdfreporterSqlFactoryBlobImpl *new_OrgOssPdfreporterSqlFactoryBlobImpl_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterSqlFactoryBlobImpl, initWithByteArray_, bytes)
}

OrgOssPdfreporterSqlFactoryBlobImpl *create_OrgOssPdfreporterSqlFactoryBlobImpl_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterSqlFactoryBlobImpl, initWithByteArray_, bytes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterSqlFactoryBlobImpl)
