//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/crosstabs/base/JRBaseCrosstab.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/commons/arrays/Array2D.h"
#include "org/oss/pdfreporter/commons/arrays/Array2DImpl.h"
#include "org/oss/pdfreporter/crosstabs/JRCellContents.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCellContents.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.h"
#include "org/oss/pdfreporter/engine/JRConstants.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/base/JRBaseElement.h"
#include "org/oss/pdfreporter/engine/base/JRBaseObjectFactory.h"
#include "org/oss/pdfreporter/engine/base/JRBaseVariable.h"
#include "org/oss/pdfreporter/engine/design/events/JRPropertyChangeSupport.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/geometry/IColor.h"

@interface OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab ()

- (void)copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
            withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE;

- (void)copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
           withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE;

- (void)copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
           withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE;

- (void)copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
              withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE;

- (void)copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
          withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE;

- (void)copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
       withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE;

+ (id<OrgOssPdfreporterEngineJRElement>)getHeadersElementWithOrgOssPdfreporterCrosstabsJRCrosstabGroupArray:(IOSObjectArray *)groups
                                                                                               withNSString:(NSString *)key;

@end

inline jlong OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_get_serialVersionUID();
#define OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_serialVersionUID 10200LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab, serialVersionUID, jlong)

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory);

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory);

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory);

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory);

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory);

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory);

__attribute__((unused)) static id<OrgOssPdfreporterEngineJRElement> OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_getHeadersElementWithOrgOssPdfreporterCrosstabsJRCrosstabGroupArray_withNSString_(IOSObjectArray *groups, NSString *key);

NSString *OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_RUN_DIRECTION = @"runDirection";
NSString *OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_IGNORE_WIDTH = @"ignoreWidth";

@implementation OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab

+ (NSString *)PROPERTY_RUN_DIRECTION {
  return OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_RUN_DIRECTION;
}

+ (NSString *)PROPERTY_IGNORE_WIDTH {
  return OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_IGNORE_WIDTH;
}

- (instancetype)initWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
          withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory
                                                     withInt:(jint)id_ {
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_initWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_withInt_(self, crosstab, factory, id_);
  return self;
}

- (OrgOssPdfreporterEngineTypeModeEnum *)getModeValue {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getModeWithOrgOssPdfreporterEngineJRCommonElement_withOrgOssPdfreporterEngineTypeModeEnum_(self, JreLoadEnum(OrgOssPdfreporterEngineTypeModeEnum, TRANSPARENT));
}

- (void)copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
            withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
}

- (void)copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
           withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
}

- (void)copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
           withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
}

- (void)copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
              withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
}

- (void)copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
          withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
}

- (void)copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
       withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
}

- (jint)getId {
  return id__;
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabDataset>)getDataset {
  return dataset_;
}

- (IOSObjectArray *)getRowGroups {
  return rowGroups_;
}

- (IOSObjectArray *)getColumnGroups {
  return columnGroups_;
}

- (IOSObjectArray *)getMeasures {
  return measures_;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterCrosstabsJRCrosstab:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitCrosstabWithOrgOssPdfreporterCrosstabsJRCrosstab:self];
}

- (jint)getColumnBreakOffset {
  return columnBreakOffset_;
}

- (jboolean)isRepeatColumnHeaders {
  return repeatColumnHeaders_;
}

- (jboolean)isRepeatRowHeaders {
  return repeatRowHeaders_;
}

- (id<OrgOssPdfreporterCommonsArraysArray2D>)getCells {
  return cells_;
}

- (IOSObjectArray *)getParameters {
  return parameters_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getParametersMapExpression {
  return parametersMapExpression_;
}

- (id<OrgOssPdfreporterCrosstabsJRCellContents>)getWhenNoDataCell {
  return whenNoDataCell_;
}

+ (id<OrgOssPdfreporterEngineJRElement>)getElementByKeyWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
                                                                                   withNSString:(NSString *)key {
  return OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_getElementByKeyWithOrgOssPdfreporterCrosstabsJRCrosstab_withNSString_(crosstab, key);
}

+ (id<OrgOssPdfreporterEngineJRElement>)getHeadersElementWithOrgOssPdfreporterCrosstabsJRCrosstabGroupArray:(IOSObjectArray *)groups
                                                                                               withNSString:(NSString *)key {
  return OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_getHeadersElementWithOrgOssPdfreporterCrosstabsJRCrosstabGroupArray_withNSString_(groups, key);
}

- (id<OrgOssPdfreporterEngineJRElement>)getElementByKeyWithNSString:(NSString *)elementKey {
  return OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_getElementByKeyWithOrgOssPdfreporterCrosstabsJRCrosstab_withNSString_(self, elementKey);
}

- (id<OrgOssPdfreporterCrosstabsJRCellContents>)getHeaderCell {
  return headerCell_;
}

- (IOSObjectArray *)getVariables {
  return variables_;
}

- (OrgOssPdfreporterEngineTypeRunDirectionEnum *)getRunDirectionValue {
  return self->runDirectionValue_;
}

- (void)setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnum:(OrgOssPdfreporterEngineTypeRunDirectionEnum *)runDirectionValue {
  OrgOssPdfreporterEngineTypeRunDirectionEnum *old = self->runDirectionValue_;
  self->runDirectionValue_ = runDirectionValue;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_RUN_DIRECTION withId:old withId:self->runDirectionValue_];
}

- (id)clone {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (JavaLangBoolean *)getIgnoreWidth {
  return ignoreWidth_;
}

- (void)setIgnoreWidthWithJavaLangBoolean:(JavaLangBoolean *)ignoreWidth {
  id old = self->ignoreWidth_;
  self->ignoreWidth_ = ignoreWidth;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_IGNORE_WIDTH withId:old withId:self->ignoreWidth_];
}

- (void)setIgnoreWidthWithBoolean:(jboolean)ignoreWidth {
  [self setIgnoreWidthWithJavaLangBoolean:JavaLangBoolean_valueOfWithBoolean_(ignoreWidth)];
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [self getForecolor];
}

- (id<OrgOssPdfreporterEngineJRLineBox>)getLineBox {
  return lineBox_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:withInt:", "JRBaseCrosstab", NULL, 0x1, NULL, NULL },
    { "getModeValue", NULL, "Lorg.oss.pdfreporter.engine.type.ModeEnum;", 0x1, NULL, NULL },
    { "copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:", "copyParameters", "V", 0x2, NULL, NULL },
    { "copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:", "copyVariables", "V", 0x2, NULL, NULL },
    { "copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:", "copyRowGroups", "V", 0x2, NULL, NULL },
    { "copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:", "copyColumnGroups", "V", 0x2, NULL, NULL },
    { "copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:", "copyMeasures", "V", 0x2, NULL, NULL },
    { "copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:", "copyCells", "V", 0x2, NULL, NULL },
    { "getId", NULL, "I", 0x1, NULL, NULL },
    { "getDataset", NULL, "Lorg.oss.pdfreporter.crosstabs.JRCrosstabDataset;", 0x1, NULL, NULL },
    { "getRowGroups", NULL, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabRowGroup;", 0x1, NULL, NULL },
    { "getColumnGroups", NULL, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabColumnGroup;", 0x1, NULL, NULL },
    { "getMeasures", NULL, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabMeasure;", 0x1, NULL, NULL },
    { "collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:", "collectExpressions", "V", 0x1, NULL, NULL },
    { "visitWithOrgOssPdfreporterEngineJRVisitor:", "visit", "V", 0x1, NULL, NULL },
    { "getColumnBreakOffset", NULL, "I", 0x1, NULL, NULL },
    { "isRepeatColumnHeaders", NULL, "Z", 0x1, NULL, NULL },
    { "isRepeatRowHeaders", NULL, "Z", 0x1, NULL, NULL },
    { "getCells", NULL, "Lorg.oss.pdfreporter.commons.arrays.Array2D;", 0x1, NULL, "()Lorg/oss/pdfreporter/commons/arrays/Array2D<+Lorg/oss/pdfreporter/crosstabs/JRCrosstabCell;>;" },
    { "getParameters", NULL, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabParameter;", 0x1, NULL, NULL },
    { "getParametersMapExpression", NULL, "Lorg.oss.pdfreporter.engine.JRExpression;", 0x1, NULL, NULL },
    { "getWhenNoDataCell", NULL, "Lorg.oss.pdfreporter.crosstabs.JRCellContents;", 0x1, NULL, NULL },
    { "getElementByKeyWithOrgOssPdfreporterCrosstabsJRCrosstab:withNSString:", "getElementByKey", "Lorg.oss.pdfreporter.engine.JRElement;", 0x9, NULL, NULL },
    { "getHeadersElementWithOrgOssPdfreporterCrosstabsJRCrosstabGroupArray:withNSString:", "getHeadersElement", "Lorg.oss.pdfreporter.engine.JRElement;", 0xa, NULL, NULL },
    { "getElementByKeyWithNSString:", "getElementByKey", "Lorg.oss.pdfreporter.engine.JRElement;", 0x1, NULL, NULL },
    { "getHeaderCell", NULL, "Lorg.oss.pdfreporter.crosstabs.JRCellContents;", 0x1, NULL, NULL },
    { "getVariables", NULL, "[Lorg.oss.pdfreporter.engine.JRVariable;", 0x1, NULL, NULL },
    { "getRunDirectionValue", NULL, "Lorg.oss.pdfreporter.engine.type.RunDirectionEnum;", 0x1, NULL, NULL },
    { "setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnum:", "setRunDirection", "V", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getIgnoreWidth", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setIgnoreWidthWithJavaLangBoolean:", "setIgnoreWidth", "V", 0x1, NULL, NULL },
    { "setIgnoreWidthWithBoolean:", "setIgnoreWidth", "V", 0x1, NULL, NULL },
    { "getDefaultLineColor", NULL, "Lorg.oss.pdfreporter.geometry.IColor;", 0x1, NULL, NULL },
    { "getLineBox", NULL, "Lorg.oss.pdfreporter.engine.JRLineBox;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_serialVersionUID },
    { "PROPERTY_RUN_DIRECTION", "PROPERTY_RUN_DIRECTION", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_RUN_DIRECTION, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_IGNORE_WIDTH", "PROPERTY_IGNORE_WIDTH", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_IGNORE_WIDTH, NULL, .constantValue.asLong = 0 },
    { "id__", "id", 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "parameters_", NULL, 0x4, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabParameter;", NULL, NULL, .constantValue.asLong = 0 },
    { "variables_", NULL, 0x4, "[Lorg.oss.pdfreporter.engine.JRVariable;", NULL, NULL, .constantValue.asLong = 0 },
    { "parametersMapExpression_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRExpression;", NULL, NULL, .constantValue.asLong = 0 },
    { "dataset_", NULL, 0x4, "Lorg.oss.pdfreporter.crosstabs.JRCrosstabDataset;", NULL, NULL, .constantValue.asLong = 0 },
    { "rowGroups_", NULL, 0x4, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabRowGroup;", NULL, NULL, .constantValue.asLong = 0 },
    { "columnGroups_", NULL, 0x4, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabColumnGroup;", NULL, NULL, .constantValue.asLong = 0 },
    { "measures_", NULL, 0x4, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabMeasure;", NULL, NULL, .constantValue.asLong = 0 },
    { "columnBreakOffset_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "repeatColumnHeaders_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "repeatRowHeaders_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "runDirectionValue_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.type.RunDirectionEnum;", NULL, NULL, .constantValue.asLong = 0 },
    { "cells_", NULL, 0x4, "Lorg.oss.pdfreporter.commons.arrays.Array2D;", NULL, "Lorg/oss/pdfreporter/commons/arrays/Array2D<Lorg/oss/pdfreporter/crosstabs/JRCrosstabCell;>;", .constantValue.asLong = 0 },
    { "whenNoDataCell_", NULL, 0x4, "Lorg.oss.pdfreporter.crosstabs.JRCellContents;", NULL, NULL, .constantValue.asLong = 0 },
    { "headerCell_", NULL, 0x4, "Lorg.oss.pdfreporter.crosstabs.JRCellContents;", NULL, NULL, .constantValue.asLong = 0 },
    { "ignoreWidth_", NULL, 0x4, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "lineBox_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRLineBox;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab = { 2, "JRBaseCrosstab", "org.oss.pdfreporter.crosstabs.base", NULL, 0x1, 35, methods, 20, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab;
}

@end

void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_initWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_withInt_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory, jint id_) {
  OrgOssPdfreporterEngineBaseJRBaseElement_initWithOrgOssPdfreporterEngineJRElement_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
  self->repeatColumnHeaders_ = true;
  self->repeatRowHeaders_ = true;
  self->id__ = id_;
  self->columnBreakOffset_ = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getColumnBreakOffset];
  self->repeatColumnHeaders_ = [crosstab isRepeatColumnHeaders];
  self->repeatRowHeaders_ = [crosstab isRepeatRowHeaders];
  self->runDirectionValue_ = [crosstab getRunDirectionValue];
  self->ignoreWidth_ = [crosstab getIgnoreWidth];
  self->dataset_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCrosstabDatasetWithOrgOssPdfreporterCrosstabsJRCrosstabDataset:[crosstab getDataset]];
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
  self->headerCell_ = [factory getCellWithOrgOssPdfreporterCrosstabsJRCellContents:[crosstab getHeaderCell]];
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, crosstab, factory);
  self->whenNoDataCell_ = [factory getCellWithOrgOssPdfreporterCrosstabsJRCellContents:[crosstab getWhenNoDataCell]];
  self->lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([crosstab getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
}

OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *new_OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_initWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_withInt_(id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory, jint id_) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab, initWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_withInt_, crosstab, factory, id_)
}

OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *create_OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_initWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_withInt_(id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory, jint id_) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab, initWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_withInt_, crosstab, factory, id_)
}

void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory) {
  @autoreleasepool {
    IOSObjectArray *crossParameters = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getParameters];
    if (crossParameters != nil) {
      self->parameters_ = [IOSObjectArray newArrayWithLength:crossParameters->size_ type:OrgOssPdfreporterCrosstabsJRCrosstabParameter_class_()];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->parameters_))->size_; i++) {
        (void) IOSObjectArray_Set(self->parameters_, i, [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCrosstabParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:IOSObjectArray_Get(crossParameters, i)]);
      }
    }
    self->parametersMapExpression_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getExpressionWithOrgOssPdfreporterEngineJRExpression:[crosstab getParametersMapExpression]];
  }
}

void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory) {
  @autoreleasepool {
    IOSObjectArray *vars = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getVariables];
    if (vars != nil) {
      self->variables_ = [IOSObjectArray newArrayWithLength:vars->size_ type:OrgOssPdfreporterEngineJRVariable_class_()];
      for (jint i = 0; i < vars->size_; i++) {
        (void) IOSObjectArray_Set(nil_chk(self->variables_), i, [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getVariableWithOrgOssPdfreporterEngineJRVariable:IOSObjectArray_Get(vars, i)]);
      }
    }
  }
}

void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory) {
  @autoreleasepool {
    IOSObjectArray *crossRowGroups = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getRowGroups];
    if (crossRowGroups != nil) {
      self->rowGroups_ = [IOSObjectArray newArrayWithLength:crossRowGroups->size_ type:OrgOssPdfreporterCrosstabsJRCrosstabRowGroup_class_()];
      for (jint i = 0; i < crossRowGroups->size_; ++i) {
        (void) IOSObjectArray_Set(nil_chk(self->rowGroups_), i, [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:IOSObjectArray_Get(crossRowGroups, i)]);
      }
    }
  }
}

void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory) {
  @autoreleasepool {
    IOSObjectArray *crossColumnGroups = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getColumnGroups];
    if (crossColumnGroups != nil) {
      self->columnGroups_ = [IOSObjectArray newArrayWithLength:crossColumnGroups->size_ type:OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup_class_()];
      for (jint i = 0; i < crossColumnGroups->size_; ++i) {
        (void) IOSObjectArray_Set(nil_chk(self->columnGroups_), i, [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:IOSObjectArray_Get(crossColumnGroups, i)]);
      }
    }
  }
}

void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory) {
  @autoreleasepool {
    IOSObjectArray *crossMeasures = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getMeasures];
    if (crossMeasures != nil) {
      self->measures_ = [IOSObjectArray newArrayWithLength:crossMeasures->size_ type:OrgOssPdfreporterCrosstabsJRCrosstabMeasure_class_()];
      for (jint i = 0; i < crossMeasures->size_; ++i) {
        (void) IOSObjectArray_Set(nil_chk(self->measures_), i, [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:IOSObjectArray_Get(crossMeasures, i)]);
      }
    }
  }
}

void OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory) {
  @autoreleasepool {
    id<OrgOssPdfreporterCommonsArraysArray2D> crossCells = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getCells];
    if (crossCells != nil) {
      self->cells_ = new_OrgOssPdfreporterCommonsArraysArray2DImpl_initWithInt_withInt_(((IOSObjectArray *) nil_chk(self->rowGroups_))->size_ + 1, ((IOSObjectArray *) nil_chk(self->columnGroups_))->size_ + 1);
      for (jint i = 0; i <= ((IOSObjectArray *) nil_chk(self->rowGroups_))->size_; i++) {
        for (jint j = 0; j <= ((IOSObjectArray *) nil_chk(self->columnGroups_))->size_; ++j) {
          [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(self->cells_)) setWithInt:i withInt:j withId:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCrosstabCellWithOrgOssPdfreporterCrosstabsJRCrosstabCell:[crossCells getWithInt:i withInt:j]]];
        }
      }
    }
  }
}

id<OrgOssPdfreporterEngineJRElement> OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_getElementByKeyWithOrgOssPdfreporterCrosstabsJRCrosstab_withNSString_(id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, NSString *key) {
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_initialize();
  id<OrgOssPdfreporterEngineJRElement> element = nil;
  if ([((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getHeaderCell] != nil) {
    element = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([crosstab getHeaderCell])) getElementByKeyWithNSString:key];
  }
  if (element == nil) {
    element = OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_getHeadersElementWithOrgOssPdfreporterCrosstabsJRCrosstabGroupArray_withNSString_([crosstab getRowGroups], key);
  }
  if (element == nil) {
    element = OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_getHeadersElementWithOrgOssPdfreporterCrosstabsJRCrosstabGroupArray_withNSString_([crosstab getColumnGroups], key);
  }
  if (element == nil) {
    if ([crosstab isKindOfClass:[OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab class]]) {
      id<JavaUtilList> cellsList = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) cast_chk(crosstab, [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab class])) getCellsList];
      for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(cellsList)) iterator]; element == nil && [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [((id<JavaUtilIterator>) nil_chk(it)) next];
        element = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getContents])) getElementByKeyWithNSString:key];
      }
    }
    else {
      id<OrgOssPdfreporterCommonsArraysArray2D> cells = [crosstab getCells];
      for (jint i = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(cells)) getLengthI] - 1; element == nil && i >= 0; --i) {
        for (jint j = [cells getLengthJ] - 1; element == nil && j >= 0; --j) {
          id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [cells getWithInt:i withInt:j];
          if (cell != nil) {
            element = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([cell getContents])) getElementByKeyWithNSString:key];
          }
        }
      }
    }
  }
  if (element == nil && [crosstab getWhenNoDataCell] != nil) {
    element = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([crosstab getWhenNoDataCell])) getElementByKeyWithNSString:key];
  }
  return element;
}

id<OrgOssPdfreporterEngineJRElement> OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_getHeadersElementWithOrgOssPdfreporterCrosstabsJRCrosstabGroupArray_withNSString_(IOSObjectArray *groups, NSString *key) {
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_initialize();
  id<OrgOssPdfreporterEngineJRElement> element = nil;
  if (groups != nil) {
    for (jint i = 0; element == nil && i < groups->size_; i++) {
      id<OrgOssPdfreporterCrosstabsJRCellContents> header = [((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(IOSObjectArray_Get(groups, i))) getHeader];
      element = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(header)) getElementByKeyWithNSString:key];
      if (element == nil) {
        id<OrgOssPdfreporterCrosstabsJRCellContents> totalHeader = [((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(IOSObjectArray_Get(groups, i))) getTotalHeader];
        element = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(totalHeader)) getElementByKeyWithNSString:key];
      }
    }
  }
  return element;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab)
