//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/ResourceBundle.h"
#include "java/util/TimeZone.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/commons/arrays/Array2D.h"
#include "org/oss/pdfreporter/commons/arrays/Array2DImpl.h"
#include "org/oss/pdfreporter/crosstabs/JRCellContents.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabBucket.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/design/JRCrosstabOrigin.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCellContents.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabGroup.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabRowGroup.h"
#include "org/oss/pdfreporter/engine/JRCloneable.h"
#include "org/oss/pdfreporter/engine/JRConstants.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/ReportContext.h"
#include "org/oss/pdfreporter/engine/base/JRBaseElement.h"
#include "org/oss/pdfreporter/engine/base/JRBaseLineBox.h"
#include "org/oss/pdfreporter/engine/design/JRDesignElement.h"
#include "org/oss/pdfreporter/engine/design/JRDesignVariable.h"
#include "org/oss/pdfreporter/engine/design/events/JRPropertyChangeSupport.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/util/FileResolver.h"
#include "org/oss/pdfreporter/engine/util/JRCloneUtils.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/engine/util/Pair.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/collections/SequencedHashMap.h"

@interface OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab ()

- (void)addBuiltinParameters;

- (void)addBuiltinVariables;

- (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *)emptyCellWithInt:(jint)i
                                                                   withInt:(jint)j;

- (void)addVariableWithOrgOssPdfreporterEngineJRVariable:(id<OrgOssPdfreporterEngineJRVariable>)variable;

- (void)removeVariableWithOrgOssPdfreporterEngineJRVariable:(id<OrgOssPdfreporterEngineJRVariable>)variable;

- (void)removeVariableWithNSString:(NSString *)varName;

- (OrgOssPdfreporterEngineDesignJRDesignVariable *)getVariableWithNSString:(NSString *)varName;

- (void)adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)clone
                           withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *)contents;

@end

inline JavaUtilLoggingLogger *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab, logger, JavaUtilLoggingLogger *)

inline jlong OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_get_serialVersionUID();
#define OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_serialVersionUID 10200LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab, serialVersionUID, jlong)

inline IOSObjectArray *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_get_BUILT_IN_PARAMETERS();
static IOSObjectArray *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_PARAMETERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab, BUILT_IN_PARAMETERS, IOSObjectArray *)

inline IOSObjectArray *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_get_BUILT_IN_VARIABLES();
static IOSObjectArray *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_VARIABLES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab, BUILT_IN_VARIABLES, IOSObjectArray *)

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addBuiltinParameters(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self);

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addBuiltinVariables(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self);

__attribute__((unused)) static OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_emptyCellWithInt_withInt_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, jint i, jint j);

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addVariableWithOrgOssPdfreporterEngineJRVariable_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, id<OrgOssPdfreporterEngineJRVariable> variable);

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_removeVariableWithOrgOssPdfreporterEngineJRVariable_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, id<OrgOssPdfreporterEngineJRVariable> variable);

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_removeVariableWithNSString_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, NSString *varName);

__attribute__((unused)) static OrgOssPdfreporterEngineDesignJRDesignVariable *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_getVariableWithNSString_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, NSString *varName);

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *clone, OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *contents);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab)

NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_BREAK_OFFSET = @"columnBreakOffset";
NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_DATASET = @"dataset";
NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_HEADER_CELL = @"headerCell";
NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS_MAP_EXPRESSION = @"parametersMapExpression";
NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_COLUMN_HEADERS = @"repeatColumnHeaders";
NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_ROW_HEADERS = @"repeatRowHeaders";
NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_WHEN_NO_DATA_CELL = @"whenNoDataCell";
NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS = @"cells";
NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_ROW_GROUPS = @"rowGroups";
NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_GROUPS = @"columnGroups";
NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_MEASURES = @"measures";
NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS = @"parameters";
NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_IGNORE_WIDTH = @"ignoreWidth";

@implementation OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab

+ (NSString *)PROPERTY_COLUMN_BREAK_OFFSET {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_BREAK_OFFSET;
}

+ (NSString *)PROPERTY_DATASET {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_DATASET;
}

+ (NSString *)PROPERTY_HEADER_CELL {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_HEADER_CELL;
}

+ (NSString *)PROPERTY_PARAMETERS_MAP_EXPRESSION {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS_MAP_EXPRESSION;
}

+ (NSString *)PROPERTY_REPEAT_COLUMN_HEADERS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_COLUMN_HEADERS;
}

+ (NSString *)PROPERTY_REPEAT_ROW_HEADERS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_ROW_HEADERS;
}

+ (NSString *)PROPERTY_WHEN_NO_DATA_CELL {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_WHEN_NO_DATA_CELL;
}

+ (NSString *)PROPERTY_CELLS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS;
}

+ (NSString *)PROPERTY_ROW_GROUPS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_ROW_GROUPS;
}

+ (NSString *)PROPERTY_COLUMN_GROUPS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_GROUPS;
}

+ (NSString *)PROPERTY_MEASURES {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_MEASURES;
}

+ (NSString *)PROPERTY_PARAMETERS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS;
}

+ (NSString *)PROPERTY_IGNORE_WIDTH {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_IGNORE_WIDTH;
}

- (instancetype)initWithOrgOssPdfreporterEngineJRDefaultStyleProvider:(id<OrgOssPdfreporterEngineJRDefaultStyleProvider>)defaultStyleProvider {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_initWithOrgOssPdfreporterEngineJRDefaultStyleProvider_(self, defaultStyleProvider);
  return self;
}

- (void)addBuiltinParameters {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addBuiltinParameters(self);
}

- (void)addBuiltinVariables {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addBuiltinVariables(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getId {
  return 0;
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabDataset>)getDataset {
  return dataset_;
}

- (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabDataset *)getDesignDataset {
  return dataset_;
}

- (IOSObjectArray *)getRowGroups {
  IOSObjectArray *groups = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] type:OrgOssPdfreporterCrosstabsJRCrosstabRowGroup_class_()];
  (void) [((id<JavaUtilList>) nil_chk(rowGroups_)) toArrayWithNSObjectArray:groups];
  return groups;
}

- (IOSObjectArray *)getColumnGroups {
  IOSObjectArray *groups = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(columnGroups_)) size] type:OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup_class_()];
  (void) [((id<JavaUtilList>) nil_chk(columnGroups_)) toArrayWithNSObjectArray:groups];
  return groups;
}

- (IOSObjectArray *)getMeasures {
  IOSObjectArray *measureArray = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(measures_)) size] type:OrgOssPdfreporterCrosstabsJRCrosstabMeasure_class_()];
  (void) [((id<JavaUtilList>) nil_chk(measures_)) toArrayWithNSObjectArray:measureArray];
  return measureArray;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterCrosstabsJRCrosstab:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitCrosstabWithOrgOssPdfreporterCrosstabsJRCrosstab:self];
}

- (void)setDatasetWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabDataset:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabDataset *)dataset {
  id old = self->dataset_;
  self->dataset_ = dataset;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_DATASET withId:old withId:self->dataset_];
}

- (void)addRowGroupWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *)group {
  NSString *groupName = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)) getName];
  if ([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(measuresMap_)) containsKeyWithId:groupName]) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"A group or measure having the same name already exists in the crosstab.");
  }
  (void) [((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) putWithId:groupName withId:JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk(rowGroups_)) size])];
  [((id<JavaUtilList>) nil_chk(rowGroups_)) addWithId:group];
  [self addRowGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:group];
  [self setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup:group];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_ROW_GROUPS withId:group withInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] - 1];
}

- (void)addRowGroupWithInt:(jint)index
withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *)group {
  NSString *groupName = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)) getName];
  if ([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(measuresMap_)) containsKeyWithId:groupName]) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"A group or measure having the same name already exists in the crosstab.");
  }
  (void) [((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) putWithId:groupName withId:JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk(rowGroups_)) size])];
  [((id<JavaUtilList>) nil_chk(rowGroups_)) addWithInt:index withId:group];
  [self addRowGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:group];
  [self setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup:group];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_ROW_GROUPS withId:group withInt:index];
}

- (void)addRowGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *)rowGroup {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addVariableWithOrgOssPdfreporterEngineJRVariable_(self, [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(rowGroup)) getVariable]);
  for (id<JavaUtilIterator> measureIt = [((id<JavaUtilList>) nil_chk(measures_)) iterator]; [((id<JavaUtilIterator>) nil_chk(measureIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> measure = [measureIt next];
    [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:nil];
    for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [colIt next];
      [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    }
  }
}

- (void)addColumnGroupWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *)group {
  NSString *groupName = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)) getName];
  if ([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(measuresMap_)) containsKeyWithId:groupName]) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"A group or measure having the same name already exists in the crosstab.");
  }
  (void) [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) putWithId:groupName withId:JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk(columnGroups_)) size])];
  [((id<JavaUtilList>) nil_chk(columnGroups_)) addWithId:group];
  [self addColGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:group];
  [self setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup:group];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_GROUPS withId:group withInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size] - 1];
}

- (void)addColumnGroupWithInt:(jint)index
withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *)group {
  NSString *groupName = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)) getName];
  if ([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(measuresMap_)) containsKeyWithId:groupName]) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"A group or measure having the same name already exists in the crosstab.");
  }
  (void) [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) putWithId:groupName withId:JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk(columnGroups_)) size])];
  [((id<JavaUtilList>) nil_chk(columnGroups_)) addWithInt:index withId:group];
  [self addColGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:group];
  [self setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup:group];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_GROUPS withId:group withInt:index];
}

- (void)addColGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *)colGroup {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addVariableWithOrgOssPdfreporterEngineJRVariable_(self, [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(colGroup)) getVariable]);
  for (id<JavaUtilIterator> measureIt = [((id<JavaUtilList>) nil_chk(measures_)) iterator]; [((id<JavaUtilIterator>) nil_chk(measureIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> measure = [measureIt next];
    [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:nil withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    for (id<JavaUtilIterator> rowIt = [((id<JavaUtilList>) nil_chk(rowGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(rowIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = [rowIt next];
      [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    }
  }
}

- (void)addMeasureWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *)measure {
  NSString *measureName = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(measure)) getName];
  if ([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:measureName] || [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:measureName] || [((id<JavaUtilMap>) nil_chk(measuresMap_)) containsKeyWithId:measureName]) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"A group or measure having the same name already exists in the crosstab.");
  }
  (void) [((id<JavaUtilMap>) nil_chk(measuresMap_)) putWithId:measureName withId:JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk(measures_)) size])];
  [((id<JavaUtilList>) nil_chk(measures_)) addWithId:measure];
  [self addMeasureVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:measure];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_MEASURES withId:measure withInt:[((id<JavaUtilList>) nil_chk(measures_)) size] - 1];
}

- (void)addMeasureWithInt:(jint)index
withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *)measure {
  NSString *measureName = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(measure)) getName];
  if ([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:measureName] || [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:measureName] || [((id<JavaUtilMap>) nil_chk(measuresMap_)) containsKeyWithId:measureName]) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"A group or measure having the same name already exists in the crosstab.");
  }
  (void) [((id<JavaUtilMap>) nil_chk(measuresMap_)) putWithId:measureName withId:JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk(measures_)) size])];
  [((id<JavaUtilList>) nil_chk(measures_)) addWithInt:index withId:measure];
  [self addMeasureVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:measure];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_MEASURES withId:measure withInt:index];
}

- (void)addMeasureVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *)measure {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addVariableWithOrgOssPdfreporterEngineJRVariable_(self, [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(measure)) getVariable]);
  for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [colIt next];
    [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:nil withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
  }
  for (id<JavaUtilIterator> rowIt = [((id<JavaUtilList>) nil_chk(rowGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(rowIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = [rowIt next];
    [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:nil];
    for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [colIt next];
      [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    }
  }
}

- (void)addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure
                  withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)rowGroup
               withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)colGroup {
  OrgOssPdfreporterEngineDesignJRDesignVariable *var = new_OrgOssPdfreporterEngineDesignJRDesignVariable_init();
  [var setCalculationWithOrgOssPdfreporterEngineTypeCalculationEnum:JreLoadEnum(OrgOssPdfreporterEngineTypeCalculationEnum, SYSTEM)];
  [var setSystemDefinedWithBoolean:true];
  [var setNameWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure_withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup_withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup_(measure, rowGroup, colGroup)];
  [var setValueClassNameWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getValueClassName]];
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addVariableWithOrgOssPdfreporterEngineJRVariable_(self, var);
}

- (void)removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure
                     withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)rowGroup
                  withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)colGroup {
  NSString *varName = OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure_withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup_withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup_(measure, rowGroup, colGroup);
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_removeVariableWithNSString_(self, varName);
}

+ (NSString *)getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure
                                 withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)rowGroup
                              withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)colGroup {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure_withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup_withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup_(measure, rowGroup, colGroup);
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)removeRowGroupWithNSString:(NSString *)groupName {
  id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> removed = nil;
  JavaLangInteger *idx = [((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) removeWithId:groupName];
  if (idx != nil) {
    removed = [((id<JavaUtilList>) nil_chk(rowGroups_)) removeWithInt:[idx intValue]];
    for (id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(rowGroups_)) listIteratorWithInt:[idx intValue]]; [((id<JavaUtilListIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> group = [it next];
      (void) [((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) putWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(group)) getName] withId:JavaLangInteger_valueOfWithInt_([it previousIndex])];
    }
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(cellsList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [it next];
      NSString *rowTotalGroup = [((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getRowTotalGroup];
      if (rowTotalGroup != nil && [rowTotalGroup isEqual:groupName]) {
        [it remove];
        (void) [((id<JavaUtilMap>) nil_chk(cellsMap_)) removeWithId:new_OrgOssPdfreporterEngineUtilPair_initWithId_withId_(rowTotalGroup, [cell getColumnTotalGroup])];
        [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS withId:cell withInt:-1];
      }
    }
    [self removeRowGroupVarsWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:removed];
    [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_ROW_GROUPS withId:removed withInt:[idx intValue]];
  }
  return removed;
}

- (void)removeRowGroupVarsWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)rowGroup {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_removeVariableWithOrgOssPdfreporterEngineJRVariable_(self, [((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(rowGroup)) getVariable]);
  for (id<JavaUtilIterator> measureIt = [((id<JavaUtilList>) nil_chk(measures_)) iterator]; [((id<JavaUtilIterator>) nil_chk(measureIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> measure = [measureIt next];
    [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:nil];
    for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [colIt next];
      [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    }
  }
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)removeRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)group {
  return [self removeRowGroupWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(group)) getName]];
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)removeColumnGroupWithNSString:(NSString *)groupName {
  id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> removed = nil;
  JavaLangInteger *idx = [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) removeWithId:groupName];
  if (idx != nil) {
    removed = [((id<JavaUtilList>) nil_chk(columnGroups_)) removeWithInt:[idx intValue]];
    for (id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(columnGroups_)) listIteratorWithInt:[idx intValue]]; [((id<JavaUtilListIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> group = [it next];
      (void) [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) putWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(group)) getName] withId:JavaLangInteger_valueOfWithInt_([it previousIndex])];
    }
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(cellsList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [it next];
      NSString *columnTotalGroup = [((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getColumnTotalGroup];
      if (columnTotalGroup != nil && [columnTotalGroup isEqual:groupName]) {
        [it remove];
        (void) [((id<JavaUtilMap>) nil_chk(cellsMap_)) removeWithId:new_OrgOssPdfreporterEngineUtilPair_initWithId_withId_([cell getRowTotalGroup], columnTotalGroup)];
        [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS withId:cell withInt:-1];
      }
    }
    [self removeColGroupVarsWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:removed];
    [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_GROUPS withId:removed withInt:[idx intValue]];
  }
  return removed;
}

- (void)removeColGroupVarsWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)colGroup {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_removeVariableWithOrgOssPdfreporterEngineJRVariable_(self, [((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(colGroup)) getVariable]);
  for (id<JavaUtilIterator> measureIt = [((id<JavaUtilList>) nil_chk(measures_)) iterator]; [((id<JavaUtilIterator>) nil_chk(measureIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> measure = [measureIt next];
    [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:nil withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    for (id<JavaUtilIterator> rowIt = [((id<JavaUtilList>) nil_chk(rowGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(rowIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = [rowIt next];
      [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    }
  }
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)removeColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)group {
  return [self removeColumnGroupWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(group)) getName]];
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)removeMeasureWithNSString:(NSString *)measureName {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *removed = nil;
  JavaLangInteger *idx = [((id<JavaUtilMap>) nil_chk(measuresMap_)) removeWithId:measureName];
  if (idx != nil) {
    removed = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) cast_chk([((id<JavaUtilList>) nil_chk(measures_)) removeWithInt:[idx intValue]], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure class]);
    for (id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(measures_)) listIteratorWithInt:[idx intValue]]; [((id<JavaUtilListIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> group = [it next];
      (void) [((id<JavaUtilMap>) nil_chk(measuresMap_)) putWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(group)) getName] withId:JavaLangInteger_valueOfWithInt_([it previousIndex])];
    }
    [self removeMeasureVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:removed];
    [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_MEASURES withId:removed withInt:[idx intValue]];
  }
  return removed;
}

- (void)removeMeasureVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *)measure {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_removeVariableWithOrgOssPdfreporterEngineJRVariable_(self, [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(measure)) getVariable]);
  for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [colIt next];
    [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:nil withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
  }
  for (id<JavaUtilIterator> rowIt = [((id<JavaUtilList>) nil_chk(rowGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(rowIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = [rowIt next];
    [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:nil];
    for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [colIt next];
      [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    }
  }
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)removeMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure {
  return [self removeMeasureWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getName]];
}

- (jboolean)isRepeatColumnHeaders {
  return repeatColumnHeaders_;
}

- (void)setRepeatColumnHeadersWithBoolean:(jboolean)repeatColumnHeaders {
  jboolean old = self->repeatColumnHeaders_;
  self->repeatColumnHeaders_ = repeatColumnHeaders;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_COLUMN_HEADERS withBoolean:old withBoolean:self->repeatColumnHeaders_];
}

- (jboolean)isRepeatRowHeaders {
  return repeatRowHeaders_;
}

- (void)setRepeatRowHeadersWithBoolean:(jboolean)repeatRowHeaders {
  jboolean old = self->repeatRowHeaders_;
  self->repeatRowHeaders_ = repeatRowHeaders;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_ROW_HEADERS withBoolean:old withBoolean:self->repeatRowHeaders_];
}

- (id<OrgOssPdfreporterCommonsArraysArray2D>)getCells {
  return crossCells_;
}

- (id<JavaUtilList>)getCellsList {
  return cellsList_;
}

- (id<JavaUtilMap>)getCellsMap {
  return cellsMap_;
}

- (void)addCellWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *)cell {
  NSString *rowTotalGroup = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(cell)) getRowTotalGroup];
  if (rowTotalGroup != nil && ![((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:rowTotalGroup]) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(JreStrcat("$$$", @"Row group ", rowTotalGroup, @" does not exist."));
  }
  NSString *columnTotalGroup = [cell getColumnTotalGroup];
  if (columnTotalGroup != nil && ![((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:columnTotalGroup]) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(JreStrcat("$$$", @"Row group ", columnTotalGroup, @" does not exist."));
  }
  OrgOssPdfreporterEngineUtilPair *cellKey = new_OrgOssPdfreporterEngineUtilPair_initWithId_withId_(rowTotalGroup, columnTotalGroup);
  if ([((id<JavaUtilMap>) nil_chk(cellsMap_)) containsKeyWithId:cellKey]) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"Duplicate cell in crosstab.");
  }
  (void) [((id<JavaUtilMap>) nil_chk(cellsMap_)) putWithId:cellKey withId:cell];
  [((id<JavaUtilList>) nil_chk(cellsList_)) addWithId:cell];
  [self setCellOriginWithOrgOssPdfreporterCrosstabsJRCellContents:[cell getContents] withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:new_OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin_initWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withByte_withNSString_withNSString_(self, OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin_TYPE_DATA_CELL, rowTotalGroup, columnTotalGroup)];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS withId:cell withInt:[((id<JavaUtilList>) nil_chk(cellsList_)) size] - 1];
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabCell>)removeCellWithNSString:(NSString *)rowTotalGroup
                                                          withNSString:(NSString *)columnTotalGroup {
  id cellKey = new_OrgOssPdfreporterEngineUtilPair_initWithId_withId_(rowTotalGroup, columnTotalGroup);
  id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [((id<JavaUtilMap>) nil_chk(cellsMap_)) removeWithId:cellKey];
  if (cell != nil) {
    [((id<JavaUtilList>) nil_chk(cellsList_)) removeWithId:cell];
    [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS withId:cell withInt:-1];
  }
  return cell;
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabCell>)removeCellWithOrgOssPdfreporterCrosstabsJRCrosstabCell:(id<OrgOssPdfreporterCrosstabsJRCrosstabCell>)cell {
  return [self removeCellWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getRowTotalGroup] withNSString:[cell getColumnTotalGroup]];
}

- (IOSObjectArray *)getParameters {
  IOSObjectArray *parameters = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(parametersList_)) size] type:OrgOssPdfreporterCrosstabsJRCrosstabParameter_class_()];
  (void) [((id<JavaUtilList>) nil_chk(parametersList_)) toArrayWithNSObjectArray:parameters];
  return parameters;
}

- (id<JavaUtilList>)getParametersList {
  return parametersList_;
}

- (id<JavaUtilMap>)getParametersMap {
  return parametersMap_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getParametersMapExpression {
  return parametersMapExpression_;
}

- (void)addParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:(id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>)parameter {
  if ([((id<JavaUtilMap>) nil_chk(parametersMap_)) containsKeyWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName]]) {
    if ([((id<JavaUtilMap>) nil_chk(parametersMap_)) containsKeyWithId:[parameter getName]]) {
      @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(JreStrcat("$$", @"Duplicate declaration of parameter : ", [parameter getName]));
    }
  }
  (void) [((id<JavaUtilMap>) nil_chk(parametersMap_)) putWithId:[parameter getName] withId:parameter];
  [((id<JavaUtilList>) nil_chk(parametersList_)) addWithId:parameter];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS withId:parameter withInt:[((id<JavaUtilList>) nil_chk(parametersList_)) size] - 1];
}

- (void)addParameterWithInt:(jint)index
withOrgOssPdfreporterCrosstabsJRCrosstabParameter:(id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>)parameter {
  if ([((id<JavaUtilMap>) nil_chk(parametersMap_)) containsKeyWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName]]) {
    if ([((id<JavaUtilMap>) nil_chk(parametersMap_)) containsKeyWithId:[parameter getName]]) {
      @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(JreStrcat("$$", @"Duplicate declaration of parameter : ", [parameter getName]));
    }
  }
  (void) [((id<JavaUtilMap>) nil_chk(parametersMap_)) putWithId:[parameter getName] withId:parameter];
  [((id<JavaUtilList>) nil_chk(parametersList_)) addWithInt:index withId:parameter];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS withId:parameter withInt:index];
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>)removeParameterWithNSString:(NSString *)parameterName {
  id<OrgOssPdfreporterCrosstabsJRCrosstabParameter> param = [((id<JavaUtilMap>) nil_chk(parametersMap_)) removeWithId:parameterName];
  if (param != nil) {
    jint idx = [((id<JavaUtilList>) nil_chk(parametersList_)) indexOfWithId:param];
    if (idx >= 0) {
      (void) [((id<JavaUtilList>) nil_chk(parametersList_)) removeWithInt:idx];
    }
    [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS withId:param withInt:idx];
  }
  return param;
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>)removeParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:(id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>)parameter {
  return [self removeParameterWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName]];
}

- (void)setParametersMapExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression {
  id old = self->parametersMapExpression_;
  self->parametersMapExpression_ = expression;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS_MAP_EXPRESSION withId:old withId:self->parametersMapExpression_];
}

- (id<JavaUtilMap>)getVariablesMap {
  IOSObjectArray *variables = [self getVariables];
  id<JavaUtilMap> variablesMap = new_JavaUtilHashMap_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(variables))->size_; i++) {
    (void) [variablesMap putWithId:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(IOSObjectArray_Get(variables, i))) getName] withId:IOSObjectArray_Get(variables, i)];
  }
  return variablesMap;
}

- (IOSObjectArray *)getVariables {
  IOSObjectArray *variables = [IOSObjectArray newArrayWithLength:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(variablesList_)) size] type:OrgOssPdfreporterEngineJRVariable_class_()];
  (void) [((id<JavaUtilCollection>) nil_chk([((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(variablesList_)) values])) toArrayWithNSObjectArray:variables];
  return variables;
}

- (jint)getColumnBreakOffset {
  return columnBreakOffset_;
}

- (void)setColumnBreakOffsetWithInt:(jint)columnBreakOffset {
  jint old = self->columnBreakOffset_;
  self->columnBreakOffset_ = columnBreakOffset;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_BREAK_OFFSET withInt:old withInt:self->columnBreakOffset_];
}

- (void)preprocess {
  [self setGroupVariablesClassWithJavaUtilList:rowGroups_];
  [self setGroupVariablesClassWithJavaUtilList:columnGroups_];
  [self calculateSizes];
}

- (void)setGroupVariablesClassWithJavaUtilList:(id<JavaUtilList>)groups {
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(groups)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup *group = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup *) cast_chk([it next], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup class]);
    id<OrgOssPdfreporterCrosstabsJRCrosstabBucket> bucket = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup *) nil_chk(group)) getBucket];
    if (bucket != nil) {
      id<OrgOssPdfreporterEngineJRExpression> expression = [bucket getExpression];
      if (expression != nil) {
        [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(group->designVariable_)) setValueClassNameWithNSString:[bucket getValueClassName]];
      }
    }
  }
}

- (void)calculateSizes {
  [self setWhenNoDataCellSize];
  [self createCellMatrix];
  jint rowHeadersWidth = [self calculateRowHeadersSizes];
  jint colHeadersHeight = [self calculateColumnHeadersSizes];
  if (headerCell_ != nil) {
    [headerCell_ setWidthWithInt:rowHeadersWidth];
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(headerCell_)) setHeightWithInt:colHeadersHeight];
  }
}

- (void)setWhenNoDataCellSize {
  if (whenNoDataCell_ != nil) {
    [whenNoDataCell_ setWidthWithInt:[self getWidth]];
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(whenNoDataCell_)) setHeightWithInt:[self getHeight]];
  }
}

- (void)createCellMatrix {
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_logger)) finerWithNSString:JreStrcat("$I$I$@", @"Create JRDesignCrosstabCell [", ([((id<JavaUtilList>) nil_chk(rowGroups_)) size] + 1), @"][", ([((id<JavaUtilList>) nil_chk(columnGroups_)) size] + 1), @"], thread: ", JavaLangThread_currentThread())];
  crossCells_ = new_OrgOssPdfreporterCommonsArraysArray2DImpl_initWithInt_withInt_([((id<JavaUtilList>) nil_chk(rowGroups_)) size] + 1, [((id<JavaUtilList>) nil_chk(columnGroups_)) size] + 1);
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(cellsList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *crosstabCell = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) cast_chk([it next], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell class]);
    OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *contents = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(crosstabCell)) getContents], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]);
    NSString *rowTotalGroup = [crosstabCell getRowTotalGroup];
    jint rowGroupIndex = rowTotalGroup == nil ? [((id<JavaUtilList>) nil_chk(rowGroups_)) size] : [((JavaLangInteger *) nil_chk(([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) getWithId:rowTotalGroup]))) intValue];
    JavaLangInteger *cellWidth = [crosstabCell getWidth];
    if (cellWidth != nil) {
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) setWidthWithInt:[cellWidth intValue]];
    }
    NSString *columnTotalGroup = [crosstabCell getColumnTotalGroup];
    jint columnGroupIndex = columnTotalGroup == nil ? [((id<JavaUtilList>) nil_chk(columnGroups_)) size] : [((JavaLangInteger *) nil_chk(([((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) getWithId:columnTotalGroup]))) intValue];
    JavaLangInteger *cellHeight = [crosstabCell getHeight];
    if (cellHeight != nil) {
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) setHeightWithInt:[cellHeight intValue]];
    }
    [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) setWithInt:rowGroupIndex withInt:columnGroupIndex withId:crosstabCell];
  }
  [self inheritCells];
}

- (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *)getRowGroupWithInt:(jint)rowGroupIndex {
  return (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) cast_chk([((id<JavaUtilList>) nil_chk(rowGroups_)) getWithInt:rowGroupIndex], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup class]);
}

- (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *)getColumnGroupWithInt:(jint)columnGroupIndex {
  return (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) cast_chk([((id<JavaUtilList>) nil_chk(columnGroups_)) getWithInt:columnGroupIndex], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup class]);
}

- (void)inheritCells {
  for (jint i = [((id<JavaUtilList>) nil_chk(rowGroups_)) size]; i >= 0; --i) {
    for (jint j = [((id<JavaUtilList>) nil_chk(columnGroups_)) size]; j >= 0; --j) {
      jboolean used = (i == [((id<JavaUtilList>) nil_chk(rowGroups_)) size] || [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk([self getRowGroupWithInt:i])) hasTotal]) && (j == [((id<JavaUtilList>) nil_chk(columnGroups_)) size] || [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk([self getColumnGroupWithInt:j])) hasTotal]);
      if (used) {
        if ([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:j] == nil) {
          [self inheritCellWithInt:i withInt:j];
          if ([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:j] == nil) {
            [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) setWithInt:i withInt:j withId:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_emptyCellWithInt_withInt_(self, i, j)];
            [self inheritCellSizeWithInt:i withInt:j];
          }
        }
        else {
          [self inheritCellSizeWithInt:i withInt:j];
        }
      }
      else {
        [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) setWithInt:i withInt:j withId:nil];
      }
    }
  }
}

- (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *)emptyCellWithInt:(jint)i
                                                                   withInt:(jint)j {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_emptyCellWithInt_withInt_(self, i, j);
}

- (void)inheritCellSizeWithInt:(jint)i
                       withInt:(jint)j {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:j];
  OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *contents = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(cell)) getContents], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]);
  if ([((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) getWidth] == OrgOssPdfreporterCrosstabsJRCellContents_NOT_CALCULATED) {
    if (i < [((id<JavaUtilList>) nil_chk(rowGroups_)) size]) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *rowCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] withInt:j];
      if (rowCell != nil) {
        [contents setWidthWithInt:[((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([rowCell getContents])) getWidth]];
      }
    }
    else {
      for (jint k = j + 1; k <= [((id<JavaUtilList>) nil_chk(columnGroups_)) size]; ++k) {
        if ([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:k] != nil) {
          [contents setWidthWithInt:[((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:k])) getContents])) getWidth]];
          break;
        }
      }
    }
  }
  if ([contents getHeight] == OrgOssPdfreporterCrosstabsJRCellContents_NOT_CALCULATED) {
    if (j < [((id<JavaUtilList>) nil_chk(columnGroups_)) size]) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *colCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size]];
      if (colCell != nil) {
        [contents setHeightWithInt:[((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([colCell getContents])) getHeight]];
      }
    }
    else {
      for (jint k = i + 1; k <= [((id<JavaUtilList>) nil_chk(rowGroups_)) size]; ++k) {
        if ([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:k withInt:j] != nil) {
          [contents setHeightWithInt:[((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:k withInt:j])) getContents])) getHeight]];
        }
      }
    }
  }
}

- (void)inheritCellWithInt:(jint)i
                   withInt:(jint)j {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *inheritedCell = nil;
  if (j < [((id<JavaUtilList>) nil_chk(columnGroups_)) size]) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *colCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] withInt:j];
    OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *colContents = colCell == nil ? nil : (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([colCell getContents], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]);
    for (jint k = j + 1; inheritedCell == nil && k <= [((id<JavaUtilList>) nil_chk(columnGroups_)) size]; ++k) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:k];
      if (cell != nil) {
        OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *contents = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([cell getContents], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]);
        if (colContents == nil || [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) getWidth] == [colContents getWidth]) {
          inheritedCell = cell;
        }
      }
    }
  }
  if (inheritedCell == nil && i < [((id<JavaUtilList>) nil_chk(rowGroups_)) size]) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *rowCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size]];
    OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *rowContents = rowCell == nil ? nil : (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([rowCell getContents], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]);
    for (jint k = i + 1; inheritedCell == nil && k <= [((id<JavaUtilList>) nil_chk(rowGroups_)) size]; ++k) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:k withInt:j];
      if (cell != nil) {
        OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *contents = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([cell getContents], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]);
        if (rowContents == nil || [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) getHeight] == [rowContents getHeight]) {
          inheritedCell = cell;
        }
      }
    }
  }
  [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) setWithInt:i withInt:j withId:inheritedCell];
}

- (jint)calculateRowHeadersSizes {
  jint widthSum = 0;
  for (jint i = [((id<JavaUtilList>) nil_chk(rowGroups_)) size] - 1, heightSum = 0; i >= 0; --i) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *group = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) cast_chk([((id<JavaUtilList>) nil_chk(rowGroups_)) getWithInt:i], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup class]);
    widthSum += [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)) getWidth];
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i + 1 withInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size]];
    if (cell != nil) {
      heightSum += [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([cell getContents])) getHeight];
    }
    OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *header = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([group getHeader], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]);
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(header)) setHeightWithInt:heightSum];
    [header setWidthWithInt:[group getWidth]];
    if ([group hasTotal]) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *totalHeader = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([group getTotalHeader], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]);
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(totalHeader)) setWidthWithInt:widthSum];
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *totalCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size]];
      if (totalCell != nil) {
        [totalHeader setHeightWithInt:[((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([totalCell getContents])) getHeight]];
      }
    }
  }
  return widthSum;
}

- (jint)calculateColumnHeadersSizes {
  jint heightSum = 0;
  for (jint i = [((id<JavaUtilList>) nil_chk(columnGroups_)) size] - 1, widthSum = 0; i >= 0; --i) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *group = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) cast_chk([((id<JavaUtilList>) nil_chk(columnGroups_)) getWithInt:i], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup class]);
    heightSum += [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)) getHeight];
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] withInt:i + 1];
    if (cell != nil) {
      widthSum += [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([cell getContents])) getWidth];
    }
    OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *header = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([group getHeader], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]);
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(header)) setHeightWithInt:[group getHeight]];
    [header setWidthWithInt:widthSum];
    if ([group hasTotal]) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *totalHeader = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([group getTotalHeader], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]);
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(totalHeader)) setHeightWithInt:heightSum];
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *totalCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] withInt:i];
      if (totalCell != nil) {
        [totalHeader setWidthWithInt:[((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([totalCell getContents])) getWidth]];
      }
    }
  }
  return heightSum;
}

- (id<OrgOssPdfreporterCrosstabsJRCellContents>)getWhenNoDataCell {
  return whenNoDataCell_;
}

- (void)setWhenNoDataCellWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *)whenNoDataCell {
  id old = self->whenNoDataCell_;
  self->whenNoDataCell_ = whenNoDataCell;
  [self setCellOriginWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:self->whenNoDataCell_ withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:new_OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin_initWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withByte_(self, OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin_TYPE_WHEN_NO_DATA_CELL)];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_WHEN_NO_DATA_CELL withId:old withId:self->whenNoDataCell_];
}

- (id<OrgOssPdfreporterEngineJRElement>)getElementByKeyWithNSString:(NSString *)elementKey {
  return OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_getElementByKeyWithOrgOssPdfreporterCrosstabsJRCrosstab_withNSString_(self, elementKey);
}

- (OrgOssPdfreporterEngineTypeModeEnum *)getModeValue {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getModeWithOrgOssPdfreporterEngineJRCommonElement_withOrgOssPdfreporterEngineTypeModeEnum_(self, JreLoadEnum(OrgOssPdfreporterEngineTypeModeEnum, TRANSPARENT));
}

- (id<OrgOssPdfreporterCrosstabsJRCellContents>)getHeaderCell {
  return headerCell_;
}

- (void)setHeaderCellWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *)headerCell {
  id old = self->headerCell_;
  self->headerCell_ = headerCell;
  [self setCellOriginWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:self->headerCell_ withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:new_OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin_initWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withByte_(self, OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin_TYPE_HEADER_CELL)];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_HEADER_CELL withId:old withId:self->headerCell_];
}

- (void)measureClassChangedWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *)measure
                                                                          withNSString:(NSString *)valueClassName {
  for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [colIt next];
    [self setTotalVarClassWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:nil withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup withNSString:valueClassName];
  }
  for (id<JavaUtilIterator> rowIt = [((id<JavaUtilList>) nil_chk(rowGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(rowIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = [rowIt next];
    [self setTotalVarClassWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:nil withNSString:valueClassName];
    for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [colIt next];
      [self setTotalVarClassWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup withNSString:valueClassName];
    }
  }
}

- (void)setTotalVarClassWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure
                       withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)rowGroup
                    withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)colGroup
                                                           withNSString:(NSString *)valueClassName {
  OrgOssPdfreporterEngineDesignJRDesignVariable *variable = OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_getVariableWithNSString_(self, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure_withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup_withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup_(measure, rowGroup, colGroup));
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) setValueClassNameWithNSString:valueClassName];
}

- (void)addVariableWithOrgOssPdfreporterEngineJRVariable:(id<OrgOssPdfreporterEngineJRVariable>)variable {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addVariableWithOrgOssPdfreporterEngineJRVariable_(self, variable);
}

- (void)removeVariableWithOrgOssPdfreporterEngineJRVariable:(id<OrgOssPdfreporterEngineJRVariable>)variable {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_removeVariableWithOrgOssPdfreporterEngineJRVariable_(self, variable);
}

- (void)removeVariableWithNSString:(NSString *)varName {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_removeVariableWithNSString_(self, varName);
}

- (OrgOssPdfreporterEngineDesignJRDesignVariable *)getVariableWithNSString:(NSString *)varName {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_getVariableWithNSString_(self, varName);
}

- (OrgOssPdfreporterEngineTypeRunDirectionEnum *)getRunDirectionValue {
  return self->runDirectionValue_;
}

- (void)setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnum:(OrgOssPdfreporterEngineTypeRunDirectionEnum *)runDirectionValue {
  OrgOssPdfreporterEngineTypeRunDirectionEnum *old = self->runDirectionValue_;
  self->runDirectionValue_ = runDirectionValue;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_RUN_DIRECTION withId:old withId:self->runDirectionValue_];
}

- (void)setCellOriginWithOrgOssPdfreporterCrosstabsJRCellContents:(id<OrgOssPdfreporterCrosstabsJRCellContents>)cell
             withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:(OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin *)origin {
  if ([cell isKindOfClass:[OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]]) {
    [self setCellOriginWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk(cell, [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]) withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:origin];
  }
}

- (void)setCellOriginWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *)cell
                         withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:(OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin *)origin {
  if (cell != nil) {
    [cell setOriginWithOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:origin];
  }
}

- (void)setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup *)group {
  if (group != nil) {
    [group setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:self];
  }
}

- (id)clone {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *clone = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) cast_chk([super clone], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab class]);
  if (parametersList_ != nil) {
    ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone))->parametersList_ = new_JavaUtilArrayList_initWithInt_([parametersList_ size]);
    clone->parametersMap_ = new_JavaUtilHashMap_initWithInt_([parametersList_ size]);
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(parametersList_)) size]; i++) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabParameter> parameter = OrgOssPdfreporterEngineUtilJRCloneUtils_nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable_([((id<JavaUtilList>) nil_chk(parametersList_)) getWithInt:i]);
      [((id<JavaUtilList>) nil_chk(clone->parametersList_)) addWithId:parameter];
      (void) [((id<JavaUtilMap>) nil_chk(clone->parametersMap_)) putWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName] withId:parameter];
    }
  }
  ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone))->parametersMapExpression_ = OrgOssPdfreporterEngineUtilJRCloneUtils_nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable_(parametersMapExpression_);
  clone->dataset_ = OrgOssPdfreporterEngineUtilJRCloneUtils_nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable_(dataset_);
  clone->lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) cloneWithOrgOssPdfreporterEngineJRBoxContainer:clone];
  id<JavaUtilMap> clonedVariables = new_JavaUtilHashMap_init();
  if (rowGroups_ != nil) {
    clone->rowGroups_ = new_JavaUtilArrayList_initWithInt_([rowGroups_ size]);
    clone->rowGroupsMap_ = new_JavaUtilHashMap_initWithInt_([rowGroups_ size]);
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(rowGroups_)) size]; i++) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *group = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) cast_chk([((id<JavaUtilList>) nil_chk(rowGroups_)) getWithInt:i], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup class]);
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *groupClone = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) cast_chk([((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)) cloneWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:clone], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup class]);
      [((id<JavaUtilList>) nil_chk(clone->rowGroups_)) addWithId:groupClone];
      (void) [((id<JavaUtilMap>) nil_chk(clone->rowGroupsMap_)) putWithId:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(groupClone)) getName] withId:JavaLangInteger_valueOfWithInt_(i)];
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents_(self, clone, (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([groupClone getTotalHeader], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]));
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents_(self, clone, (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([groupClone getHeader], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]));
      if (group->designVariable_ != nil) {
        (void) [clonedVariables putWithId:group->designVariable_ withId:groupClone->designVariable_];
      }
    }
  }
  if (columnGroups_ != nil) {
    clone->columnGroups_ = new_JavaUtilArrayList_initWithInt_([columnGroups_ size]);
    clone->columnGroupsMap_ = new_JavaUtilHashMap_initWithInt_([columnGroups_ size]);
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(columnGroups_)) size]; i++) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *group = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) cast_chk([((id<JavaUtilList>) nil_chk(columnGroups_)) getWithInt:i], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup class]);
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *groupClone = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) cast_chk([((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)) cloneWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:clone], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup class]);
      [((id<JavaUtilList>) nil_chk(clone->columnGroups_)) addWithId:groupClone];
      (void) [((id<JavaUtilMap>) nil_chk(clone->columnGroupsMap_)) putWithId:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(groupClone)) getName] withId:JavaLangInteger_valueOfWithInt_(i)];
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents_(self, clone, (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([groupClone getTotalHeader], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]));
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents_(self, clone, (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([groupClone getHeader], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]));
      if (group->designVariable_ != nil) {
        (void) [clonedVariables putWithId:group->designVariable_ withId:groupClone->designVariable_];
      }
    }
  }
  if (measures_ != nil) {
    clone->measures_ = new_JavaUtilArrayList_initWithInt_([measures_ size]);
    clone->measuresMap_ = new_JavaUtilHashMap_initWithInt_([measures_ size]);
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(measures_)) size]; i++) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *measure = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) cast_chk([((id<JavaUtilList>) nil_chk(measures_)) getWithInt:i], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure class]);
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *clonedMeasure = OrgOssPdfreporterEngineUtilJRCloneUtils_nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable_(measure);
      [((id<JavaUtilList>) nil_chk(clone->measures_)) addWithId:clonedMeasure];
      (void) [((id<JavaUtilMap>) nil_chk(clone->measuresMap_)) putWithId:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(clonedMeasure)) getName] withId:JavaLangInteger_valueOfWithInt_(i)];
      if (clonedMeasure->designVariable_ != nil) {
        (void) [clonedVariables putWithId:((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(measure))->designVariable_ withId:clonedMeasure->designVariable_];
      }
    }
  }
  if (variablesList_ != nil) {
    clone->variablesList_ = new_OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_initWithInt_([variablesList_ size]);
    for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([variablesList_ values])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterEngineJRVariable> variable = (id<OrgOssPdfreporterEngineJRVariable>) cast_check([it next], OrgOssPdfreporterEngineJRVariable_class_());
      id<OrgOssPdfreporterEngineJRVariable> variableClone = [clonedVariables getWithId:variable];
      variableClone = OrgOssPdfreporterEngineUtilJRCloneUtils_nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable_(variable);
      (void) [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(clone->variablesList_)) putWithId:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variableClone)) getName] withId:variableClone];
    }
  }
  if (cellsList_ != nil) {
    clone->cellsList_ = new_JavaUtilArrayList_initWithInt_([cellsList_ size]);
    clone->cellsMap_ = new_JavaUtilHashMap_initWithInt_([cellsList_ size]);
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(cellsList_)) size]; i++) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = OrgOssPdfreporterEngineUtilJRCloneUtils_nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable_([((id<JavaUtilList>) nil_chk(cellsList_)) getWithInt:i]);
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents_(self, clone, (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cast_chk([((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getContents], [OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]));
      [((id<JavaUtilList>) nil_chk(clone->cellsList_)) addWithId:cell];
      (void) [((id<JavaUtilMap>) nil_chk(clone->cellsMap_)) putWithId:new_OrgOssPdfreporterEngineUtilPair_initWithId_withId_([cell getRowTotalGroup], [cell getColumnTotalGroup]) withId:cell];
    }
  }
  clone->crossCells_ = nil;
  clone->whenNoDataCell_ = OrgOssPdfreporterEngineUtilJRCloneUtils_nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable_(whenNoDataCell_);
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents_(self, clone, clone->whenNoDataCell_);
  clone->headerCell_ = OrgOssPdfreporterEngineUtilJRCloneUtils_nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable_(headerCell_);
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents_(self, clone, clone->headerCell_);
  return clone;
}

- (void)adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)clone
                           withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *)contents {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents_(self, clone, contents);
}

- (id<JavaUtilList>)getRowGroupsList {
  return rowGroups_;
}

- (id<JavaUtilMap>)getRowGroupIndicesMap {
  return rowGroupsMap_;
}

- (id<JavaUtilList>)getColumnGroupsList {
  return columnGroups_;
}

- (id<JavaUtilMap>)getColumnGroupIndicesMap {
  return columnGroupsMap_;
}

- (id<JavaUtilList>)getMesuresList {
  return measures_;
}

- (id<JavaUtilMap>)getMeasureIndicesMap {
  return measuresMap_;
}

- (JavaLangBoolean *)getIgnoreWidth {
  return ignoreWidth_;
}

- (void)setIgnoreWidthWithJavaLangBoolean:(JavaLangBoolean *)ignoreWidth {
  id old = self->ignoreWidth_;
  self->ignoreWidth_ = ignoreWidth;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_IGNORE_WIDTH withId:old withId:self->ignoreWidth_];
}

- (void)setIgnoreWidthWithBoolean:(jboolean)ignoreWidth {
  [self setIgnoreWidthWithJavaLangBoolean:JavaLangBoolean_valueOfWithBoolean_(ignoreWidth)];
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [self getForecolor];
}

- (id<OrgOssPdfreporterEngineJRLineBox>)getLineBox {
  return lineBox_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab class]) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_class_() getName]);
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_PARAMETERS = [IOSObjectArray newArrayWithObjects:(id[]){ OrgOssPdfreporterEngineJRParameter_REPORT_CONTEXT, OrgOssPdfreporterEngineReportContext_class_(), OrgOssPdfreporterEngineJRParameter_REPORT_PARAMETERS_MAP, JavaUtilMap_class_(), OrgOssPdfreporterEngineJRParameter_REPORT_LOCALE, JavaUtilLocale_class_(), OrgOssPdfreporterEngineJRParameter_REPORT_RESOURCE_BUNDLE, JavaUtilResourceBundle_class_(), OrgOssPdfreporterEngineJRParameter_REPORT_TIME_ZONE, JavaUtilTimeZone_class_(), OrgOssPdfreporterEngineJRParameter_REPORT_FORMAT_FACTORY, OrgOssPdfreporterTextFormatFactoryIFormatFactory_class_(), OrgOssPdfreporterEngineJRParameter_REPORT_FILE_RESOLVER, OrgOssPdfreporterEngineUtilFileResolver_class_() } count:14 type:NSObject_class_()];
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_VARIABLES = [IOSObjectArray newArrayWithObjects:(id[]){ OrgOssPdfreporterCrosstabsJRCrosstab_VARIABLE_ROW_COUNT, JavaLangInteger_class_(), OrgOssPdfreporterCrosstabsJRCrosstab_VARIABLE_COLUMN_COUNT, JavaLangInteger_class_() } count:4 type:NSObject_class_()];
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineJRDefaultStyleProvider:", "JRDesignCrosstab", NULL, 0x1, NULL, NULL },
    { "addBuiltinParameters", NULL, "V", 0x2, NULL, NULL },
    { "addBuiltinVariables", NULL, "V", 0x2, NULL, NULL },
    { "init", "JRDesignCrosstab", NULL, 0x1, NULL, NULL },
    { "getId", NULL, "I", 0x1, NULL, NULL },
    { "getDataset", NULL, "Lorg.oss.pdfreporter.crosstabs.JRCrosstabDataset;", 0x1, NULL, NULL },
    { "getDesignDataset", NULL, "Lorg.oss.pdfreporter.crosstabs.design.JRDesignCrosstabDataset;", 0x1, NULL, NULL },
    { "getRowGroups", NULL, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabRowGroup;", 0x1, NULL, NULL },
    { "getColumnGroups", NULL, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabColumnGroup;", 0x1, NULL, NULL },
    { "getMeasures", NULL, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabMeasure;", 0x1, NULL, NULL },
    { "collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:", "collectExpressions", "V", 0x1, NULL, NULL },
    { "visitWithOrgOssPdfreporterEngineJRVisitor:", "visit", "V", 0x1, NULL, NULL },
    { "setDatasetWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabDataset:", "setDataset", "V", 0x1, NULL, NULL },
    { "addRowGroupWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:", "addRowGroup", "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "addRowGroupWithInt:withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:", "addRowGroup", "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "addRowGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:", "addRowGroupVars", "V", 0x4, NULL, NULL },
    { "addColumnGroupWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:", "addColumnGroup", "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "addColumnGroupWithInt:withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:", "addColumnGroup", "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "addColGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:", "addColGroupVars", "V", 0x4, NULL, NULL },
    { "addMeasureWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:", "addMeasure", "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "addMeasureWithInt:withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:", "addMeasure", "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "addMeasureVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:", "addMeasureVars", "V", 0x4, NULL, NULL },
    { "addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:", "addTotalVar", "V", 0x4, NULL, NULL },
    { "removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:", "removeTotalVar", "V", 0x4, NULL, NULL },
    { "getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:", "getTotalVariableName", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "removeRowGroupWithNSString:", "removeRowGroup", "Lorg.oss.pdfreporter.crosstabs.JRCrosstabRowGroup;", 0x1, NULL, NULL },
    { "removeRowGroupVarsWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:", "removeRowGroupVars", "V", 0x4, NULL, NULL },
    { "removeRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:", "removeRowGroup", "Lorg.oss.pdfreporter.crosstabs.JRCrosstabRowGroup;", 0x1, NULL, NULL },
    { "removeColumnGroupWithNSString:", "removeColumnGroup", "Lorg.oss.pdfreporter.crosstabs.JRCrosstabColumnGroup;", 0x1, NULL, NULL },
    { "removeColGroupVarsWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:", "removeColGroupVars", "V", 0x4, NULL, NULL },
    { "removeColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:", "removeColumnGroup", "Lorg.oss.pdfreporter.crosstabs.JRCrosstabColumnGroup;", 0x1, NULL, NULL },
    { "removeMeasureWithNSString:", "removeMeasure", "Lorg.oss.pdfreporter.crosstabs.JRCrosstabMeasure;", 0x1, NULL, NULL },
    { "removeMeasureVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:", "removeMeasureVars", "V", 0x4, NULL, NULL },
    { "removeMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:", "removeMeasure", "Lorg.oss.pdfreporter.crosstabs.JRCrosstabMeasure;", 0x1, NULL, NULL },
    { "isRepeatColumnHeaders", NULL, "Z", 0x1, NULL, NULL },
    { "setRepeatColumnHeadersWithBoolean:", "setRepeatColumnHeaders", "V", 0x1, NULL, NULL },
    { "isRepeatRowHeaders", NULL, "Z", 0x1, NULL, NULL },
    { "setRepeatRowHeadersWithBoolean:", "setRepeatRowHeaders", "V", 0x1, NULL, NULL },
    { "getCells", NULL, "Lorg.oss.pdfreporter.commons.arrays.Array2D;", 0x1, NULL, "()Lorg/oss/pdfreporter/commons/arrays/Array2D<+Lorg/oss/pdfreporter/crosstabs/JRCrosstabCell;>;" },
    { "getCellsList", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/JRCrosstabCell;>;" },
    { "getCellsMap", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Lorg/oss/pdfreporter/engine/util/Pair<Ljava/lang/String;Ljava/lang/String;>;Lorg/oss/pdfreporter/crosstabs/JRCrosstabCell;>;" },
    { "addCellWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell:", "addCell", "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "removeCellWithNSString:withNSString:", "removeCell", "Lorg.oss.pdfreporter.crosstabs.JRCrosstabCell;", 0x1, NULL, NULL },
    { "removeCellWithOrgOssPdfreporterCrosstabsJRCrosstabCell:", "removeCell", "Lorg.oss.pdfreporter.crosstabs.JRCrosstabCell;", 0x1, NULL, NULL },
    { "getParameters", NULL, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabParameter;", 0x1, NULL, NULL },
    { "getParametersList", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/JRCrosstabParameter;>;" },
    { "getParametersMap", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/crosstabs/JRCrosstabParameter;>;" },
    { "getParametersMapExpression", NULL, "Lorg.oss.pdfreporter.engine.JRExpression;", 0x1, NULL, NULL },
    { "addParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:", "addParameter", "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "addParameterWithInt:withOrgOssPdfreporterCrosstabsJRCrosstabParameter:", "addParameter", "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "removeParameterWithNSString:", "removeParameter", "Lorg.oss.pdfreporter.crosstabs.JRCrosstabParameter;", 0x1, NULL, NULL },
    { "removeParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:", "removeParameter", "Lorg.oss.pdfreporter.crosstabs.JRCrosstabParameter;", 0x1, NULL, NULL },
    { "setParametersMapExpressionWithOrgOssPdfreporterEngineJRExpression:", "setParametersMapExpression", "V", 0x1, NULL, NULL },
    { "getVariablesMap", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/JRVariable;>;" },
    { "getVariables", NULL, "[Lorg.oss.pdfreporter.engine.JRVariable;", 0x1, NULL, NULL },
    { "getColumnBreakOffset", NULL, "I", 0x1, NULL, NULL },
    { "setColumnBreakOffsetWithInt:", "setColumnBreakOffset", "V", 0x1, NULL, NULL },
    { "preprocess", NULL, "V", 0x1, NULL, NULL },
    { "setGroupVariablesClassWithJavaUtilList:", "setGroupVariablesClass", "V", 0x4, NULL, "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;)V" },
    { "calculateSizes", NULL, "V", 0x4, NULL, NULL },
    { "setWhenNoDataCellSize", NULL, "V", 0x4, NULL, NULL },
    { "createCellMatrix", NULL, "V", 0x4, NULL, NULL },
    { "getRowGroupWithInt:", "getRowGroup", "Lorg.oss.pdfreporter.crosstabs.design.JRDesignCrosstabRowGroup;", 0x4, NULL, NULL },
    { "getColumnGroupWithInt:", "getColumnGroup", "Lorg.oss.pdfreporter.crosstabs.design.JRDesignCrosstabColumnGroup;", 0x4, NULL, NULL },
    { "inheritCells", NULL, "V", 0x4, NULL, NULL },
    { "emptyCellWithInt:withInt:", "emptyCell", "Lorg.oss.pdfreporter.crosstabs.design.JRDesignCrosstabCell;", 0x2, NULL, NULL },
    { "inheritCellSizeWithInt:withInt:", "inheritCellSize", "V", 0x4, NULL, NULL },
    { "inheritCellWithInt:withInt:", "inheritCell", "V", 0x4, NULL, NULL },
    { "calculateRowHeadersSizes", NULL, "I", 0x4, NULL, NULL },
    { "calculateColumnHeadersSizes", NULL, "I", 0x4, NULL, NULL },
    { "getWhenNoDataCell", NULL, "Lorg.oss.pdfreporter.crosstabs.JRCellContents;", 0x1, NULL, NULL },
    { "setWhenNoDataCellWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:", "setWhenNoDataCell", "V", 0x1, NULL, NULL },
    { "getElementByKeyWithNSString:", "getElementByKey", "Lorg.oss.pdfreporter.engine.JRElement;", 0x1, NULL, NULL },
    { "getModeValue", NULL, "Lorg.oss.pdfreporter.engine.type.ModeEnum;", 0x1, NULL, NULL },
    { "getHeaderCell", NULL, "Lorg.oss.pdfreporter.crosstabs.JRCellContents;", 0x1, NULL, NULL },
    { "setHeaderCellWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:", "setHeaderCell", "V", 0x1, NULL, NULL },
    { "measureClassChangedWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:withNSString:", "measureClassChanged", "V", 0x4, NULL, NULL },
    { "setTotalVarClassWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:withNSString:", "setTotalVarClass", "V", 0x4, NULL, NULL },
    { "addVariableWithOrgOssPdfreporterEngineJRVariable:", "addVariable", "V", 0x2, NULL, NULL },
    { "removeVariableWithOrgOssPdfreporterEngineJRVariable:", "removeVariable", "V", 0x2, NULL, NULL },
    { "removeVariableWithNSString:", "removeVariable", "V", 0x2, NULL, NULL },
    { "getVariableWithNSString:", "getVariable", "Lorg.oss.pdfreporter.engine.design.JRDesignVariable;", 0x2, NULL, NULL },
    { "getRunDirectionValue", NULL, "Lorg.oss.pdfreporter.engine.type.RunDirectionEnum;", 0x1, NULL, NULL },
    { "setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnum:", "setRunDirection", "V", 0x1, NULL, NULL },
    { "setCellOriginWithOrgOssPdfreporterCrosstabsJRCellContents:withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:", "setCellOrigin", "V", 0x4, NULL, NULL },
    { "setCellOriginWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:", "setCellOrigin", "V", 0x4, NULL, NULL },
    { "setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup:", "setParent", "V", 0x4, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:", "adjustCrosstabReference", "V", 0x2, NULL, NULL },
    { "getRowGroupsList", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/JRCrosstabRowGroup;>;" },
    { "getRowGroupIndicesMap", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;" },
    { "getColumnGroupsList", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup;>;" },
    { "getColumnGroupIndicesMap", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;" },
    { "getMesuresList", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/JRCrosstabMeasure;>;" },
    { "getMeasureIndicesMap", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;" },
    { "getIgnoreWidth", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setIgnoreWidthWithJavaLangBoolean:", "setIgnoreWidth", "V", 0x1, NULL, NULL },
    { "setIgnoreWidthWithBoolean:", "setIgnoreWidth", "V", 0x1, NULL, NULL },
    { "getDefaultLineColor", NULL, "Lorg.oss.pdfreporter.geometry.IColor;", 0x1, NULL, NULL },
    { "getLineBox", NULL, "Lorg.oss.pdfreporter.engine.JRLineBox;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_logger, NULL, .constantValue.asLong = 0 },
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_serialVersionUID },
    { "PROPERTY_COLUMN_BREAK_OFFSET", "PROPERTY_COLUMN_BREAK_OFFSET", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_BREAK_OFFSET, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_DATASET", "PROPERTY_DATASET", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_DATASET, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_HEADER_CELL", "PROPERTY_HEADER_CELL", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_HEADER_CELL, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_PARAMETERS_MAP_EXPRESSION", "PROPERTY_PARAMETERS_MAP_EXPRESSION", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS_MAP_EXPRESSION, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_REPEAT_COLUMN_HEADERS", "PROPERTY_REPEAT_COLUMN_HEADERS", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_COLUMN_HEADERS, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_REPEAT_ROW_HEADERS", "PROPERTY_REPEAT_ROW_HEADERS", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_ROW_HEADERS, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_WHEN_NO_DATA_CELL", "PROPERTY_WHEN_NO_DATA_CELL", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_WHEN_NO_DATA_CELL, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_CELLS", "PROPERTY_CELLS", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_ROW_GROUPS", "PROPERTY_ROW_GROUPS", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_ROW_GROUPS, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_COLUMN_GROUPS", "PROPERTY_COLUMN_GROUPS", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_GROUPS, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_MEASURES", "PROPERTY_MEASURES", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_MEASURES, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_PARAMETERS", "PROPERTY_PARAMETERS", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_IGNORE_WIDTH", "PROPERTY_IGNORE_WIDTH", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_IGNORE_WIDTH, NULL, .constantValue.asLong = 0 },
    { "parametersList_", NULL, 0x4, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/JRCrosstabParameter;>;", .constantValue.asLong = 0 },
    { "parametersMap_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/crosstabs/JRCrosstabParameter;>;", .constantValue.asLong = 0 },
    { "variablesList_", NULL, 0x4, "Lorg.oss.pdfreporter.uses.org.apache.commons.collections.SequencedHashMap;", NULL, NULL, .constantValue.asLong = 0 },
    { "parametersMapExpression_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRExpression;", NULL, NULL, .constantValue.asLong = 0 },
    { "dataset_", NULL, 0x4, "Lorg.oss.pdfreporter.crosstabs.design.JRDesignCrosstabDataset;", NULL, NULL, .constantValue.asLong = 0 },
    { "rowGroups_", NULL, 0x4, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/JRCrosstabRowGroup;>;", .constantValue.asLong = 0 },
    { "columnGroups_", NULL, 0x4, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup;>;", .constantValue.asLong = 0 },
    { "measures_", NULL, 0x4, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/JRCrosstabMeasure;>;", .constantValue.asLong = 0 },
    { "rowGroupsMap_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
    { "columnGroupsMap_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
    { "measuresMap_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
    { "columnBreakOffset_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "repeatColumnHeaders_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "repeatRowHeaders_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "runDirectionValue_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.type.RunDirectionEnum;", NULL, NULL, .constantValue.asLong = 0 },
    { "cellsList_", NULL, 0x4, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/JRCrosstabCell;>;", .constantValue.asLong = 0 },
    { "cellsMap_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/oss/pdfreporter/engine/util/Pair<Ljava/lang/String;Ljava/lang/String;>;Lorg/oss/pdfreporter/crosstabs/JRCrosstabCell;>;", .constantValue.asLong = 0 },
    { "crossCells_", NULL, 0x4, "Lorg.oss.pdfreporter.commons.arrays.Array2D;", NULL, "Lorg/oss/pdfreporter/commons/arrays/Array2D<Lorg/oss/pdfreporter/crosstabs/design/JRDesignCrosstabCell;>;", .constantValue.asLong = 0 },
    { "whenNoDataCell_", NULL, 0x4, "Lorg.oss.pdfreporter.crosstabs.design.JRDesignCellContents;", NULL, NULL, .constantValue.asLong = 0 },
    { "headerCell_", NULL, 0x4, "Lorg.oss.pdfreporter.crosstabs.design.JRDesignCellContents;", NULL, NULL, .constantValue.asLong = 0 },
    { "ignoreWidth_", NULL, 0x4, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "lineBox_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRLineBox;", NULL, NULL, .constantValue.asLong = 0 },
    { "BUILT_IN_PARAMETERS", "BUILT_IN_PARAMETERS", 0x1a, "[Ljava.lang.Object;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_PARAMETERS, NULL, .constantValue.asLong = 0 },
    { "BUILT_IN_VARIABLES", "BUILT_IN_VARIABLES", 0x1a, "[Ljava.lang.Object;", &OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_VARIABLES, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab = { 2, "JRDesignCrosstab", "org.oss.pdfreporter.crosstabs.design", NULL, 0x1, 100, methods, 39, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab;
}

@end

void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_initWithOrgOssPdfreporterEngineJRDefaultStyleProvider_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, id<OrgOssPdfreporterEngineJRDefaultStyleProvider> defaultStyleProvider) {
  OrgOssPdfreporterEngineDesignJRDesignElement_initWithOrgOssPdfreporterEngineJRDefaultStyleProvider_(self, defaultStyleProvider);
  self->columnBreakOffset_ = OrgOssPdfreporterCrosstabsJRCrosstab_DEFAULT_COLUMN_BREAK_OFFSET;
  self->repeatColumnHeaders_ = true;
  self->repeatRowHeaders_ = true;
  self->parametersList_ = new_JavaUtilArrayList_init();
  self->parametersMap_ = new_JavaUtilHashMap_init();
  self->rowGroupsMap_ = new_JavaUtilHashMap_init();
  self->rowGroups_ = new_JavaUtilArrayList_init();
  self->columnGroupsMap_ = new_JavaUtilHashMap_init();
  self->columnGroups_ = new_JavaUtilArrayList_init();
  self->measuresMap_ = new_JavaUtilHashMap_init();
  self->measures_ = new_JavaUtilArrayList_init();
  self->cellsMap_ = new_JavaUtilHashMap_init();
  self->cellsList_ = new_JavaUtilArrayList_init();
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addBuiltinParameters(self);
  self->variablesList_ = new_OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_init();
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addBuiltinVariables(self);
  self->dataset_ = new_OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabDataset_init();
  self->lineBox_ = new_OrgOssPdfreporterEngineBaseJRBaseLineBox_initWithOrgOssPdfreporterEngineJRBoxContainer_(self);
}

OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *new_OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_initWithOrgOssPdfreporterEngineJRDefaultStyleProvider_(id<OrgOssPdfreporterEngineJRDefaultStyleProvider> defaultStyleProvider) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab, initWithOrgOssPdfreporterEngineJRDefaultStyleProvider_, defaultStyleProvider)
}

OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *create_OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_initWithOrgOssPdfreporterEngineJRDefaultStyleProvider_(id<OrgOssPdfreporterEngineJRDefaultStyleProvider> defaultStyleProvider) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab, initWithOrgOssPdfreporterEngineJRDefaultStyleProvider_, defaultStyleProvider)
}

void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addBuiltinParameters(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_PARAMETERS))->size_; i++) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabParameter *parameter = new_OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabParameter_init();
    [parameter setNameWithNSString:(NSString *) cast_chk(IOSObjectArray_Get(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_PARAMETERS, i++), [NSString class])];
    [parameter setValueClassWithIOSClass:(IOSClass *) cast_chk(IOSObjectArray_Get(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_PARAMETERS, i), [IOSClass class])];
    [parameter setSystemDefinedWithBoolean:true];
    @try {
      [self addParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:parameter];
    }
    @catch (OrgOssPdfreporterEngineJRException *e) {
    }
  }
}

void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addBuiltinVariables(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_VARIABLES))->size_; ++i) {
    OrgOssPdfreporterEngineDesignJRDesignVariable *variable = new_OrgOssPdfreporterEngineDesignJRDesignVariable_init();
    [variable setNameWithNSString:(NSString *) cast_chk(IOSObjectArray_Get(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_VARIABLES, i), [NSString class])];
    [variable setValueClassWithIOSClass:(IOSClass *) cast_chk(IOSObjectArray_Get(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_VARIABLES, ++i), [IOSClass class])];
    [variable setCalculationWithOrgOssPdfreporterEngineTypeCalculationEnum:JreLoadEnum(OrgOssPdfreporterEngineTypeCalculationEnum, SYSTEM)];
    [variable setSystemDefinedWithBoolean:true];
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addVariableWithOrgOssPdfreporterEngineJRVariable_(self, variable);
  }
}

void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_init(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self) {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_initWithOrgOssPdfreporterEngineJRDefaultStyleProvider_(self, nil);
}

OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *new_OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab, init)
}

OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *create_OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab, init)
}

NSString *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure_withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup_withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup_(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> measure, id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup, id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup) {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_initialize();
  JavaLangStringBuffer *name = new_JavaLangStringBuffer_init();
  (void) [name appendWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getName]];
  if (rowGroup != nil) {
    (void) [name appendWithChar:'_'];
    (void) [name appendWithNSString:[rowGroup getName]];
  }
  if (colGroup != nil) {
    (void) [name appendWithChar:'_'];
    (void) [name appendWithNSString:[colGroup getName]];
  }
  (void) [name appendWithNSString:@"_ALL"];
  return [name description];
}

OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_emptyCellWithInt_withInt_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, jint i, jint j) {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *emptyCell = new_OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell_init();
  if (i < [((id<JavaUtilList>) nil_chk(self->rowGroups_)) size]) {
    [emptyCell setRowTotalGroupWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(([((id<JavaUtilList>) nil_chk(self->rowGroups_)) getWithInt:i]))) getName]];
  }
  if (j < [((id<JavaUtilList>) nil_chk(self->columnGroups_)) size]) {
    [emptyCell setColumnTotalGroupWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(([((id<JavaUtilList>) nil_chk(self->columnGroups_)) getWithInt:j]))) getName]];
  }
  return emptyCell;
}

void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_addVariableWithOrgOssPdfreporterEngineJRVariable_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, id<OrgOssPdfreporterEngineJRVariable> variable) {
  (void) [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(self->variablesList_)) putWithId:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName] withId:variable];
}

void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_removeVariableWithOrgOssPdfreporterEngineJRVariable_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, id<OrgOssPdfreporterEngineJRVariable> variable) {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_removeVariableWithNSString_(self, [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName]);
}

void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_removeVariableWithNSString_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, NSString *varName) {
  (void) [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(self->variablesList_)) removeWithId:varName];
}

OrgOssPdfreporterEngineDesignJRDesignVariable *OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_getVariableWithNSString_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, NSString *varName) {
  return (OrgOssPdfreporterEngineDesignJRDesignVariable *) cast_chk([((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(self->variablesList_)) getWithId:varName], [OrgOssPdfreporterEngineDesignJRDesignVariable class]);
}

void OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents_(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *self, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *clone, OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *contents) {
  if (contents == nil) {
    return;
  }
  [contents setOriginWithOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:new_OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin_initWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withByte_withNSString_withNSString_(clone, [((OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin *) nil_chk([contents getOrigin])) getType], [((OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin *) nil_chk([contents getOrigin])) getRowGroupName], [((OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin *) nil_chk([contents getOrigin])) getColumnGroupName])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab)
