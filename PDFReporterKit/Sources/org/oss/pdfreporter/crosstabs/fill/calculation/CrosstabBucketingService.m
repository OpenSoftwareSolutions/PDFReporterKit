//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/TreeSet.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketingService.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketingServiceContext.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/CrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/HeaderCell.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/MeasureDefinition.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabTotalPositionEnum.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"

@interface OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList ()

- (void)incrementSpanWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)sublist;

@end

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_incrementSpanWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *self, OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *sublist);

@implementation OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService

- (instancetype)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext:(id<OrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext>)serviceContext
                                                                        withJavaUtilList:(id<JavaUtilList>)rowBuckets
                                                                        withJavaUtilList:(id<JavaUtilList>)columnBuckets
                                                                        withJavaUtilList:(id<JavaUtilList>)measures
                                                                             withBoolean:(jboolean)sorted
                                                                       withBooleanArray2:(IOSObjectArray *)retrieveTotal {
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext_withJavaUtilList_withJavaUtilList_withJavaUtilList_withBoolean_withBooleanArray2_(self, serviceContext, rowBuckets, columnBuckets, measures, sorted, retrieveTotal);
  return self;
}

- (void)createCrosstab {
  if (!processed_) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(@"Crosstab data needs to be processed first");
  }
  if (![self hasData]) {
    return;
  }
  IOSObjectArray *collectedHeaders = [IOSObjectArray newArrayWithLength:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS type:OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_class_()];
  (void) IOSObjectArray_Set(collectedHeaders, OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW, [self createHeadersListWithByte:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketValueMap_ withInt:0 withBoolean:false]);
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *columnTotalsMap = nil;
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *collectedCols;
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(IOSObjectArray_Get(nil_chk(allBuckets_), 0))) computeTotal]) {
    columnTotalsMap = bucketValueMap_;
    for (jint i = 0; i < rowBucketCount_; ++i) {
      columnTotalsMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(columnTotalsMap)) getTotalEntry])) getValue], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class]);
    }
    collectedCols = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) cast_chk(columnTotalsMap, [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap class]);
  }
  else {
    collectedCols = [self createCollectBucketMapWithInt:rowBucketCount_];
    [self collectColsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap:collectedCols withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketValueMap_];
  }
  (void) IOSObjectArray_Set(collectedHeaders, OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN, [self createHeadersListWithByte:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:collectedCols withInt:0 withBoolean:false]);
  jint rowBuckets = ((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(IOSObjectArray_Get(collectedHeaders, OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW)))->span_;
  jint colBuckets = ((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(IOSObjectArray_Get(collectedHeaders, OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN)))->span_;
  jint bucketMeasureCount = rowBuckets * colBuckets * origMeasureCount_;
  [self checkBucketMeasureCountWithInt:bucketMeasureCount];
  colHeaders_ = [self createHeadersWithByte:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:collectedHeaders withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:columnTotalsMap];
  rowHeaders_ = [self createHeadersWithByte:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:collectedHeaders withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketValueMap_];
  cells_ = [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ rowBuckets, colBuckets } type:OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell_class_()];
  [self fillCellsWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:collectedHeaders withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketValueMap_ withInt:0 withIntArray:[IOSIntArray newArrayWithInts:(jint[]){ 0, 0 } count:2] withJavaUtilList:new_JavaUtilArrayList_init() withJavaUtilList:new_JavaUtilArrayList_init()];
}

- (void)collectColsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *)collectedCols
                       withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap {
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(IOSObjectArray_Get(nil_chk(allBuckets_), ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap))->level_))) computeTotal]) {
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *map = bucketMap;
    for (jint i = bucketMap->level_; i < rowBucketCount_; ++i) {
      map = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(map)) getTotalEntry])) getValue], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class]);
    }
    [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(collectedCols)) collectValsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:map withBoolean:false];
    return;
  }
  for (id<JavaUtilIterator> it = [bucketMap entryIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = [it next];
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *nextMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class]);
    if (bucketMap->level_ == rowBucketCount_ - 1) {
      [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(collectedCols)) collectValsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:nextMap withBoolean:false];
    }
    else {
      [self collectColsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap:collectedCols withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:nextMap];
    }
  }
}

- (IOSObjectArray *)createHeadersWithByte:(jbyte)dimension
withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:(IOSObjectArray *)headersLists
withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)totalsMap {
  IOSObjectArray *headers = [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(buckets_), dimension)))->size_, ((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(IOSObjectArray_Get(nil_chk(headersLists), dimension)))->span_ } type:OrgOssPdfreporterCrosstabsFillCalculationHeaderCell_class_()];
  id<JavaUtilList> vals = new_JavaUtilArrayList_init();
  [self fillHeadersWithByte:dimension withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:headers withInt:0 withInt:0 withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:IOSObjectArray_Get(headersLists, dimension) withJavaUtilList:vals withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:totalsMap];
  return headers;
}

- (OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)createHeadersListWithByte:(jbyte)dimension
                                       withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap
                                                                                                       withInt:(jint)level
                                                                                                   withBoolean:(jboolean)total {
  OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *bucketDefinition = IOSObjectArray_Get(nil_chk(allBuckets_), ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap))->level_);
  OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum *totalPosition = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(bucketDefinition)) getTotalPosition];
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *headers;
  if ([bucketDefinition hasOrderValues]) {
    headers = new_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_(bucketDefinition);
  }
  else {
    headers = new_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList_initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum_(totalPosition);
  }
  for (id<JavaUtilIterator> it = [bucketMap entryIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = [it next];
    OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *bucketValue = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    jboolean totalBucket = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(bucketValue)) isTotal];
    jboolean createHeader = !totalBucket || total || totalPosition != JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum, NONE);
    if (createHeader) {
      OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *nextHeaders;
      if (level + 1 < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(buckets_), dimension)))->size_) {
        OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *nextMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([entry_ getValue], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class]);
        nextHeaders = [self createHeadersListWithByte:dimension withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:nextMap withInt:level + 1 withBoolean:total || totalBucket];
      }
      else {
        nextHeaders = new_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList_initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum_(JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum, NONE));
        nextHeaders->span_ = 1;
      }
      ((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(nextHeaders))->key_ = bucketValue;
      if ([bucketDefinition hasOrderValues]) {
        id orderValue = [self evaluateOrderValueWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketMap withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:bucketValue];
        nextHeaders->orderValue_ = orderValue;
      }
      [headers addWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:nextHeaders];
    }
  }
  if (headers->span_ == 0) {
    headers->span_ = 1;
  }
  return headers;
}

- (id)evaluateOrderValueWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap
                           withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)bucket {
  id bucketValue = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:bucket];
  for (jint idx = bucketMap->level_ + 1; idx < rowBucketCount_ + colBucketCount_; ++idx) {
    bucketValue = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk(bucketValue, [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class])))) getTotalEntry])) getValue];
  }
  IOSObjectArray *totals = (IOSObjectArray *) cast_check(bucketValue, IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1));
  IOSObjectArray *userTotals = [self getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:totals];
  return [((id<OrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext>) nil_chk(serviceContext_)) evaluateMeasuresExpressionWithOrgOssPdfreporterEngineJRExpression:[((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(IOSObjectArray_Get(nil_chk(allBuckets_), bucketMap->level_))) getOrderByExpression] withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:userTotals];
}

- (void)fillHeadersWithByte:(jbyte)dimension
withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headers
                    withInt:(jint)level
                    withInt:(jint)col
withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)list
           withJavaUtilList:(id<JavaUtilList>)vals
withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)totalsMap {
  if (level == ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(buckets_), dimension)))->size_) {
    return;
  }
  for (id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(list)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *subList = [it next];
    [((id<JavaUtilList>) nil_chk(vals)) addWithId:((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(subList))->key_];
    jint depthSpan = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(subList->key_)) isTotal] ? ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(buckets_, dimension)))->size_ - level : 1;
    IOSObjectArray *values = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(IOSObjectArray_Get(buckets_, dimension)))->size_ type:OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_class_()];
    (void) [vals toArrayWithNSObjectArray:values];
    IOSObjectArray *totals = [self retrieveHeaderTotalsWithByte:dimension withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:values withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:totalsMap];
    (void) IOSObjectArray_SetAndConsume(nil_chk(IOSObjectArray_Get(nil_chk(headers), level)), col, new_OrgOssPdfreporterCrosstabsFillCalculationHeaderCell_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray_withInt_withInt_withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray2_(values, subList->span_, depthSpan, totals));
    if (![((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(subList->key_)) isTotal]) {
      [self fillHeadersWithByte:dimension withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:headers withInt:level + 1 withInt:col withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:subList withJavaUtilList:vals withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:totalsMap];
    }
    col += subList->span_;
    (void) [vals removeWithInt:[vals size] - 1];
  }
}

- (IOSObjectArray *)retrieveHeaderTotalsWithByte:(jbyte)dimension
withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:(IOSObjectArray *)values
withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)totalsMap {
  jint levelCount = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(buckets_), dimension)))->size_;
  IOSObjectArray *levelBuckets = [IOSObjectArray newArrayWithLength:levelCount + 1 type:NSObject_class_()];
  (void) IOSObjectArray_Set(levelBuckets, 0, totalsMap);
  for (jint idx = 0; idx < levelCount; ++idx) {
    id valueBucket = IOSObjectArray_Get(levelBuckets, idx);
    for (jint lIdx = 0; lIdx <= idx; ++lIdx) {
      if (IOSObjectArray_Get(levelBuckets, lIdx) != nil) {
        OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *entry_ = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk(IOSObjectArray_Get(levelBuckets, lIdx), [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class])))) getTotalEntry];
        (void) IOSObjectArray_Set(levelBuckets, lIdx, entry_ == nil ? nil : [entry_ getValue]);
      }
    }
    if (valueBucket != nil) {
      if (idx < ((IOSObjectArray *) nil_chk(values))->size_ && IOSObjectArray_Get(values, idx) != nil) {
        (void) IOSObjectArray_Set(levelBuckets, idx + 1, [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk(valueBucket, [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class])) getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:IOSObjectArray_Get(values, idx)]);
      }
      else {
        (void) IOSObjectArray_Set(levelBuckets, idx + 1, IOSObjectArray_Get(levelBuckets, idx));
      }
    }
  }
  if (dimension == OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW) {
    for (jint idx = 0; idx < colBucketCount_; ++idx) {
      for (jint lIdx = 0; lIdx <= levelCount; ++lIdx) {
        if (IOSObjectArray_Get(levelBuckets, lIdx) != nil) {
          OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *entry_ = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk(IOSObjectArray_Get(levelBuckets, lIdx), [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class])))) getTotalEntry];
          (void) IOSObjectArray_Set(levelBuckets, lIdx, entry_ == nil ? nil : [entry_ getValue]);
        }
      }
    }
  }
  IOSObjectArray *totals = [IOSObjectArray newArrayWithLength:levelCount + 1 type:IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1)];
  for (jint lIdx = 0; lIdx <= levelCount; ++lIdx) {
    IOSObjectArray *measureValues = (IOSObjectArray *) cast_check(IOSObjectArray_Get(levelBuckets, lIdx), IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1));
    if (measureValues != nil) {
      (void) IOSObjectArray_Set(totals, lIdx, [self getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:measureValues]);
    }
  }
  return totals;
}

- (void)fillCellsWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:(IOSObjectArray *)collectedHeaders
                                  withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap
                                                                                                  withInt:(jint)level
                                                                                             withIntArray:(IOSIntArray *)pos
                                                                                         withJavaUtilList:(id<JavaUtilList>)vals
                                                                                         withJavaUtilList:(id<JavaUtilList>)bucketMaps {
  [((id<JavaUtilList>) nil_chk(bucketMaps)) addWithId:bucketMap];
  jbyte dimension = level < rowBucketCount_ ? OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW : OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN;
  jboolean last = level == ((IOSObjectArray *) nil_chk(allBuckets_))->size_ - 1;
  IOSObjectArray *nextCollected = nil;
  if (!last) {
    nextCollected = [IOSObjectArray newArrayWithLength:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS type:OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_class_()];
    for (jint d = 0; d < OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS; ++d) {
      if (d != dimension) {
        (void) IOSObjectArray_Set(nextCollected, d, IOSObjectArray_Get(nil_chk(collectedHeaders), d));
      }
    }
  }
  jboolean incrementRow = level == ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(buckets_), OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW)))->size_ - 1;
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *collectedList = IOSObjectArray_Get(nil_chk(collectedHeaders), dimension);
  for (id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(collectedList)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *list = [it next];
    id bucketValue = bucketMap == nil ? nil : [bucketMap getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(list))->key_];
    [((id<JavaUtilList>) nil_chk(vals)) addWithId:((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(list))->key_];
    if (last) {
      [self fillCellWithIntArray:pos withJavaUtilList:vals withJavaUtilList:bucketMaps withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *) cast_check(bucketValue, IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1))];
    }
    else {
      (void) IOSObjectArray_Set(nil_chk(nextCollected), dimension, list);
      OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *nextMap = bucketValue == nil ? nil : (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk(bucketValue, [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class]);
      [self fillCellsWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:nextCollected withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:nextMap withInt:level + 1 withIntArray:pos withJavaUtilList:vals withJavaUtilList:bucketMaps];
    }
    (void) [vals removeWithInt:[vals size] - 1];
    if (incrementRow) {
      ++(*IOSIntArray_GetRef(nil_chk(pos), 0));
      *IOSIntArray_GetRef(pos, 1) = 0;
    }
  }
  (void) [bucketMaps removeWithInt:[bucketMaps size] - 1];
}

- (void)fillCellWithIntArray:(IOSIntArray *)pos
            withJavaUtilList:(id<JavaUtilList>)vals
            withJavaUtilList:(id<JavaUtilList>)bucketMaps
withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *)values {
  id<JavaUtilIterator> valsIt = [((id<JavaUtilList>) nil_chk(vals)) iterator];
  IOSObjectArray *rowValues = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(buckets_), OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW)))->size_ type:OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_class_()];
  for (jint i = 0; i < rowValues->size_; i++) {
    (void) IOSObjectArray_Set(rowValues, i, [((id<JavaUtilIterator>) nil_chk(valsIt)) next]);
  }
  IOSObjectArray *columnValues = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(IOSObjectArray_Get(buckets_, OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN)))->size_ type:OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_class_()];
  for (jint i = 0; i < columnValues->size_; i++) {
    (void) IOSObjectArray_Set(columnValues, i, [((id<JavaUtilIterator>) nil_chk(valsIt)) next]);
  }
  IOSObjectArray *measureVals = values == nil ? zeroUserMeasureValues_ : [self getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:values];
  IOSObjectArray *totals = [self retrieveTotalsWithJavaUtilList:vals withJavaUtilList:bucketMaps];
  (void) IOSObjectArray_SetAndConsume(nil_chk(IOSObjectArray_Get(nil_chk(cells_), IOSIntArray_Get(nil_chk(pos), 0))), IOSIntArray_Get(pos, 1), new_OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray_withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray_withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray_withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray3_(rowValues, columnValues, measureVals, totals));
  ++(*IOSIntArray_GetRef(pos, 1));
}

- (IOSObjectArray *)retrieveTotalsWithJavaUtilList:(id<JavaUtilList>)vals
                                  withJavaUtilList:(id<JavaUtilList>)bucketMaps {
  IOSObjectArray *totals = [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ rowBucketCount_ + 1, colBucketCount_ + 1 } type:IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1)];
  for (jint row = rowRetrTotalMax_; row >= rowRetrTotalMin_; --row) {
    if (!IOSBooleanArray_Get(nil_chk(rowRetrTotals_), row)) {
      continue;
    }
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *rowMap = [((id<JavaUtilList>) nil_chk(bucketMaps)) getWithInt:row];
    for (jint i = row; rowMap != nil && i < rowBucketCount_; ++i) {
      OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *totalEntry = [rowMap getTotalEntry];
      rowMap = totalEntry == nil ? nil : (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([totalEntry getValue], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class]);
    }
    for (jint col = 0; col <= IOSIntArray_Get(nil_chk(rowRetrColMax_), row); ++col) {
      OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *colMap = rowMap;
      if (col < colBucketCount_ - 1) {
        if (row == rowBucketCount_) {
          rowMap = [bucketMaps getWithInt:rowBucketCount_ + col + 1];
        }
        else if (rowMap != nil) {
          rowMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([rowMap getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:[((id<JavaUtilList>) nil_chk(vals)) getWithInt:rowBucketCount_ + col]], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class]);
        }
      }
      if (!IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(retrieveTotal_), row)), col)) {
        continue;
      }
      for (jint i = col + 1; colMap != nil && i < colBucketCount_; ++i) {
        colMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk([colMap getTotalEntry])) getValue], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class]);
      }
      if (colMap != nil) {
        if (col == colBucketCount_) {
          IOSObjectArray *measureValues = (IOSObjectArray *) cast_check([colMap getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:[((id<JavaUtilList>) nil_chk(vals)) getWithInt:rowBucketCount_ + colBucketCount_ - 1]], IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1));
          if (measureValues != nil) {
            (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(totals, row)), col, [self getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:measureValues]);
          }
        }
        else {
          OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *totalEntry = [colMap getTotalEntry];
          if (totalEntry != nil) {
            IOSObjectArray *totalValues = (IOSObjectArray *) cast_check([totalEntry getValue], IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1));
            (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(totals, row)), col, [self getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:totalValues]);
          }
        }
      }
      if (IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(totals, row)), col) == nil) {
        (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(totals, row)), col, zeroUserMeasureValues_);
      }
    }
  }
  return totals;
}

- (IOSObjectArray *)getColumnHeaders {
  return colHeaders_;
}

- (IOSObjectArray *)getRowHeaders {
  return rowHeaders_;
}

- (IOSObjectArray *)getCrosstabCells {
  return cells_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext:withJavaUtilList:withJavaUtilList:withJavaUtilList:withBoolean:withBooleanArray2:", "CrosstabBucketingService", NULL, 0x1, NULL, "(Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketingServiceContext;Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition;>;Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition;>;Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/MeasureDefinition;>;Z[[Z)V" },
    { "createCrosstab", NULL, "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "collectColsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap:withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:", "collectCols", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "createHeadersWithByte:withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:", "createHeaders", "[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.HeaderCell;", 0x4, NULL, NULL },
    { "createHeadersListWithByte:withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:withInt:withBoolean:", "createHeadersList", "Lorg.oss.pdfreporter.crosstabs.fill.calculation.CrosstabBucketingService$CollectedList;", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "evaluateOrderValueWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:", "evaluateOrderValue", "Ljava.lang.Object;", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "fillHeadersWithByte:withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:withInt:withInt:withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:withJavaUtilList:withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:", "fillHeaders", "V", 0x4, NULL, "(B[[Lorg/oss/pdfreporter/crosstabs/fill/calculation/HeaderCell;IILorg/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService$CollectedList;Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition$Bucket;>;Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketingService$BucketMap;)V" },
    { "retrieveHeaderTotalsWithByte:withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:", "retrieveHeaderTotals", "[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", 0x4, NULL, NULL },
    { "fillCellsWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:withInt:withIntArray:withJavaUtilList:withJavaUtilList:", "fillCells", "V", 0x4, NULL, "([Lorg/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService$CollectedList;Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketingService$BucketMap;I[ILjava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition$Bucket;>;Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketingService$BucketMap;>;)V" },
    { "fillCellWithIntArray:withJavaUtilList:withJavaUtilList:withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:", "fillCell", "V", 0x4, NULL, "([ILjava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition$Bucket;>;Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketingService$BucketMap;>;[Lorg/oss/pdfreporter/crosstabs/fill/calculation/MeasureDefinition$MeasureValue;)V" },
    { "retrieveTotalsWithJavaUtilList:withJavaUtilList:", "retrieveTotals", "[[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", 0x4, NULL, "(Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition$Bucket;>;Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketingService$BucketMap;>;)[[[Lorg/oss/pdfreporter/crosstabs/fill/calculation/MeasureDefinition$MeasureValue;" },
    { "getColumnHeaders", NULL, "[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.HeaderCell;", 0x1, NULL, NULL },
    { "getRowHeaders", NULL, "[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.HeaderCell;", 0x1, NULL, NULL },
    { "getCrosstabCells", NULL, "[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.CrosstabCell;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "colHeaders_", NULL, 0x4, "[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.HeaderCell;", NULL, NULL, .constantValue.asLong = 0 },
    { "rowHeaders_", NULL, 0x4, "[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.HeaderCell;", NULL, NULL, .constantValue.asLong = 0 },
    { "cells_", NULL, 0x4, "[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.CrosstabCell;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.crosstabs.fill.calculation.CrosstabBucketingService$CollectedList;", "Lorg.oss.pdfreporter.crosstabs.fill.calculation.CrosstabBucketingService$SequentialCollectedList;", "Lorg.oss.pdfreporter.crosstabs.fill.calculation.CrosstabBucketingService$OrderedCollectedList;", "Lorg.oss.pdfreporter.crosstabs.fill.calculation.CrosstabBucketingService$CollectedListComparator;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService = { 2, "CrosstabBucketingService", "org.oss.pdfreporter.crosstabs.fill.calculation", NULL, 0x1, 14, methods, 3, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService;
}

@end

void OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext_withJavaUtilList_withJavaUtilList_withJavaUtilList_withBoolean_withBooleanArray2_(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *self, id<OrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext> serviceContext, id<JavaUtilList> rowBuckets, id<JavaUtilList> columnBuckets, id<JavaUtilList> measures, jboolean sorted, IOSObjectArray *retrieveTotal) {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext_withJavaUtilList_withJavaUtilList_withJavaUtilList_withBoolean_withBooleanArray2_(self, serviceContext, rowBuckets, columnBuckets, measures, sorted, retrieveTotal);
}

OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *new_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext_withJavaUtilList_withJavaUtilList_withJavaUtilList_withBoolean_withBooleanArray2_(id<OrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext> serviceContext, id<JavaUtilList> rowBuckets, id<JavaUtilList> columnBuckets, id<JavaUtilList> measures, jboolean sorted, IOSObjectArray *retrieveTotal) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService, initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext_withJavaUtilList_withJavaUtilList_withJavaUtilList_withBoolean_withBooleanArray2_, serviceContext, rowBuckets, columnBuckets, measures, sorted, retrieveTotal)
}

OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *create_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext_withJavaUtilList_withJavaUtilList_withJavaUtilList_withBoolean_withBooleanArray2_(id<OrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext> serviceContext, id<JavaUtilList> rowBuckets, id<JavaUtilList> columnBuckets, id<JavaUtilList> measures, jboolean sorted, IOSObjectArray *retrieveTotal) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService, initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext_withJavaUtilList_withJavaUtilList_withJavaUtilList_withBoolean_withBooleanArray2_, serviceContext, rowBuckets, columnBuckets, measures, sorted, retrieveTotal)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService)

@implementation OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilIterator>)iterator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)sublist {
  [self addSublistWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:sublist];
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_incrementSpanWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_(self, sublist);
}

- (void)addSublistWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)sublist {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)incrementSpanWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)sublist {
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_incrementSpanWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_(self, sublist);
}

- (NSString *)description {
  return JreStrcat("@CI$$", key_, '/', span_, @": ", [super description]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CollectedList", NULL, 0x0, NULL, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x401, NULL, "()Ljava/util/Iterator<Lorg/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService$CollectedList;>;" },
    { "addWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:", "add", "V", 0x1, NULL, NULL },
    { "addSublistWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:", "addSublist", "V", 0x404, NULL, NULL },
    { "incrementSpanWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:", "incrementSpan", "V", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "span_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "key_", NULL, 0x0, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketDefinition$Bucket;", NULL, NULL, .constantValue.asLong = 0 },
    { "orderValue_", NULL, 0x0, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList = { 2, "CollectedList", "org.oss.pdfreporter.crosstabs.fill.calculation", "CrosstabBucketingService", 0x40c, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList;
}

@end

void OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_init(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *self) {
  NSObject_init(self);
  self->span_ = 0;
}

void OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_incrementSpanWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *self, OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *sublist) {
  if (sublist != nil) {
    self->span_ += sublist->span_;
  }
  else {
    self->span_ += 1;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList)

@implementation OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList

- (instancetype)initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum:(OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum *)totalPosition {
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList_initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum_(self, totalPosition);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [((JavaUtilLinkedList *) nil_chk(list_)) iterator];
}

- (void)addSublistWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)sublist {
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(sublist))->key_)) isTotal] && totalPosition_ == JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum, START)) {
    [((JavaUtilLinkedList *) nil_chk(list_)) addFirstWithId:sublist];
  }
  else {
    [((JavaUtilLinkedList *) nil_chk(list_)) addWithId:sublist];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum:", "SequentialCollectedList", NULL, 0x0, NULL, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, "()Ljava/util/Iterator<Lorg/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService$CollectedList;>;" },
    { "addSublistWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:", "addSublist", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "totalPosition_", NULL, 0x10, "Lorg.oss.pdfreporter.crosstabs.type.CrosstabTotalPositionEnum;", NULL, NULL, .constantValue.asLong = 0 },
    { "list_", NULL, 0x10, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService$CollectedList;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList = { 2, "SequentialCollectedList", "org.oss.pdfreporter.crosstabs.fill.calculation", "CrosstabBucketingService", 0xc, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList;
}

@end

void OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList_initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum_(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList *self, OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum *totalPosition) {
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_init(self);
  self->totalPosition_ = totalPosition;
  self->list_ = new_JavaUtilLinkedList_init();
}

OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList *new_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList_initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum_(OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum *totalPosition) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList, initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum_, totalPosition)
}

OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList *create_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList_initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum_(OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum *totalPosition) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList, initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum_, totalPosition)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList)

@implementation OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList

- (instancetype)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *)bucketDefinition {
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_(self, bucketDefinition);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [((JavaUtilTreeSet *) nil_chk(list_)) iterator];
}

- (void)addSublistWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)sublist {
  [((JavaUtilTreeSet *) nil_chk(list_)) addWithId:sublist];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition:", "OrderedCollectedList", NULL, 0x0, NULL, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, "()Ljava/util/Iterator<Lorg/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService$CollectedList;>;" },
    { "addSublistWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:", "addSublist", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "list_", NULL, 0x10, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lorg/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService$CollectedList;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList = { 2, "OrderedCollectedList", "org.oss.pdfreporter.crosstabs.fill.calculation", "CrosstabBucketingService", 0xc, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList;
}

@end

void OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList *self, OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *bucketDefinition) {
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList_init(self);
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator *comparator = new_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_(bucketDefinition);
  self->list_ = new_JavaUtilTreeSet_initWithJavaUtilComparator_(comparator);
}

OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList *new_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *bucketDefinition) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList, initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_, bucketDefinition)
}

OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList *create_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *bucketDefinition) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList, initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_, bucketDefinition)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList)

@implementation OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator

- (instancetype)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *)bucketDefinition {
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_(self, bucketDefinition);
  return self;
}

- (jint)compareWithId:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)l1
               withId:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)l2 {
  if (l1 == l2) {
    return 0;
  }
  jint order;
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(l1))->key_)) isTotal]) {
    if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(l2))->key_)) isTotal]) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(@"Two total keys in the same list");
    }
    order = totalFirst_ ? -1 : 1;
  }
  else if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(l2))->key_)) isTotal]) {
    order = totalFirst_ ? 1 : -1;
  }
  else {
    order = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(bucketDefinition_)) compareOrderValuesWithId:l1->orderValue_ withId:l2->orderValue_];
    if (order == 0) {
      order = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(l1->key_)) compareToWithId:l2->key_];
    }
  }
  return order;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition:", "CollectedListComparator", NULL, 0x0, NULL, NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bucketDefinition_", NULL, 0x10, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketDefinition;", NULL, NULL, .constantValue.asLong = 0 },
    { "totalFirst_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator = { 2, "CollectedListComparator", "org.oss.pdfreporter.crosstabs.fill.calculation", "CrosstabBucketingService", 0xc, 2, methods, 2, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lorg/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService$CollectedList;>;" };
  return &_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator;
}

@end

void OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator *self, OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *bucketDefinition) {
  NSObject_init(self);
  self->bucketDefinition_ = bucketDefinition;
  self->totalFirst_ = ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(bucketDefinition)) getTotalPosition] == JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum, START));
}

OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator *new_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *bucketDefinition) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator, initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_, bucketDefinition)
}

OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator *create_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *bucketDefinition) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator, initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_, bucketDefinition)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator)
