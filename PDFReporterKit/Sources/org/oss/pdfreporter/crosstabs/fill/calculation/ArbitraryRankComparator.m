//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/crosstabs/fill/calculation/ArbitraryRankComparator.java
//

#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/ArbitraryRankComparator.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/collections/ReferenceMap.h"

@interface OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator () {
 @public
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *ranks_;
  jlong rankCounter_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator, ranks_, OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *)

@implementation OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  if (o1 == o2 || [nil_chk(o1) isEqual:o2]) {
    return 0;
  }
  jlong rank1 = [self rankWithId:o1];
  jlong rank2 = [self rankWithId:o2];
  if (rank1 < rank2) {
    return -1;
  }
  if (rank1 > rank2) {
    return 1;
  }
  @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(@"Arbitrary rank comparator found two objects with the same rank");
}

- (jlong)rankWithId:(id)o {
  @synchronized(self) {
    jlong rank;
    JavaLangLong *existingRank = (JavaLangLong *) cast_chk([((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *) nil_chk(ranks_)) getWithId:o], [JavaLangLong class]);
    if (existingRank == nil) {
      rank = rankCounter_;
      ++rankCounter_;
      if (rankCounter_ == JavaLangLong_MIN_VALUE) {
        @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(@"Arbitrary rank comparator has overflowed");
      }
      (void) [ranks_ putWithId:o withId:new_JavaLangLong_initWithLong_(rank)];
    }
    else {
      rank = [existingRank longLongValue];
    }
    return rank;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "rankWithId:", "rank", "J", 0x24, NULL, NULL },
    { "init", "ArbitraryRankComparator", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ranks_", NULL, 0x12, "Lorg.oss.pdfreporter.uses.org.apache.commons.collections.ReferenceMap;", NULL, NULL, .constantValue.asLong = 0 },
    { "rankCounter_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator = { 2, "ArbitraryRankComparator", "org.oss.pdfreporter.crosstabs.fill.calculation", NULL, 0x1, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/Object;>;" };
  return &_OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator;
}

@end

void OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator_init(OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator *self) {
  NSObject_init(self);
  self->ranks_ = new_OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_initWithInt_withInt_(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_WEAK, OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_HARD);
  self->rankCounter_ = JavaLangLong_MIN_VALUE;
}

OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator *new_OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator, init)
}

OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator *create_OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsFillCalculationArbitraryRankComparator)
