//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/crosstabs/fill/calculation/BucketingService.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketingService.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketingServiceContext.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/MeasureDefinition.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fill/JRCalculable.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"

@interface OrgOssPdfreporterCrosstabsFillCalculationBucketingService () {
 @public
  jint bucketMeasureLimit_;
  jint runningBucketMeasureCount_;
}

@end

@interface OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap () {
 @public
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService *this$0_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap, this$0_, OrgOssPdfreporterCrosstabsFillCalculationBucketingService *)

@interface OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap () {
 @public
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService *this$1_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap, this$1_, OrgOssPdfreporterCrosstabsFillCalculationBucketingService *)

@interface OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap () {
 @public
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService *this$1_;
}

- (void)addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)key
                                                                         withId:(id)value;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap, this$1_, OrgOssPdfreporterCrosstabsFillCalculationBucketingService *)

__attribute__((unused)) static void OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *self, OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *key, id value);

NSString *OrgOssPdfreporterCrosstabsFillCalculationBucketingService_PROPERTY_BUCKET_MEASURE_LIMIT = @"net.sf.jasperreports.crosstab.bucket.measure.limit";

@implementation OrgOssPdfreporterCrosstabsFillCalculationBucketingService

+ (NSString *)PROPERTY_BUCKET_MEASURE_LIMIT {
  return OrgOssPdfreporterCrosstabsFillCalculationBucketingService_PROPERTY_BUCKET_MEASURE_LIMIT;
}

+ (jbyte)DIMENSION_ROW {
  return OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW;
}

+ (jbyte)DIMENSION_COLUMN {
  return OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN;
}

+ (jint)DIMENSIONS {
  return OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS;
}

- (instancetype)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext:(id<OrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext>)serviceContext
                                                                        withJavaUtilList:(id<JavaUtilList>)rowBuckets
                                                                        withJavaUtilList:(id<JavaUtilList>)columnBuckets
                                                                        withJavaUtilList:(id<JavaUtilList>)measures
                                                                             withBoolean:(jboolean)sorted
                                                                       withBooleanArray2:(IOSObjectArray *)retrieveTotal {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext_withJavaUtilList_withJavaUtilList_withJavaUtilList_withBoolean_withBooleanArray2_(self, serviceContext, rowBuckets, columnBuckets, measures, sorted, retrieveTotal);
  return self;
}

- (void)checkTotals {
  rowRetrTotalMin_ = rowBucketCount_ + 1;
  rowRetrTotalMax_ = -1;
  rowRetrTotals_ = [IOSBooleanArray newArrayWithLength:rowBucketCount_ + 1];
  rowRetrColMax_ = [IOSIntArray newArrayWithLength:rowBucketCount_ + 1];
  for (jint row = 0; row <= rowBucketCount_; ++row) {
    *IOSIntArray_GetRef(nil_chk(rowRetrColMax_), row) = -1;
    jboolean total = false;
    for (jint col = 0; col <= colBucketCount_; ++col) {
      if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(retrieveTotal_), row)), col)) {
        total = true;
        *IOSIntArray_GetRef(rowRetrColMax_, row) = col;
      }
    }
    *IOSBooleanArray_GetRef(nil_chk(rowRetrTotals_), row) = total;
    if (total) {
      if (row < rowRetrTotalMin_) {
        rowRetrTotalMin_ = row;
      }
      rowRetrTotalMax_ = row;
      if (row < rowBucketCount_) {
        [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(IOSObjectArray_Get(nil_chk(allBuckets_), row))) setComputeTotal];
      }
    }
  }
  for (jint col = 0; col < colBucketCount_; ++col) {
    OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *colBucket = IOSObjectArray_Get(nil_chk(allBuckets_), rowBucketCount_ + col);
    if (![((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(colBucket)) computeTotal]) {
      jboolean total = false;
      for (jint row = 0; !total && row <= rowBucketCount_; ++row) {
        total = IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(retrieveTotal_), row)), col);
      }
      if (total) {
        [colBucket setComputeTotal];
      }
    }
  }
  for (jint d = 0; d < OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS; ++d) {
    jboolean dTotal = false;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(buckets_), d)))->size_; ++i) {
      if (dTotal) {
        [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(buckets_, d)), i))) setComputeTotal];
      }
      else {
        dTotal = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(buckets_, d)), i))) computeTotal];
      }
    }
  }
}

- (void)clear {
  [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketValueMap_)) clear];
  processed_ = false;
  dataCount_ = 0;
  runningBucketMeasureCount_ = 0;
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)createBucketMapWithInt:(jint)level {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *map;
  if (sorted_) {
    map = new_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_withBoolean_(self, level, false);
  }
  else {
    map = new_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_(self, level);
  }
  return map;
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *)createCollectBucketMapWithInt:(jint)level {
  return new_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_withBoolean_(self, level, true);
}

- (void)addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *)measure
                                                                         withInt:(jint)index
                                                                withJavaUtilList:(id<JavaUtilList>)measuresList
                                                                withJavaUtilList:(id<JavaUtilList>)measureIndexList {
  switch ([[((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *) nil_chk(measure)) getCalculation] ordinal]) {
    case OrgOssPdfreporterEngineTypeCalculationEnum_Enum_AVERAGE:
    case OrgOssPdfreporterEngineTypeCalculationEnum_Enum_VARIANCE:
    {
      OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *sumMeasure = OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_createHelperMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_withOrgOssPdfreporterEngineTypeCalculationEnum_(measure, JreLoadEnum(OrgOssPdfreporterEngineTypeCalculationEnum, SUM));
      [self addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:sumMeasure withInt:index withJavaUtilList:measuresList withJavaUtilList:measureIndexList];
      OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *countMeasure = OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_createHelperMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_withOrgOssPdfreporterEngineTypeCalculationEnum_(measure, JreLoadEnum(OrgOssPdfreporterEngineTypeCalculationEnum, COUNT));
      [self addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:countMeasure withInt:index withJavaUtilList:measuresList withJavaUtilList:measureIndexList];
      break;
    }
    case OrgOssPdfreporterEngineTypeCalculationEnum_Enum_STANDARD_DEVIATION:
    {
      OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *varianceMeasure = OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_createHelperMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_withOrgOssPdfreporterEngineTypeCalculationEnum_(measure, JreLoadEnum(OrgOssPdfreporterEngineTypeCalculationEnum, VARIANCE));
      [self addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:varianceMeasure withInt:index withJavaUtilList:measuresList withJavaUtilList:measureIndexList];
      break;
    }
    case OrgOssPdfreporterEngineTypeCalculationEnum_Enum_DISTINCT_COUNT:
    {
      OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *countMeasure = OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_createDistinctCountHelperMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_(measure);
      [self addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:countMeasure withInt:index withJavaUtilList:measuresList withJavaUtilList:measureIndexList];
      break;
    }
  }
  [((id<JavaUtilList>) nil_chk(measuresList)) addWithId:measure];
  [((id<JavaUtilList>) nil_chk(measureIndexList)) addWithId:JavaLangInteger_valueOfWithInt_(index)];
}

- (void)addDataWithNSObjectArray:(IOSObjectArray *)bucketValues
               withNSObjectArray:(IOSObjectArray *)measureValues {
  if (processed_) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"Crosstab data has already been processed.");
  }
  ++dataCount_;
  IOSObjectArray *bucketVals = [self getBucketValuesWithNSObjectArray:bucketValues];
  IOSObjectArray *values = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketValueMap_)) insertMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:bucketVals];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(measures_))->size_; ++i) {
    id measureValue = IOSObjectArray_Get(nil_chk(measureValues), IOSIntArray_Get(nil_chk(measureIndexes_), i));
    [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk(IOSObjectArray_Get(nil_chk(values), i))) addValueWithId:measureValue];
  }
}

- (void)bucketMeasuresCreated {
  runningBucketMeasureCount_ += origMeasureCount_;
  [self checkBucketMeasureCountWithInt:runningBucketMeasureCount_];
}

- (IOSObjectArray *)getBucketValuesWithNSObjectArray:(IOSObjectArray *)bucketValues {
  IOSObjectArray *bucketVals = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(allBuckets_))->size_ type:OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_class_()];
  for (jint i = 0; i < allBuckets_->size_; ++i) {
    OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *bucket = IOSObjectArray_Get(allBuckets_, i);
    id value = IOSObjectArray_Get(nil_chk(bucketValues), i);
    (void) IOSObjectArray_Set(bucketVals, i, [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(bucket)) createWithId:value]);
  }
  return bucketVals;
}

- (IOSObjectArray *)initMeasureValues {
  IOSObjectArray *values;
  values = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(measures_))->size_ type:OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_()];
  for (jint i = 0; i < measures_->size_; ++i) {
    OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *measure = IOSObjectArray_Get(measures_, i);
    (void) IOSObjectArray_SetAndConsume(values, i, new_OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_initWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_(measure));
    switch ([[((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *) nil_chk(measure)) getCalculation] ordinal]) {
      case OrgOssPdfreporterEngineTypeCalculationEnum_Enum_AVERAGE:
      case OrgOssPdfreporterEngineTypeCalculationEnum_Enum_VARIANCE:
      {
        (void) [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk(IOSObjectArray_Get(values, i))) setHelperWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue:IOSObjectArray_Get(values, i - 2) withByte:OrgOssPdfreporterEngineFillJRCalculable_HELPER_SUM];
        (void) [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk(IOSObjectArray_Get(values, i))) setHelperWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue:IOSObjectArray_Get(values, i - 1) withByte:OrgOssPdfreporterEngineFillJRCalculable_HELPER_COUNT];
        break;
      }
      case OrgOssPdfreporterEngineTypeCalculationEnum_Enum_STANDARD_DEVIATION:
      {
        (void) [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk(IOSObjectArray_Get(values, i))) setHelperWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue:IOSObjectArray_Get(values, i - 1) withByte:OrgOssPdfreporterEngineFillJRCalculable_HELPER_VARIANCE];
      }
      case OrgOssPdfreporterEngineTypeCalculationEnum_Enum_DISTINCT_COUNT:
      {
        (void) [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk(IOSObjectArray_Get(values, i))) setHelperWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue:IOSObjectArray_Get(values, i - 1) withByte:OrgOssPdfreporterEngineFillJRCalculable_HELPER_COUNT];
      }
    }
  }
  return values;
}

- (IOSObjectArray *)initUserMeasureValues {
  IOSObjectArray *vals = [IOSObjectArray newArrayWithLength:origMeasureCount_ type:OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_()];
  for (jint c = 0, i = 0; i < ((IOSObjectArray *) nil_chk(measures_))->size_; ++i) {
    if (![((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *) nil_chk(IOSObjectArray_Get(measures_, i))) isSystemDefined]) {
      (void) IOSObjectArray_SetAndConsume(vals, c, new_OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_initWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_(IOSObjectArray_Get(measures_, i)));
      ++c;
    }
  }
  return vals;
}

- (void)processData {
  if (!processed_) {
    if (dataCount_ > 0) {
      if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(IOSObjectArray_Get(nil_chk(allBuckets_), rowBucketCount_ - 1))) computeTotal] || [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(IOSObjectArray_Get(allBuckets_, allBuckets_->size_ - 1))) computeTotal]) {
        [self computeTotalsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketValueMap_];
      }
    }
    processed_ = true;
  }
}

- (jboolean)hasData {
  return dataCount_ > 0;
}

- (IOSObjectArray *)getMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:(IOSObjectArray *)bucketValues {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *map = bucketValueMap_;
  for (jint i = 0; map != nil && i < ((IOSObjectArray *) nil_chk(allBuckets_))->size_ - 1; ++i) {
    map = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([map getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:IOSObjectArray_Get(nil_chk(bucketValues), i)], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class]);
  }
  return map == nil ? nil : (IOSObjectArray *) cast_check([map getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:IOSObjectArray_Get(nil_chk(bucketValues), ((IOSObjectArray *) nil_chk(allBuckets_))->size_ - 1)], IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1));
}

- (IOSObjectArray *)getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *)values {
  IOSObjectArray *vals = [IOSObjectArray newArrayWithLength:origMeasureCount_ type:OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_()];
  for (jint c = 0, i = 0; i < ((IOSObjectArray *) nil_chk(measures_))->size_; ++i) {
    if (![((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *) nil_chk(IOSObjectArray_Get(measures_, i))) isSystemDefined]) {
      (void) IOSObjectArray_Set(vals, c, IOSObjectArray_Get(nil_chk(values), i));
      ++c;
    }
  }
  return vals;
}

- (IOSObjectArray *)getZeroUserMeasureValues {
  return zeroUserMeasureValues_;
}

- (IOSObjectArray *)getGrandTotals {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *map = bucketValueMap_;
  for (jint i = 0; map != nil && i < ((IOSObjectArray *) nil_chk(allBuckets_))->size_ - 1; ++i) {
    map = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk([map getTotalEntry])) getValue], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class]);
  }
  return map == nil ? nil : (IOSObjectArray *) cast_check([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk([map getTotalEntry])) getValue], IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1));
}

- (void)computeTotalsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap {
  jbyte dimension = ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap))->level_ < rowBucketCount_ ? OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW : OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN;
  if (dimension == OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN && ![((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(IOSObjectArray_Get(allBuckets_, ((IOSObjectArray *) nil_chk(allBuckets_))->size_ - 1))) computeTotal]) {
    return;
  }
  if (!bucketMap->last_) {
    for (id<JavaUtilIterator> it = [bucketMap entryIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<JavaUtilMap_Entry> entry_ = [it next];
      [self computeTotalsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class])];
    }
  }
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(IOSObjectArray_Get(nil_chk(allBuckets_), bucketMap->level_))) computeTotal]) {
    if (dimension == OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN) {
      [self computeColumnTotalWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketMap];
    }
    else {
      [self computeRowTotalsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketMap];
    }
  }
}

- (void)sumValsWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *)totals
               withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *)vals {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(measures_))->size_; i++) {
    [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk(IOSObjectArray_Get(nil_chk(totals), i))) addValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue:IOSObjectArray_Get(nil_chk(vals), i)];
  }
}

- (void)computeColumnTotalWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap {
  IOSObjectArray *totals = [self initMeasureValues];
  for (id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) entryIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = [it next];
    for (jint i = bucketMap->level_ + 1; i < ((IOSObjectArray *) nil_chk(allBuckets_))->size_; ++i) {
      entry_ = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class])))) getTotalEntry];
    }
    [self sumValsWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:totals withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *) cast_check([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1))];
  }
  for (jint i = bucketMap->level_ + 1; i < ((IOSObjectArray *) nil_chk(allBuckets_))->size_; ++i) {
    bucketMap = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) addTotalNextMap];
  }
  [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) addTotalEntryWithId:totals];
}

- (void)computeRowTotalsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *totals = [self createCollectBucketMapWithInt:rowBucketCount_];
  for (id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) entryIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = [it next];
    for (jint i = bucketMap->level_ + 1; i < rowBucketCount_; ++i) {
      entry_ = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class])))) getTotalEntry];
    }
    [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(totals)) collectValsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class]) withBoolean:true];
  }
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *totalBucketMap = bucketMap;
  for (jint i = bucketMap->level_ + 1; i < rowBucketCount_; ++i) {
    totalBucketMap = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(totalBucketMap)) addTotalNextMap];
  }
  [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(totalBucketMap)) addTotalEntryWithId:totals];
}

- (void)checkBucketMeasureCountWithInt:(jint)bucketMeasureCount {
  if (bucketMeasureLimit_ > 0 && bucketMeasureCount > bucketMeasureLimit_) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(JreStrcat("$I$", @"Crosstab bucket/measure limit (", bucketMeasureLimit_, @") exceeded."));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext:withJavaUtilList:withJavaUtilList:withJavaUtilList:withBoolean:withBooleanArray2:", "BucketingService", NULL, 0x1, NULL, "(Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketingServiceContext;Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition;>;Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition;>;Ljava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/MeasureDefinition;>;Z[[Z)V" },
    { "checkTotals", NULL, "V", 0x4, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "createBucketMapWithInt:", "createBucketMap", "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService$BucketMap;", 0x4, NULL, NULL },
    { "createCollectBucketMapWithInt:", "createCollectBucketMap", "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService$BucketListMap;", 0x4, NULL, NULL },
    { "addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:withInt:withJavaUtilList:withJavaUtilList:", "addMeasure", "V", 0x4, NULL, "(Lorg/oss/pdfreporter/crosstabs/fill/calculation/MeasureDefinition;ILjava/util/List<Lorg/oss/pdfreporter/crosstabs/fill/calculation/MeasureDefinition;>;Ljava/util/List<Ljava/lang/Integer;>;)V" },
    { "addDataWithNSObjectArray:withNSObjectArray:", "addData", "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "bucketMeasuresCreated", NULL, "V", 0x4, NULL, NULL },
    { "getBucketValuesWithNSObjectArray:", "getBucketValues", "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketDefinition$Bucket;", 0x4, NULL, NULL },
    { "initMeasureValues", NULL, "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", 0x4, NULL, NULL },
    { "initUserMeasureValues", NULL, "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", 0x4, NULL, NULL },
    { "processData", NULL, "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "hasData", NULL, "Z", 0x1, NULL, NULL },
    { "getMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:", "getMeasureValues", "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", 0x1, NULL, NULL },
    { "getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:", "getUserMeasureValues", "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", 0x1, NULL, NULL },
    { "getZeroUserMeasureValues", NULL, "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", 0x1, NULL, NULL },
    { "getGrandTotals", NULL, "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", 0x1, NULL, NULL },
    { "computeTotalsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:", "computeTotals", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "sumValsWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:", "sumVals", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "computeColumnTotalWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:", "computeColumnTotal", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "computeRowTotalsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:", "computeRowTotals", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "checkBucketMeasureCountWithInt:", "checkBucketMeasureCount", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PROPERTY_BUCKET_MEASURE_LIMIT", "PROPERTY_BUCKET_MEASURE_LIMIT", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCrosstabsFillCalculationBucketingService_PROPERTY_BUCKET_MEASURE_LIMIT, NULL, .constantValue.asLong = 0 },
    { "DIMENSION_ROW", "DIMENSION_ROW", 0x1c, "B", NULL, NULL, .constantValue.asChar = OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW },
    { "DIMENSION_COLUMN", "DIMENSION_COLUMN", 0x1c, "B", NULL, NULL, .constantValue.asChar = OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN },
    { "DIMENSIONS", "DIMENSIONS", 0x1c, "I", NULL, NULL, .constantValue.asInt = OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS },
    { "serviceContext_", NULL, 0x14, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingServiceContext;", NULL, NULL, .constantValue.asLong = 0 },
    { "allBuckets_", NULL, 0x14, "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketDefinition;", NULL, NULL, .constantValue.asLong = 0 },
    { "buckets_", NULL, 0x14, "[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketDefinition;", NULL, NULL, .constantValue.asLong = 0 },
    { "rowBucketCount_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "colBucketCount_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "retrieveTotal_", NULL, 0x14, "[[Z", NULL, NULL, .constantValue.asLong = 0 },
    { "rowRetrTotals_", NULL, 0x4, "[Z", NULL, NULL, .constantValue.asLong = 0 },
    { "rowRetrTotalMin_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "rowRetrTotalMax_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "rowRetrColMax_", NULL, 0x4, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "measures_", NULL, 0x14, "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition;", NULL, NULL, .constantValue.asLong = 0 },
    { "origMeasureCount_", NULL, 0x14, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "measureIndexes_", NULL, 0x14, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "sorted_", NULL, 0x14, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "bucketValueMap_", NULL, 0x14, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService$BucketMap;", NULL, NULL, .constantValue.asLong = 0 },
    { "dataCount_", NULL, 0x4, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "processed_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "zeroUserMeasureValues_", NULL, 0x14, "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", NULL, NULL, .constantValue.asLong = 0 },
    { "bucketMeasureLimit_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "runningBucketMeasureCount_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService$MapEntry;", "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService$BucketMap;", "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService$BucketTreeMap;", "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService$BucketListMap;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsFillCalculationBucketingService = { 2, "BucketingService", "org.oss.pdfreporter.crosstabs.fill.calculation", NULL, 0x401, 22, methods, 24, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterCrosstabsFillCalculationBucketingService;
}

@end

void OrgOssPdfreporterCrosstabsFillCalculationBucketingService_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext_withJavaUtilList_withJavaUtilList_withJavaUtilList_withBoolean_withBooleanArray2_(OrgOssPdfreporterCrosstabsFillCalculationBucketingService *self, id<OrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext> serviceContext, id<JavaUtilList> rowBuckets, id<JavaUtilList> columnBuckets, id<JavaUtilList> measures, jboolean sorted, IOSObjectArray *retrieveTotal) {
  NSObject_init(self);
  self->serviceContext_ = serviceContext;
  self->sorted_ = sorted;
  self->buckets_ = [IOSObjectArray newArrayWithLength:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS type:IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_class_(), 1)];
  self->rowBucketCount_ = [((id<JavaUtilList>) nil_chk(rowBuckets)) size];
  (void) IOSObjectArray_SetAndConsume(self->buckets_, OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW, [IOSObjectArray newArrayWithLength:self->rowBucketCount_ type:OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_class_()]);
  (void) [rowBuckets toArrayWithNSObjectArray:IOSObjectArray_Get(self->buckets_, OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW)];
  self->colBucketCount_ = [((id<JavaUtilList>) nil_chk(columnBuckets)) size];
  (void) IOSObjectArray_SetAndConsume(self->buckets_, OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN, [IOSObjectArray newArrayWithLength:self->colBucketCount_ type:OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_class_()]);
  (void) [columnBuckets toArrayWithNSObjectArray:IOSObjectArray_Get(self->buckets_, OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN)];
  self->allBuckets_ = [IOSObjectArray newArrayWithLength:self->rowBucketCount_ + self->colBucketCount_ type:OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(self->buckets_, OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW), 0, self->allBuckets_, 0, self->rowBucketCount_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(self->buckets_, OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN), 0, self->allBuckets_, self->rowBucketCount_, self->colBucketCount_);
  self->origMeasureCount_ = [((id<JavaUtilList>) nil_chk(measures)) size];
  id<JavaUtilList> measuresList = new_JavaUtilArrayList_initWithInt_([measures size] * 2);
  id<JavaUtilList> measureIndexList = new_JavaUtilArrayList_initWithInt_([measures size] * 2);
  for (jint i = 0; i < [measures size]; ++i) {
    OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *measure = [measures getWithInt:i];
    [self addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:measure withInt:i withJavaUtilList:measuresList withJavaUtilList:measureIndexList];
  }
  self->measures_ = [IOSObjectArray newArrayWithLength:[measuresList size] type:OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_class_()];
  (void) [measuresList toArrayWithNSObjectArray:self->measures_];
  self->measureIndexes_ = [IOSIntArray newArrayWithLength:[measureIndexList size]];
  for (jint i = 0; i < self->measureIndexes_->size_; ++i) {
    *IOSIntArray_GetRef(self->measureIndexes_, i) = [((JavaLangInteger *) nil_chk([measureIndexList getWithInt:i])) intValue];
  }
  self->retrieveTotal_ = retrieveTotal;
  [self checkTotals];
  self->bucketValueMap_ = [self createBucketMapWithInt:0];
  self->zeroUserMeasureValues_ = [self initUserMeasureValues];
  self->bucketMeasureLimit_ = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_([((id<OrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext>) nil_chk(serviceContext)) getJasperReportsContext]))) getIntegerPropertyWithNSString:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_PROPERTY_BUCKET_MEASURE_LIMIT withInt:0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsFillCalculationBucketingService)

@implementation OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry

- (instancetype)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)key
                                                                                  withId:(id)value {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(self, key, value);
  return self;
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)getKey {
  return key_;
}

- (id)getValue {
  return value_;
}

- (id)setValueWithId:(id)value {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jint)compareToWithId:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *)o {
  (void) cast_chk(o, [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry class]);
  return [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(key_)) compareToWithId:((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(o))->key_];
}

- (NSString *)description {
  return JreStrcat("@C@", key_, '=', value_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:withId:", "MapEntry", NULL, 0x0, NULL, NULL },
    { "getKey", NULL, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketDefinition$Bucket;", 0x1, NULL, NULL },
    { "getValue", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "setValueWithId:", "setValue", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "key_", NULL, 0x10, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketDefinition$Bucket;", NULL, NULL, .constantValue.asLong = 0 },
    { "value_", NULL, 0x10, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry = { 2, "MapEntry", "org.oss.pdfreporter.crosstabs.fill.calculation", "BucketingService", 0xc, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Map$Entry<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition$Bucket;Ljava/lang/Object;>;Ljava/lang/Comparable<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketingService$MapEntry;>;" };
  return &_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry;
}

@end

void OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *self, OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *key, id value) {
  NSObject_init(self);
  self->key_ = key;
  self->value_ = value;
}

OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *new_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *key, id value) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry, initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_, key, value)
}

OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *create_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *key, id value) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry, initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_, key, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry)

@implementation OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap

- (instancetype)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService *)outer$
                                                                          withInt:(jint)level {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_(self, outer$, level);
  return self;
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)addTotalNextMap {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *nextMap = [this$0_ createBucketMapWithInt:level_ + 1];
  [self addTotalEntryWithId:nextMap];
  return nextMap;
}

- (void)clear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<JavaUtilIterator>)entryIterator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)insertMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:(IOSObjectArray *)bucketValues {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addTotalEntryWithId:(id)val {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getTotal {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *)getTotalEntry {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:withInt:", "BucketMap", NULL, 0x0, NULL, NULL },
    { "addTotalNextMap", NULL, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService$BucketMap;", 0x0, NULL, NULL },
    { "clear", NULL, "V", 0x400, NULL, NULL },
    { "entryIterator", NULL, "Ljava.util.Iterator;", 0x401, NULL, "()Ljava/util/Iterator<Ljava/util/Map$Entry<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition$Bucket;Ljava/lang/Object;>;>;" },
    { "getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:", "get", "Ljava.lang.Object;", 0x401, NULL, NULL },
    { "insertMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:", "insertMeasureValues", "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", 0x400, NULL, NULL },
    { "addTotalEntryWithId:", "addTotalEntry", "V", 0x400, NULL, NULL },
    { "size", NULL, "I", 0x401, NULL, NULL },
    { "getTotal", NULL, "Ljava.lang.Object;", 0x401, NULL, NULL },
    { "getTotalEntry", NULL, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService$MapEntry;", 0x401, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService;", NULL, NULL, .constantValue.asLong = 0 },
    { "level_", NULL, 0x10, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "last_", NULL, 0x10, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "totalKey_", NULL, 0x10, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketDefinition$Bucket;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap = { 2, "BucketMap", "org.oss.pdfreporter.crosstabs.fill.calculation", "BucketingService", 0x401, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap;
}

@end

void OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *self, OrgOssPdfreporterCrosstabsFillCalculationBucketingService *outer$, jint level) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->level_ = level;
  self->last_ = (level == ((IOSObjectArray *) nil_chk(outer$->allBuckets_))->size_ - 1);
  self->totalKey_ = ((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(IOSObjectArray_Get(outer$->allBuckets_, level)))->VALUE_TOTAL_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap)

@implementation OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap

- (instancetype)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService *)outer$
                                                                          withInt:(jint)level {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_(self, outer$, level);
  return self;
}

- (void)clear {
  [((JavaUtilTreeMap *) nil_chk(map_)) clear];
}

- (id<JavaUtilIterator>)entryIterator {
  return [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(map_)) entrySet])) iterator];
}

- (id)getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)key {
  return [((JavaUtilTreeMap *) nil_chk(map_)) getWithId:key];
}

- (IOSObjectArray *)insertMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:(IOSObjectArray *)bucketValues {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *levelMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *) cast_chk(this$1_->bucketValueMap_, [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap class]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(bucketValues))->size_ - 1; i++) {
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *nextMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *) cast_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *) nil_chk(levelMap)) getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:IOSObjectArray_Get(bucketValues, i)], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap class]);
    if (nextMap == nil) {
      nextMap = new_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_(this$1_, i + 1);
      (void) [((JavaUtilTreeMap *) nil_chk(levelMap->map_)) putWithId:IOSObjectArray_Get(bucketValues, i) withId:nextMap];
    }
    levelMap = nextMap;
  }
  IOSObjectArray *values = (IOSObjectArray *) cast_check([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *) nil_chk(levelMap)) getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:IOSObjectArray_Get(bucketValues, bucketValues->size_ - 1)], IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1));
  if (values == nil) {
    values = [this$1_ initMeasureValues];
    (void) [((JavaUtilTreeMap *) nil_chk(levelMap->map_)) putWithId:IOSObjectArray_Get(bucketValues, bucketValues->size_ - 1) withId:values];
    [this$1_ bucketMeasuresCreated];
  }
  return values;
}

- (jint)size {
  return [((JavaUtilTreeMap *) nil_chk(map_)) size];
}

- (void)addTotalEntryWithId:(id)value {
  (void) [((JavaUtilTreeMap *) nil_chk(map_)) putWithId:totalKey_ withId:value];
}

- (id)getTotal {
  return [self getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:totalKey_];
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *)getTotalEntry {
  id value = [self getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:totalKey_];
  return value == nil ? nil : new_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(totalKey_, value);
}

- (NSString *)description {
  return [((JavaUtilTreeMap *) nil_chk(map_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:withInt:", "BucketTreeMap", NULL, 0x0, NULL, NULL },
    { "clear", NULL, "V", 0x0, NULL, NULL },
    { "entryIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, "()Ljava/util/Iterator<Ljava/util/Map$Entry<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition$Bucket;Ljava/lang/Object;>;>;" },
    { "getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:", "get", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "insertMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:", "insertMeasureValues", "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", 0x0, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "addTotalEntryWithId:", "addTotalEntry", "V", 0x0, NULL, NULL },
    { "getTotal", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getTotalEntry", NULL, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService$MapEntry;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", NULL, 0x1012, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService;", NULL, NULL, .constantValue.asLong = 0 },
    { "map_", NULL, 0x0, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition$Bucket;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap = { 2, "BucketTreeMap", "org.oss.pdfreporter.crosstabs.fill.calculation", "BucketingService", 0x4, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap;
}

@end

void OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *self, OrgOssPdfreporterCrosstabsFillCalculationBucketingService *outer$, jint level) {
  self->this$1_ = outer$;
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_(self, outer$, level);
  self->map_ = new_JavaUtilTreeMap_init();
}

OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *new_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_(OrgOssPdfreporterCrosstabsFillCalculationBucketingService *outer$, jint level) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap, initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_, outer$, level)
}

OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *create_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_(OrgOssPdfreporterCrosstabsFillCalculationBucketingService *outer$, jint level) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap, initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_, outer$, level)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap)

@implementation OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap

- (instancetype)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService *)outer$
                                                                          withInt:(jint)level
                                                                      withBoolean:(jboolean)linked {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_withBoolean_(self, outer$, level, linked);
  return self;
}

- (void)clear {
  [((id<JavaUtilList>) nil_chk(entries_)) clear];
  [((id<JavaUtilMap>) nil_chk(entryMap_)) clear];
}

- (id<JavaUtilIterator>)entryIterator {
  return [((id<JavaUtilList>) nil_chk(entries_)) iterator];
}

- (void)addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)key
                                                                         withId:(id)value {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(self, key, value);
}

- (id)getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)key {
  return [((id<JavaUtilMap>) nil_chk(entryMap_)) getWithId:key];
}

- (IOSObjectArray *)insertMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:(IOSObjectArray *)bucketValues {
  jint i = 0;
  id levelObj = self;
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *map = nil;
  while (i < ((IOSObjectArray *) nil_chk(this$1_->allBuckets_))->size_) {
    map = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) cast_chk(levelObj, [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap class]);
    jint size = [((id<JavaUtilList>) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(map))->entries_)) size];
    if (size == 0) {
      break;
    }
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *lastEntry = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) cast_chk([((id<JavaUtilList>) nil_chk(map->entries_)) getWithInt:size - 1], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry class]);
    if (![((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(lastEntry))->key_)) isEqual:IOSObjectArray_Get(nil_chk(bucketValues), i)]) {
      break;
    }
    ++i;
    levelObj = lastEntry->value_;
  }
  if (i == this$1_->allBuckets_->size_) {
    return (IOSObjectArray *) cast_check(levelObj, IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1));
  }
  while (i < this$1_->allBuckets_->size_ - 1) {
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *nextMap = new_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_withBoolean_(this$1_, i + 1, false);
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(nil_chk(map), IOSObjectArray_Get(nil_chk(bucketValues), i), nextMap);
    map = nextMap;
    ++i;
  }
  IOSObjectArray *values = [this$1_ initMeasureValues];
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(nil_chk(map), IOSObjectArray_Get(nil_chk(bucketValues), i), values);
  [this$1_ bucketMeasuresCreated];
  return values;
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(entries_)) size];
}

- (void)addTotalEntryWithId:(id)value {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(self, totalKey_, value);
}

- (id)getTotal {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *totalEntry = [self getTotalEntry];
  return totalEntry == nil ? nil : [totalEntry getValue];
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *)getTotalEntry {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *lastEntry = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) cast_chk([((id<JavaUtilList>) nil_chk(entries_)) getWithInt:[entries_ size] - 1], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry class]);
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(lastEntry))->key_)) isTotal]) {
    return lastEntry;
  }
  return nil;
}

- (void)collectValsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)map
                                                                               withBoolean:(jboolean)sum {
  id<JavaUtilListIterator> totalIt = [((id<JavaUtilList>) nil_chk(entries_)) listIterator];
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *totalItEntry = [((id<JavaUtilListIterator>) nil_chk(totalIt)) hasNext] ? (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) cast_chk([totalIt next], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry class]) : nil;
  id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(map)) entryIterator];
  id<JavaUtilMap_Entry> entry_ = [((id<JavaUtilIterator>) nil_chk(it)) hasNext] ? [it next] : nil;
  while (entry_ != nil) {
    OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *key = [entry_ getKey];
    jint compare = totalItEntry == nil ? -1 : [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(key)) compareToWithId:totalItEntry->key_];
    if (compare <= 0) {
      id addVal = nil;
      if (last_) {
        if (sum) {
          IOSObjectArray *totalVals = compare == 0 ? (IOSObjectArray *) cast_check(totalItEntry->value_, IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1)) : nil;
          if (totalVals == nil) {
            totalVals = [this$1_ initMeasureValues];
            addVal = totalVals;
          }
          [this$1_ sumValsWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:totalVals withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *) cast_check([entry_ getValue], IOSClass_arrayType(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue_class_(), 1))];
        }
      }
      else {
        OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *nextTotals = compare == 0 ? (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) cast_chk(totalItEntry->value_, [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap class]) : nil;
        if (nextTotals == nil) {
          nextTotals = [this$1_ createCollectBucketMapWithInt:level_ + 1];
          addVal = nextTotals;
        }
        [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(nextTotals)) collectValsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) cast_chk([entry_ getValue], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap class]) withBoolean:sum];
      }
      if (compare < 0) {
        if (totalItEntry != nil) {
          (void) [totalIt previous];
        }
        [totalIt addWithId:new_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(key, addVal)];
        (void) [((id<JavaUtilMap>) nil_chk(entryMap_)) putWithId:key withId:addVal];
        if (totalItEntry != nil) {
          (void) [totalIt next];
        }
      }
      entry_ = [it hasNext] ? [it next] : nil;
    }
    if (compare >= 0) {
      totalItEntry = [totalIt hasNext] ? (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) cast_chk([totalIt next], [OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry class]) : nil;
    }
  }
}

- (NSString *)description {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  (void) [sb appendWithChar:'{'];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(entries_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = [it next];
    (void) [sb appendWithId:entry_];
    if ([it hasNext]) {
      (void) [sb appendWithNSString:@", "];
    }
  }
  (void) [sb appendWithChar:'}'];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:withInt:withBoolean:", "BucketListMap", NULL, 0x0, NULL, NULL },
    { "clear", NULL, "V", 0x0, NULL, NULL },
    { "entryIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, "()Ljava/util/Iterator<Ljava/util/Map$Entry<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition$Bucket;Ljava/lang/Object;>;>;" },
    { "addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:withId:", "add", "V", 0x2, NULL, NULL },
    { "getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:", "get", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "insertMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:", "insertMeasureValues", "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", 0x0, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "addTotalEntryWithId:", "addTotalEntry", "V", 0x0, NULL, NULL },
    { "getTotal", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getTotalEntry", NULL, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService$MapEntry;", 0x1, NULL, NULL },
    { "collectValsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:withBoolean:", "collectVals", "V", 0x0, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", NULL, 0x1012, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketingService;", NULL, NULL, .constantValue.asLong = 0 },
    { "entries_", NULL, 0x0, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/util/Map$Entry<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition$Bucket;Ljava/lang/Object;>;>;", .constantValue.asLong = 0 },
    { "entryMap_", NULL, 0x0, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition$Bucket;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap = { 2, "BucketListMap", "org.oss.pdfreporter.crosstabs.fill.calculation", "BucketingService", 0x4, 12, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap;
}

@end

void OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_withBoolean_(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *self, OrgOssPdfreporterCrosstabsFillCalculationBucketingService *outer$, jint level, jboolean linked) {
  self->this$1_ = outer$;
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_(self, outer$, level);
  if (linked) {
    self->entries_ = new_JavaUtilLinkedList_init();
  }
  else {
    self->entries_ = new_JavaUtilArrayList_init();
  }
  self->entryMap_ = new_JavaUtilHashMap_init();
}

OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *new_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_withBoolean_(OrgOssPdfreporterCrosstabsFillCalculationBucketingService *outer$, jint level, jboolean linked) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap, initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_withBoolean_, outer$, level, linked)
}

OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *create_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_withBoolean_(OrgOssPdfreporterCrosstabsFillCalculationBucketingService *outer$, jint level, jboolean linked) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap, initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_withInt_withBoolean_, outer$, level, linked)
}

void OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap_addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *self, OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *key, id value) {
  [((id<JavaUtilList>) nil_chk(self->entries_)) addWithId:new_OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket_withId_(key, value)];
  (void) [((id<JavaUtilMap>) nil_chk(self->entryMap_)) putWithId:key withId:value];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap)
