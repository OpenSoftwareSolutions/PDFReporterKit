//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/xml/parsers/impl/TextImpl.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/oss/pdfreporter/exception/NotImplementedException.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/DOMException.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Document.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Node.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Text.h"
#include "org/oss/pdfreporter/xml/parsers/impl/NodeImpl.h"
#include "org/oss/pdfreporter/xml/parsers/impl/TextImpl.h"

@implementation OrgOssPdfreporterXmlParsersImplTextImpl

- (instancetype)initWithOrgOssPdfreporterUsesOrgW3cDomDocument:(id<OrgOssPdfreporterUsesOrgW3cDomDocument>)owner
                                                  withNSString:(NSString *)data {
  OrgOssPdfreporterXmlParsersImplTextImpl_initWithOrgOssPdfreporterUsesOrgW3cDomDocument_withNSString_(self, owner, data);
  return self;
}

- (NSString *)getData {
  return [self getNodeValue];
}

- (void)setDataWithNSString:(NSString *)data {
  @throw new_OrgOssPdfreporterExceptionNotImplementedException_init();
}

- (jint)getLength {
  @throw new_OrgOssPdfreporterExceptionNotImplementedException_init();
}

- (NSString *)substringDataWithInt:(jint)offset
                           withInt:(jint)count {
  @throw new_OrgOssPdfreporterExceptionNotImplementedException_init();
}

- (void)appendDataWithNSString:(NSString *)arg {
  @throw new_OrgOssPdfreporterExceptionNotImplementedException_init();
}

- (void)insertDataWithInt:(jint)offset
             withNSString:(NSString *)arg {
  @throw new_OrgOssPdfreporterExceptionNotImplementedException_init();
}

- (void)deleteDataWithInt:(jint)offset
                  withInt:(jint)count {
  @throw new_OrgOssPdfreporterExceptionNotImplementedException_init();
}

- (void)replaceDataWithInt:(jint)offset
                   withInt:(jint)count
              withNSString:(NSString *)arg {
  @throw new_OrgOssPdfreporterExceptionNotImplementedException_init();
}

- (id<OrgOssPdfreporterUsesOrgW3cDomText>)splitTextWithInt:(jint)offset {
  @throw new_OrgOssPdfreporterExceptionNotImplementedException_init();
}

- (jboolean)isElementContentWhitespace {
  @throw new_OrgOssPdfreporterExceptionNotImplementedException_init();
}

- (NSString *)getTextContent {
  return [self getData];
}

- (NSString *)getWholeText {
  @throw new_OrgOssPdfreporterExceptionNotImplementedException_init();
}

- (id<OrgOssPdfreporterUsesOrgW3cDomText>)replaceWholeTextWithNSString:(NSString *)content {
  @throw new_OrgOssPdfreporterExceptionNotImplementedException_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterUsesOrgW3cDomDocument:withNSString:", "TextImpl", NULL, 0x0, NULL, NULL },
    { "getData", NULL, "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.org.w3c.dom.DOMException;", NULL },
    { "setDataWithNSString:", "setData", "V", 0x1, "Lorg.oss.pdfreporter.uses.org.w3c.dom.DOMException;", NULL },
    { "getLength", NULL, "I", 0x1, NULL, NULL },
    { "substringDataWithInt:withInt:", "substringData", "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.org.w3c.dom.DOMException;", NULL },
    { "appendDataWithNSString:", "appendData", "V", 0x1, "Lorg.oss.pdfreporter.uses.org.w3c.dom.DOMException;", NULL },
    { "insertDataWithInt:withNSString:", "insertData", "V", 0x1, "Lorg.oss.pdfreporter.uses.org.w3c.dom.DOMException;", NULL },
    { "deleteDataWithInt:withInt:", "deleteData", "V", 0x1, "Lorg.oss.pdfreporter.uses.org.w3c.dom.DOMException;", NULL },
    { "replaceDataWithInt:withInt:withNSString:", "replaceData", "V", 0x1, "Lorg.oss.pdfreporter.uses.org.w3c.dom.DOMException;", NULL },
    { "splitTextWithInt:", "splitText", "Lorg.oss.pdfreporter.uses.org.w3c.dom.Text;", 0x1, "Lorg.oss.pdfreporter.uses.org.w3c.dom.DOMException;", NULL },
    { "isElementContentWhitespace", NULL, "Z", 0x1, NULL, NULL },
    { "getTextContent", NULL, "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.org.w3c.dom.DOMException;", NULL },
    { "getWholeText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "replaceWholeTextWithNSString:", "replaceWholeText", "Lorg.oss.pdfreporter.uses.org.w3c.dom.Text;", 0x1, "Lorg.oss.pdfreporter.uses.org.w3c.dom.DOMException;", NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterXmlParsersImplTextImpl = { 2, "TextImpl", "org.oss.pdfreporter.xml.parsers.impl", NULL, 0x1, 14, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterXmlParsersImplTextImpl;
}

@end

void OrgOssPdfreporterXmlParsersImplTextImpl_initWithOrgOssPdfreporterUsesOrgW3cDomDocument_withNSString_(OrgOssPdfreporterXmlParsersImplTextImpl *self, id<OrgOssPdfreporterUsesOrgW3cDomDocument> owner, NSString *data) {
  OrgOssPdfreporterXmlParsersImplNodeImpl_initWithOrgOssPdfreporterUsesOrgW3cDomDocument_withShort_withNSString_withNSString_(self, owner, OrgOssPdfreporterUsesOrgW3cDomNode_TEXT_NODE, @"#text", data);
}

OrgOssPdfreporterXmlParsersImplTextImpl *new_OrgOssPdfreporterXmlParsersImplTextImpl_initWithOrgOssPdfreporterUsesOrgW3cDomDocument_withNSString_(id<OrgOssPdfreporterUsesOrgW3cDomDocument> owner, NSString *data) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterXmlParsersImplTextImpl, initWithOrgOssPdfreporterUsesOrgW3cDomDocument_withNSString_, owner, data)
}

OrgOssPdfreporterXmlParsersImplTextImpl *create_OrgOssPdfreporterXmlParsersImplTextImpl_initWithOrgOssPdfreporterUsesOrgW3cDomDocument_withNSString_(id<OrgOssPdfreporterUsesOrgW3cDomDocument> owner, NSString *data) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterXmlParsersImplTextImpl, initWithOrgOssPdfreporterUsesOrgW3cDomDocument_withNSString_, owner, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterXmlParsersImplTextImpl)
