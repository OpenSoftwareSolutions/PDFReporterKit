//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/com/eclipsesource/json/JsonWriter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "org/oss/pdfreporter/uses/com/eclipsesource/json/JsonWriter.h"

@interface OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter ()

+ (IOSCharArray *)getReplacementCharsWithChar:(jchar)ch;

@end

inline jint OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_get_CONTROL_CHARACTERS_END();
#define OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_CONTROL_CHARACTERS_END 31
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter, CONTROL_CHARACTERS_END, jint)

inline IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_get_QUOT_CHARS();
static IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_QUOT_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter, QUOT_CHARS, IOSCharArray *)

inline IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_get_BS_CHARS();
static IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_BS_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter, BS_CHARS, IOSCharArray *)

inline IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_get_LF_CHARS();
static IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_LF_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter, LF_CHARS, IOSCharArray *)

inline IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_get_CR_CHARS();
static IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_CR_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter, CR_CHARS, IOSCharArray *)

inline IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_get_TAB_CHARS();
static IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_TAB_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter, TAB_CHARS, IOSCharArray *)

inline IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_get_UNICODE_2028_CHARS();
static IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_UNICODE_2028_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter, UNICODE_2028_CHARS, IOSCharArray *)

inline IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_get_UNICODE_2029_CHARS();
static IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_UNICODE_2029_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter, UNICODE_2029_CHARS, IOSCharArray *)

inline IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_get_HEX_DIGITS();
static IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_HEX_DIGITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter, HEX_DIGITS, IOSCharArray *)

__attribute__((unused)) static IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_getReplacementCharsWithChar_(jchar ch);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter)

@implementation OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)writer {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_initWithJavaIoWriter_(self, writer);
  return self;
}

- (void)writeLiteralWithNSString:(NSString *)value {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithNSString:value];
}

- (void)writeNumberWithNSString:(NSString *)string {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithNSString:string];
}

- (void)writeStringWithNSString:(NSString *)string {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:'"'];
  [self writeJsonStringWithNSString:string];
  [writer_ writeWithInt:'"'];
}

- (void)writeArrayOpen {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:'['];
}

- (void)writeArrayClose {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:']'];
}

- (void)writeArraySeparator {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:','];
}

- (void)writeObjectOpen {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:'{'];
}

- (void)writeObjectClose {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:'}'];
}

- (void)writeMemberNameWithNSString:(NSString *)name {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:'"'];
  [self writeJsonStringWithNSString:name];
  [writer_ writeWithInt:'"'];
}

- (void)writeMemberSeparator {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:':'];
}

- (void)writeObjectSeparator {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithInt:','];
}

- (void)writeJsonStringWithNSString:(NSString *)string {
  jint length = ((jint) [((NSString *) nil_chk(string)) length]);
  jint start = 0;
  for (jint index = 0; index < length; index++) {
    IOSCharArray *replacement = OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_getReplacementCharsWithChar_([string charAtWithInt:index]);
    if (replacement != nil) {
      [((JavaIoWriter *) nil_chk(writer_)) writeWithNSString:string withInt:start withInt:index - start];
      [writer_ writeWithCharArray:replacement];
      start = index + 1;
    }
  }
  [((JavaIoWriter *) nil_chk(writer_)) writeWithNSString:string withInt:start withInt:length - start];
}

+ (IOSCharArray *)getReplacementCharsWithChar:(jchar)ch {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_getReplacementCharsWithChar_(ch);
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter class]) {
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_QUOT_CHARS = [IOSCharArray newArrayWithChars:(jchar[]){ '\\', '"' } count:2];
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_BS_CHARS = [IOSCharArray newArrayWithChars:(jchar[]){ '\\', '\\' } count:2];
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_LF_CHARS = [IOSCharArray newArrayWithChars:(jchar[]){ '\\', 'n' } count:2];
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_CR_CHARS = [IOSCharArray newArrayWithChars:(jchar[]){ '\\', 'r' } count:2];
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_TAB_CHARS = [IOSCharArray newArrayWithChars:(jchar[]){ '\\', 't' } count:2];
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_UNICODE_2028_CHARS = [IOSCharArray newArrayWithChars:(jchar[]){ '\\', 'u', '2', '0', '2', '8' } count:6];
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_UNICODE_2029_CHARS = [IOSCharArray newArrayWithChars:(jchar[]){ '\\', 'u', '2', '0', '2', '9' } count:6];
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_HEX_DIGITS = [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' } count:16];
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoWriter:", "JsonWriter", NULL, 0x0, NULL, NULL },
    { "writeLiteralWithNSString:", "writeLiteral", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "writeNumberWithNSString:", "writeNumber", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "writeStringWithNSString:", "writeString", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "writeArrayOpen", NULL, "V", 0x4, "Ljava.io.IOException;", NULL },
    { "writeArrayClose", NULL, "V", 0x4, "Ljava.io.IOException;", NULL },
    { "writeArraySeparator", NULL, "V", 0x4, "Ljava.io.IOException;", NULL },
    { "writeObjectOpen", NULL, "V", 0x4, "Ljava.io.IOException;", NULL },
    { "writeObjectClose", NULL, "V", 0x4, "Ljava.io.IOException;", NULL },
    { "writeMemberNameWithNSString:", "writeMemberName", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "writeMemberSeparator", NULL, "V", 0x4, "Ljava.io.IOException;", NULL },
    { "writeObjectSeparator", NULL, "V", 0x4, "Ljava.io.IOException;", NULL },
    { "writeJsonStringWithNSString:", "writeJsonString", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "getReplacementCharsWithChar:", "getReplacementChars", "[C", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CONTROL_CHARACTERS_END", "CONTROL_CHARACTERS_END", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_CONTROL_CHARACTERS_END },
    { "QUOT_CHARS", "QUOT_CHARS", 0x1a, "[C", &OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_QUOT_CHARS, NULL, .constantValue.asLong = 0 },
    { "BS_CHARS", "BS_CHARS", 0x1a, "[C", &OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_BS_CHARS, NULL, .constantValue.asLong = 0 },
    { "LF_CHARS", "LF_CHARS", 0x1a, "[C", &OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_LF_CHARS, NULL, .constantValue.asLong = 0 },
    { "CR_CHARS", "CR_CHARS", 0x1a, "[C", &OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_CR_CHARS, NULL, .constantValue.asLong = 0 },
    { "TAB_CHARS", "TAB_CHARS", 0x1a, "[C", &OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_TAB_CHARS, NULL, .constantValue.asLong = 0 },
    { "UNICODE_2028_CHARS", "UNICODE_2028_CHARS", 0x1a, "[C", &OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_UNICODE_2028_CHARS, NULL, .constantValue.asLong = 0 },
    { "UNICODE_2029_CHARS", "UNICODE_2029_CHARS", 0x1a, "[C", &OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_UNICODE_2029_CHARS, NULL, .constantValue.asLong = 0 },
    { "HEX_DIGITS", "HEX_DIGITS", 0x1a, "[C", &OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_HEX_DIGITS, NULL, .constantValue.asLong = 0 },
    { "writer_", NULL, 0x14, "Ljava.io.Writer;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter = { 2, "JsonWriter", "org.oss.pdfreporter.uses.com.eclipsesource.json", NULL, 0x0, 14, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter;
}

@end

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_initWithJavaIoWriter_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter *self, JavaIoWriter *writer) {
  NSObject_init(self);
  self->writer_ = writer;
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter *new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_initWithJavaIoWriter_(JavaIoWriter *writer) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter, initWithJavaIoWriter_, writer)
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter *create_OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_initWithJavaIoWriter_(JavaIoWriter *writer) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter, initWithJavaIoWriter_, writer)
}

IOSCharArray *OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_getReplacementCharsWithChar_(jchar ch) {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_initialize();
  if (ch > '\\') {
    if (ch < 0x2028 || ch > 0x2029) {
      return nil;
    }
    return ch == 0x2028 ? OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_UNICODE_2028_CHARS : OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_UNICODE_2029_CHARS;
  }
  if (ch == '\\') {
    return OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_BS_CHARS;
  }
  if (ch > '"') {
    return nil;
  }
  if (ch == '"') {
    return OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_QUOT_CHARS;
  }
  if (ch > OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_CONTROL_CHARACTERS_END) {
    return nil;
  }
  if (ch == 0x000a) {
    return OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_LF_CHARS;
  }
  if (ch == 0x000d) {
    return OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_CR_CHARS;
  }
  if (ch == 0x0009) {
    return OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_TAB_CHARS;
  }
  return [IOSCharArray newArrayWithChars:(jchar[]){ '\\', 'u', '0', '0', IOSCharArray_Get(nil_chk(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_HEX_DIGITS), (JreRShift32(ch, 4)) & (jint) 0x000f), IOSCharArray_Get(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter_HEX_DIGITS, ch & (jint) 0x000f) } count:6];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter)
