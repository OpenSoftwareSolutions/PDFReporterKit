//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/com/eclipsesource/json/JsonObject.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/Reader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/uses/com/eclipsesource/json/Json.h"
#include "org/oss/pdfreporter/uses/com/eclipsesource/json/JsonObject.h"
#include "org/oss/pdfreporter/uses/com/eclipsesource/json/JsonValue.h"
#include "org/oss/pdfreporter/uses/com/eclipsesource/json/JsonWriter.h"

@interface OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject () {
 @public
  id<JavaUtilList> names_;
  id<JavaUtilList> values_;
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *table_;
}

- (instancetype)initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject:(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)object
                                                                withBoolean:(jboolean)unmodifiable;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inputStream;

- (void)updateHashIndex;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject, names_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject, values_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject, table_, OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *)

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_withBoolean_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *self, OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *object, jboolean unmodifiable);

__attribute__((unused)) static OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_withBoolean_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *object, jboolean unmodifiable) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *create_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_withBoolean_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *object, jboolean unmodifiable);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_updateHashIndex(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *self);

@interface OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member () {
 @public
  NSString *name_;
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *value_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member, name_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member, value_, OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *)

@interface OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable () {
 @public
  IOSByteArray *hashTable_;
}

- (jint)hashSlotForWithId:(id)element;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable, hashTable_, IOSByteArray *)

__attribute__((unused)) static jint OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_hashSlotForWithId_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *self, id element);

@interface OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> val$namesIterator_;
  id<JavaUtilIterator> val$valuesIterator_;
}

- (jboolean)hasNext;

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member *)next;

- (void)remove;

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0
                    withJavaUtilIterator:(id<JavaUtilIterator>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1)

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1, val$namesIterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1, val$valuesIterator_, id<JavaUtilIterator>)

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1_initWithJavaUtilIterator_withJavaUtilIterator_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1 *self, id<JavaUtilIterator> capture$0, id<JavaUtilIterator> capture$1);

__attribute__((unused)) static OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1 *new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1_initWithJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> capture$0, id<JavaUtilIterator> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1 *create_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1_initWithJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> capture$0, id<JavaUtilIterator> capture$1);

J2OBJC_TYPE_LITERAL_HEADER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1)

@implementation OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject:(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)object {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_(self, object);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject:(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)object
                                                                withBoolean:(jboolean)unmodifiable {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_withBoolean_(self, object, unmodifiable);
  return self;
}

+ (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)readFromWithJavaIoReader:(JavaIoReader *)reader {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_readFromWithJavaIoReader_(reader);
}

+ (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)readFromWithNSString:(NSString *)string {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_readFromWithNSString_(string);
}

+ (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)unmodifiableObjectWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject:(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)object {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_unmodifiableObjectWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_(object);
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)addWithNSString:(NSString *)name
                                                                 withInt:(jint)value {
  (void) [self addWithNSString:name withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:OrgOssPdfreporterUsesComEclipsesourceJsonJson_valueWithInt_(value)];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)addWithNSString:(NSString *)name
                                                                withLong:(jlong)value {
  (void) [self addWithNSString:name withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:OrgOssPdfreporterUsesComEclipsesourceJsonJson_valueWithLong_(value)];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)addWithNSString:(NSString *)name
                                                               withFloat:(jfloat)value {
  (void) [self addWithNSString:name withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:OrgOssPdfreporterUsesComEclipsesourceJsonJson_valueWithFloat_(value)];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)addWithNSString:(NSString *)name
                                                              withDouble:(jdouble)value {
  (void) [self addWithNSString:name withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:OrgOssPdfreporterUsesComEclipsesourceJsonJson_valueWithDouble_(value)];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)addWithNSString:(NSString *)name
                                                             withBoolean:(jboolean)value {
  (void) [self addWithNSString:name withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:OrgOssPdfreporterUsesComEclipsesourceJsonJson_valueWithBoolean_(value)];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)addWithNSString:(NSString *)name
                                                            withNSString:(NSString *)value {
  (void) [self addWithNSString:name withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:OrgOssPdfreporterUsesComEclipsesourceJsonJson_valueWithNSString_(value)];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)addWithNSString:(NSString *)name
                  withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:(OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *)value {
  if (name == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"name is null");
  }
  if (value == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"value is null");
  }
  [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *) nil_chk(table_)) addWithNSString:name withInt:[((id<JavaUtilList>) nil_chk(names_)) size]];
  [names_ addWithId:name];
  [((id<JavaUtilList>) nil_chk(values_)) addWithId:value];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)setWithNSString:(NSString *)name
                                                                 withInt:(jint)value {
  (void) [self setWithNSString:name withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:OrgOssPdfreporterUsesComEclipsesourceJsonJson_valueWithInt_(value)];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)setWithNSString:(NSString *)name
                                                                withLong:(jlong)value {
  (void) [self setWithNSString:name withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:OrgOssPdfreporterUsesComEclipsesourceJsonJson_valueWithLong_(value)];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)setWithNSString:(NSString *)name
                                                               withFloat:(jfloat)value {
  (void) [self setWithNSString:name withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:OrgOssPdfreporterUsesComEclipsesourceJsonJson_valueWithFloat_(value)];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)setWithNSString:(NSString *)name
                                                              withDouble:(jdouble)value {
  (void) [self setWithNSString:name withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:OrgOssPdfreporterUsesComEclipsesourceJsonJson_valueWithDouble_(value)];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)setWithNSString:(NSString *)name
                                                             withBoolean:(jboolean)value {
  (void) [self setWithNSString:name withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:OrgOssPdfreporterUsesComEclipsesourceJsonJson_valueWithBoolean_(value)];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)setWithNSString:(NSString *)name
                                                            withNSString:(NSString *)value {
  (void) [self setWithNSString:name withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:OrgOssPdfreporterUsesComEclipsesourceJsonJson_valueWithNSString_(value)];
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)setWithNSString:(NSString *)name
                  withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:(OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *)value {
  if (name == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"name is null");
  }
  if (value == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"value is null");
  }
  jint index = [self indexOfWithNSString:name];
  if (index != -1) {
    (void) [((id<JavaUtilList>) nil_chk(values_)) setWithInt:index withId:value];
  }
  else {
    [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *) nil_chk(table_)) addWithNSString:name withInt:[((id<JavaUtilList>) nil_chk(names_)) size]];
    [names_ addWithId:name];
    [((id<JavaUtilList>) nil_chk(values_)) addWithId:value];
  }
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)removeWithNSString:(NSString *)name {
  if (name == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"name is null");
  }
  jint index = [self indexOfWithNSString:name];
  if (index != -1) {
    [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *) nil_chk(table_)) removeWithInt:index];
    (void) [((id<JavaUtilList>) nil_chk(names_)) removeWithInt:index];
    (void) [((id<JavaUtilList>) nil_chk(values_)) removeWithInt:index];
  }
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)mergeWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject:(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)object {
  if (object == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"object is null");
  }
  for (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member * __strong member in object) {
    (void) [self setWithNSString:((OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member *) nil_chk(member))->name_ withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:member->value_];
  }
  return self;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *)getWithNSString:(NSString *)name {
  if (name == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"name is null");
  }
  jint index = [self indexOfWithNSString:name];
  return index != -1 ? [((id<JavaUtilList>) nil_chk(values_)) getWithInt:index] : nil;
}

- (jint)getIntWithNSString:(NSString *)name
                   withInt:(jint)defaultValue {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *value = [self getWithNSString:name];
  return value != nil ? [value asInt] : defaultValue;
}

- (jlong)getLongWithNSString:(NSString *)name
                    withLong:(jlong)defaultValue {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *value = [self getWithNSString:name];
  return value != nil ? [value asLong] : defaultValue;
}

- (jfloat)getFloatWithNSString:(NSString *)name
                     withFloat:(jfloat)defaultValue {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *value = [self getWithNSString:name];
  return value != nil ? [value asFloat] : defaultValue;
}

- (jdouble)getDoubleWithNSString:(NSString *)name
                      withDouble:(jdouble)defaultValue {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *value = [self getWithNSString:name];
  return value != nil ? [value asDouble] : defaultValue;
}

- (jboolean)getBooleanWithNSString:(NSString *)name
                       withBoolean:(jboolean)defaultValue {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *value = [self getWithNSString:name];
  return value != nil ? [value asBoolean] : defaultValue;
}

- (NSString *)getStringWithNSString:(NSString *)name
                       withNSString:(NSString *)defaultValue {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *value = [self getWithNSString:name];
  return value != nil ? [value asString] : defaultValue;
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(names_)) size];
}

- (jboolean)isEmpty {
  return [((id<JavaUtilList>) nil_chk(names_)) isEmpty];
}

- (id<JavaUtilList>)names {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(names_);
}

- (id<JavaUtilIterator>)iterator {
  id<JavaUtilIterator> namesIterator = [((id<JavaUtilList>) nil_chk(names_)) iterator];
  id<JavaUtilIterator> valuesIterator = [((id<JavaUtilList>) nil_chk(values_)) iterator];
  return new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1_initWithJavaUtilIterator_withJavaUtilIterator_(namesIterator, valuesIterator);
}

- (void)writeWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter:(OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter *)writer {
  [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter *) nil_chk(writer)) writeObjectOpen];
  id<JavaUtilIterator> namesIterator = [((id<JavaUtilList>) nil_chk(names_)) iterator];
  id<JavaUtilIterator> valuesIterator = [((id<JavaUtilList>) nil_chk(values_)) iterator];
  if ([((id<JavaUtilIterator>) nil_chk(namesIterator)) hasNext]) {
    [writer writeMemberNameWithNSString:[namesIterator next]];
    [writer writeMemberSeparator];
    [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *) nil_chk([((id<JavaUtilIterator>) nil_chk(valuesIterator)) next])) writeWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter:writer];
    while ([namesIterator hasNext]) {
      [writer writeObjectSeparator];
      [writer writeMemberNameWithNSString:[namesIterator next]];
      [writer writeMemberSeparator];
      [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *) nil_chk([valuesIterator next])) writeWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter:writer];
    }
  }
  [writer writeObjectClose];
}

- (jboolean)isObject {
  return true;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *)asObject {
  return self;
}

- (NSUInteger)hash {
  jint result = 1;
  result = 31 * result + ((jint) [((id<JavaUtilList>) nil_chk(names_)) hash]);
  result = 31 * result + ((jint) [((id<JavaUtilList>) nil_chk(values_)) hash]);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if ([self getClass] != (id) [obj getClass]) {
    return false;
  }
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *other = (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *) cast_chk(obj, [OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject class]);
  return [((id<JavaUtilList>) nil_chk(names_)) isEqual:other->names_] && [((id<JavaUtilList>) nil_chk(values_)) isEqual:other->values_];
}

- (jint)indexOfWithNSString:(NSString *)name {
  jint index = [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *) nil_chk(table_)) getWithId:name];
  if (index != -1 && [((NSString *) nil_chk(name)) isEqual:[((id<JavaUtilList>) nil_chk(names_)) getWithInt:index]]) {
    return index;
  }
  return [((id<JavaUtilList>) nil_chk(names_)) lastIndexOfWithId:name];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inputStream {
  @synchronized(self) {
    [((JavaIoObjectInputStream *) nil_chk(inputStream)) defaultReadObject];
    table_ = new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_init();
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_updateHashIndex(self);
  }
}

- (void)updateHashIndex {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_updateHashIndex(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (IOSObjectArray *)__annotations_readFromWithJavaIoReader_ {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_readFromWithNSString_ {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JsonObject", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject:", "JsonObject", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject:withBoolean:", "JsonObject", NULL, 0x2, NULL, NULL },
    { "readFromWithJavaIoReader:", "readFrom", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x9, "Ljava.io.IOException;", NULL },
    { "readFromWithNSString:", "readFrom", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x9, NULL, NULL },
    { "unmodifiableObjectWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject:", "unmodifiableObject", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x9, NULL, NULL },
    { "addWithNSString:withInt:", "add", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "addWithNSString:withLong:", "add", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "addWithNSString:withFloat:", "add", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "addWithNSString:withDouble:", "add", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "addWithNSString:withBoolean:", "add", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "addWithNSString:withNSString:", "add", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "addWithNSString:withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:", "add", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "setWithNSString:withInt:", "set", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "setWithNSString:withLong:", "set", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "setWithNSString:withFloat:", "set", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "setWithNSString:withDouble:", "set", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "setWithNSString:withBoolean:", "set", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "setWithNSString:withNSString:", "set", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "setWithNSString:withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:", "set", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "removeWithNSString:", "remove", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "mergeWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject:", "merge", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "getWithNSString:", "get", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonValue;", 0x1, NULL, NULL },
    { "getIntWithNSString:withInt:", "getInt", "I", 0x1, NULL, NULL },
    { "getLongWithNSString:withLong:", "getLong", "J", 0x1, NULL, NULL },
    { "getFloatWithNSString:withFloat:", "getFloat", "F", 0x1, NULL, NULL },
    { "getDoubleWithNSString:withDouble:", "getDouble", "D", 0x1, NULL, NULL },
    { "getBooleanWithNSString:withBoolean:", "getBoolean", "Z", 0x1, NULL, NULL },
    { "getStringWithNSString:withNSString:", "getString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "names", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Ljava/lang/String;>;" },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, "()Ljava/util/Iterator<Lorg/oss/pdfreporter/uses/com/eclipsesource/json/JsonObject$Member;>;" },
    { "writeWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonWriter:", "write", "V", 0x0, "Ljava.io.IOException;", NULL },
    { "isObject", NULL, "Z", 0x1, NULL, NULL },
    { "asObject", NULL, "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "indexOfWithNSString:", "indexOf", "I", 0x0, NULL, NULL },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x22, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
    { "updateHashIndex", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "names_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "values_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/uses/com/eclipsesource/json/JsonValue;>;", .constantValue.asLong = 0 },
    { "table_", NULL, 0x82, "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject$HashIndexTable;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject$Member;", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject$HashIndexTable;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject = { 2, "JsonObject", "org.oss.pdfreporter.uses.com.eclipsesource.json", NULL, 0x1, 41, methods, 3, fields, 0, NULL, 2, inner_classes, NULL, "Lorg/oss/pdfreporter/uses/com/eclipsesource/json/JsonValue;Ljava/lang/Iterable<Lorg/oss/pdfreporter/uses/com/eclipsesource/json/JsonObject$Member;>;" };
  return &_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject;
}

@end

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_init(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *self) {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue_init(self);
  self->names_ = new_JavaUtilArrayList_init();
  self->values_ = new_JavaUtilArrayList_init();
  self->table_ = new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_init();
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject, init)
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *create_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject, init)
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *self, OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *object) {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_withBoolean_(self, object, false);
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *object) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject, initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_, object)
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *create_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *object) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject, initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_, object)
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_withBoolean_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *self, OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *object, jboolean unmodifiable) {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue_init(self);
  if (object == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"object is null");
  }
  if (unmodifiable) {
    self->names_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(object->names_);
    self->values_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(object->values_);
  }
  else {
    self->names_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(object->names_);
    self->values_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(object->values_);
  }
  self->table_ = new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_init();
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_updateHashIndex(self);
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_withBoolean_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *object, jboolean unmodifiable) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject, initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_withBoolean_, object, unmodifiable)
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *create_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_withBoolean_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *object, jboolean unmodifiable) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject, initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_withBoolean_, object, unmodifiable)
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_readFromWithJavaIoReader_(JavaIoReader *reader) {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initialize();
  return [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *) nil_chk(OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue_readFromWithJavaIoReader_(reader))) asObject];
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_readFromWithNSString_(NSString *string) {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initialize();
  return [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *) nil_chk(OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue_readFromWithNSString_(string))) asObject];
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_unmodifiableObjectWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *object) {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initialize();
  return new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_withBoolean_(object, true);
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_updateHashIndex(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject *self) {
  jint size = [((id<JavaUtilList>) nil_chk(self->names_)) size];
  for (jint i = 0; i < size; i++) {
    [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *) nil_chk(self->table_)) addWithNSString:[self->names_ getWithInt:i] withInt:i];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject)

@implementation OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member

- (instancetype)initWithNSString:(NSString *)name
withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:(OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *)value {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member_initWithNSString_withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue_(self, name, value);
  return self;
}

- (NSString *)getName {
  return name_;
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *)getValue {
  return value_;
}

- (NSUInteger)hash {
  jint result = 1;
  result = 31 * result + ((jint) [((NSString *) nil_chk(name_)) hash]);
  result = 31 * result + ((jint) [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *) nil_chk(value_)) hash]);
  return result;
}

- (jboolean)isEqual:(id)object {
  if (self == object) {
    return true;
  }
  if (object == nil) {
    return false;
  }
  if ([self getClass] != (id) [object getClass]) {
    return false;
  }
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member *other = (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member *) cast_chk(object, [OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member class]);
  return [((NSString *) nil_chk(name_)) isEqual:other->name_] && [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *) nil_chk(value_)) isEqual:other->value_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue:", "Member", NULL, 0x0, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getValue", NULL, "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonValue;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "value_", NULL, 0x12, "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonValue;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member = { 2, "Member", "org.oss.pdfreporter.uses.com.eclipsesource.json", "JsonObject", 0x9, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member;
}

@end

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member_initWithNSString_withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member *self, NSString *name, OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *value) {
  NSObject_init(self);
  self->name_ = name;
  self->value_ = value;
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member *new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member_initWithNSString_withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue_(NSString *name, OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *value) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member, initWithNSString_withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue_, name, value)
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member *create_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member_initWithNSString_withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue_(NSString *name, OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *value) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member, initWithNSString_withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue_, name, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member)

@implementation OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable:(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *)original {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_(self, original);
  return self;
}

- (void)addWithNSString:(NSString *)name
                withInt:(jint)index {
  jint slot = OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_hashSlotForWithId_(self, name);
  if (index < (jint) 0xff) {
    *IOSByteArray_GetRef(nil_chk(hashTable_), slot) = (jbyte) (index + 1);
  }
  else {
    *IOSByteArray_GetRef(nil_chk(hashTable_), slot) = 0;
  }
}

- (void)removeWithInt:(jint)index {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(hashTable_))->size_; i++) {
    if (IOSByteArray_Get(hashTable_, i) == index + 1) {
      *IOSByteArray_GetRef(hashTable_, i) = 0;
    }
    else if (IOSByteArray_Get(hashTable_, i) > index + 1) {
      (*IOSByteArray_GetRef(hashTable_, i))--;
    }
  }
}

- (jint)getWithId:(id)name {
  jint slot = OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_hashSlotForWithId_(self, name);
  return (IOSByteArray_Get(nil_chk(hashTable_), slot) & (jint) 0xff) - 1;
}

- (jint)hashSlotForWithId:(id)element {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_hashSlotForWithId_(self, element);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "HashIndexTable", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable:", "HashIndexTable", NULL, 0x1, NULL, NULL },
    { "addWithNSString:withInt:", "add", "V", 0x0, NULL, NULL },
    { "removeWithInt:", "remove", "V", 0x0, NULL, NULL },
    { "getWithId:", "get", "I", 0x0, NULL, NULL },
    { "hashSlotForWithId:", "hashSlotFor", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hashTable_", NULL, 0x12, "[B", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable = { 2, "HashIndexTable", "org.oss.pdfreporter.uses.com.eclipsesource.json", "JsonObject", 0x8, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable;
}

@end

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_init(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *self) {
  NSObject_init(self);
  self->hashTable_ = [IOSByteArray newArrayWithLength:32];
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable, init)
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *create_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable, init)
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *self, OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *original) {
  NSObject_init(self);
  self->hashTable_ = [IOSByteArray newArrayWithLength:32];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *) nil_chk(original))->hashTable_, 0, self->hashTable_, 0, self->hashTable_->size_);
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *original) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable, initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_, original)
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *create_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *original) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable, initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_, original)
}

jint OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable_hashSlotForWithId_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable *self, id element) {
  return ((jint) [nil_chk(element) hash]) & (((IOSByteArray *) nil_chk(self->hashTable_))->size_ - 1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_HashIndexTable)

@implementation OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(val$namesIterator_)) hasNext];
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member *)next {
  NSString *name = [((id<JavaUtilIterator>) nil_chk(val$namesIterator_)) next];
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonValue *value = [((id<JavaUtilIterator>) nil_chk(val$valuesIterator_)) next];
  return new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_Member_initWithNSString_withOrgOssPdfreporterUsesComEclipsesourceJsonJsonValue_(name, value);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0
                    withJavaUtilIterator:(id<JavaUtilIterator>)capture$1 {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1_initWithJavaUtilIterator_withJavaUtilIterator_(self, capture$0, capture$1);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonObject$Member;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "initWithJavaUtilIterator:withJavaUtilIterator:", "", NULL, 0x0, NULL, "(Ljava/util/Iterator<Ljava/lang/String;>;Ljava/util/Iterator<Lorg/oss/pdfreporter/uses/com/eclipsesource/json/JsonValue;>;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$namesIterator_", NULL, 0x1012, "Ljava.util.Iterator;", NULL, "Ljava/util/Iterator<Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "val$valuesIterator_", NULL, 0x1012, "Ljava.util.Iterator;", NULL, "Ljava/util/Iterator<Lorg/oss/pdfreporter/uses/com/eclipsesource/json/JsonValue;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject", "iterator" };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1 = { 2, "", "org.oss.pdfreporter.uses.com.eclipsesource.json", "JsonObject", 0x8008, 4, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Iterator<Lorg/oss/pdfreporter/uses/com/eclipsesource/json/JsonObject$Member;>;" };
  return &_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1;
}

@end

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1_initWithJavaUtilIterator_withJavaUtilIterator_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1 *self, id<JavaUtilIterator> capture$0, id<JavaUtilIterator> capture$1) {
  self->val$namesIterator_ = capture$0;
  self->val$valuesIterator_ = capture$1;
  NSObject_init(self);
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1 *new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1_initWithJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> capture$0, id<JavaUtilIterator> capture$1) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1, initWithJavaUtilIterator_withJavaUtilIterator_, capture$0, capture$1)
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1 *create_OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1_initWithJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> capture$0, id<JavaUtilIterator> capture$1) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1, initWithJavaUtilIterator_withJavaUtilIterator_, capture$0, capture$1)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesComEclipsesourceJsonJsonObject_$1)
