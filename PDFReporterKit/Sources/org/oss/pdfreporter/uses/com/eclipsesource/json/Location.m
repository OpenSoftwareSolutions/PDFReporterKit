//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/com/eclipsesource/json/Location.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/oss/pdfreporter/uses/com/eclipsesource/json/Location.h"

@implementation OrgOssPdfreporterUsesComEclipsesourceJsonLocation

- (instancetype)initWithInt:(jint)offset
                    withInt:(jint)line
                    withInt:(jint)column {
  OrgOssPdfreporterUsesComEclipsesourceJsonLocation_initWithInt_withInt_withInt_(self, offset, line, column);
  return self;
}

- (NSString *)description {
  return JreStrcat("ICI", line_, ':', column_);
}

- (NSUInteger)hash {
  return offset_;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if ([self getClass] != (id) [obj getClass]) {
    return false;
  }
  OrgOssPdfreporterUsesComEclipsesourceJsonLocation *other = (OrgOssPdfreporterUsesComEclipsesourceJsonLocation *) cast_chk(obj, [OrgOssPdfreporterUsesComEclipsesourceJsonLocation class]);
  return offset_ == other->offset_ && column_ == other->column_ && line_ == other->line_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:", "Location", NULL, 0x0, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "offset_", NULL, 0x11, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "line_", NULL, 0x11, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "column_", NULL, 0x11, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesComEclipsesourceJsonLocation = { 2, "Location", "org.oss.pdfreporter.uses.com.eclipsesource.json", NULL, 0x1, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesComEclipsesourceJsonLocation;
}

@end

void OrgOssPdfreporterUsesComEclipsesourceJsonLocation_initWithInt_withInt_withInt_(OrgOssPdfreporterUsesComEclipsesourceJsonLocation *self, jint offset, jint line, jint column) {
  NSObject_init(self);
  self->offset_ = offset;
  self->column_ = column;
  self->line_ = line;
}

OrgOssPdfreporterUsesComEclipsesourceJsonLocation *new_OrgOssPdfreporterUsesComEclipsesourceJsonLocation_initWithInt_withInt_withInt_(jint offset, jint line, jint column) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonLocation, initWithInt_withInt_withInt_, offset, line, column)
}

OrgOssPdfreporterUsesComEclipsesourceJsonLocation *create_OrgOssPdfreporterUsesComEclipsesourceJsonLocation_initWithInt_withInt_withInt_(jint offset, jint line, jint column) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonLocation, initWithInt_withInt_withInt_, offset, line, column)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesComEclipsesourceJsonLocation)
