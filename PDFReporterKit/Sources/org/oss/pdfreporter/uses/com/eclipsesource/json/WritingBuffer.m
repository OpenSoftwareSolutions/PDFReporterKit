//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/com/eclipsesource/json/WritingBuffer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/System.h"
#include "org/oss/pdfreporter/uses/com/eclipsesource/json/WritingBuffer.h"

@interface OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer () {
 @public
  JavaIoWriter *writer_;
  IOSCharArray *buffer_;
  jint fill_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer, writer_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer, buffer_, IOSCharArray *)

@implementation OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)writer {
  OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer_initWithJavaIoWriter_(self, writer);
  return self;
}

- (instancetype)initWithJavaIoWriter:(JavaIoWriter *)writer
                             withInt:(jint)bufferSize {
  OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer_initWithJavaIoWriter_withInt_(self, writer, bufferSize);
  return self;
}

- (void)writeWithInt:(jint)c {
  if (fill_ > ((IOSCharArray *) nil_chk(buffer_))->size_ - 1) {
    [self flush];
  }
  *IOSCharArray_GetRef(buffer_, fill_++) = (jchar) c;
}

- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(jint)off
                   withInt:(jint)len {
  if (fill_ > ((IOSCharArray *) nil_chk(buffer_))->size_ - len) {
    [self flush];
    if (len > buffer_->size_) {
      [((JavaIoWriter *) nil_chk(writer_)) writeWithCharArray:cbuf withInt:off withInt:len];
      return;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cbuf, off, buffer_, fill_, len);
  fill_ += len;
}

- (void)writeWithNSString:(NSString *)str
                  withInt:(jint)off
                  withInt:(jint)len {
  if (fill_ > ((IOSCharArray *) nil_chk(buffer_))->size_ - len) {
    [self flush];
    if (len > buffer_->size_) {
      [((JavaIoWriter *) nil_chk(writer_)) writeWithNSString:str withInt:off withInt:len];
      return;
    }
  }
  [((NSString *) nil_chk(str)) getChars:off sourceEnd:off + len destination:buffer_ destinationBegin:fill_];
  fill_ += len;
}

- (void)flush {
  [((JavaIoWriter *) nil_chk(writer_)) writeWithCharArray:buffer_ withInt:0 withInt:fill_];
  fill_ = 0;
}

- (void)close {
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoWriter:", "WritingBuffer", NULL, 0x0, NULL, NULL },
    { "initWithJavaIoWriter:withInt:", "WritingBuffer", NULL, 0x0, NULL, NULL },
    { "writeWithInt:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeWithCharArray:withInt:withInt:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeWithNSString:withInt:withInt:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", NULL, 0x12, "Ljava.io.Writer;", NULL, NULL, .constantValue.asLong = 0 },
    { "buffer_", NULL, 0x12, "[C", NULL, NULL, .constantValue.asLong = 0 },
    { "fill_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer = { 2, "WritingBuffer", "org.oss.pdfreporter.uses.com.eclipsesource.json", NULL, 0x0, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer;
}

@end

void OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer_initWithJavaIoWriter_(OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer *self, JavaIoWriter *writer) {
  OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer_initWithJavaIoWriter_withInt_(self, writer, 16);
}

OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer *new_OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer_initWithJavaIoWriter_(JavaIoWriter *writer) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer, initWithJavaIoWriter_, writer)
}

OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer *create_OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer_initWithJavaIoWriter_(JavaIoWriter *writer) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer, initWithJavaIoWriter_, writer)
}

void OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer_initWithJavaIoWriter_withInt_(OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer *self, JavaIoWriter *writer, jint bufferSize) {
  JavaIoWriter_init(self);
  self->fill_ = 0;
  self->writer_ = writer;
  self->buffer_ = [IOSCharArray newArrayWithLength:bufferSize];
}

OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer *new_OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer_initWithJavaIoWriter_withInt_(JavaIoWriter *writer, jint bufferSize) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer, initWithJavaIoWriter_withInt_, writer, bufferSize)
}

OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer *create_OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer_initWithJavaIoWriter_withInt_(JavaIoWriter *writer, jint bufferSize) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer, initWithJavaIoWriter_withInt_, writer, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesComEclipsesourceJsonWritingBuffer)
