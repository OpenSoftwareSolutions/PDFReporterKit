//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/com/eclipsesource/json/JsonParser.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "org/oss/pdfreporter/uses/com/eclipsesource/json/JsonHandler.h"
#include "org/oss/pdfreporter/uses/com/eclipsesource/json/JsonParser.h"
#include "org/oss/pdfreporter/uses/com/eclipsesource/json/Location.h"
#include "org/oss/pdfreporter/uses/com/eclipsesource/json/ParseException.h"

@interface OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser () {
 @public
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *handler_;
  JavaIoReader *reader_;
  IOSCharArray *buffer_;
  jint bufferOffset_;
  jint index_;
  jint fill_;
  jint line_;
  jint lineOffset_;
  jint current_;
  JavaLangStringBuilder *captureBuffer_;
  jint captureStart_;
  jint nestingLevel_;
}

- (void)readValue;

- (void)readArray;

- (void)readObject;

- (NSString *)readName;

- (void)readNull;

- (void)readTrue;

- (void)readFalse;

- (void)readRequiredCharWithChar:(jchar)ch;

- (void)readString;

- (NSString *)readStringInternal;

- (void)readEscape;

- (void)readNumber;

- (jboolean)readFraction;

- (jboolean)readExponent;

- (jboolean)readCharWithChar:(jchar)ch;

- (jboolean)readDigit;

- (void)skipWhiteSpace;

- (void)read;

- (void)startCapture;

- (void)pauseCapture;

- (NSString *)endCapture;

- (OrgOssPdfreporterUsesComEclipsesourceJsonParseException *)expectedWithNSString:(NSString *)expected;

- (OrgOssPdfreporterUsesComEclipsesourceJsonParseException *)errorWithNSString:(NSString *)message;

- (jboolean)isWhiteSpace;

- (jboolean)isDigit;

- (jboolean)isHexDigit;

- (jboolean)isEndOfText;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser, handler_, OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser, reader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser, buffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser, captureBuffer_, JavaLangStringBuilder *)

inline jint OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_get_MAX_NESTING_LEVEL();
#define OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_MAX_NESTING_LEVEL 1000
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser, MAX_NESTING_LEVEL, jint)

inline jint OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_get_MIN_BUFFER_SIZE();
#define OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_MIN_BUFFER_SIZE 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser, MIN_BUFFER_SIZE, jint)

inline jint OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_get_DEFAULT_BUFFER_SIZE();
#define OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_DEFAULT_BUFFER_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser, DEFAULT_BUFFER_SIZE, jint)

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readValue(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readArray(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readObject(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static NSString *OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readName(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readNull(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readTrue(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readFalse(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self, jchar ch);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readString(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static NSString *OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readStringInternal(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readEscape(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readNumber(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readFraction(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readExponent(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self, jchar ch);

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readDigit(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_startCapture(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_pauseCapture(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static NSString *OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_endCapture(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static OrgOssPdfreporterUsesComEclipsesourceJsonParseException *OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self, NSString *expected);

__attribute__((unused)) static OrgOssPdfreporterUsesComEclipsesourceJsonParseException *OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_errorWithNSString_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self, NSString *message);

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isWhiteSpace(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isDigit(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isHexDigit(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isEndOfText(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self);

@implementation OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser

- (instancetype)initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler:(OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *)handler {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler_(self, handler);
  return self;
}

- (void)parseWithNSString:(NSString *)string {
  if (string == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"string is null");
  }
  jint bufferSize = JavaLangMath_maxWithInt_withInt_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_MIN_BUFFER_SIZE, JavaLangMath_minWithInt_withInt_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_DEFAULT_BUFFER_SIZE, ((jint) [string length])));
  @try {
    [self parseWithJavaIoReader:new_JavaIoStringReader_initWithNSString_(string) withInt:bufferSize];
  }
  @catch (JavaIoIOException *exception) {
    @throw new_JavaLangRuntimeException_initWithNSException_(exception);
  }
}

- (void)parseWithJavaIoReader:(JavaIoReader *)reader {
  [self parseWithJavaIoReader:reader withInt:OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_DEFAULT_BUFFER_SIZE];
}

- (void)parseWithJavaIoReader:(JavaIoReader *)reader
                      withInt:(jint)buffersize {
  if (reader == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"reader is null");
  }
  if (buffersize <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"buffersize is zero or negative");
  }
  self->reader_ = reader;
  buffer_ = [IOSCharArray newArrayWithLength:buffersize];
  bufferOffset_ = 0;
  index_ = 0;
  fill_ = 0;
  line_ = 1;
  lineOffset_ = 0;
  current_ = 0;
  captureStart_ = -1;
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(self);
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readValue(self);
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(self);
  if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isEndOfText(self)) {
    @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_errorWithNSString_(self, @"Unexpected character");
  }
}

- (void)readValue {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readValue(self);
}

- (void)readArray {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readArray(self);
}

- (void)readObject {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readObject(self);
}

- (NSString *)readName {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readName(self);
}

- (void)readNull {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readNull(self);
}

- (void)readTrue {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readTrue(self);
}

- (void)readFalse {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readFalse(self);
}

- (void)readRequiredCharWithChar:(jchar)ch {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(self, ch);
}

- (void)readString {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readString(self);
}

- (NSString *)readStringInternal {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readStringInternal(self);
}

- (void)readEscape {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readEscape(self);
}

- (void)readNumber {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readNumber(self);
}

- (jboolean)readFraction {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readFraction(self);
}

- (jboolean)readExponent {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readExponent(self);
}

- (jboolean)readCharWithChar:(jchar)ch {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, ch);
}

- (jboolean)readDigit {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readDigit(self);
}

- (void)skipWhiteSpace {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(self);
}

- (void)read {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
}

- (void)startCapture {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_startCapture(self);
}

- (void)pauseCapture {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_pauseCapture(self);
}

- (NSString *)endCapture {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_endCapture(self);
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonLocation *)getLocation {
  jint offset = bufferOffset_ + index_ - 1;
  jint column = offset - lineOffset_ + 1;
  return new_OrgOssPdfreporterUsesComEclipsesourceJsonLocation_initWithInt_withInt_withInt_(offset, line_, column);
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonParseException *)expectedWithNSString:(NSString *)expected {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, expected);
}

- (OrgOssPdfreporterUsesComEclipsesourceJsonParseException *)errorWithNSString:(NSString *)message {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_errorWithNSString_(self, message);
}

- (jboolean)isWhiteSpace {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isWhiteSpace(self);
}

- (jboolean)isDigit {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isDigit(self);
}

- (jboolean)isHexDigit {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isHexDigit(self);
}

- (jboolean)isEndOfText {
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isEndOfText(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler:", "JsonParser", NULL, 0x1, NULL, "(Lorg/oss/pdfreporter/uses/com/eclipsesource/json/JsonHandler<**>;)V" },
    { "parseWithNSString:", "parse", "V", 0x1, NULL, NULL },
    { "parseWithJavaIoReader:", "parse", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "parseWithJavaIoReader:withInt:", "parse", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readValue", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readArray", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readObject", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readName", NULL, "Ljava.lang.String;", 0x2, "Ljava.io.IOException;", NULL },
    { "readNull", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readTrue", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readFalse", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readRequiredCharWithChar:", "readRequiredChar", "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readString", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readStringInternal", NULL, "Ljava.lang.String;", 0x2, "Ljava.io.IOException;", NULL },
    { "readEscape", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readNumber", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "readFraction", NULL, "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "readExponent", NULL, "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "readCharWithChar:", "readChar", "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "readDigit", NULL, "Z", 0x2, "Ljava.io.IOException;", NULL },
    { "skipWhiteSpace", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "read", NULL, "V", 0x2, "Ljava.io.IOException;", NULL },
    { "startCapture", NULL, "V", 0x2, NULL, NULL },
    { "pauseCapture", NULL, "V", 0x2, NULL, NULL },
    { "endCapture", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getLocation", NULL, "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.Location;", 0x0, NULL, NULL },
    { "expectedWithNSString:", "expected", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.ParseException;", 0x2, NULL, NULL },
    { "errorWithNSString:", "error", "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.ParseException;", 0x2, NULL, NULL },
    { "isWhiteSpace", NULL, "Z", 0x2, NULL, NULL },
    { "isDigit", NULL, "Z", 0x2, NULL, NULL },
    { "isHexDigit", NULL, "Z", 0x2, NULL, NULL },
    { "isEndOfText", NULL, "Z", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_NESTING_LEVEL", "MAX_NESTING_LEVEL", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_MAX_NESTING_LEVEL },
    { "MIN_BUFFER_SIZE", "MIN_BUFFER_SIZE", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_MIN_BUFFER_SIZE },
    { "DEFAULT_BUFFER_SIZE", "DEFAULT_BUFFER_SIZE", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_DEFAULT_BUFFER_SIZE },
    { "handler_", NULL, 0x12, "Lorg.oss.pdfreporter.uses.com.eclipsesource.json.JsonHandler;", NULL, "Lorg/oss/pdfreporter/uses/com/eclipsesource/json/JsonHandler<Ljava/lang/Object;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "reader_", NULL, 0x2, "Ljava.io.Reader;", NULL, NULL, .constantValue.asLong = 0 },
    { "buffer_", NULL, 0x2, "[C", NULL, NULL, .constantValue.asLong = 0 },
    { "bufferOffset_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "index_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "fill_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "line_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lineOffset_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "current_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "captureBuffer_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "captureStart_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "nestingLevel_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser = { 2, "JsonParser", "org.oss.pdfreporter.uses.com.eclipsesource.json", NULL, 0x1, 32, methods, 15, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser;
}

@end

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self, OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *handler) {
  NSObject_init(self);
  if (handler == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"handler is null");
  }
  self->handler_ = handler;
  handler->parser_ = self;
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *new_OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *handler) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser, initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler_, handler)
}

OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *create_OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *handler) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser, initWithOrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler_, handler)
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readValue(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  switch (self->current_) {
    case 'n':
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readNull(self);
    break;
    case 't':
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readTrue(self);
    break;
    case 'f':
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readFalse(self);
    break;
    case '"':
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readString(self);
    break;
    case '[':
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readArray(self);
    break;
    case '{':
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readObject(self);
    break;
    case '-':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readNumber(self);
    break;
    default:
    @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, @"value");
  }
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readArray(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  id array = [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *) nil_chk(self->handler_)) startArray];
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
  if (++self->nestingLevel_ > OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_MAX_NESTING_LEVEL) {
    @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_errorWithNSString_(self, @"Nesting too deep");
  }
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(self);
  if (OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, ']')) {
    self->nestingLevel_--;
    [self->handler_ endArrayWithId:array];
    return;
  }
  do {
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(self);
    [self->handler_ startArrayValueWithId:array];
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readValue(self);
    [self->handler_ endArrayValueWithId:array];
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(self);
  }
  while (OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, ','));
  if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, ']')) {
    @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, @"',' or ']'");
  }
  self->nestingLevel_--;
  [self->handler_ endArrayWithId:array];
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readObject(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  id object = [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *) nil_chk(self->handler_)) startObject];
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
  if (++self->nestingLevel_ > OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_MAX_NESTING_LEVEL) {
    @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_errorWithNSString_(self, @"Nesting too deep");
  }
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(self);
  if (OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, '}')) {
    self->nestingLevel_--;
    [self->handler_ endObjectWithId:object];
    return;
  }
  do {
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(self);
    [self->handler_ startObjectNameWithId:object];
    NSString *name = OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readName(self);
    [self->handler_ endObjectNameWithId:object withNSString:name];
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(self);
    if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, ':')) {
      @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, @"':'");
    }
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(self);
    [self->handler_ startObjectValueWithId:object withNSString:name];
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readValue(self);
    [self->handler_ endObjectValueWithId:object withNSString:name];
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(self);
  }
  while (OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, ','));
  if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, '}')) {
    @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, @"',' or '}'");
  }
  self->nestingLevel_--;
  [self->handler_ endObjectWithId:object];
}

NSString *OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readName(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  if (self->current_ != '"') {
    @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, @"name");
  }
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readStringInternal(self);
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readNull(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *) nil_chk(self->handler_)) startNull];
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(self, 'u');
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(self, 'l');
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(self, 'l');
  [self->handler_ endNull];
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readTrue(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *) nil_chk(self->handler_)) startBoolean];
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(self, 'r');
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(self, 'u');
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(self, 'e');
  [self->handler_ endBooleanWithBoolean:true];
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readFalse(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *) nil_chk(self->handler_)) startBoolean];
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(self, 'a');
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(self, 'l');
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(self, 's');
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(self, 'e');
  [self->handler_ endBooleanWithBoolean:false];
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readRequiredCharWithChar_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self, jchar ch) {
  if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, ch)) {
    @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, JreStrcat("CCC", '\'', ch, '\''));
  }
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readString(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *) nil_chk(self->handler_)) startString];
  [self->handler_ endStringWithNSString:OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readStringInternal(self)];
}

NSString *OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readStringInternal(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_startCapture(self);
  while (self->current_ != '"') {
    if (self->current_ == '\\') {
      OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_pauseCapture(self);
      OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readEscape(self);
      OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_startCapture(self);
    }
    else if (self->current_ < (jint) 0x20) {
      @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, @"valid string character");
    }
    else {
      OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
    }
  }
  NSString *string = OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_endCapture(self);
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
  return string;
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readEscape(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
  {
    IOSCharArray *hexChars;
    switch (self->current_) {
      case '"':
      case '/':
      case '\\':
      (void) [((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) appendWithChar:(jchar) self->current_];
      break;
      case 'b':
      (void) [((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) appendWithChar:0x0008];
      break;
      case 'f':
      (void) [((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) appendWithChar:0x000c];
      break;
      case 'n':
      (void) [((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) appendWithChar:0x000a];
      break;
      case 'r':
      (void) [((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) appendWithChar:0x000d];
      break;
      case 't':
      (void) [((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) appendWithChar:0x0009];
      break;
      case 'u':
      hexChars = [IOSCharArray newArrayWithLength:4];
      for (jint i = 0; i < 4; i++) {
        OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
        if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isHexDigit(self)) {
          @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, @"hexadecimal digit");
        }
        *IOSCharArray_GetRef(hexChars, i) = (jchar) self->current_;
      }
      (void) [((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) appendWithChar:(jchar) JavaLangInteger_parseIntWithNSString_withInt_([NSString stringWithCharacters:hexChars], 16)];
      break;
      default:
      @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, @"valid escape sequence");
    }
  }
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readNumber(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  [((OrgOssPdfreporterUsesComEclipsesourceJsonJsonHandler *) nil_chk(self->handler_)) startNumber];
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_startCapture(self);
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, '-');
  jint firstDigit = self->current_;
  if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readDigit(self)) {
    @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, @"digit");
  }
  if (firstDigit != '0') {
    while (OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readDigit(self)) {
    }
  }
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readFraction(self);
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readExponent(self);
  [self->handler_ endNumberWithNSString:OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_endCapture(self)];
}

jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readFraction(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, '.')) {
    return false;
  }
  if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readDigit(self)) {
    @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, @"digit");
  }
  while (OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readDigit(self)) {
  }
  return true;
}

jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readExponent(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, 'e') && !OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, 'E')) {
    return false;
  }
  if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, '+')) {
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(self, '-');
  }
  if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readDigit(self)) {
    @throw OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(self, @"digit");
  }
  while (OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readDigit(self)) {
  }
  return true;
}

jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readCharWithChar_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self, jchar ch) {
  if (self->current_ != ch) {
    return false;
  }
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
  return true;
}

jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_readDigit(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  if (!OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isDigit(self)) {
    return false;
  }
  OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
  return true;
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_skipWhiteSpace(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  while (OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isWhiteSpace(self)) {
    OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(self);
  }
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_read(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  if (self->index_ == self->fill_) {
    if (self->captureStart_ != -1) {
      (void) [((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) appendWithCharArray:self->buffer_ withInt:self->captureStart_ withInt:self->fill_ - self->captureStart_];
      self->captureStart_ = 0;
    }
    self->bufferOffset_ += self->fill_;
    self->fill_ = [((JavaIoReader *) nil_chk(self->reader_)) readWithCharArray:self->buffer_ withInt:0 withInt:((IOSCharArray *) nil_chk(self->buffer_))->size_];
    self->index_ = 0;
    if (self->fill_ == -1) {
      self->current_ = -1;
      self->index_++;
      return;
    }
  }
  if (self->current_ == 0x000a) {
    self->line_++;
    self->lineOffset_ = self->bufferOffset_ + self->index_;
  }
  self->current_ = IOSCharArray_Get(nil_chk(self->buffer_), self->index_++);
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_startCapture(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  if (self->captureBuffer_ == nil) {
    self->captureBuffer_ = new_JavaLangStringBuilder_init();
  }
  self->captureStart_ = self->index_ - 1;
}

void OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_pauseCapture(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  jint end = self->current_ == -1 ? self->index_ : self->index_ - 1;
  (void) [((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) appendWithCharArray:self->buffer_ withInt:self->captureStart_ withInt:end - self->captureStart_];
  self->captureStart_ = -1;
}

NSString *OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_endCapture(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  jint start = self->captureStart_;
  jint end = self->index_ - 1;
  self->captureStart_ = -1;
  if ([((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) length] > 0) {
    (void) [((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) appendWithCharArray:self->buffer_ withInt:start withInt:end - start];
    NSString *captured = [((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) description];
    [((JavaLangStringBuilder *) nil_chk(self->captureBuffer_)) setLengthWithInt:0];
    return captured;
  }
  return [NSString stringWithCharacters:self->buffer_ offset:start length:end - start];
}

OrgOssPdfreporterUsesComEclipsesourceJsonParseException *OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_expectedWithNSString_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self, NSString *expected) {
  if (OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isEndOfText(self)) {
    return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_errorWithNSString_(self, @"Unexpected end of input");
  }
  return OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_errorWithNSString_(self, JreStrcat("$$", @"Expected ", expected));
}

OrgOssPdfreporterUsesComEclipsesourceJsonParseException *OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_errorWithNSString_(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self, NSString *message) {
  return new_OrgOssPdfreporterUsesComEclipsesourceJsonParseException_initWithNSString_withOrgOssPdfreporterUsesComEclipsesourceJsonLocation_(message, [self getLocation]);
}

jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isWhiteSpace(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  return self->current_ == ' ' || self->current_ == 0x0009 || self->current_ == 0x000a || self->current_ == 0x000d;
}

jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isDigit(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  return self->current_ >= '0' && self->current_ <= '9';
}

jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isHexDigit(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  return (self->current_ >= '0' && self->current_ <= '9') || (self->current_ >= 'a' && self->current_ <= 'f') || (self->current_ >= 'A' && self->current_ <= 'F');
}

jboolean OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser_isEndOfText(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser *self) {
  return self->current_ == -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesComEclipsesourceJsonJsonParser)
