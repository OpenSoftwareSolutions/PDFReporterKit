//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/interpreter/Evaluator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigDecimal.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/FunctionArgumentFactory.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/FunctionElement.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/FunctionElementArgument.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/NullArgument.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/VariableArgument.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/interpreter/Evaluator.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/interpreter/Expression.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/interpreter/ExpressionElement.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/interpreter/Variable.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/parser/ExtendedSHuntingYardParser.h"

@interface OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator () {
 @public
  id<JavaUtilMap> boundVariables_;
  OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorParserExtendedSHuntingYardParser *parser_;
  OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterExpression *expression_;
}

- (id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument>)replaceVariableWithId:(id)value;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator, boundVariables_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator, parser_, OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorParserExtendedSHuntingYardParser *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator, expression_, OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterExpression *)

inline JavaUtilLoggingLogger *OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_get_logger();
inline JavaUtilLoggingLogger *OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_set_logger(JavaUtilLoggingLogger *value);
static JavaUtilLoggingLogger *OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_logger;
J2OBJC_STATIC_FIELD_OBJ(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument> OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_replaceVariableWithId_(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator *self, id value);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator)

@implementation OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator

- (instancetype)initWithNSString:(NSString *)evalExpression {
  OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_initWithNSString_(self, evalExpression);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)bindVariableWithOrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterVariable:(id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterVariable>)variable {
  (void) [((id<JavaUtilMap>) nil_chk(boundVariables_)) putWithId:[((id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterVariable>) nil_chk(variable)) getName] withId:variable];
}

- (void)addFunctionWithOrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElement:(id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElement>)function {
  [((OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorParserExtendedSHuntingYardParser *) nil_chk(parser_)) addFunctionWithOrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElement:function];
}

- (void)addFunctionsWithJavaUtilCollection:(id<JavaUtilCollection>)functions {
  [((OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorParserExtendedSHuntingYardParser *) nil_chk(parser_)) addFunctionsWithJavaUtilCollection:functions];
}

- (void)parseWithNSString:(NSString *)evalExpression {
  expression_ = [((OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorParserExtendedSHuntingYardParser *) nil_chk(parser_)) infixToRPNWithNSString:evalExpression];
}

- (id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument>)evaluate {
  if (expression_ == nil || [expression_ isEmpty]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"There are no ExpressionElements in the List");
  }
  JavaUtilLinkedList *stack = new_JavaUtilLinkedList_init();
  for (id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterExpressionElement> __strong element in nil_chk(expression_)) {
    if ([OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument_class_() isInstance:element]) {
      [stack pushWithId:element];
    }
    else if ([OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElement_class_() isInstance:element]) {
      id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElement> function = (id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElement>) cast_check(element, OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElement_class_());
      jint numArgs = [((id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElement>) nil_chk(function)) getNumberOfParameters];
      IOSObjectArray *args = [IOSObjectArray newArrayWithLength:numArgs type:OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument_class_()];
      for (jint i = 0; i < numArgs; i++) {
        if ([stack isEmpty]) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$I$", @"The function: ", [function getName], @" expects ", numArgs, @" parameters"));
        }
        id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterExpressionElement> arg = [stack pop];
        if ([OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument_class_() isInstance:arg]) {
          jint argIndex = numArgs - 1 - i;
          (void) IOSObjectArray_Set(args, argIndex, (id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument>) cast_check(arg, OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument_class_()));
          if ([arg isKindOfClass:[OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorVariableArgument class]]) {
            OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorVariableArgument *variable = (OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorVariableArgument *) cast_chk(arg, [OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorVariableArgument class]);
            id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterVariable> boundVariable = [((id<JavaUtilMap>) nil_chk(boundVariables_)) getWithId:[((OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorVariableArgument *) nil_chk(variable)) getName]];
            if (boundVariable == nil) {
              @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(@"Cannot evaluate unbound variable: %s", [IOSObjectArray newArrayWithObjects:(id[]){ [variable getName] } count:1 type:NSObject_class_()]));
            }
            (void) IOSObjectArray_Set(args, argIndex, OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_replaceVariableWithId_(self, [boundVariable getValue]));
          }
        }
        else {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"FunctionElementArgument expected and not ", [[((id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterExpressionElement>) nil_chk(arg)) getClass] getName]));
        }
      }
      id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument> result = [function executeWithOrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgumentArray:args];
      if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
        NSString *message = JreStrcat("$@C@$$C", @"Evaluated: ", [((id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument>) nil_chk(result)) getValue], '[', [result getType], @"] ", [function getName], '(');
        for (jint i = 0; i < numArgs; i++) {
          (void) JreStrAppendStrong(&message, "@C@C", [((id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument>) nil_chk(IOSObjectArray_Get(args, i))) getValue], '[', [((id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument>) nil_chk(IOSObjectArray_Get(args, i))) getType], ']');
          if (i + 1 < numArgs) {
            (void) JreStrAppendStrong(&message, "$", @",");
          }
        }
        (void) JreStrAppendStrong(&message, "$", @")");
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_logger)) finestWithNSString:message];
      }
      [stack pushWithId:result];
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"FunctionElementArgument or FunctionElement expected and not ", [[((id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterExpressionElement>) nil_chk(element)) getClass] getName]));
    }
  }
  if ([stack size] != 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Exact one final result expected and not ", [stack size]));
  }
  id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterExpressionElement> element = [stack pop];
  if ([OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument_class_() isInstance:element]) {
    return (id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument>) cast_check(element, OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument_class_());
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"FunctionArgument expected and not ", [[((id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterExpressionElement>) nil_chk(element)) getClass] getName]));
  }
}

- (id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument>)replaceVariableWithId:(id)value {
  return OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_replaceVariableWithId_(self, value);
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator class]) {
    OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "Evaluator", NULL, 0x1, NULL, NULL },
    { "init", "Evaluator", NULL, 0x1, NULL, NULL },
    { "bindVariableWithOrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterVariable:", "bindVariable", "V", 0x1, NULL, NULL },
    { "addFunctionWithOrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElement:", "addFunction", "V", 0x1, NULL, NULL },
    { "addFunctionsWithJavaUtilCollection:", "addFunctions", "V", 0x1, NULL, "(Ljava/util/Collection<Lorg/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/FunctionElement;>;)V" },
    { "parseWithNSString:", "parse", "V", 0x1, NULL, NULL },
    { "evaluate", NULL, "Lorg.oss.pdfreporter.uses.org.oss.jshuntingyard.evaluator.FunctionElementArgument;", 0x1, NULL, "()Lorg/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/FunctionElementArgument<*>;" },
    { "replaceVariableWithId:", "replaceVariable", "Lorg.oss.pdfreporter.uses.org.oss.jshuntingyard.evaluator.FunctionElementArgument;", 0x2, NULL, "(Ljava/lang/Object;)Lorg/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/FunctionElementArgument<*>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0xa, "Ljava.util.logging.Logger;", &OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_logger, NULL, .constantValue.asLong = 0 },
    { "boundVariables_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/uses/org/oss/jshuntingyard/evaluator/interpreter/Variable;>;", .constantValue.asLong = 0 },
    { "parser_", NULL, 0x12, "Lorg.oss.pdfreporter.uses.org.oss.jshuntingyard.evaluator.parser.ExtendedSHuntingYardParser;", NULL, NULL, .constantValue.asLong = 0 },
    { "expression_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.org.oss.jshuntingyard.evaluator.interpreter.Expression;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator = { 2, "Evaluator", "org.oss.pdfreporter.uses.org.oss.jshuntingyard.evaluator.interpreter", NULL, 0x1, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator;
}

@end

void OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_initWithNSString_(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator *self, NSString *evalExpression) {
  NSObject_init(self);
  self->boundVariables_ = new_JavaUtilHashMap_init();
  self->parser_ = new_OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorParserExtendedSHuntingYardParser_init();
  self->expression_ = evalExpression == nil ? nil : [self->parser_ infixToRPNWithNSString:evalExpression];
}

OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator *new_OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_initWithNSString_(NSString *evalExpression) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator, initWithNSString_, evalExpression)
}

OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator *create_OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_initWithNSString_(NSString *evalExpression) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator, initWithNSString_, evalExpression)
}

void OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_init(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator *self) {
  OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_initWithNSString_(self, nil);
}

OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator *new_OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator, init)
}

OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator *create_OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator, init)
}

id<OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionElementArgument> OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator_replaceVariableWithId_(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator *self, id value) {
  if ([value isKindOfClass:[JavaLangInteger class]]) {
    return OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionArgumentFactory_createObjectWithJavaLangInteger_((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]));
  }
  if ([value isKindOfClass:[JavaLangLong class]]) {
    return OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionArgumentFactory_createObjectWithJavaLangLong_((JavaLangLong *) cast_chk(value, [JavaLangLong class]));
  }
  if ([value isKindOfClass:[JavaLangFloat class]]) {
    return OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionArgumentFactory_createObjectWithJavaLangFloat_((JavaLangFloat *) cast_chk(value, [JavaLangFloat class]));
  }
  if ([value isKindOfClass:[JavaLangDouble class]]) {
    return OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionArgumentFactory_createObjectWithJavaLangDouble_((JavaLangDouble *) cast_chk(value, [JavaLangDouble class]));
  }
  if ([value isKindOfClass:[JavaMathBigDecimal class]]) {
    return OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionArgumentFactory_createObjectWithJavaMathBigDecimal_((JavaMathBigDecimal *) cast_chk(value, [JavaMathBigDecimal class]));
  }
  if ([value isKindOfClass:[JavaUtilDate class]]) {
    return OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionArgumentFactory_createObjectWithJavaUtilDate_((JavaUtilDate *) cast_chk(value, [JavaUtilDate class]));
  }
  if ([value isKindOfClass:[NSString class]]) {
    return OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionArgumentFactory_createStringWithNSString_((NSString *) cast_chk(value, [NSString class]));
  }
  if ([value isKindOfClass:[JavaLangBoolean class]]) {
    return OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionArgumentFactory_createObjectWithJavaLangBoolean_((JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]));
  }
  if ([value isKindOfClass:[NSObject class]]) {
    return OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorFunctionArgumentFactory_createObjectWithId_(value);
  }
  return new_OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorNullArgument_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesOrgOssJshuntingyardEvaluatorInterpreterEvaluator)
