//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/oss/jshuntingyard/lexer/ExpressionTokenizer.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/lexer/ExpressionToken.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/lexer/ExpressionTokenizer.h"
#include "org/oss/pdfreporter/uses/org/oss/jshuntingyard/lexer/TokenType.h"

@interface OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer ()

- (instancetype)init;

+ (jboolean)hasNumberOperatorAmbiguityWithOrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType:(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType *)matchingType
                                                                        withJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher;

+ (NSString *)stripNonQuotedWhiteSpacesWithNSString:(NSString *)text;

@end

__attribute__((unused)) static void OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_init(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer *self);

__attribute__((unused)) static OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer *new_OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer *create_OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_init();

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_hasNumberOperatorAmbiguityWithOrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType_withJavaUtilRegexMatcher_(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType *matchingType, JavaUtilRegexMatcher *matcher);

__attribute__((unused)) static NSString *OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_stripNonQuotedWhiteSpacesWithNSString_(NSString *text);

@implementation OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilList>)tokenizeWithNSString:(NSString *)source {
  return OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_tokenizeWithNSString_(source);
}

+ (jboolean)hasNumberOperatorAmbiguityWithOrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType:(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType *)matchingType
                                                                        withJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher {
  return OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_hasNumberOperatorAmbiguityWithOrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType_withJavaUtilRegexMatcher_(matchingType, matcher);
}

+ (NSString *)stripNonQuotedWhiteSpacesWithNSString:(NSString *)text {
  return OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_stripNonQuotedWhiteSpacesWithNSString_(text);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ExpressionTokenizer", NULL, 0x2, NULL, NULL },
    { "tokenizeWithNSString:", "tokenize", "Ljava.util.List;", 0x9, NULL, "(Ljava/lang/String;)Ljava/util/List<Lorg/oss/pdfreporter/uses/org/oss/jshuntingyard/lexer/ExpressionToken;>;" },
    { "hasNumberOperatorAmbiguityWithOrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType:withJavaUtilRegexMatcher:", "hasNumberOperatorAmbiguity", "Z", 0xa, NULL, NULL },
    { "stripNonQuotedWhiteSpacesWithNSString:", "stripNonQuotedWhiteSpaces", "Ljava.lang.String;", 0xa, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer = { 2, "ExpressionTokenizer", "org.oss.pdfreporter.uses.org.oss.jshuntingyard.lexer", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer;
}

@end

void OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_init(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer *self) {
  NSObject_init(self);
}

OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer *new_OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer, init)
}

OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer *create_OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer, init)
}

id<JavaUtilList> OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_tokenizeWithNSString_(NSString *source) {
  OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_initialize();
  jboolean isLastTokenOperator = false;
  jboolean isFirstToken = true;
  source = OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_stripNonQuotedWhiteSpacesWithNSString_(source);
  id<JavaUtilList> tokens = new_JavaUtilArrayList_init();
  jint pos = 0;
  jint end = ((jint) [((NSString *) nil_chk(source)) length]);
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_(@"dummy"))) matcherWithJavaLangCharSequence:source];
  (void) [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexMatcher *) nil_chk(m)) useTransparentBoundsWithBoolean:true])) useAnchoringBoundsWithBoolean:false];
  while (pos < end) {
    (void) [m regionWithInt:pos withInt:end];
    {
      IOSObjectArray *a__ = OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType_values();
      OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType *tokenType = *b__++;
        if ([((JavaUtilRegexMatcher *) nil_chk([m usePatternWithJavaUtilRegexPattern:[((OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType *) nil_chk(tokenType)) pattern]])) lookingAt]) {
          if (OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_hasNumberOperatorAmbiguityWithOrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType_withJavaUtilRegexMatcher_(tokenType, m) && !isFirstToken && !isLastTokenOperator) {
            tokenType = JreLoadEnum(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType, OPERATOR);
          }
          else {
            [((JavaUtilRegexMatcher *) nil_chk([m usePatternWithJavaUtilRegexPattern:[tokenType pattern]])) lookingAt];
          }
          [tokens addWithId:new_OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionToken_initWithOrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType_withInt_withInt_withNSString_(tokenType, [m start], [m end], source)];
          pos = [m end] - 1;
          isFirstToken = (tokenType == JreLoadEnum(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType, OPENBRACE) || tokenType == JreLoadEnum(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType, COMMA));
          isLastTokenOperator = (tokenType == JreLoadEnum(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType, OPERATOR));
          break;
        }
      }
    }
    pos++;
  }
  return tokens;
}

jboolean OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_hasNumberOperatorAmbiguityWithOrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType_withJavaUtilRegexMatcher_(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType *matchingType, JavaUtilRegexMatcher *matcher) {
  OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_initialize();
  if (matchingType == JreLoadEnum(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType, DOUBLENUMBER) || matchingType == JreLoadEnum(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType, FLOATNUMBER) || matchingType == JreLoadEnum(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType, INTEGERNUMBER) || matchingType == JreLoadEnum(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType, INTEGERNUMBER)) {
    return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexMatcher *) nil_chk(matcher)) usePatternWithJavaUtilRegexPattern:[((OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType *) nil_chk(JreLoadEnum(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerTokenType, OPERATOR))) pattern]])) lookingAt];
  }
  return false;
}

NSString *OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_stripNonQuotedWhiteSpacesWithNSString_(NSString *text) {
  OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer_initialize();
  JavaLangStringBuffer *out = new_JavaLangStringBuffer_init();
  jboolean insideQuoetes = false;
  jchar quoteChar = '"';
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(text)) length]); i++) {
    jchar ch = [text charAtWithInt:i];
    if (ch == ' ' && !insideQuoetes) {
      continue;
    }
    if (insideQuoetes) {
      if (ch == quoteChar) {
        insideQuoetes = false;
      }
    }
    else if (ch == '\'' || ch == '"') {
      insideQuoetes = true;
      quoteChar = ch;
    }
    (void) [out appendWithChar:ch];
  }
  return [out description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesOrgOssJshuntingyardLexerExpressionTokenizer)
