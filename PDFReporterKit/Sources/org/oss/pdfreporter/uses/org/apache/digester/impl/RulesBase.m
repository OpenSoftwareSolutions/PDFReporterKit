//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/digester/impl/RulesBase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/RulesBase.h"

@interface OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase ()

- (id<JavaUtilList>)lookupWithNSString:(NSString *)namespaceURI
                          withNSString:(NSString *)pattern;

@end

__attribute__((unused)) static id<JavaUtilList> OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase_lookupWithNSString_withNSString_(OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase *self, NSString *namespaceURI, NSString *pattern);

@implementation OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase

- (id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)getDigester {
  return digester_;
}

- (void)setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:(id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)digester {
  self->digester_ = digester;
  for (id<OrgOssPdfreporterUsesOrgApacheDigesterIRule> __strong rule in nil_chk(rules_)) {
    [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:digester];
  }
}

- (NSString *)getNamespaceURI {
  return (self->namespaceURI_);
}

- (void)setNamespaceURIWithNSString:(NSString *)namespaceURI {
  self->namespaceURI_ = namespaceURI;
}

- (void)addWithNSString:(NSString *)pattern
withOrgOssPdfreporterUsesOrgApacheDigesterIRule:(id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>)rule {
  jint patternLength = ((jint) [((NSString *) nil_chk(pattern)) length]);
  if (patternLength > 1 && [pattern hasSuffix:@"/"]) {
    pattern = [pattern substring:0 endIndex:patternLength - 1];
  }
  id<JavaUtilList> list = [((JavaUtilHashMap *) nil_chk(cache_)) getWithId:pattern];
  if (list == nil) {
    list = new_JavaUtilArrayList_init();
    (void) [((JavaUtilHashMap *) nil_chk(cache_)) putWithId:pattern withId:list];
  }
  [list addWithId:rule];
  [((JavaUtilArrayList *) nil_chk(rules_)) addWithId:rule];
  if (self->digester_ != nil) {
    [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:self->digester_];
  }
  if (self->namespaceURI_ != nil) {
    [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) setNamespaceURIWithNSString:self->namespaceURI_];
  }
}

- (void)clear {
  [((JavaUtilHashMap *) nil_chk(cache_)) clear];
  [((JavaUtilArrayList *) nil_chk(rules_)) clear];
}

- (id<JavaUtilList>)matchWithNSString:(NSString *)pattern {
  return ([self matchWithNSString:nil withNSString:pattern]);
}

- (id<JavaUtilList>)matchWithNSString:(NSString *)namespaceURI
                         withNSString:(NSString *)pattern {
  id<JavaUtilList> rulesList = OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase_lookupWithNSString_withNSString_(self, namespaceURI, pattern);
  if ((rulesList == nil) || ([((id<JavaUtilList>) nil_chk(rulesList)) size] < 1)) {
    NSString *longKey = @"";
    for (NSString * __strong key in nil_chk([((JavaUtilHashMap *) nil_chk(cache_)) keySet])) {
      if ([((NSString *) nil_chk(key)) hasPrefix:@"*/"]) {
        if ([((NSString *) nil_chk(pattern)) isEqual:[key substring:2]] || [pattern hasSuffix:[key substring:1]]) {
          if (((jint) [key length]) > ((jint) [longKey length])) {
            rulesList = OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase_lookupWithNSString_withNSString_(self, namespaceURI, key);
            longKey = key;
          }
        }
      }
    }
  }
  if (rulesList == nil) {
    rulesList = new_JavaUtilArrayList_init();
  }
  return (rulesList);
}

- (id<JavaUtilList>)rules {
  return (self->rules_);
}

- (id<JavaUtilList>)lookupWithNSString:(NSString *)namespaceURI
                          withNSString:(NSString *)pattern {
  return OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase_lookupWithNSString_withNSString_(self, namespaceURI, pattern);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSObjectArray *)__annotations_matchWithNSString_ {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getDigester", NULL, "Lorg.oss.pdfreporter.uses.org.apache.digester.IDigester;", 0x1, NULL, NULL },
    { "setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:", "setDigester", "V", 0x1, NULL, NULL },
    { "getNamespaceURI", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setNamespaceURIWithNSString:", "setNamespaceURI", "V", 0x1, NULL, NULL },
    { "addWithNSString:withOrgOssPdfreporterUsesOrgApacheDigesterIRule:", "add", "V", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "matchWithNSString:", "match", "Ljava.util.List;", 0x1, NULL, "(Ljava/lang/String;)Ljava/util/List<Lorg/oss/pdfreporter/uses/org/apache/digester/IRule;>;" },
    { "matchWithNSString:withNSString:", "match", "Ljava.util.List;", 0x1, NULL, "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List<Lorg/oss/pdfreporter/uses/org/apache/digester/IRule;>;" },
    { "rules", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/uses/org/apache/digester/IRule;>;" },
    { "lookupWithNSString:withNSString:", "lookup", "Ljava.util.List;", 0x2, NULL, "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List<Lorg/oss/pdfreporter/uses/org/apache/digester/IRule;>;" },
    { "init", "RulesBase", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cache_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Ljava/util/List<Lorg/oss/pdfreporter/uses/org/apache/digester/IRule;>;>;", .constantValue.asLong = 0 },
    { "digester_", NULL, 0x4, "Lorg.oss.pdfreporter.uses.org.apache.digester.IDigester;", NULL, NULL, .constantValue.asLong = 0 },
    { "namespaceURI_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "rules_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lorg/oss/pdfreporter/uses/org/apache/digester/IRule;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase = { 2, "RulesBase", "org.oss.pdfreporter.uses.org.apache.digester.impl", NULL, 0x1, 11, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase;
}

@end

id<JavaUtilList> OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase_lookupWithNSString_withNSString_(OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase *self, NSString *namespaceURI, NSString *pattern) {
  id<JavaUtilList> list = [((JavaUtilHashMap *) nil_chk(self->cache_)) getWithId:pattern];
  if (list == nil) {
    return (nil);
  }
  if ((namespaceURI == nil) || (((jint) [((NSString *) nil_chk(namespaceURI)) length]) == 0)) {
    return (list);
  }
  JavaUtilArrayList *results = new_JavaUtilArrayList_init();
  for (id<OrgOssPdfreporterUsesOrgApacheDigesterIRule> __strong item in list) {
    if (([((NSString *) nil_chk(namespaceURI)) isEqual:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(item)) getNamespaceURI]]) || ([item getNamespaceURI] == nil)) {
      [results addWithId:item];
    }
  }
  return (results);
}

void OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase_init(OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase *self) {
  NSObject_init(self);
  self->cache_ = new_JavaUtilHashMap_init();
  self->digester_ = nil;
  self->namespaceURI_ = nil;
  self->rules_ = new_JavaUtilArrayList_init();
}

OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase *new_OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase, init)
}

OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase *create_OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase)
