//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/digester/impl/CallMethodRule.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/beanutils/MethodUtils.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/CallMethodRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/Rule.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"
#include "org/xml/sax/SAXException.h"

@interface OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule () {
 @public
  IOSObjectArray *paramClassNames_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, paramClassNames_, IOSObjectArray *)

inline JavaUtilLoggingLogger *OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, logger, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule)

@implementation OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule

- (instancetype)initWithInt:(jint)targetOffset
               withNSString:(NSString *)methodName
                    withInt:(jint)paramCount {
  OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_(self, targetOffset, methodName, paramCount);
  return self;
}

- (instancetype)initWithInt:(jint)targetOffset
               withNSString:(NSString *)methodName
                    withInt:(jint)paramCount
          withNSStringArray:(IOSObjectArray *)paramTypes {
  OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_withNSStringArray_(self, targetOffset, methodName, paramCount, paramTypes);
  return self;
}

- (instancetype)initWithInt:(jint)targetOffset
               withNSString:(NSString *)methodName
                    withInt:(jint)paramCount
          withIOSClassArray:(IOSObjectArray *)paramTypes {
  OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_withIOSClassArray_(self, targetOffset, methodName, paramCount, paramTypes);
  return self;
}

- (instancetype)initWithInt:(jint)targetOffset
               withNSString:(NSString *)methodName {
  OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_(self, targetOffset, methodName);
  return self;
}

- (instancetype)initWithNSString:(NSString *)methodName
                         withInt:(jint)paramCount {
  OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_withInt_(self, methodName, paramCount);
  return self;
}

- (instancetype)initWithNSString:(NSString *)methodName
                         withInt:(jint)paramCount
               withIOSClassArray:(IOSObjectArray *)paramTypes {
  OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_withInt_withIOSClassArray_(self, methodName, paramCount, paramTypes);
  return self;
}

- (instancetype)initWithNSString:(NSString *)methodName {
  OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_(self, methodName);
  return self;
}

- (void)beginWithNSString:(NSString *)namespace_
             withNSString:(NSString *)name
withOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)attributes {
  if (paramCount_ > 0) {
    IOSObjectArray *parameters = [IOSObjectArray newArrayWithLength:paramCount_ type:NSObject_class_()];
    for (jint i = 0; i < parameters->size_; i++) {
      (void) IOSObjectArray_Set(parameters, i, nil);
    }
    [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) pushParamsWithId:parameters];
  }
}

- (void)endWithNSString:(NSString *)namespace_
           withNSString:(NSString *)name {
  IOSObjectArray *parameters = nil;
  if (paramCount_ > 0) {
    parameters = (IOSObjectArray *) cast_check([((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) popParams], IOSClass_arrayType(NSObject_class_(), 1));
    if (paramCount_ == 1 && IOSObjectArray_Get(nil_chk(parameters), 0) == nil) {
      return;
    }
  }
  else if (paramTypes_ != nil && paramTypes_->size_ != 0) {
    if (bodyText_ == nil) {
      return;
    }
    parameters = [IOSObjectArray newArrayWithLength:1 type:NSObject_class_()];
    (void) IOSObjectArray_Set(parameters, 0, bodyText_);
    if (paramTypes_->size_ == 0) {
      paramTypes_ = [IOSObjectArray newArrayWithLength:1 type:IOSClass_class_()];
      (void) IOSObjectArray_Set(paramTypes_, 0, NSString_class_());
    }
  }
  else {
  }
  IOSObjectArray *paramValues = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(paramTypes_))->size_ type:NSObject_class_()];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(paramTypes_))->size_; i++) {
    if (IOSObjectArray_Get(nil_chk(parameters), i) == nil || ([IOSObjectArray_Get(parameters, i) isKindOfClass:[NSString class]] && ![NSString_class_() isAssignableFrom:IOSObjectArray_Get(paramTypes_, i)])) {
    }
    else {
      (void) IOSObjectArray_Set(paramValues, i, IOSObjectArray_Get(parameters, i));
    }
  }
  id target;
  if (targetOffset_ >= 0) {
    target = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:targetOffset_];
  }
  else {
    target = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[digester_ getCount] + targetOffset_];
  }
  if (target == nil) {
    JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
    (void) [sb appendWithNSString:@"[CallMethodRule]{"];
    (void) [sb appendWithNSString:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getMatch]];
    (void) [sb appendWithNSString:@"} Call target is null ("];
    (void) [sb appendWithNSString:@"targetOffset="];
    (void) [sb appendWithInt:targetOffset_];
    (void) [sb appendWithNSString:@",stackdepth="];
    (void) [sb appendWithInt:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getCount]];
    (void) [sb appendWithNSString:@")"];
    @throw new_OrgXmlSaxSAXException_initWithNSString_([sb description]);
  }
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithNSString_(@"[CallMethodRule]{");
    (void) [sb appendWithNSString:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getMatch]];
    (void) [sb appendWithNSString:@"} Call "];
    (void) [sb appendWithNSString:[[target getClass] getName]];
    (void) [sb appendWithNSString:@"."];
    (void) [sb appendWithNSString:methodName_];
    (void) [sb appendWithNSString:@"("];
    for (jint i = 0; i < paramValues->size_; i++) {
      if (i > 0) {
        (void) [sb appendWithNSString:@","];
      }
      if (IOSObjectArray_Get(paramValues, i) == nil) {
        (void) [sb appendWithNSString:@"null"];
      }
      else {
        (void) [sb appendWithNSString:[nil_chk(IOSObjectArray_Get(paramValues, i)) description]];
      }
      (void) [sb appendWithNSString:@"/"];
      if (IOSObjectArray_Get(nil_chk(paramTypes_), i) == nil) {
        (void) [sb appendWithNSString:@"null"];
      }
      else {
        (void) [sb appendWithNSString:[((IOSClass *) nil_chk(IOSObjectArray_Get(paramTypes_, i))) getName]];
      }
    }
    (void) [sb appendWithNSString:@")"];
    [OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_logger finestWithNSString:[sb description]];
  }
  id result = nil;
  if (useExactMatch_) {
    result = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_invokeExactMethodWithId_withNSString_withNSObjectArray_withIOSClassArray_(target, methodName_, paramValues, paramTypes_);
  }
  else {
    result = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_invokeMethodWithId_withNSString_withNSObjectArray_withIOSClassArray_(target, methodName_, paramValues, paramTypes_);
  }
}

- (void)bodyWithNSString:(NSString *)namespace_
            withNSString:(NSString *)name
            withNSString:(NSString *)bodyText {
  if (paramCount_ == 0) {
    self->bodyText_ = [((NSString *) nil_chk(bodyText)) trim];
  }
}

- (void)finish {
  bodyText_ = nil;
}

- (NSString *)description {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithNSString_(@"CallMethodRule[");
  (void) [sb appendWithNSString:@"methodName="];
  (void) [sb appendWithNSString:methodName_];
  (void) [sb appendWithNSString:@", paramCount="];
  (void) [sb appendWithInt:paramCount_];
  (void) [sb appendWithNSString:@", paramTypes={"];
  if (paramTypes_ != nil) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(paramTypes_))->size_; i++) {
      if (i > 0) {
        (void) [sb appendWithNSString:@", "];
      }
      (void) [sb appendWithNSString:[((IOSClass *) nil_chk(IOSObjectArray_Get(nil_chk(paramTypes_), i))) getName]];
    }
  }
  (void) [sb appendWithNSString:@"}"];
  (void) [sb appendWithNSString:@"]"];
  return ([sb description]);
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule class]) {
    OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withNSString:withInt:", "CallMethodRule", NULL, 0x1, NULL, NULL },
    { "initWithInt:withNSString:withInt:withNSStringArray:", "CallMethodRule", NULL, 0x1, NULL, NULL },
    { "initWithInt:withNSString:withInt:withIOSClassArray:", "CallMethodRule", NULL, 0x1, NULL, NULL },
    { "initWithInt:withNSString:", "CallMethodRule", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withInt:", "CallMethodRule", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withInt:withIOSClassArray:", "CallMethodRule", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "CallMethodRule", NULL, 0x1, NULL, NULL },
    { "beginWithNSString:withNSString:withOrgOssPdfreporterXmlParsersIAttributes:", "begin", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "endWithNSString:withNSString:", "end", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "bodyWithNSString:withNSString:withNSString:", "body", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "finish", NULL, "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_logger, NULL, .constantValue.asLong = 0 },
    { "bodyText_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "targetOffset_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "methodName_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "paramCount_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "paramTypes_", NULL, 0x4, "[Ljava.lang.Class;", NULL, "[Ljava/lang/Class<*>;", .constantValue.asLong = 0 },
    { "paramClassNames_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "useExactMatch_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule = { 2, "CallMethodRule", "org.oss.pdfreporter.uses.org.apache.digester.impl", NULL, 0x1, 12, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule;
}

@end

void OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *self, jint targetOffset, NSString *methodName, jint paramCount) {
  OrgOssPdfreporterUsesOrgApacheDigesterImplRule_init(self);
  self->bodyText_ = nil;
  self->targetOffset_ = 0;
  self->methodName_ = nil;
  self->paramCount_ = 0;
  self->paramTypes_ = nil;
  self->paramClassNames_ = nil;
  self->useExactMatch_ = false;
  self->targetOffset_ = targetOffset;
  self->methodName_ = methodName;
  self->paramCount_ = paramCount;
  if (paramCount == 0) {
    self->paramTypes_ = [IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()];
  }
  else {
    self->paramTypes_ = [IOSObjectArray newArrayWithLength:paramCount type:IOSClass_class_()];
    for (jint i = 0; i < self->paramTypes_->size_; i++) {
      (void) IOSObjectArray_Set(self->paramTypes_, i, NSString_class_());
    }
  }
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *new_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_(jint targetOffset, NSString *methodName, jint paramCount) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithInt_withNSString_withInt_, targetOffset, methodName, paramCount)
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *create_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_(jint targetOffset, NSString *methodName, jint paramCount) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithInt_withNSString_withInt_, targetOffset, methodName, paramCount)
}

void OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_withNSStringArray_(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *self, jint targetOffset, NSString *methodName, jint paramCount, IOSObjectArray *paramTypes) {
  OrgOssPdfreporterUsesOrgApacheDigesterImplRule_init(self);
  self->bodyText_ = nil;
  self->targetOffset_ = 0;
  self->methodName_ = nil;
  self->paramCount_ = 0;
  self->paramTypes_ = nil;
  self->paramClassNames_ = nil;
  self->useExactMatch_ = false;
  self->targetOffset_ = targetOffset;
  self->methodName_ = methodName;
  self->paramCount_ = paramCount;
  if (paramTypes == nil) {
    self->paramTypes_ = [IOSObjectArray newArrayWithLength:paramCount type:IOSClass_class_()];
    for (jint i = 0; i < self->paramTypes_->size_; i++) {
      (void) IOSObjectArray_Set(self->paramTypes_, i, NSString_class_());
    }
  }
  else {
    self->paramClassNames_ = [IOSObjectArray newArrayWithLength:paramTypes->size_ type:NSString_class_()];
    for (jint i = 0; i < self->paramClassNames_->size_; i++) {
      (void) IOSObjectArray_Set(self->paramClassNames_, i, IOSObjectArray_Get(paramTypes, i));
    }
  }
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *new_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_withNSStringArray_(jint targetOffset, NSString *methodName, jint paramCount, IOSObjectArray *paramTypes) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithInt_withNSString_withInt_withNSStringArray_, targetOffset, methodName, paramCount, paramTypes)
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *create_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_withNSStringArray_(jint targetOffset, NSString *methodName, jint paramCount, IOSObjectArray *paramTypes) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithInt_withNSString_withInt_withNSStringArray_, targetOffset, methodName, paramCount, paramTypes)
}

void OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_withIOSClassArray_(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *self, jint targetOffset, NSString *methodName, jint paramCount, IOSObjectArray *paramTypes) {
  OrgOssPdfreporterUsesOrgApacheDigesterImplRule_init(self);
  self->bodyText_ = nil;
  self->targetOffset_ = 0;
  self->methodName_ = nil;
  self->paramCount_ = 0;
  self->paramTypes_ = nil;
  self->paramClassNames_ = nil;
  self->useExactMatch_ = false;
  self->targetOffset_ = targetOffset;
  self->methodName_ = methodName;
  self->paramCount_ = paramCount;
  if (paramTypes == nil) {
    self->paramTypes_ = [IOSObjectArray newArrayWithLength:paramCount type:IOSClass_class_()];
    for (jint i = 0; i < self->paramTypes_->size_; i++) {
      (void) IOSObjectArray_Set(self->paramTypes_, i, NSString_class_());
    }
  }
  else {
    self->paramTypes_ = [IOSObjectArray newArrayWithLength:paramTypes->size_ type:IOSClass_class_()];
    for (jint i = 0; i < self->paramTypes_->size_; i++) {
      (void) IOSObjectArray_Set(self->paramTypes_, i, IOSObjectArray_Get(paramTypes, i));
    }
  }
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *new_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_withIOSClassArray_(jint targetOffset, NSString *methodName, jint paramCount, IOSObjectArray *paramTypes) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithInt_withNSString_withInt_withIOSClassArray_, targetOffset, methodName, paramCount, paramTypes)
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *create_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_withIOSClassArray_(jint targetOffset, NSString *methodName, jint paramCount, IOSObjectArray *paramTypes) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithInt_withNSString_withInt_withIOSClassArray_, targetOffset, methodName, paramCount, paramTypes)
}

void OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *self, jint targetOffset, NSString *methodName) {
  OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_withIOSClassArray_(self, targetOffset, methodName, 0, nil);
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *new_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_(jint targetOffset, NSString *methodName) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithInt_withNSString_, targetOffset, methodName)
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *create_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_(jint targetOffset, NSString *methodName) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithInt_withNSString_, targetOffset, methodName)
}

void OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_withInt_(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *self, NSString *methodName, jint paramCount) {
  OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_(self, 0, methodName, paramCount);
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *new_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_withInt_(NSString *methodName, jint paramCount) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithNSString_withInt_, methodName, paramCount)
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *create_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_withInt_(NSString *methodName, jint paramCount) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithNSString_withInt_, methodName, paramCount)
}

void OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_withInt_withIOSClassArray_(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *self, NSString *methodName, jint paramCount, IOSObjectArray *paramTypes) {
  OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_withIOSClassArray_(self, 0, methodName, paramCount, paramTypes);
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *new_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_withInt_withIOSClassArray_(NSString *methodName, jint paramCount, IOSObjectArray *paramTypes) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithNSString_withInt_withIOSClassArray_, methodName, paramCount, paramTypes)
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *create_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_withInt_withIOSClassArray_(NSString *methodName, jint paramCount, IOSObjectArray *paramTypes) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithNSString_withInt_withIOSClassArray_, methodName, paramCount, paramTypes)
}

void OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *self, NSString *methodName) {
  OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithInt_withNSString_withInt_withIOSClassArray_(self, 0, methodName, 0, nil);
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *new_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_(NSString *methodName) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithNSString_, methodName)
}

OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *create_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_(NSString *methodName) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule, initWithNSString_, methodName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule)
