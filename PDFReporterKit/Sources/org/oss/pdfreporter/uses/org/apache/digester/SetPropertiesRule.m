//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/digester/SetPropertiesRule.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/HashMap.h"
#include "org/oss/pdfreporter/commons/beans/IBeansUtils.h"
#include "org/oss/pdfreporter/commons/beans/factory/IBeansFactory.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/AbstractRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/SetPropertiesRule.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@interface OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule () {
 @public
  IOSObjectArray *attributeNames_;
  IOSObjectArray *propertyNames_;
  jboolean ignoreMissingProperty_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule, attributeNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule, propertyNames_, IOSObjectArray *)

@implementation OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule

- (instancetype)initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:(id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)digester {
  OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_(self, digester);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)attributeName
                    withNSString:(NSString *)propertyName {
  OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithNSString_withNSString_(self, attributeName, propertyName);
  return self;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)attributeNames
                    withNSStringArray:(IOSObjectArray *)propertyNames {
  OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithNSStringArray_withNSStringArray_(self, attributeNames, propertyNames);
  return self;
}

- (void)beginWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)attributes {
  JavaUtilHashMap *values = new_JavaUtilHashMap_init();
  jint attNamesLength = 0;
  if (attributeNames_ != nil) {
    attNamesLength = attributeNames_->size_;
  }
  jint propNamesLength = 0;
  if (propertyNames_ != nil) {
    propNamesLength = propertyNames_->size_;
  }
  for (jint i = 0; i < [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(attributes)) getLength]; i++) {
    NSString *name = [attributes getLocalNameWithInt:i];
    if ([@"" isEqual:name]) {
      name = [attributes getQNameWithInt:i];
    }
    NSString *value = [attributes getValueWithInt:i];
    for (jint n = 0; n < attNamesLength; n++) {
      if ([((NSString *) nil_chk(name)) isEqual:IOSObjectArray_Get(nil_chk(attributeNames_), n)]) {
        if (n < propNamesLength) {
          name = IOSObjectArray_Get(nil_chk(propertyNames_), n);
        }
        else {
          name = nil;
        }
        break;
      }
    }
    if ((!ignoreMissingProperty_) && (name != nil)) {
      id top = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peek];
      jboolean test = [((id<OrgOssPdfreporterCommonsBeansIBeansUtils>) nil_chk([((id<OrgOssPdfreporterCommonsBeansFactoryIBeansFactory>) nil_chk(OrgOssPdfreporterRegistryIRegistry_getIBeansFactory())) newBeansUtils])) isWriteableWithId:top withNSString:name];
      if (!test) @throw new_JavaLangNoSuchMethodException_initWithNSString_(JreStrcat("$$$", @"Property ", name, @" can't be set"));
    }
    if (name != nil) {
      (void) [values putWithId:name withId:value];
    }
  }
  id top = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peek];
  [((id<OrgOssPdfreporterCommonsBeansIBeansUtils>) nil_chk([((id<OrgOssPdfreporterCommonsBeansFactoryIBeansFactory>) nil_chk(OrgOssPdfreporterRegistryIRegistry_getIBeansFactory())) newBeansUtils])) populateWithId:top withJavaUtilMap:values];
}

- (void)addAliasWithNSString:(NSString *)attributeName
                withNSString:(NSString *)propertyName {
  if (attributeNames_ == nil) {
    attributeNames_ = [IOSObjectArray newArrayWithLength:1 type:NSString_class_()];
    (void) IOSObjectArray_Set(attributeNames_, 0, attributeName);
    propertyNames_ = [IOSObjectArray newArrayWithLength:1 type:NSString_class_()];
    (void) IOSObjectArray_Set(propertyNames_, 0, propertyName);
  }
  else {
    jint length = attributeNames_->size_;
    IOSObjectArray *tempAttributes = [IOSObjectArray newArrayWithLength:length + 1 type:NSString_class_()];
    for (jint i = 0; i < length; i++) {
      (void) IOSObjectArray_Set(tempAttributes, i, IOSObjectArray_Get(attributeNames_, i));
    }
    (void) IOSObjectArray_Set(tempAttributes, length, attributeName);
    IOSObjectArray *tempProperties = [IOSObjectArray newArrayWithLength:length + 1 type:NSString_class_()];
    for (jint i = 0; i < length && i < ((IOSObjectArray *) nil_chk(propertyNames_))->size_; i++) {
      (void) IOSObjectArray_Set(tempProperties, i, IOSObjectArray_Get(nil_chk(propertyNames_), i));
    }
    (void) IOSObjectArray_Set(tempProperties, length, propertyName);
    propertyNames_ = tempProperties;
    attributeNames_ = tempAttributes;
  }
}

- (NSString *)description {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithNSString_(@"SetPropertiesRule[");
  (void) [sb appendWithNSString:@"]"];
  return ([sb description]);
}

- (jboolean)isIgnoreMissingProperty {
  return self->ignoreMissingProperty_;
}

- (void)setIgnoreMissingPropertyWithBoolean:(jboolean)ignoreMissingProperty {
  self->ignoreMissingProperty_ = ignoreMissingProperty;
}

+ (IOSObjectArray *)__annotations_initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_ {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:", "SetPropertiesRule", NULL, 0x1, NULL, NULL },
    { "init", "SetPropertiesRule", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withNSString:", "SetPropertiesRule", NULL, 0x1, NULL, NULL },
    { "initWithNSStringArray:withNSStringArray:", "SetPropertiesRule", NULL, 0x1, NULL, NULL },
    { "beginWithOrgOssPdfreporterXmlParsersIAttributes:", "begin", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "addAliasWithNSString:withNSString:", "addAlias", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isIgnoreMissingProperty", NULL, "Z", 0x1, NULL, NULL },
    { "setIgnoreMissingPropertyWithBoolean:", "setIgnoreMissingProperty", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "attributeNames_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "propertyNames_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "ignoreMissingProperty_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule = { 2, "SetPropertiesRule", "org.oss.pdfreporter.uses.org.apache.digester", NULL, 0x1, 9, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule;
}

@end

void OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule *self, id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester> digester) {
  OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_init(self);
}

OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule *new_OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_(id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester> digester) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule, initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_, digester)
}

OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule *create_OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_(id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester> digester) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule, initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_, digester)
}

void OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_init(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule *self) {
  OrgOssPdfreporterUsesOrgApacheDigesterAbstractRule_init(self);
  self->ignoreMissingProperty_ = true;
}

OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule *new_OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule, init)
}

OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule *create_OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule, init)
}

void OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithNSString_withNSString_(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule *self, NSString *attributeName, NSString *propertyName) {
  OrgOssPdfreporterUsesOrgApacheDigesterAbstractRule_init(self);
  self->ignoreMissingProperty_ = true;
  self->attributeNames_ = [IOSObjectArray newArrayWithLength:1 type:NSString_class_()];
  (void) IOSObjectArray_Set(self->attributeNames_, 0, attributeName);
  self->propertyNames_ = [IOSObjectArray newArrayWithLength:1 type:NSString_class_()];
  (void) IOSObjectArray_Set(self->propertyNames_, 0, propertyName);
}

OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule *new_OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithNSString_withNSString_(NSString *attributeName, NSString *propertyName) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule, initWithNSString_withNSString_, attributeName, propertyName)
}

OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule *create_OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithNSString_withNSString_(NSString *attributeName, NSString *propertyName) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule, initWithNSString_withNSString_, attributeName, propertyName)
}

void OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithNSStringArray_withNSStringArray_(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule *self, IOSObjectArray *attributeNames, IOSObjectArray *propertyNames) {
  OrgOssPdfreporterUsesOrgApacheDigesterAbstractRule_init(self);
  self->ignoreMissingProperty_ = true;
  self->attributeNames_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(attributeNames))->size_ type:NSString_class_()];
  for (jint i = 0, size = attributeNames->size_; i < size; i++) {
    (void) IOSObjectArray_Set(self->attributeNames_, i, IOSObjectArray_Get(attributeNames, i));
  }
  self->propertyNames_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(propertyNames))->size_ type:NSString_class_()];
  for (jint i = 0, size = propertyNames->size_; i < size; i++) {
    (void) IOSObjectArray_Set(self->propertyNames_, i, IOSObjectArray_Get(propertyNames, i));
  }
}

OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule *new_OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithNSStringArray_withNSStringArray_(IOSObjectArray *attributeNames, IOSObjectArray *propertyNames) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule, initWithNSStringArray_withNSStringArray_, attributeNames, propertyNames)
}

OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule *create_OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithNSStringArray_withNSStringArray_(IOSObjectArray *attributeNames, IOSObjectArray *propertyNames) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule, initWithNSStringArray_withNSStringArray_, attributeNames, propertyNames)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule)
