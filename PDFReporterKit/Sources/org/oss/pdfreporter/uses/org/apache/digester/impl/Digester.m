//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/digester/impl/Digester.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/util/EmptyStackException.h"
#include "java/util/List.h"
#include "java/util/Stack.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IObjectCreationFactory.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IRuleSet.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IRules.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/SetPropertiesRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/CallMethodRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/CallParamRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/Digester.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/FactoryCreateRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/NotImplementedDigester.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/ObjectCreateRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/RulesBase.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/SetNextRule.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"
#include "org/oss/pdfreporter/xml/parsers/IInputSource.h"
#include "org/oss/pdfreporter/xml/parsers/IXmlParser.h"
#include "org/oss/pdfreporter/xml/parsers/ParserConfigurationException.h"
#include "org/oss/pdfreporter/xml/parsers/XMLEntityResolver.h"
#include "org/oss/pdfreporter/xml/parsers/XMLErrorHandler.h"
#include "org/oss/pdfreporter/xml/parsers/XMLParseException.h"
#include "org/oss/pdfreporter/xml/parsers/factory/IXmlParserFactory.h"

@interface OrgOssPdfreporterUsesOrgApacheDigesterImplDigester () {
 @public
  id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester> delegator_;
  JavaUtilStack *stack_;
  NSString *match_;
  JavaUtilStack *matches_;
  id root_;
  JavaUtilStack *params_;
  JavaLangStringBuffer *bodyText_;
  JavaUtilStack *bodyTexts_;
  id<OrgOssPdfreporterUsesOrgApacheDigesterIRules> rules_;
  id<OrgOssPdfreporterXmlParsersXMLErrorHandler> errorHandler_;
  id<OrgOssPdfreporterXmlParsersXMLEntityResolver> resolver_;
}

- (OrgOssPdfreporterXmlParsersXMLParseException *)createSAXExceptionWithJavaLangException:(JavaLangException *)e;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, delegator_, id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, stack_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, match_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, matches_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, root_, id)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, params_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, bodyText_, JavaLangStringBuffer *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, bodyTexts_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, rules_, id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, errorHandler_, id<OrgOssPdfreporterXmlParsersXMLErrorHandler>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, resolver_, id<OrgOssPdfreporterXmlParsersXMLEntityResolver>)

inline JavaUtilLoggingLogger *OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static OrgOssPdfreporterXmlParsersXMLParseException *OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_createSAXExceptionWithJavaLangException_(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester *self, JavaLangException *e);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester)

@implementation OrgOssPdfreporterUsesOrgApacheDigesterImplDigester

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>)getXMLParserFactory {
  return OrgOssPdfreporterRegistryIRegistry_getIXmlParserFactory();
}

- (void)startElementWithNSString:(NSString *)namespaceURI
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
withOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)list {
  jboolean debug = [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)];
  if (debug) {
    [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$$C$C$C", @"startElement(", namespaceURI, ',', localName, ',', qName, ')')];
  }
  (void) [((JavaUtilStack *) nil_chk(bodyTexts_)) pushWithId:bodyText_];
  if (debug) {
    [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$$C", @"  Pushing body text '", [((JavaLangStringBuffer *) nil_chk(bodyText_)) description], '\'')];
  }
  bodyText_ = new_JavaLangStringBuffer_init();
  NSString *name = localName;
  if ((name == nil) || (((jint) [((NSString *) nil_chk(name)) length]) < 1)) {
    name = qName;
  }
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithNSString_(match_);
  if (((jint) [((NSString *) nil_chk(match_)) length]) > 0) {
    (void) [sb appendWithChar:'/'];
  }
  (void) [sb appendWithNSString:name];
  match_ = [sb description];
  if (debug) {
    [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$$C", @"  New match='", match_, '\'')];
  }
  id<JavaUtilList> rules = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>) nil_chk([self getRules])) matchWithNSString:namespaceURI withNSString:match_];
  (void) [((JavaUtilStack *) nil_chk(matches_)) pushWithId:rules];
  if ((rules != nil) && ([((id<JavaUtilList>) nil_chk(rules)) size] > 0)) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(rules)) size]; i++) {
      @try {
        id<OrgOssPdfreporterUsesOrgApacheDigesterIRule> rule = [rules getWithInt:i];
        if (debug) {
          [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$@", @"  Fire begin() for ", rule)];
        }
        [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) beginWithNSString:namespaceURI withNSString:name withOrgOssPdfreporterXmlParsersIAttributes:list];
      }
      @catch (JavaLangException *e) {
        [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Begin event threw exception" withNSException:e];
        @throw OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_createSAXExceptionWithJavaLangException_(self, e);
      }
      @catch (JavaLangError *e) {
        [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Begin event threw error" withNSException:e];
        @throw e;
      }
    }
  }
  else {
    if (debug) {
      [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$$$", @"  No rules found matching '", match_, @"'.")];
    }
  }
}

- (void)charactersWithCharArray:(IOSCharArray *)buffer
                        withInt:(jint)start
                        withInt:(jint)length {
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$$C", @"characters(", [NSString stringWithCharacters:buffer offset:start length:length], ')')];
  }
  (void) [((JavaLangStringBuffer *) nil_chk(bodyText_)) appendWithCharArray:buffer withInt:start withInt:length];
}

- (void)endElementWithNSString:(NSString *)namespaceURI
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName {
  jboolean debug = [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)];
  if (debug) {
    [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$$C$C$C", @"endElement(", namespaceURI, ',', localName, ',', qName, ')')];
    [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$$C", @"  match='", match_, '\'')];
  }
  NSString *name = localName;
  if ((name == nil) || (((jint) [((NSString *) nil_chk(name)) length]) < 1)) {
    name = qName;
  }
  id<JavaUtilList> rules = [((JavaUtilStack *) nil_chk(matches_)) pop];
  if ((rules != nil) && ([((id<JavaUtilList>) nil_chk(rules)) size] > 0)) {
    NSString *bodyText = [((JavaLangStringBuffer *) nil_chk(self->bodyText_)) description];
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(rules)) size]; i++) {
      @try {
        id<OrgOssPdfreporterUsesOrgApacheDigesterIRule> rule = [rules getWithInt:i];
        if (debug) {
          [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$@", @"  Fire body() for ", rule)];
        }
        [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) bodyWithNSString:namespaceURI withNSString:name withNSString:bodyText];
      }
      @catch (JavaLangException *e) {
        [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Body event threw exception" withNSException:e];
        @throw OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_createSAXExceptionWithJavaLangException_(self, e);
      }
      @catch (JavaLangError *e) {
        [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Body event threw error" withNSException:e];
        @throw e;
      }
    }
  }
  else {
    if (debug) {
      [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$$$", @"  No rules found matching '", match_, @"'.")];
    }
  }
  bodyText_ = [((JavaUtilStack *) nil_chk(bodyTexts_)) pop];
  if (debug) {
    [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$$C", @"  Popping body text '", [((JavaLangStringBuffer *) nil_chk(bodyText_)) description], '\'')];
  }
  if (rules != nil) {
    for (jint i = 0; i < [rules size]; i++) {
      jint j = ([rules size] - i) - 1;
      @try {
        id<OrgOssPdfreporterUsesOrgApacheDigesterIRule> rule = [rules getWithInt:j];
        if (debug) {
          [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$@", @"  Fire end() for ", rule)];
        }
        [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) endWithNSString:namespaceURI withNSString:name];
      }
      @catch (JavaLangException *e) {
        [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"End event threw exception" withNSException:e];
        @throw OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_createSAXExceptionWithJavaLangException_(self, e);
      }
      @catch (JavaLangError *e) {
        [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"End event threw error" withNSException:e];
        @throw e;
      }
    }
  }
  jint slash = [((NSString *) nil_chk(match_)) lastIndexOf:'/'];
  if (slash >= 0) {
    match_ = [((NSString *) nil_chk(match_)) substring:0 endIndex:slash];
  }
  else {
    match_ = @"";
  }
}

- (id)peek {
  @try {
    return ([((JavaUtilStack *) nil_chk(stack_)) peek]);
  }
  @catch (JavaUtilEmptyStackException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger)) warningWithNSString:@"Empty stack (returning null)"];
    return (nil);
  }
}

- (id)peekWithInt:(jint)n {
  jint index = ([((JavaUtilStack *) nil_chk(stack_)) size] - 1) - n;
  if (index < 0) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger)) warningWithNSString:@"Empty stack (returning null)"];
    return (nil);
  }
  @try {
    return ([stack_ getWithInt:index]);
  }
  @catch (JavaUtilEmptyStackException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger)) warningWithNSString:@"Empty stack (returning null)"];
    return (nil);
  }
}

- (id)pop {
  @try {
    id popped = [((JavaUtilStack *) nil_chk(stack_)) pop];
    return popped;
  }
  @catch (JavaUtilEmptyStackException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger)) warningWithNSString:@"Empty stack (returning null)"];
    return (nil);
  }
}

- (void)pushWithId:(id)object {
  if ([((JavaUtilStack *) nil_chk(stack_)) size] == 0) {
    root_ = object;
  }
  (void) [stack_ pushWithId:object];
}

- (jint)getCount {
  return ([((JavaUtilStack *) nil_chk(stack_)) size]);
}

- (void)setNamespaceAwareWithBoolean:(jboolean)namespaceAware {
  [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getXMLParserFactory])) setNamespaceAwareWithBoolean:namespaceAware];
  [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getXMLParserFactory])) configure];
}

- (void)setRuleNamespaceURIWithNSString:(NSString *)ruleNamespaceURI {
  [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>) nil_chk([self getRules])) setNamespaceURIWithNSString:ruleNamespaceURI];
}

- (void)setErrorHandlerWithOrgOssPdfreporterXmlParsersXMLErrorHandler:(id<OrgOssPdfreporterXmlParsersXMLErrorHandler>)errorHandler {
  self->errorHandler_ = errorHandler;
}

- (void)setValidatingWithBoolean:(jboolean)validating {
  [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getXMLParserFactory])) setValidatingWithBoolean:validating];
  [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getXMLParserFactory])) configure];
}

- (void)setXmlEntityResolverWithOrgOssPdfreporterXmlParsersXMLEntityResolver:(id<OrgOssPdfreporterXmlParsersXMLEntityResolver>)resolver {
  self->resolver_ = resolver;
}

- (id)parseWithOrgOssPdfreporterXmlParsersIInputSource:(id<OrgOssPdfreporterXmlParsersIInputSource>)input {
  id<OrgOssPdfreporterXmlParsersIXmlParser> parser = [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getXMLParserFactory])) newXmlParserWithOrgOssPdfreporterXmlParsersIInputSource:input withOrgOssPdfreporterXmlParsersIContentHandler:self];
  [((id<OrgOssPdfreporterXmlParsersIXmlParser>) nil_chk(parser)) setErrorHandlerWithOrgOssPdfreporterXmlParsersXMLErrorHandler:errorHandler_];
  [parser setEntityResolverWithOrgOssPdfreporterXmlParsersXMLEntityResolver:resolver_];
  [parser parse];
  return root_;
}

- (id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>)getRules {
  if (self->rules_ == nil) {
    self->rules_ = new_OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase_init();
    [self->rules_ setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:self];
  }
  return (self->rules_);
}

- (void)setRulesWithOrgOssPdfreporterUsesOrgApacheDigesterIRules:(id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>)rules {
  self->rules_ = rules;
  [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>) nil_chk(self->rules_)) setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:self];
}

- (void)addRuleWithNSString:(NSString *)pattern
withOrgOssPdfreporterUsesOrgApacheDigesterIRule:(id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>)rule {
  [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:self];
  [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>) nil_chk([self getRules])) addWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:rule];
}

- (void)addCallMethodWithNSString:(NSString *)pattern
                     withNSString:(NSString *)methodName
                          withInt:(jint)paramCount {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:new_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_withInt_(methodName, paramCount)];
}

- (void)addCallMethodWithNSString:(NSString *)pattern
                     withNSString:(NSString *)methodName {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:new_OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_initWithNSString_(methodName)];
}

- (void)addCallParamWithNSString:(NSString *)pattern
                         withInt:(jint)paramIndex
                    withNSString:(NSString *)attributeName {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:new_OrgOssPdfreporterUsesOrgApacheDigesterImplCallParamRule_initWithInt_withNSString_(paramIndex, attributeName)];
}

- (void)addFactoryCreateWithNSString:(NSString *)pattern
                        withNSString:(NSString *)className_ {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:new_OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_initWithNSString_withNSString_withBoolean_(className_, nil, false)];
}

- (void)addFactoryCreateWithNSString:(NSString *)pattern
withOrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory:(id<OrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory>)creationFactory {
  [((id<OrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory>) nil_chk(creationFactory)) setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:self];
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:new_OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_initWithOrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory_withBoolean_(creationFactory, false)];
}

- (void)addFactoryCreateWithNSString:(NSString *)pattern
                        withIOSClass:(IOSClass *)clazz {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:new_OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_initWithNSString_withNSString_withBoolean_([((IOSClass *) nil_chk(clazz)) getName], nil, false)];
}

- (void)addObjectCreateWithNSString:(NSString *)pattern
                       withIOSClass:(IOSClass *)clazz {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:new_OrgOssPdfreporterUsesOrgApacheDigesterImplObjectCreateRule_initWithNSString_([((IOSClass *) nil_chk(clazz)) getName])];
}

- (void)addSetNextWithNSString:(NSString *)pattern
                  withNSString:(NSString *)methodName
                  withNSString:(NSString *)paramType {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:new_OrgOssPdfreporterUsesOrgApacheDigesterImplSetNextRule_initWithNSString_withNSString_(methodName, paramType)];
}

- (void)addSetNextWithNSString:(NSString *)pattern
                  withNSString:(NSString *)methodName {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:new_OrgOssPdfreporterUsesOrgApacheDigesterImplSetNextRule_initWithNSString_(methodName)];
}

- (void)addSetPropertiesWithNSString:(NSString *)pattern
                   withNSStringArray:(IOSObjectArray *)attributeNames
                   withNSStringArray:(IOSObjectArray *)propertyNames {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:new_OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_initWithNSStringArray_withNSStringArray_(attributeNames, propertyNames)];
}

- (void)addSetPropertiesWithNSString:(NSString *)pattern {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:new_OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule_init()];
}

- (void)pushParamsWithId:(id)object {
  (void) [((JavaUtilStack *) nil_chk(params_)) pushWithId:object];
}

- (id)popParams {
  @try {
    return ([((JavaUtilStack *) nil_chk(params_)) pop]);
  }
  @catch (JavaUtilEmptyStackException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger)) warningWithNSString:@"Empty stack (returning null)"];
    return (nil);
  }
}

- (id)peekParams {
  @try {
    return ([((JavaUtilStack *) nil_chk(params_)) peek]);
  }
  @catch (JavaUtilEmptyStackException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger)) warningWithNSString:@"Empty stack (returning null)"];
    return (nil);
  }
}

- (NSString *)getMatch {
  return match_;
}

- (void)clear {
  match_ = @"";
  [((JavaUtilStack *) nil_chk(bodyTexts_)) clear];
  [((JavaUtilStack *) nil_chk(params_)) clear];
  [((JavaUtilStack *) nil_chk(stack_)) clear];
}

- (OrgOssPdfreporterXmlParsersXMLParseException *)createSAXExceptionWithJavaLangException:(JavaLangException *)e {
  return OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_createSAXExceptionWithJavaLangException_(self, e);
}

- (id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)getDelegator {
  return delegator_;
}

- (void)setDelegatorWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:(id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)delegator {
  self->delegator_ = delegator;
}

- (NSString *)getRuleNamespaceURI {
  return ([((id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>) nil_chk([self getRules])) getNamespaceURI]);
}

- (void)addRuleSetWithOrgOssPdfreporterUsesOrgApacheDigesterIRuleSet:(id<OrgOssPdfreporterUsesOrgApacheDigesterIRuleSet>)ruleSet {
  NSString *oldNamespaceURI = [self getRuleNamespaceURI];
  NSString *newNamespaceURI = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRuleSet>) nil_chk(ruleSet)) getNamespaceURI];
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    if (newNamespaceURI == nil) {
      [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:@"addRuleSet() with no namespace URI"];
    }
    else {
      [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger finestWithNSString:JreStrcat("$$", @"addRuleSet() with namespace URI ", newNamespaceURI)];
    }
  }
  [self setRuleNamespaceURIWithNSString:newNamespaceURI];
  [ruleSet addRuleInstancesWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:self];
  [self setRuleNamespaceURIWithNSString:oldNamespaceURI];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester class]) {
    OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Digester", NULL, 0x1, NULL, NULL },
    { "getXMLParserFactory", NULL, "Lorg.oss.pdfreporter.xml.parsers.factory.IXmlParserFactory;", 0x1, NULL, NULL },
    { "startElementWithNSString:withNSString:withNSString:withOrgOssPdfreporterXmlParsersIAttributes:", "startElement", "V", 0x1, "Lorg.oss.pdfreporter.xml.parsers.XMLParseException;", NULL },
    { "charactersWithCharArray:withInt:withInt:", "characters", "V", 0x1, "Lorg.oss.pdfreporter.xml.parsers.XMLParseException;", NULL },
    { "endElementWithNSString:withNSString:withNSString:", "endElement", "V", 0x1, "Lorg.oss.pdfreporter.xml.parsers.XMLParseException;", NULL },
    { "peek", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "peekWithInt:", "peek", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "pop", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "pushWithId:", "push", "V", 0x1, NULL, NULL },
    { "getCount", NULL, "I", 0x1, NULL, NULL },
    { "setNamespaceAwareWithBoolean:", "setNamespaceAware", "V", 0x1, NULL, NULL },
    { "setRuleNamespaceURIWithNSString:", "setRuleNamespaceURI", "V", 0x1, NULL, NULL },
    { "setErrorHandlerWithOrgOssPdfreporterXmlParsersXMLErrorHandler:", "setErrorHandler", "V", 0x1, NULL, NULL },
    { "setValidatingWithBoolean:", "setValidating", "V", 0x1, NULL, NULL },
    { "setXmlEntityResolverWithOrgOssPdfreporterXmlParsersXMLEntityResolver:", "setXmlEntityResolver", "V", 0x1, NULL, NULL },
    { "parseWithOrgOssPdfreporterXmlParsersIInputSource:", "parse", "Ljava.lang.Object;", 0x1, "Ljava.io.IOException;Lorg.oss.pdfreporter.xml.parsers.XMLParseException;Lorg.oss.pdfreporter.xml.parsers.ParserConfigurationException;", NULL },
    { "getRules", NULL, "Lorg.oss.pdfreporter.uses.org.apache.digester.IRules;", 0x1, NULL, NULL },
    { "setRulesWithOrgOssPdfreporterUsesOrgApacheDigesterIRules:", "setRules", "V", 0x1, NULL, NULL },
    { "addRuleWithNSString:withOrgOssPdfreporterUsesOrgApacheDigesterIRule:", "addRule", "V", 0x1, NULL, NULL },
    { "addCallMethodWithNSString:withNSString:withInt:", "addCallMethod", "V", 0x1, NULL, NULL },
    { "addCallMethodWithNSString:withNSString:", "addCallMethod", "V", 0x1, NULL, NULL },
    { "addCallParamWithNSString:withInt:withNSString:", "addCallParam", "V", 0x1, NULL, NULL },
    { "addFactoryCreateWithNSString:withNSString:", "addFactoryCreate", "V", 0x1, NULL, NULL },
    { "addFactoryCreateWithNSString:withOrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory:", "addFactoryCreate", "V", 0x1, NULL, NULL },
    { "addFactoryCreateWithNSString:withIOSClass:", "addFactoryCreate", "V", 0x1, NULL, "(Ljava/lang/String;Ljava/lang/Class<*>;)V" },
    { "addObjectCreateWithNSString:withIOSClass:", "addObjectCreate", "V", 0x1, NULL, "(Ljava/lang/String;Ljava/lang/Class<*>;)V" },
    { "addSetNextWithNSString:withNSString:withNSString:", "addSetNext", "V", 0x1, NULL, NULL },
    { "addSetNextWithNSString:withNSString:", "addSetNext", "V", 0x1, NULL, NULL },
    { "addSetPropertiesWithNSString:withNSStringArray:withNSStringArray:", "addSetProperties", "V", 0x1, NULL, NULL },
    { "addSetPropertiesWithNSString:", "addSetProperties", "V", 0x1, NULL, NULL },
    { "pushParamsWithId:", "pushParams", "V", 0x1, NULL, NULL },
    { "popParams", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "peekParams", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getMatch", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "createSAXExceptionWithJavaLangException:", "createSAXException", "Lorg.oss.pdfreporter.xml.parsers.XMLParseException;", 0x2, NULL, NULL },
    { "getDelegator", NULL, "Lorg.oss.pdfreporter.uses.org.apache.digester.IDigester;", 0x1, NULL, NULL },
    { "setDelegatorWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:", "setDelegator", "V", 0x1, NULL, NULL },
    { "getRuleNamespaceURI", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addRuleSetWithOrgOssPdfreporterUsesOrgApacheDigesterIRuleSet:", "addRuleSet", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger, NULL, .constantValue.asLong = 0 },
    { "delegator_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.org.apache.digester.IDigester;", NULL, NULL, .constantValue.asLong = 0 },
    { "stack_", NULL, 0x12, "Ljava.util.Stack;", NULL, "Ljava/util/Stack<Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "match_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "matches_", NULL, 0x12, "Ljava.util.Stack;", NULL, "Ljava/util/Stack<Ljava/util/List<Lorg/oss/pdfreporter/uses/org/apache/digester/IRule;>;>;", .constantValue.asLong = 0 },
    { "root_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "params_", NULL, 0x12, "Ljava.util.Stack;", NULL, "Ljava/util/Stack<Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "bodyText_", NULL, 0x2, "Ljava.lang.StringBuffer;", NULL, NULL, .constantValue.asLong = 0 },
    { "bodyTexts_", NULL, 0x12, "Ljava.util.Stack;", NULL, "Ljava/util/Stack<Ljava/lang/StringBuffer;>;", .constantValue.asLong = 0 },
    { "rules_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.org.apache.digester.IRules;", NULL, NULL, .constantValue.asLong = 0 },
    { "errorHandler_", NULL, 0x2, "Lorg.oss.pdfreporter.xml.parsers.XMLErrorHandler;", NULL, NULL, .constantValue.asLong = 0 },
    { "resolver_", NULL, 0x2, "Lorg.oss.pdfreporter.xml.parsers.XMLEntityResolver;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesOrgApacheDigesterImplDigester = { 2, "Digester", "org.oss.pdfreporter.uses.org.apache.digester.impl", NULL, 0x1, 40, methods, 12, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesOrgApacheDigesterImplDigester;
}

@end

void OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_init(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester *self) {
  OrgOssPdfreporterUsesOrgApacheDigesterImplNotImplementedDigester_init(self);
  self->rules_ = nil;
  self->errorHandler_ = nil;
  self->resolver_ = nil;
  self->stack_ = new_JavaUtilStack_init();
  self->match_ = @"";
  self->matches_ = new_JavaUtilStack_init();
  self->root_ = nil;
  self->params_ = new_JavaUtilStack_init();
  self->bodyText_ = new_JavaLangStringBuffer_init();
  self->bodyTexts_ = new_JavaUtilStack_init();
}

OrgOssPdfreporterUsesOrgApacheDigesterImplDigester *new_OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, init)
}

OrgOssPdfreporterUsesOrgApacheDigesterImplDigester *create_OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester, init)
}

OrgOssPdfreporterXmlParsersXMLParseException *OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_createSAXExceptionWithJavaLangException_(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester *self, JavaLangException *e) {
  if ([e isKindOfClass:[JavaLangReflectInvocationTargetException class]]) {
    NSException *t = [((JavaLangReflectInvocationTargetException *) nil_chk(((JavaLangReflectInvocationTargetException *) cast_chk(e, [JavaLangReflectInvocationTargetException class])))) getTargetException];
    if ((t != nil) && ([t isKindOfClass:[JavaLangException class]])) {
      e = (JavaLangException *) cast_chk(t, [JavaLangException class]);
    }
  }
  return new_OrgOssPdfreporterXmlParsersXMLParseException_initWithNSString_withNSException_([((JavaLangException *) nil_chk(e)) getMessage], e);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester)
