//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/java/awt/text/AttributedString.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InternalError.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/AbstractMap.h"
#include "java/util/HashSet.h"
#include "java/util/Hashtable.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Vector.h"
#include "org/oss/pdfreporter/uses/java/awt/text/Annotation.h"
#include "org/oss/pdfreporter/uses/java/awt/text/AttributedString.h"
#include "org/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator.h"
#include "org/oss/pdfreporter/uses/java/awt/text/ICharacterIterator.h"

@interface OrgOssPdfreporterUsesJavaAwtTextAttributedString ()

- (void)addAttributeImplWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                            withId:(id)value
                                                                                           withInt:(jint)beginIndex
                                                                                           withInt:(jint)endIndex;

- (void)createRunAttributeDataVectors;

- (jint)ensureRunBreakWithInt:(jint)offset;

- (jint)ensureRunBreakWithInt:(jint)offset
                  withBoolean:(jboolean)copyAttrs;

- (void)addAttributeRunDataWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                               withId:(id)value
                                                                                              withInt:(jint)beginRunIndex
                                                                                              withInt:(jint)endRunIndex;

- (jchar)charAtWithInt:(jint)index;

- (id)getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                     withInt:(jint)runIndex;

- (id)getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                               withInt:(jint)runIndex
                                                                                               withInt:(jint)beginIndex
                                                                                               withInt:(jint)endIndex;

- (jboolean)attributeValuesMatchWithJavaUtilSet:(id<JavaUtilSet>)attributes
                                        withInt:(jint)runIndex1
                                        withInt:(jint)runIndex2;

+ (jboolean)valuesMatchWithId:(id)value1
                       withId:(id)value2;

- (void)appendContentsWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
withOrgOssPdfreporterUsesJavaAwtTextICharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextICharacterIterator>)iterator;

- (void)setAttributesWithJavaUtilMap:(id<JavaUtilMap>)attrs
                             withInt:(jint)offset;

+ (jboolean)mapsDifferWithJavaUtilMap:(id<JavaUtilMap>)last
                      withJavaUtilMap:(id<JavaUtilMap>)attrs;

@end

inline jint OrgOssPdfreporterUsesJavaAwtTextAttributedString_get_ARRAY_SIZE_INCREMENT();
#define OrgOssPdfreporterUsesJavaAwtTextAttributedString_ARRAY_SIZE_INCREMENT 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterUsesJavaAwtTextAttributedString, ARRAY_SIZE_INCREMENT, jint)

__attribute__((unused)) static void OrgOssPdfreporterUsesJavaAwtTextAttributedString_addAttributeImplWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *attribute, id value, jint beginIndex, jint endIndex);

__attribute__((unused)) static void OrgOssPdfreporterUsesJavaAwtTextAttributedString_createRunAttributeDataVectors(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self);

__attribute__((unused)) static jint OrgOssPdfreporterUsesJavaAwtTextAttributedString_ensureRunBreakWithInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, jint offset);

__attribute__((unused)) static jint OrgOssPdfreporterUsesJavaAwtTextAttributedString_ensureRunBreakWithInt_withBoolean_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, jint offset, jboolean copyAttrs);

__attribute__((unused)) static void OrgOssPdfreporterUsesJavaAwtTextAttributedString_addAttributeRunDataWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *attribute, id value, jint beginRunIndex, jint endRunIndex);

__attribute__((unused)) static jchar OrgOssPdfreporterUsesJavaAwtTextAttributedString_charAtWithInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, jint index);

__attribute__((unused)) static id OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *attribute, jint runIndex);

__attribute__((unused)) static id OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *attribute, jint runIndex, jint beginIndex, jint endIndex);

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesJavaAwtTextAttributedString_attributeValuesMatchWithJavaUtilSet_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, id<JavaUtilSet> attributes, jint runIndex1, jint runIndex2);

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesJavaAwtTextAttributedString_valuesMatchWithId_withId_(id value1, id value2);

__attribute__((unused)) static void OrgOssPdfreporterUsesJavaAwtTextAttributedString_appendContentsWithJavaLangStringBuffer_withOrgOssPdfreporterUsesJavaAwtTextICharacterIterator_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, JavaLangStringBuffer *buf, id<OrgOssPdfreporterUsesJavaAwtTextICharacterIterator> iterator);

__attribute__((unused)) static void OrgOssPdfreporterUsesJavaAwtTextAttributedString_setAttributesWithJavaUtilMap_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, id<JavaUtilMap> attrs, jint offset);

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesJavaAwtTextAttributedString_mapsDifferWithJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> last, id<JavaUtilMap> attrs);

@interface OrgOssPdfreporterUsesJavaAwtTextAttributeEntry () {
 @public
  OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *key_;
  id value_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesJavaAwtTextAttributeEntry, key_, OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesJavaAwtTextAttributeEntry, value_, id)

@interface OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator : NSObject < OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator > {
 @public
  OrgOssPdfreporterUsesJavaAwtTextAttributedString *this$0_;
  jint beginIndex_;
  jint endIndex_;
  IOSObjectArray *relevantAttributes_;
  jint currentIndex_;
  jint currentRunIndex_;
  jint currentRunStart_;
  jint currentRunLimit_;
}

- (instancetype)initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)outer$
withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes
                                                                 withInt:(jint)beginIndex
                                                                 withInt:(jint)endIndex;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

- (id)clone;

- (jchar)first;

- (jchar)last;

- (jchar)current;

- (jchar)next;

- (jchar)previous;

- (jchar)setIndexWithInt:(jint)position;

- (jint)getBeginIndex;

- (jint)getEndIndex;

- (jint)getIndex;

- (jint)getRunStart;

- (jint)getRunStartWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute;

- (jint)getRunStartWithJavaUtilSet:(id<JavaUtilSet>)attributes;

- (jint)getRunLimit;

- (jint)getRunLimitWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute;

- (jint)getRunLimitWithJavaUtilSet:(id<JavaUtilSet>)attributes;

- (id<JavaUtilMap>)getAttributes;

- (id<JavaUtilSet>)getAllAttributeKeys;

- (id)getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute;

- (OrgOssPdfreporterUsesJavaAwtTextAttributedString *)getString;

- (jchar)internalSetIndexWithInt:(jint)position;

- (void)updateRunInfo;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator)

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator, this$0_, OrgOssPdfreporterUsesJavaAwtTextAttributedString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator, relevantAttributes_, IOSObjectArray *)

__attribute__((unused)) static void OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *self, OrgOssPdfreporterUsesJavaAwtTextAttributedString *outer$, IOSObjectArray *attributes, jint beginIndex, jint endIndex);

__attribute__((unused)) static OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *outer$, IOSObjectArray *attributes, jint beginIndex, jint endIndex) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *create_OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *outer$, IOSObjectArray *attributes, jint beginIndex, jint endIndex);

__attribute__((unused)) static OrgOssPdfreporterUsesJavaAwtTextAttributedString *OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_getString(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *self);

__attribute__((unused)) static jchar OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_internalSetIndexWithInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *self, jint position);

__attribute__((unused)) static void OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_updateRunInfo(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator)

@interface OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap : JavaUtilAbstractMap {
 @public
  OrgOssPdfreporterUsesJavaAwtTextAttributedString *this$0_;
  jint runIndex_;
  jint beginIndex_;
  jint endIndex_;
}

- (instancetype)initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)outer$
                                                                 withInt:(jint)runIndex
                                                                 withInt:(jint)beginIndex
                                                                 withInt:(jint)endIndex;

- (id<JavaUtilSet>)entrySet;

- (id)getWithId:(id)key;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap)

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap, this$0_, OrgOssPdfreporterUsesJavaAwtTextAttributedString *)

__attribute__((unused)) static void OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withInt_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap *self, OrgOssPdfreporterUsesJavaAwtTextAttributedString *outer$, jint runIndex, jint beginIndex, jint endIndex);

__attribute__((unused)) static OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap *new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withInt_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *outer$, jint runIndex, jint beginIndex, jint endIndex) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap *create_OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withInt_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *outer$, jint runIndex, jint beginIndex, jint endIndex);

J2OBJC_TYPE_LITERAL_HEADER(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap)

@implementation OrgOssPdfreporterUsesJavaAwtTextAttributedString

- (instancetype)initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIteratorArray:(IOSObjectArray *)iterators {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIteratorArray_(self, iterators);
  return self;
}

- (instancetype)initWithNSString:(NSString *)text {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_(self, text);
  return self;
}

- (instancetype)initWithNSString:(NSString *)text
                 withJavaUtilMap:(id<JavaUtilMap>)attributes {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_withJavaUtilMap_(self, text, attributes);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)text {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_(self, text);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)text
                                                                             withInt:(jint)beginIndex
                                                                             withInt:(jint)endIndex {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(self, text, beginIndex, endIndex);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)text
                                                                             withInt:(jint)beginIndex
                                                                             withInt:(jint)endIndex
     withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_(self, text, beginIndex, endIndex, attributes);
  return self;
}

- (void)addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                        withId:(id)value {
  if (attribute == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  jint len = [self length];
  if (len == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't add attribute to 0-length text");
  }
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_addAttributeImplWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_withInt_withInt_(self, attribute, value, 0, len);
}

- (void)addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                        withId:(id)value
                                                                                       withInt:(jint)beginIndex
                                                                                       withInt:(jint)endIndex {
  if (attribute == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  if (beginIndex < 0 || endIndex > [self length] || beginIndex >= endIndex) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid substring range");
  }
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_addAttributeImplWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_withInt_withInt_(self, attribute, value, beginIndex, endIndex);
}

- (void)addAttributesWithJavaUtilMap:(id<JavaUtilMap>)attributes
                             withInt:(jint)beginIndex
                             withInt:(jint)endIndex {
  if (attributes == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  if (beginIndex < 0 || endIndex > [self length] || beginIndex > endIndex) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid substring range");
  }
  if (beginIndex == endIndex) {
    if ([attributes isEmpty]) return;
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't add attribute to 0-length text");
  }
  if (runCount_ == 0) {
    OrgOssPdfreporterUsesJavaAwtTextAttributedString_createRunAttributeDataVectors(self);
  }
  jint beginRunIndex = OrgOssPdfreporterUsesJavaAwtTextAttributedString_ensureRunBreakWithInt_(self, beginIndex);
  jint endRunIndex = OrgOssPdfreporterUsesJavaAwtTextAttributedString_ensureRunBreakWithInt_(self, endIndex);
  id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([attributes entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([iterator next], JavaUtilMap_Entry_class_());
    OrgOssPdfreporterUsesJavaAwtTextAttributedString_addAttributeRunDataWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_withInt_withInt_(self, (OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute class]), [entry_ getValue], beginRunIndex, endRunIndex);
  }
}

- (void)addAttributeImplWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                            withId:(id)value
                                                                                           withInt:(jint)beginIndex
                                                                                           withInt:(jint)endIndex {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_addAttributeImplWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_withInt_withInt_(self, attribute, value, beginIndex, endIndex);
}

- (void)createRunAttributeDataVectors {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_createRunAttributeDataVectors(self);
}

- (jint)ensureRunBreakWithInt:(jint)offset {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_ensureRunBreakWithInt_(self, offset);
}

- (jint)ensureRunBreakWithInt:(jint)offset
                  withBoolean:(jboolean)copyAttrs {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_ensureRunBreakWithInt_withBoolean_(self, offset, copyAttrs);
}

- (void)addAttributeRunDataWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                               withId:(id)value
                                                                                              withInt:(jint)beginRunIndex
                                                                                              withInt:(jint)endRunIndex {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_addAttributeRunDataWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_withInt_withInt_(self, attribute, value, beginRunIndex, endRunIndex);
}

- (id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)getIterator {
  return [self getIteratorWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:nil withInt:0 withInt:[self length]];
}

- (id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)getIteratorWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes {
  return [self getIteratorWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:attributes withInt:0 withInt:[self length]];
}

- (id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)getIteratorWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes
                                                                                                                                                       withInt:(jint)beginIndex
                                                                                                                                                       withInt:(jint)endIndex {
  return new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_withInt_withInt_(self, attributes, beginIndex, endIndex);
}

- (jint)length {
  return ((jint) [((NSString *) nil_chk(text_)) length]);
}

- (jchar)charAtWithInt:(jint)index {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_charAtWithInt_(self, index);
}

- (id)getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                     withInt:(jint)runIndex {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_(self, attribute, runIndex);
}

- (id)getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                               withInt:(jint)runIndex
                                                                                               withInt:(jint)beginIndex
                                                                                               withInt:(jint)endIndex {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_withInt_withInt_(self, attribute, runIndex, beginIndex, endIndex);
}

- (jboolean)attributeValuesMatchWithJavaUtilSet:(id<JavaUtilSet>)attributes
                                        withInt:(jint)runIndex1
                                        withInt:(jint)runIndex2 {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_attributeValuesMatchWithJavaUtilSet_withInt_withInt_(self, attributes, runIndex1, runIndex2);
}

+ (jboolean)valuesMatchWithId:(id)value1
                       withId:(id)value2 {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_valuesMatchWithId_withId_(value1, value2);
}

- (void)appendContentsWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
withOrgOssPdfreporterUsesJavaAwtTextICharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextICharacterIterator>)iterator {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_appendContentsWithJavaLangStringBuffer_withOrgOssPdfreporterUsesJavaAwtTextICharacterIterator_(self, buf, iterator);
}

- (void)setAttributesWithJavaUtilMap:(id<JavaUtilMap>)attrs
                             withInt:(jint)offset {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_setAttributesWithJavaUtilMap_withInt_(self, attrs, offset);
}

+ (jboolean)mapsDifferWithJavaUtilMap:(id<JavaUtilMap>)last
                      withJavaUtilMap:(id<JavaUtilMap>)attrs {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_mapsDifferWithJavaUtilMap_withJavaUtilMap_(last, attrs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIteratorArray:", "AttributedString", NULL, 0x0, NULL, NULL },
    { "initWithNSString:", "AttributedString", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withJavaUtilMap:", "AttributedString", NULL, 0x1, NULL, "(Ljava/lang/String;Ljava/util/Map<+Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;*>;)V" },
    { "initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:", "AttributedString", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:withInt:withInt:", "AttributedString", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:withInt:withInt:withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:", "AttributedString", NULL, 0x1, NULL, NULL },
    { "addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:withId:", "addAttribute", "V", 0x1, NULL, NULL },
    { "addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:withId:withInt:withInt:", "addAttribute", "V", 0x1, NULL, NULL },
    { "addAttributesWithJavaUtilMap:withInt:withInt:", "addAttributes", "V", 0x1, NULL, "(Ljava/util/Map<+Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;*>;II)V" },
    { "addAttributeImplWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:withId:withInt:withInt:", "addAttributeImpl", "V", 0x22, NULL, NULL },
    { "createRunAttributeDataVectors", NULL, "V", 0x12, NULL, NULL },
    { "ensureRunBreakWithInt:", "ensureRunBreak", "I", 0x12, NULL, NULL },
    { "ensureRunBreakWithInt:withBoolean:", "ensureRunBreak", "I", 0x12, NULL, NULL },
    { "addAttributeRunDataWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:withId:withInt:withInt:", "addAttributeRunData", "V", 0x2, NULL, NULL },
    { "getIterator", NULL, "Lorg.oss.pdfreporter.uses.java.awt.text.IAttributedCharacterIterator;", 0x1, NULL, NULL },
    { "getIteratorWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:", "getIterator", "Lorg.oss.pdfreporter.uses.java.awt.text.IAttributedCharacterIterator;", 0x1, NULL, NULL },
    { "getIteratorWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:withInt:withInt:", "getIterator", "Lorg.oss.pdfreporter.uses.java.awt.text.IAttributedCharacterIterator;", 0x1, NULL, NULL },
    { "length", NULL, "I", 0x0, NULL, NULL },
    { "charAtWithInt:", "charAt", "C", 0x2, NULL, NULL },
    { "getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:withInt:", "getAttribute", "Ljava.lang.Object;", 0x22, NULL, NULL },
    { "getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:withInt:withInt:withInt:", "getAttributeCheckRange", "Ljava.lang.Object;", 0x2, NULL, NULL },
    { "attributeValuesMatchWithJavaUtilSet:withInt:withInt:", "attributeValuesMatch", "Z", 0x2, NULL, NULL },
    { "valuesMatchWithId:withId:", "valuesMatch", "Z", 0x1a, NULL, NULL },
    { "appendContentsWithJavaLangStringBuffer:withOrgOssPdfreporterUsesJavaAwtTextICharacterIterator:", "appendContents", "V", 0x12, NULL, NULL },
    { "setAttributesWithJavaUtilMap:withInt:", "setAttributes", "V", 0x2, NULL, NULL },
    { "mapsDifferWithJavaUtilMap:withJavaUtilMap:", "mapsDiffer", "Z", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ARRAY_SIZE_INCREMENT", "ARRAY_SIZE_INCREMENT", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgOssPdfreporterUsesJavaAwtTextAttributedString_ARRAY_SIZE_INCREMENT },
    { "text_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "runArraySize_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "runCount_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "runStarts_", NULL, 0x0, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "runAttributes_", NULL, 0x0, "[Ljava.util.Vector;", NULL, NULL, .constantValue.asLong = 0 },
    { "runAttributeValues_", NULL, 0x0, "[Ljava.util.Vector;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.uses.java.awt.text.AttributedString$AttributedStringIterator;", "Lorg.oss.pdfreporter.uses.java.awt.text.AttributedString$AttributeMap;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesJavaAwtTextAttributedString = { 2, "AttributedString", "org.oss.pdfreporter.uses.java.awt.text", NULL, 0x1, 26, methods, 7, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterUsesJavaAwtTextAttributedString;
}

@end

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIteratorArray_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, IOSObjectArray *iterators) {
  NSObject_init(self);
  if (iterators == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Iterators must not be null");
  }
  if (iterators->size_ == 0) {
    self->text_ = @"";
  }
  else {
    JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
    for (jint counter = 0; counter < iterators->size_; counter++) {
      OrgOssPdfreporterUsesJavaAwtTextAttributedString_appendContentsWithJavaLangStringBuffer_withOrgOssPdfreporterUsesJavaAwtTextICharacterIterator_(self, buffer, IOSObjectArray_Get(iterators, counter));
    }
    self->text_ = [buffer description];
    if (((jint) [((NSString *) nil_chk(self->text_)) length]) > 0) {
      jint offset = 0;
      id<JavaUtilMap> last = nil;
      for (jint counter = 0; counter < iterators->size_; counter++) {
        id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> iterator = IOSObjectArray_Get(iterators, counter);
        jint start = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getBeginIndex];
        jint end = [iterator getEndIndex];
        jint index = start;
        while (index < end) {
          [iterator setIndexWithInt:index];
          id<JavaUtilMap> attrs = [iterator getAttributes];
          if (OrgOssPdfreporterUsesJavaAwtTextAttributedString_mapsDifferWithJavaUtilMap_withJavaUtilMap_(last, attrs)) {
            OrgOssPdfreporterUsesJavaAwtTextAttributedString_setAttributesWithJavaUtilMap_withInt_(self, attrs, index - start + offset);
          }
          last = attrs;
          index = [iterator getRunLimit];
        }
        offset += (end - start);
      }
    }
  }
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIteratorArray_(IOSObjectArray *iterators) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString, initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIteratorArray_, iterators)
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *create_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIteratorArray_(IOSObjectArray *iterators) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString, initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIteratorArray_, iterators)
}

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, NSString *text) {
  NSObject_init(self);
  if (text == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  self->text_ = text;
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_(NSString *text) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString, initWithNSString_, text)
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *create_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_(NSString *text) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString, initWithNSString_, text)
}

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_withJavaUtilMap_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, NSString *text, id<JavaUtilMap> attributes) {
  NSObject_init(self);
  if (text == nil || attributes == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  self->text_ = text;
  if (((jint) [text length]) == 0) {
    if ([attributes isEmpty]) return;
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't add attribute to 0-length text");
  }
  jint attributeCount = [attributes size];
  if (attributeCount > 0) {
    OrgOssPdfreporterUsesJavaAwtTextAttributedString_createRunAttributeDataVectors(self);
    JavaUtilVector *newRunAttributes = new_JavaUtilVector_initWithInt_(attributeCount);
    JavaUtilVector *newRunAttributeValues = new_JavaUtilVector_initWithInt_(attributeCount);
    (void) IOSObjectArray_Set(nil_chk(self->runAttributes_), 0, newRunAttributes);
    (void) IOSObjectArray_Set(nil_chk(self->runAttributeValues_), 0, newRunAttributeValues);
    id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([attributes entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([iterator next], JavaUtilMap_Entry_class_());
      [newRunAttributes addElementWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
      [newRunAttributeValues addElementWithId:[entry_ getValue]];
    }
  }
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_withJavaUtilMap_(NSString *text, id<JavaUtilMap> attributes) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString, initWithNSString_withJavaUtilMap_, text, attributes)
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *create_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_withJavaUtilMap_(NSString *text, id<JavaUtilMap> attributes) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString, initWithNSString_withJavaUtilMap_, text, attributes)
}

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> text) {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_(self, text, [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) getBeginIndex], [text getEndIndex], nil);
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> text) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString, initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_, text)
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *create_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> text) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString, initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_, text)
}

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> text, jint beginIndex, jint endIndex) {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_(self, text, beginIndex, endIndex, nil);
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> text, jint beginIndex, jint endIndex) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString, initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_, text, beginIndex, endIndex)
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *create_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> text, jint beginIndex, jint endIndex) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString, initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_, text, beginIndex, endIndex)
}

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> text, jint beginIndex, jint endIndex, IOSObjectArray *attributes) {
  NSObject_init(self);
  if (text == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  jint textBeginIndex = [text getBeginIndex];
  jint textEndIndex = [text getEndIndex];
  if (beginIndex < textBeginIndex || endIndex > textEndIndex || beginIndex > endIndex) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid substring range");
  JavaLangStringBuffer *textBuffer = new_JavaLangStringBuffer_init();
  [text setIndexWithInt:beginIndex];
  for (jchar c = [text current]; [text getIndex] < endIndex; c = [text next]) (void) [textBuffer appendWithChar:c];
  self->text_ = [textBuffer description];
  if (beginIndex == endIndex) return;
  JavaUtilHashSet *keys = new_JavaUtilHashSet_init();
  if (attributes == nil) {
    [keys addAllWithJavaUtilCollection:[text getAllAttributeKeys]];
  }
  else {
    for (jint i = 0; i < attributes->size_; i++) [keys addWithId:IOSObjectArray_Get(attributes, i)];
    [keys retainAllWithJavaUtilCollection:[text getAllAttributeKeys]];
  }
  if ([keys isEmpty]) return;
  id<JavaUtilIterator> itr = [keys iterator];
  while ([((id<JavaUtilIterator>) nil_chk(itr)) hasNext]) {
    OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *attributeKey = (OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) cast_chk([itr next], [OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute class]);
    [text setIndexWithInt:textBeginIndex];
    while ([text getIndex] < endIndex) {
      jint start = [text getRunStartWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attributeKey];
      jint limit = [text getRunLimitWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attributeKey];
      id value = [text getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attributeKey];
      if (value != nil) {
        if ([value isKindOfClass:[OrgOssPdfreporterUsesJavaAwtTextAnnotation class]]) {
          if (start >= beginIndex && limit <= endIndex) {
            [self addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attributeKey withId:value withInt:start - beginIndex withInt:limit - beginIndex];
          }
          else {
            if (limit > endIndex) break;
          }
        }
        else {
          if (start >= endIndex) break;
          if (limit > beginIndex) {
            if (start < beginIndex) start = beginIndex;
            if (limit > endIndex) limit = endIndex;
            if (start != limit) {
              [self addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attributeKey withId:value withInt:start - beginIndex withInt:limit - beginIndex];
            }
          }
        }
      }
      [text setIndexWithInt:limit];
    }
  }
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> text, jint beginIndex, jint endIndex, IOSObjectArray *attributes) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString, initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_, text, beginIndex, endIndex, attributes)
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *create_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> text, jint beginIndex, jint endIndex, IOSObjectArray *attributes) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString, initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_, text, beginIndex, endIndex, attributes)
}

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_addAttributeImplWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *attribute, id value, jint beginIndex, jint endIndex) {
  @synchronized(self) {
    if (self->runCount_ == 0) {
      OrgOssPdfreporterUsesJavaAwtTextAttributedString_createRunAttributeDataVectors(self);
    }
    jint beginRunIndex = OrgOssPdfreporterUsesJavaAwtTextAttributedString_ensureRunBreakWithInt_(self, beginIndex);
    jint endRunIndex = OrgOssPdfreporterUsesJavaAwtTextAttributedString_ensureRunBreakWithInt_(self, endIndex);
    OrgOssPdfreporterUsesJavaAwtTextAttributedString_addAttributeRunDataWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_withInt_withInt_(self, attribute, value, beginRunIndex, endRunIndex);
  }
}

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_createRunAttributeDataVectors(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self) {
  IOSIntArray *newRunStarts = [IOSIntArray newArrayWithLength:OrgOssPdfreporterUsesJavaAwtTextAttributedString_ARRAY_SIZE_INCREMENT];
  IOSObjectArray *newRunAttributes = [IOSObjectArray newArrayWithLength:OrgOssPdfreporterUsesJavaAwtTextAttributedString_ARRAY_SIZE_INCREMENT type:JavaUtilVector_class_()];
  IOSObjectArray *newRunAttributeValues = [IOSObjectArray newArrayWithLength:OrgOssPdfreporterUsesJavaAwtTextAttributedString_ARRAY_SIZE_INCREMENT type:JavaUtilVector_class_()];
  self->runStarts_ = newRunStarts;
  self->runAttributes_ = newRunAttributes;
  self->runAttributeValues_ = newRunAttributeValues;
  self->runArraySize_ = OrgOssPdfreporterUsesJavaAwtTextAttributedString_ARRAY_SIZE_INCREMENT;
  self->runCount_ = 1;
}

jint OrgOssPdfreporterUsesJavaAwtTextAttributedString_ensureRunBreakWithInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, jint offset) {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_ensureRunBreakWithInt_withBoolean_(self, offset, true);
}

jint OrgOssPdfreporterUsesJavaAwtTextAttributedString_ensureRunBreakWithInt_withBoolean_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, jint offset, jboolean copyAttrs) {
  if (offset == [self length]) {
    return self->runCount_;
  }
  jint runIndex = 0;
  while (runIndex < self->runCount_ && IOSIntArray_Get(nil_chk(self->runStarts_), runIndex) < offset) {
    runIndex++;
  }
  if (runIndex < self->runCount_ && IOSIntArray_Get(nil_chk(self->runStarts_), runIndex) == offset) {
    return runIndex;
  }
  if (self->runCount_ == self->runArraySize_) {
    jint newArraySize = self->runArraySize_ + OrgOssPdfreporterUsesJavaAwtTextAttributedString_ARRAY_SIZE_INCREMENT;
    IOSIntArray *newRunStarts = [IOSIntArray newArrayWithLength:newArraySize];
    IOSObjectArray *newRunAttributes = [IOSObjectArray newArrayWithLength:newArraySize type:JavaUtilVector_class_()];
    IOSObjectArray *newRunAttributeValues = [IOSObjectArray newArrayWithLength:newArraySize type:JavaUtilVector_class_()];
    for (jint i = 0; i < self->runArraySize_; i++) {
      *IOSIntArray_GetRef(newRunStarts, i) = IOSIntArray_Get(nil_chk(self->runStarts_), i);
      (void) IOSObjectArray_Set(newRunAttributes, i, IOSObjectArray_Get(nil_chk(self->runAttributes_), i));
      (void) IOSObjectArray_Set(newRunAttributeValues, i, IOSObjectArray_Get(nil_chk(self->runAttributeValues_), i));
    }
    self->runStarts_ = newRunStarts;
    self->runAttributes_ = newRunAttributes;
    self->runAttributeValues_ = newRunAttributeValues;
    self->runArraySize_ = newArraySize;
  }
  JavaUtilVector *newRunAttributes = nil;
  JavaUtilVector *newRunAttributeValues = nil;
  if (copyAttrs) {
    JavaUtilVector *oldRunAttributes = IOSObjectArray_Get(nil_chk(self->runAttributes_), runIndex - 1);
    JavaUtilVector *oldRunAttributeValues = IOSObjectArray_Get(nil_chk(self->runAttributeValues_), runIndex - 1);
    if (oldRunAttributes != nil) {
      newRunAttributes = (JavaUtilVector *) cast_chk([oldRunAttributes clone], [JavaUtilVector class]);
    }
    if (oldRunAttributeValues != nil) {
      newRunAttributeValues = (JavaUtilVector *) cast_chk([oldRunAttributeValues clone], [JavaUtilVector class]);
    }
  }
  self->runCount_++;
  for (jint i = self->runCount_ - 1; i > runIndex; i--) {
    *IOSIntArray_GetRef(nil_chk(self->runStarts_), i) = IOSIntArray_Get(self->runStarts_, i - 1);
    (void) IOSObjectArray_Set(nil_chk(self->runAttributes_), i, IOSObjectArray_Get(self->runAttributes_, i - 1));
    (void) IOSObjectArray_Set(nil_chk(self->runAttributeValues_), i, IOSObjectArray_Get(self->runAttributeValues_, i - 1));
  }
  *IOSIntArray_GetRef(nil_chk(self->runStarts_), runIndex) = offset;
  (void) IOSObjectArray_Set(nil_chk(self->runAttributes_), runIndex, newRunAttributes);
  (void) IOSObjectArray_Set(nil_chk(self->runAttributeValues_), runIndex, newRunAttributeValues);
  return runIndex;
}

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_addAttributeRunDataWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *attribute, id value, jint beginRunIndex, jint endRunIndex) {
  for (jint i = beginRunIndex; i < endRunIndex; i++) {
    jint keyValueIndex = -1;
    if (IOSObjectArray_Get(nil_chk(self->runAttributes_), i) == nil) {
      JavaUtilVector *newRunAttributes = new_JavaUtilVector_init();
      JavaUtilVector *newRunAttributeValues = new_JavaUtilVector_init();
      (void) IOSObjectArray_Set(nil_chk(self->runAttributes_), i, newRunAttributes);
      (void) IOSObjectArray_Set(nil_chk(self->runAttributeValues_), i, newRunAttributeValues);
    }
    else {
      keyValueIndex = [((JavaUtilVector *) nil_chk(IOSObjectArray_Get(self->runAttributes_, i))) indexOfWithId:attribute];
    }
    if (keyValueIndex == -1) {
      jint oldSize = [((JavaUtilVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->runAttributes_), i))) size];
      [((JavaUtilVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->runAttributes_), i))) addElementWithId:attribute];
      @try {
        [((JavaUtilVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->runAttributeValues_), i))) addElementWithId:value];
      }
      @catch (JavaLangException *e) {
        [((JavaUtilVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->runAttributes_), i))) setSizeWithInt:oldSize];
        [((JavaUtilVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->runAttributeValues_), i))) setSizeWithInt:oldSize];
      }
    }
    else {
      (void) [((JavaUtilVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->runAttributeValues_), i))) setWithInt:keyValueIndex withId:value];
    }
  }
}

jchar OrgOssPdfreporterUsesJavaAwtTextAttributedString_charAtWithInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, jint index) {
  return [((NSString *) nil_chk(self->text_)) charAtWithInt:index];
}

id OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *attribute, jint runIndex) {
  @synchronized(self) {
    JavaUtilVector *currentRunAttributes = IOSObjectArray_Get(nil_chk(self->runAttributes_), runIndex);
    JavaUtilVector *currentRunAttributeValues = IOSObjectArray_Get(nil_chk(self->runAttributeValues_), runIndex);
    if (currentRunAttributes == nil) {
      return nil;
    }
    jint attributeIndex = [currentRunAttributes indexOfWithId:attribute];
    if (attributeIndex != -1) {
      return [((JavaUtilVector *) nil_chk(currentRunAttributeValues)) elementAtWithInt:attributeIndex];
    }
    else {
      return nil;
    }
  }
}

id OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *attribute, jint runIndex, jint beginIndex, jint endIndex) {
  id value = OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_(self, attribute, runIndex);
  if ([value isKindOfClass:[OrgOssPdfreporterUsesJavaAwtTextAnnotation class]]) {
    if (beginIndex > 0) {
      jint currIndex = runIndex;
      jint runStart = IOSIntArray_Get(nil_chk(self->runStarts_), currIndex);
      while (runStart >= beginIndex && OrgOssPdfreporterUsesJavaAwtTextAttributedString_valuesMatchWithId_withId_(value, OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_(self, attribute, currIndex - 1))) {
        currIndex--;
        runStart = IOSIntArray_Get(nil_chk(self->runStarts_), currIndex);
      }
      if (runStart < beginIndex) {
        return nil;
      }
    }
    jint textLength = [self length];
    if (endIndex < textLength) {
      jint currIndex = runIndex;
      jint runLimit = (currIndex < self->runCount_ - 1) ? IOSIntArray_Get(nil_chk(self->runStarts_), currIndex + 1) : textLength;
      while (runLimit <= endIndex && OrgOssPdfreporterUsesJavaAwtTextAttributedString_valuesMatchWithId_withId_(value, OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_(self, attribute, currIndex + 1))) {
        currIndex++;
        runLimit = (currIndex < self->runCount_ - 1) ? IOSIntArray_Get(nil_chk(self->runStarts_), currIndex + 1) : textLength;
      }
      if (runLimit > endIndex) {
        return nil;
      }
    }
  }
  return value;
}

jboolean OrgOssPdfreporterUsesJavaAwtTextAttributedString_attributeValuesMatchWithJavaUtilSet_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, id<JavaUtilSet> attributes, jint runIndex1, jint runIndex2) {
  id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk(attributes)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *key = (OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) cast_chk([iterator next], [OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute class]);
    if (!OrgOssPdfreporterUsesJavaAwtTextAttributedString_valuesMatchWithId_withId_(OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_(self, key, runIndex1), OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_(self, key, runIndex2))) {
      return false;
    }
  }
  return true;
}

jboolean OrgOssPdfreporterUsesJavaAwtTextAttributedString_valuesMatchWithId_withId_(id value1, id value2) {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_initialize();
  if (value1 == nil) {
    return value2 == nil;
  }
  else {
    return [value1 isEqual:value2];
  }
}

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_appendContentsWithJavaLangStringBuffer_withOrgOssPdfreporterUsesJavaAwtTextICharacterIterator_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, JavaLangStringBuffer *buf, id<OrgOssPdfreporterUsesJavaAwtTextICharacterIterator> iterator) {
  jint index = [((id<OrgOssPdfreporterUsesJavaAwtTextICharacterIterator>) nil_chk(iterator)) getBeginIndex];
  jint end = [iterator getEndIndex];
  while (index < end) {
    [iterator setIndexWithInt:index++];
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithChar:[iterator current]];
  }
}

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_setAttributesWithJavaUtilMap_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *self, id<JavaUtilMap> attrs, jint offset) {
  if (self->runCount_ == 0) {
    OrgOssPdfreporterUsesJavaAwtTextAttributedString_createRunAttributeDataVectors(self);
  }
  jint index = OrgOssPdfreporterUsesJavaAwtTextAttributedString_ensureRunBreakWithInt_withBoolean_(self, offset, false);
  jint size;
  if (attrs != nil && (size = [attrs size]) > 0) {
    JavaUtilVector *runAttrs = new_JavaUtilVector_initWithInt_(size);
    JavaUtilVector *runValues = new_JavaUtilVector_initWithInt_(size);
    id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([attrs entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([iterator next], JavaUtilMap_Entry_class_());
      [runAttrs addWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
      [runValues addWithId:[entry_ getValue]];
    }
    (void) IOSObjectArray_Set(nil_chk(self->runAttributes_), index, runAttrs);
    (void) IOSObjectArray_Set(nil_chk(self->runAttributeValues_), index, runValues);
  }
}

jboolean OrgOssPdfreporterUsesJavaAwtTextAttributedString_mapsDifferWithJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> last, id<JavaUtilMap> attrs) {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_initialize();
  if (last == nil) {
    return (attrs != nil && [attrs size] > 0);
  }
  return (![last isEqual:attrs]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesJavaAwtTextAttributedString)

@implementation OrgOssPdfreporterUsesJavaAwtTextAttributeEntry

- (instancetype)initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)key
                                                                                        withId:(id)value {
  OrgOssPdfreporterUsesJavaAwtTextAttributeEntry_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_(self, key, value);
  return self;
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgOssPdfreporterUsesJavaAwtTextAttributeEntry class]])) {
    return false;
  }
  OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *other = (OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *) cast_chk(o, [OrgOssPdfreporterUsesJavaAwtTextAttributeEntry class]);
  return [((OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) nil_chk(((OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *) nil_chk(other))->key_)) isEqual:key_] && (value_ == nil ? other->value_ == nil : [other->value_ isEqual:value_]);
}

- (id)getKey {
  return key_;
}

- (id)getValue {
  return value_;
}

- (id)setValueWithId:(id)newValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (NSUInteger)hash {
  return ((jint) [((OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) nil_chk(key_)) hash]) ^ (value_ == nil ? 0 : ((jint) [value_ hash]));
}

- (NSString *)description {
  return JreStrcat("$C$", [((OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) nil_chk(key_)) description], '=', [nil_chk(value_) description]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:withId:", "AttributeEntry", NULL, 0x0, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "getKey", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getValue", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "setValueWithId:", "setValue", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "key_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.java.awt.text.IAttributedCharacterIterator$Attribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "value_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesJavaAwtTextAttributeEntry = { 2, "AttributeEntry", "org.oss.pdfreporter.uses.java.awt.text", NULL, 0x0, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesJavaAwtTextAttributeEntry;
}

@end

void OrgOssPdfreporterUsesJavaAwtTextAttributeEntry_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_(OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *self, OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *key, id value) {
  NSObject_init(self);
  self->key_ = key;
  self->value_ = value;
}

OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *new_OrgOssPdfreporterUsesJavaAwtTextAttributeEntry_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *key, id value) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributeEntry, initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_, key, value)
}

OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *create_OrgOssPdfreporterUsesJavaAwtTextAttributeEntry_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *key, id value) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributeEntry, initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_, key, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesJavaAwtTextAttributeEntry)

@implementation OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator

- (instancetype)initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)outer$
withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes
                                                                 withInt:(jint)beginIndex
                                                                 withInt:(jint)endIndex {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_withInt_withInt_(self, outer$, attributes, beginIndex, endIndex);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (!([obj isKindOfClass:[OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator class]])) {
    return false;
  }
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *that = (OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *) cast_chk(obj, [OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator class]);
  if (this$0_ != OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_getString(nil_chk(that))) return false;
  if (currentIndex_ != that->currentIndex_ || beginIndex_ != that->beginIndex_ || endIndex_ != that->endIndex_) return false;
  return true;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(this$0_->text_)) hash]) ^ currentIndex_ ^ beginIndex_ ^ endIndex_;
}

- (id)clone {
  @try {
    OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *other = (OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *) cast_chk([super clone], [OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator class]);
    return other;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw new_JavaLangInternalError_init();
  }
}

- (jchar)first {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_internalSetIndexWithInt_(self, beginIndex_);
}

- (jchar)last {
  if (endIndex_ == beginIndex_) {
    return OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_internalSetIndexWithInt_(self, endIndex_);
  }
  else {
    return OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_internalSetIndexWithInt_(self, endIndex_ - 1);
  }
}

- (jchar)current {
  if (currentIndex_ == endIndex_) {
    return OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE;
  }
  else {
    return OrgOssPdfreporterUsesJavaAwtTextAttributedString_charAtWithInt_(this$0_, currentIndex_);
  }
}

- (jchar)next {
  if (currentIndex_ < endIndex_) {
    return OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_internalSetIndexWithInt_(self, currentIndex_ + 1);
  }
  else {
    return OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE;
  }
}

- (jchar)previous {
  if (currentIndex_ > beginIndex_) {
    return OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_internalSetIndexWithInt_(self, currentIndex_ - 1);
  }
  else {
    return OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE;
  }
}

- (jchar)setIndexWithInt:(jint)position {
  if (position < beginIndex_ || position > endIndex_) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid index");
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_internalSetIndexWithInt_(self, position);
}

- (jint)getBeginIndex {
  return beginIndex_;
}

- (jint)getEndIndex {
  return endIndex_;
}

- (jint)getIndex {
  return currentIndex_;
}

- (jint)getRunStart {
  return currentRunStart_;
}

- (jint)getRunStartWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute {
  if (currentRunStart_ == beginIndex_ || currentRunIndex_ == -1) {
    return currentRunStart_;
  }
  else {
    id value = [self getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute];
    jint runStart = currentRunStart_;
    jint runIndex = currentRunIndex_;
    while (runStart > beginIndex_ && OrgOssPdfreporterUsesJavaAwtTextAttributedString_valuesMatchWithId_withId_(value, OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_(this$0_, attribute, runIndex - 1))) {
      runIndex--;
      runStart = IOSIntArray_Get(nil_chk(this$0_->runStarts_), runIndex);
    }
    if (runStart < beginIndex_) {
      runStart = beginIndex_;
    }
    return runStart;
  }
}

- (jint)getRunStartWithJavaUtilSet:(id<JavaUtilSet>)attributes {
  if (currentRunStart_ == beginIndex_ || currentRunIndex_ == -1) {
    return currentRunStart_;
  }
  else {
    jint runStart = currentRunStart_;
    jint runIndex = currentRunIndex_;
    while (runStart > beginIndex_ && OrgOssPdfreporterUsesJavaAwtTextAttributedString_attributeValuesMatchWithJavaUtilSet_withInt_withInt_(this$0_, attributes, currentRunIndex_, runIndex - 1)) {
      runIndex--;
      runStart = IOSIntArray_Get(nil_chk(this$0_->runStarts_), runIndex);
    }
    if (runStart < beginIndex_) {
      runStart = beginIndex_;
    }
    return runStart;
  }
}

- (jint)getRunLimit {
  return currentRunLimit_;
}

- (jint)getRunLimitWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute {
  if (currentRunLimit_ == endIndex_ || currentRunIndex_ == -1) {
    return currentRunLimit_;
  }
  else {
    id value = [self getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute];
    jint runLimit = currentRunLimit_;
    jint runIndex = currentRunIndex_;
    while (runLimit < endIndex_ && OrgOssPdfreporterUsesJavaAwtTextAttributedString_valuesMatchWithId_withId_(value, OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_(this$0_, attribute, runIndex + 1))) {
      runIndex++;
      runLimit = runIndex < this$0_->runCount_ - 1 ? IOSIntArray_Get(nil_chk(this$0_->runStarts_), runIndex + 1) : endIndex_;
    }
    if (runLimit > endIndex_) {
      runLimit = endIndex_;
    }
    return runLimit;
  }
}

- (jint)getRunLimitWithJavaUtilSet:(id<JavaUtilSet>)attributes {
  if (currentRunLimit_ == endIndex_ || currentRunIndex_ == -1) {
    return currentRunLimit_;
  }
  else {
    jint runLimit = currentRunLimit_;
    jint runIndex = currentRunIndex_;
    while (runLimit < endIndex_ && OrgOssPdfreporterUsesJavaAwtTextAttributedString_attributeValuesMatchWithJavaUtilSet_withInt_withInt_(this$0_, attributes, currentRunIndex_, runIndex + 1)) {
      runIndex++;
      runLimit = runIndex < this$0_->runCount_ - 1 ? IOSIntArray_Get(nil_chk(this$0_->runStarts_), runIndex + 1) : endIndex_;
    }
    if (runLimit > endIndex_) {
      runLimit = endIndex_;
    }
    return runLimit;
  }
}

- (id<JavaUtilMap>)getAttributes {
  if (this$0_->runAttributes_ == nil || currentRunIndex_ == -1 || IOSObjectArray_Get(this$0_->runAttributes_, currentRunIndex_) == nil) {
    return new_JavaUtilHashtable_init();
  }
  return new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withInt_withInt_withInt_(this$0_, currentRunIndex_, beginIndex_, endIndex_);
}

- (id<JavaUtilSet>)getAllAttributeKeys {
  if (this$0_->runAttributes_ == nil) {
    return new_JavaUtilHashSet_init();
  }
  @synchronized(this$0_) {
    id<JavaUtilSet> keys = new_JavaUtilHashSet_init();
    jint i = 0;
    while (i < this$0_->runCount_) {
      if (IOSIntArray_Get(nil_chk(this$0_->runStarts_), i) < endIndex_ && (i == this$0_->runCount_ - 1 || IOSIntArray_Get(this$0_->runStarts_, i + 1) > beginIndex_)) {
        JavaUtilVector *currentRunAttributes = IOSObjectArray_Get(nil_chk(this$0_->runAttributes_), i);
        if (currentRunAttributes != nil) {
          jint j = [currentRunAttributes size];
          while (j-- > 0) {
            [keys addWithId:[currentRunAttributes getWithInt:j]];
          }
        }
      }
      i++;
    }
    return keys;
  }
}

- (id)getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute {
  jint runIndex = currentRunIndex_;
  if (runIndex < 0) {
    return nil;
  }
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_withInt_withInt_(this$0_, attribute, runIndex, beginIndex_, endIndex_);
}

- (OrgOssPdfreporterUsesJavaAwtTextAttributedString *)getString {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_getString(self);
}

- (jchar)internalSetIndexWithInt:(jint)position {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_internalSetIndexWithInt_(self, position);
}

- (void)updateRunInfo {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_updateRunInfo(self);
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:withInt:withInt:", "AttributedStringIterator", NULL, 0x0, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "first", NULL, "C", 0x1, NULL, NULL },
    { "last", NULL, "C", 0x1, NULL, NULL },
    { "current", NULL, "C", 0x1, NULL, NULL },
    { "next", NULL, "C", 0x1, NULL, NULL },
    { "previous", NULL, "C", 0x1, NULL, NULL },
    { "setIndexWithInt:", "setIndex", "C", 0x1, NULL, NULL },
    { "getBeginIndex", NULL, "I", 0x1, NULL, NULL },
    { "getEndIndex", NULL, "I", 0x1, NULL, NULL },
    { "getIndex", NULL, "I", 0x1, NULL, NULL },
    { "getRunStart", NULL, "I", 0x1, NULL, NULL },
    { "getRunStartWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:", "getRunStart", "I", 0x1, NULL, NULL },
    { "getRunStartWithJavaUtilSet:", "getRunStart", "I", 0x1, NULL, "(Ljava/util/Set<+Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;>;)I" },
    { "getRunLimit", NULL, "I", 0x1, NULL, NULL },
    { "getRunLimitWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:", "getRunLimit", "I", 0x1, NULL, NULL },
    { "getRunLimitWithJavaUtilSet:", "getRunLimit", "I", 0x1, NULL, "(Ljava/util/Set<+Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;>;)I" },
    { "getAttributes", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;" },
    { "getAllAttributeKeys", NULL, "Ljava.util.Set;", 0x1, NULL, "()Ljava/util/Set<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;>;" },
    { "getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:", "getAttribute", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getString", NULL, "Lorg.oss.pdfreporter.uses.java.awt.text.AttributedString;", 0x2, NULL, NULL },
    { "internalSetIndexWithInt:", "internalSetIndex", "C", 0x2, NULL, NULL },
    { "updateRunInfo", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.oss.pdfreporter.uses.java.awt.text.AttributedString;", NULL, NULL, .constantValue.asLong = 0 },
    { "beginIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "endIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "relevantAttributes_", NULL, 0x2, "[Lorg.oss.pdfreporter.uses.java.awt.text.IAttributedCharacterIterator$Attribute;", NULL, NULL, .constantValue.asLong = 0 },
    { "currentIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "currentRunIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "currentRunStart_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "currentRunLimit_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator = { 2, "AttributedStringIterator", "org.oss.pdfreporter.uses.java.awt.text", "AttributedString", 0x12, 25, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator;
}

@end

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *self, OrgOssPdfreporterUsesJavaAwtTextAttributedString *outer$, IOSObjectArray *attributes, jint beginIndex, jint endIndex) {
  self->this$0_ = outer$;
  NSObject_init(self);
  if (beginIndex < 0 || beginIndex > endIndex || endIndex > [outer$ length]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid substring range");
  }
  self->beginIndex_ = beginIndex;
  self->endIndex_ = endIndex;
  self->currentIndex_ = beginIndex;
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_updateRunInfo(self);
  if (attributes != nil) {
    self->relevantAttributes_ = [attributes clone];
  }
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *outer$, IOSObjectArray *attributes, jint beginIndex, jint endIndex) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator, initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_withInt_withInt_, outer$, attributes, beginIndex, endIndex)
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *create_OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *outer$, IOSObjectArray *attributes, jint beginIndex, jint endIndex) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator, initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray_withInt_withInt_, outer$, attributes, beginIndex, endIndex)
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString *OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_getString(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *self) {
  return self->this$0_;
}

jchar OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_internalSetIndexWithInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *self, jint position) {
  self->currentIndex_ = position;
  if (position < self->currentRunStart_ || position >= self->currentRunLimit_) {
    OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_updateRunInfo(self);
  }
  if (self->currentIndex_ == self->endIndex_) {
    return OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE;
  }
  else {
    return OrgOssPdfreporterUsesJavaAwtTextAttributedString_charAtWithInt_(self->this$0_, position);
  }
}

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator_updateRunInfo(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *self) {
  if (self->currentIndex_ == self->endIndex_) {
    self->currentRunStart_ = self->currentRunLimit_ = self->endIndex_;
    self->currentRunIndex_ = -1;
  }
  else {
    @synchronized(self->this$0_) {
      jint runIndex = -1;
      while (runIndex < self->this$0_->runCount_ - 1 && IOSIntArray_Get(nil_chk(self->this$0_->runStarts_), runIndex + 1) <= self->currentIndex_) runIndex++;
      self->currentRunIndex_ = runIndex;
      if (runIndex >= 0) {
        self->currentRunStart_ = IOSIntArray_Get(nil_chk(self->this$0_->runStarts_), runIndex);
        if (self->currentRunStart_ < self->beginIndex_) self->currentRunStart_ = self->beginIndex_;
      }
      else {
        self->currentRunStart_ = self->beginIndex_;
      }
      if (runIndex < self->this$0_->runCount_ - 1) {
        self->currentRunLimit_ = IOSIntArray_Get(nil_chk(self->this$0_->runStarts_), runIndex + 1);
        if (self->currentRunLimit_ > self->endIndex_) self->currentRunLimit_ = self->endIndex_;
      }
      else {
        self->currentRunLimit_ = self->endIndex_;
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator)

@implementation OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap

- (instancetype)initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)outer$
                                                                 withInt:(jint)runIndex
                                                                 withInt:(jint)beginIndex
                                                                 withInt:(jint)endIndex {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withInt_withInt_withInt_(self, outer$, runIndex, beginIndex, endIndex);
  return self;
}

- (id<JavaUtilSet>)entrySet {
  JavaUtilHashSet *set = new_JavaUtilHashSet_init();
  @synchronized(this$0_) {
    jint size = [((JavaUtilVector *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->runAttributes_), runIndex_))) size];
    for (jint i = 0; i < size; i++) {
      OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *key = (OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) cast_chk([((JavaUtilVector *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->runAttributes_), runIndex_))) getWithInt:i], [OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute class]);
      id value = [((JavaUtilVector *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->runAttributeValues_), runIndex_))) getWithInt:i];
      if ([value isKindOfClass:[OrgOssPdfreporterUsesJavaAwtTextAnnotation class]]) {
        value = OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_withInt_withInt_(this$0_, key, runIndex_, beginIndex_, endIndex_);
        if (value == nil) {
          continue;
        }
      }
      id<JavaUtilMap_Entry> entry_ = new_OrgOssPdfreporterUsesJavaAwtTextAttributeEntry_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withId_(key, value);
      [set addWithId:entry_];
    }
  }
  return set;
}

- (id)getWithId:(id)key {
  return OrgOssPdfreporterUsesJavaAwtTextAttributedString_getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute_withInt_withInt_withInt_(this$0_, (OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) cast_chk(key, [OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute class]), runIndex_, beginIndex_, endIndex_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:withInt:withInt:withInt:", "AttributeMap", NULL, 0x0, NULL, NULL },
    { "entrySet", NULL, "Ljava.util.Set;", 0x1, NULL, "()Ljava/util/Set;" },
    { "getWithId:", "get", "Ljava.lang.Object;", 0x1, NULL, "(Ljava/lang/Object;)Ljava/lang/Object;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.oss.pdfreporter.uses.java.awt.text.AttributedString;", NULL, NULL, .constantValue.asLong = 0 },
    { "runIndex_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "beginIndex_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "endIndex_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lorg.oss.pdfreporter.uses.java.awt.text.IAttributedCharacterIterator$Attribute;", "Ljava.lang.Object;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap = { 2, "AttributeMap", "org.oss.pdfreporter.uses.java.awt.text", "AttributedString", 0x12, 3, methods, 4, fields, 2, superclass_type_args, 0, NULL, NULL, "Ljava/util/AbstractMap<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;" };
  return &_OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap;
}

@end

void OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withInt_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap *self, OrgOssPdfreporterUsesJavaAwtTextAttributedString *outer$, jint runIndex, jint beginIndex, jint endIndex) {
  self->this$0_ = outer$;
  JavaUtilAbstractMap_init(self);
  self->runIndex_ = runIndex;
  self->beginIndex_ = beginIndex;
  self->endIndex_ = endIndex;
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap *new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withInt_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *outer$, jint runIndex, jint beginIndex, jint endIndex) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap, initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withInt_withInt_withInt_, outer$, runIndex, beginIndex, endIndex)
}

OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap *create_OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap_initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withInt_withInt_withInt_(OrgOssPdfreporterUsesJavaAwtTextAttributedString *outer$, jint runIndex, jint beginIndex, jint endIndex) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap, initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString_withInt_withInt_withInt_, outer$, runIndex, beginIndex, endIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap)
