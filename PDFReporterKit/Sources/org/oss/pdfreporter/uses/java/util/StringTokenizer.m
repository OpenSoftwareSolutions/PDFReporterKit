//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/java/util/StringTokenizer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "org/oss/pdfreporter/uses/java/util/StringTokenizer.h"

@interface OrgOssPdfreporterUsesJavaUtilStringTokenizer () {
 @public
  jint currentPosition_;
  jint newPosition_;
  jint maxPosition_;
  NSString *str_;
  NSString *delimiters_;
  jboolean retDelims_;
  jboolean delimsChanged_;
  jint maxDelimCodePoint_;
  jboolean hasSurrogates_;
  IOSIntArray *delimiterCodePoints_;
}

- (void)setMaxDelimCodePoint;

- (jint)skipDelimitersWithInt:(jint)startPos;

- (jint)scanTokenWithInt:(jint)startPos;

- (jboolean)isDelimiterWithInt:(jint)codePoint;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesJavaUtilStringTokenizer, str_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesJavaUtilStringTokenizer, delimiters_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesJavaUtilStringTokenizer, delimiterCodePoints_, IOSIntArray *)

__attribute__((unused)) static void OrgOssPdfreporterUsesJavaUtilStringTokenizer_setMaxDelimCodePoint(OrgOssPdfreporterUsesJavaUtilStringTokenizer *self);

__attribute__((unused)) static jint OrgOssPdfreporterUsesJavaUtilStringTokenizer_skipDelimitersWithInt_(OrgOssPdfreporterUsesJavaUtilStringTokenizer *self, jint startPos);

__attribute__((unused)) static jint OrgOssPdfreporterUsesJavaUtilStringTokenizer_scanTokenWithInt_(OrgOssPdfreporterUsesJavaUtilStringTokenizer *self, jint startPos);

__attribute__((unused)) static jboolean OrgOssPdfreporterUsesJavaUtilStringTokenizer_isDelimiterWithInt_(OrgOssPdfreporterUsesJavaUtilStringTokenizer *self, jint codePoint);

@implementation OrgOssPdfreporterUsesJavaUtilStringTokenizer

- (void)setMaxDelimCodePoint {
  OrgOssPdfreporterUsesJavaUtilStringTokenizer_setMaxDelimCodePoint(self);
}

- (instancetype)initWithNSString:(NSString *)str
                    withNSString:(NSString *)delim
                     withBoolean:(jboolean)returnDelims {
  OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(self, str, delim, returnDelims);
  return self;
}

- (instancetype)initWithNSString:(NSString *)str
                    withNSString:(NSString *)delim {
  OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_withNSString_(self, str, delim);
  return self;
}

- (instancetype)initWithNSString:(NSString *)str {
  OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_(self, str);
  return self;
}

- (jint)skipDelimitersWithInt:(jint)startPos {
  return OrgOssPdfreporterUsesJavaUtilStringTokenizer_skipDelimitersWithInt_(self, startPos);
}

- (jint)scanTokenWithInt:(jint)startPos {
  return OrgOssPdfreporterUsesJavaUtilStringTokenizer_scanTokenWithInt_(self, startPos);
}

- (jboolean)isDelimiterWithInt:(jint)codePoint {
  return OrgOssPdfreporterUsesJavaUtilStringTokenizer_isDelimiterWithInt_(self, codePoint);
}

- (jboolean)hasMoreTokens {
  newPosition_ = OrgOssPdfreporterUsesJavaUtilStringTokenizer_skipDelimitersWithInt_(self, currentPosition_);
  return (newPosition_ < maxPosition_);
}

- (NSString *)nextToken {
  currentPosition_ = (newPosition_ >= 0 && !delimsChanged_) ? newPosition_ : OrgOssPdfreporterUsesJavaUtilStringTokenizer_skipDelimitersWithInt_(self, currentPosition_);
  delimsChanged_ = false;
  newPosition_ = -1;
  if (currentPosition_ >= maxPosition_) @throw new_JavaLangRuntimeException_initWithNSString_(@"NoSuchElementException");
  jint start = currentPosition_;
  currentPosition_ = OrgOssPdfreporterUsesJavaUtilStringTokenizer_scanTokenWithInt_(self, currentPosition_);
  return [((NSString *) nil_chk(str_)) substring:start endIndex:currentPosition_];
}

- (NSString *)nextTokenWithNSString:(NSString *)delim {
  delimiters_ = delim;
  delimsChanged_ = true;
  OrgOssPdfreporterUsesJavaUtilStringTokenizer_setMaxDelimCodePoint(self);
  return [self nextToken];
}

- (jboolean)hasMoreElements {
  return [self hasMoreTokens];
}

- (id)nextElement {
  return [self nextToken];
}

- (jint)countTokens {
  jint count = 0;
  jint currpos = currentPosition_;
  while (currpos < maxPosition_) {
    currpos = OrgOssPdfreporterUsesJavaUtilStringTokenizer_skipDelimitersWithInt_(self, currpos);
    if (currpos >= maxPosition_) break;
    currpos = OrgOssPdfreporterUsesJavaUtilStringTokenizer_scanTokenWithInt_(self, currpos);
    count++;
  }
  return count;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setMaxDelimCodePoint", NULL, "V", 0x2, NULL, NULL },
    { "initWithNSString:withNSString:withBoolean:", "StringTokenizer", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withNSString:", "StringTokenizer", NULL, 0x1, NULL, NULL },
    { "initWithNSString:", "StringTokenizer", NULL, 0x1, NULL, NULL },
    { "skipDelimitersWithInt:", "skipDelimiters", "I", 0x2, NULL, NULL },
    { "scanTokenWithInt:", "scanToken", "I", 0x2, NULL, NULL },
    { "isDelimiterWithInt:", "isDelimiter", "Z", 0x2, NULL, NULL },
    { "hasMoreTokens", NULL, "Z", 0x1, NULL, NULL },
    { "nextToken", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "nextTokenWithNSString:", "nextToken", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "hasMoreElements", NULL, "Z", 0x1, NULL, NULL },
    { "nextElement", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "countTokens", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "currentPosition_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "newPosition_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "maxPosition_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "str_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "delimiters_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "retDelims_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "delimsChanged_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "maxDelimCodePoint_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "hasSurrogates_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "delimiterCodePoints_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesJavaUtilStringTokenizer = { 2, "StringTokenizer", "org.oss.pdfreporter.uses.java.util", NULL, 0x1, 13, methods, 10, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Enumeration<Ljava/lang/Object;>;" };
  return &_OrgOssPdfreporterUsesJavaUtilStringTokenizer;
}

@end

void OrgOssPdfreporterUsesJavaUtilStringTokenizer_setMaxDelimCodePoint(OrgOssPdfreporterUsesJavaUtilStringTokenizer *self) {
  if (self->delimiters_ == nil) {
    self->maxDelimCodePoint_ = 0;
    return;
  }
  jint m = 0;
  jint c;
  jint count = 0;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(self->delimiters_)) length]); i += JavaLangCharacter_charCountWithInt_(c)) {
    c = [((NSString *) nil_chk(self->delimiters_)) charAtWithInt:i];
    if (c >= JavaLangCharacter_MIN_HIGH_SURROGATE && c <= JavaLangCharacter_MAX_LOW_SURROGATE) {
      c = [((NSString *) nil_chk(self->delimiters_)) codePointAt:i];
      self->hasSurrogates_ = true;
    }
    if (m < c) m = c;
    count++;
  }
  self->maxDelimCodePoint_ = m;
  if (self->hasSurrogates_) {
    self->delimiterCodePoints_ = [IOSIntArray newArrayWithLength:count];
    for (jint i = 0, j = 0; i < count; i++, j += JavaLangCharacter_charCountWithInt_(c)) {
      c = [((NSString *) nil_chk(self->delimiters_)) codePointAt:j];
      *IOSIntArray_GetRef(nil_chk(self->delimiterCodePoints_), i) = c;
    }
  }
}

void OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(OrgOssPdfreporterUsesJavaUtilStringTokenizer *self, NSString *str, NSString *delim, jboolean returnDelims) {
  NSObject_init(self);
  self->hasSurrogates_ = false;
  self->currentPosition_ = 0;
  self->newPosition_ = -1;
  self->delimsChanged_ = false;
  self->str_ = str;
  self->maxPosition_ = ((jint) [((NSString *) nil_chk(str)) length]);
  self->delimiters_ = delim;
  self->retDelims_ = returnDelims;
  OrgOssPdfreporterUsesJavaUtilStringTokenizer_setMaxDelimCodePoint(self);
}

OrgOssPdfreporterUsesJavaUtilStringTokenizer *new_OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(NSString *str, NSString *delim, jboolean returnDelims) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesJavaUtilStringTokenizer, initWithNSString_withNSString_withBoolean_, str, delim, returnDelims)
}

OrgOssPdfreporterUsesJavaUtilStringTokenizer *create_OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(NSString *str, NSString *delim, jboolean returnDelims) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesJavaUtilStringTokenizer, initWithNSString_withNSString_withBoolean_, str, delim, returnDelims)
}

void OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_withNSString_(OrgOssPdfreporterUsesJavaUtilStringTokenizer *self, NSString *str, NSString *delim) {
  OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(self, str, delim, false);
}

OrgOssPdfreporterUsesJavaUtilStringTokenizer *new_OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_withNSString_(NSString *str, NSString *delim) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesJavaUtilStringTokenizer, initWithNSString_withNSString_, str, delim)
}

OrgOssPdfreporterUsesJavaUtilStringTokenizer *create_OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_withNSString_(NSString *str, NSString *delim) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesJavaUtilStringTokenizer, initWithNSString_withNSString_, str, delim)
}

void OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_(OrgOssPdfreporterUsesJavaUtilStringTokenizer *self, NSString *str) {
  OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(self, str, @" \t\n\x0d\x0c", false);
}

OrgOssPdfreporterUsesJavaUtilStringTokenizer *new_OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_(NSString *str) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesJavaUtilStringTokenizer, initWithNSString_, str)
}

OrgOssPdfreporterUsesJavaUtilStringTokenizer *create_OrgOssPdfreporterUsesJavaUtilStringTokenizer_initWithNSString_(NSString *str) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesJavaUtilStringTokenizer, initWithNSString_, str)
}

jint OrgOssPdfreporterUsesJavaUtilStringTokenizer_skipDelimitersWithInt_(OrgOssPdfreporterUsesJavaUtilStringTokenizer *self, jint startPos) {
  if (self->delimiters_ == nil) @throw new_JavaLangNullPointerException_init();
  jint position = startPos;
  while (!self->retDelims_ && position < self->maxPosition_) {
    if (!self->hasSurrogates_) {
      jchar c = [((NSString *) nil_chk(self->str_)) charAtWithInt:position];
      if ((c > self->maxDelimCodePoint_) || ([((NSString *) nil_chk(self->delimiters_)) indexOf:c] < 0)) break;
      position++;
    }
    else {
      jint c = [((NSString *) nil_chk(self->str_)) codePointAt:position];
      if ((c > self->maxDelimCodePoint_) || !OrgOssPdfreporterUsesJavaUtilStringTokenizer_isDelimiterWithInt_(self, c)) {
        break;
      }
      position += JavaLangCharacter_charCountWithInt_(c);
    }
  }
  return position;
}

jint OrgOssPdfreporterUsesJavaUtilStringTokenizer_scanTokenWithInt_(OrgOssPdfreporterUsesJavaUtilStringTokenizer *self, jint startPos) {
  jint position = startPos;
  while (position < self->maxPosition_) {
    if (!self->hasSurrogates_) {
      jchar c = [((NSString *) nil_chk(self->str_)) charAtWithInt:position];
      if ((c <= self->maxDelimCodePoint_) && ([((NSString *) nil_chk(self->delimiters_)) indexOf:c] >= 0)) break;
      position++;
    }
    else {
      jint c = [((NSString *) nil_chk(self->str_)) codePointAt:position];
      if ((c <= self->maxDelimCodePoint_) && OrgOssPdfreporterUsesJavaUtilStringTokenizer_isDelimiterWithInt_(self, c)) break;
      position += JavaLangCharacter_charCountWithInt_(c);
    }
  }
  if (self->retDelims_ && (startPos == position)) {
    if (!self->hasSurrogates_) {
      jchar c = [((NSString *) nil_chk(self->str_)) charAtWithInt:position];
      if ((c <= self->maxDelimCodePoint_) && ([((NSString *) nil_chk(self->delimiters_)) indexOf:c] >= 0)) position++;
    }
    else {
      jint c = [((NSString *) nil_chk(self->str_)) codePointAt:position];
      if ((c <= self->maxDelimCodePoint_) && OrgOssPdfreporterUsesJavaUtilStringTokenizer_isDelimiterWithInt_(self, c)) position += JavaLangCharacter_charCountWithInt_(c);
    }
  }
  return position;
}

jboolean OrgOssPdfreporterUsesJavaUtilStringTokenizer_isDelimiterWithInt_(OrgOssPdfreporterUsesJavaUtilStringTokenizer *self, jint codePoint) {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(self->delimiterCodePoints_))->size_; i++) {
    if (IOSIntArray_Get(self->delimiterCodePoints_, i) == codePoint) {
      return true;
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesJavaUtilStringTokenizer)
