//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/AbstractOperator.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/AbstractOperator.h"

@interface OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator () {
 @public
  NSString *symbol_;
  jint precedence_;
  jboolean unary_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator, symbol_, NSString *)

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator

- (instancetype)initWithNSString:(NSString *)symbol
                         withInt:(jint)precedence {
  OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator_initWithNSString_withInt_(self, symbol, precedence);
  return self;
}

- (instancetype)initWithNSString:(NSString *)symbol
                         withInt:(jint)precedence
                     withBoolean:(jboolean)unary {
  OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator_initWithNSString_withInt_withBoolean_(self, symbol, precedence, unary);
  return self;
}

- (jdouble)evaluateWithDouble:(jdouble)leftOperand
                   withDouble:(jdouble)rightOperand {
  return 0;
}

- (NSString *)evaluateWithNSString:(NSString *)leftOperand
                      withNSString:(NSString *)rightOperand {
  @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Invalid operation for a string.");
}

- (jdouble)evaluateWithDouble:(jdouble)operand {
  return 0;
}

- (NSString *)getSymbol {
  return symbol_;
}

- (jint)getPrecedence {
  return precedence_;
}

- (jint)getLength {
  return ((jint) [((NSString *) nil_chk(symbol_)) length]);
}

- (jboolean)isUnary {
  return unary_;
}

- (jboolean)isEqual:(id)object {
  if (object == nil) {
    return false;
  }
  if (!([object isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator class]])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Invalid operator object.");
  }
  OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator *operator_ = (OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator *) cast_chk(object, [OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator class]);
  if ([((NSString *) nil_chk(symbol_)) isEqual:[operator_ getSymbol]]) {
    return true;
  }
  return false;
}

- (NSString *)description {
  return [self getSymbol];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", "AbstractOperator", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withInt:withBoolean:", "AbstractOperator", NULL, 0x1, NULL, NULL },
    { "evaluateWithDouble:withDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluateWithNSString:withNSString:", "evaluate", "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "getSymbol", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPrecedence", NULL, "I", 0x1, NULL, NULL },
    { "getLength", NULL, "I", 0x1, NULL, NULL },
    { "isUnary", NULL, "Z", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "symbol_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "precedence_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "unary_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator = { 2, "AbstractOperator", "org.oss.pdfreporter.uses.net.sourceforge.jeval.operator", NULL, 0x401, 11, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator;
}

@end

void OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator_initWithNSString_withInt_(OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator *self, NSString *symbol, jint precedence) {
  NSObject_init(self);
  self->symbol_ = nil;
  self->precedence_ = 0;
  self->unary_ = false;
  self->symbol_ = symbol;
  self->precedence_ = precedence;
}

void OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator_initWithNSString_withInt_withBoolean_(OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator *self, NSString *symbol, jint precedence, jboolean unary) {
  NSObject_init(self);
  self->symbol_ = nil;
  self->precedence_ = 0;
  self->unary_ = false;
  self->symbol_ = symbol;
  self->precedence_ = precedence;
  self->unary_ = unary;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAbstractOperator)
