//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/function/string/Replace.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionHelper.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionResult.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/string/Replace.h"

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace

- (NSString *)getName {
  return @"replace";
}

- (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *)executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)evaluator
                                                                                                                    withNSString:(NSString *)arguments {
  NSString *result = nil;
  NSString *exceptionMessage = @"One string argument and two character arguments are required.";
  JavaUtilArrayList *values = OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_getStringsWithNSString_withChar_(arguments, OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR);
  if ([((JavaUtilArrayList *) nil_chk(values)) size] != 3) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_(exceptionMessage);
  }
  @try {
    NSString *argumentOne = OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_trimAndRemoveQuoteCharsWithNSString_withChar_((NSString *) cast_chk([values getWithInt:0], [NSString class]), [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator)) getQuoteCharacter]);
    NSString *argumentTwo = OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_trimAndRemoveQuoteCharsWithNSString_withChar_((NSString *) cast_chk([values getWithInt:1], [NSString class]), [evaluator getQuoteCharacter]);
    NSString *argumentThree = OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_trimAndRemoveQuoteCharsWithNSString_withChar_((NSString *) cast_chk([values getWithInt:2], [NSString class]), [evaluator getQuoteCharacter]);
    jchar oldCharacter = ' ';
    if (((jint) [((NSString *) nil_chk(argumentTwo)) length]) == 1) {
      oldCharacter = [argumentTwo charAtWithInt:0];
    }
    else {
      @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_(exceptionMessage);
    }
    jchar newCharacter = ' ';
    if (((jint) [((NSString *) nil_chk(argumentThree)) length]) == 1) {
      newCharacter = [argumentThree charAtWithInt:0];
    }
    else {
      @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_(exceptionMessage);
    }
    result = [((NSString *) nil_chk(argumentOne)) replace:oldCharacter withChar:newCharacter];
  }
  @catch (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *fe) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_withJavaLangException_([((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *) nil_chk(fe)) getMessage], fe);
  }
  @catch (JavaLangException *e) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_withJavaLangException_(exceptionMessage, e);
  }
  return new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult_initWithNSString_withInt_(result, OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_STRING);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:withNSString:", "execute", "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionResult;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionException;", NULL },
    { "init", "Replace", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace = { 2, "Replace", "org.oss.pdfreporter.uses.net.sourceforge.jeval.function.string", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace;
}

@end

void OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace_init(OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace *self) {
  NSObject_init(self);
}

OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace *new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace, init)
}

OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace *create_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringReplace)
