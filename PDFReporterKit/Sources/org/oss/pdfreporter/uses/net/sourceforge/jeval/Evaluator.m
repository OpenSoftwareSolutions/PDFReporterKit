//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/converters/DecimalConverter.h"
#include "org/oss/pdfreporter/uses/java/util/Stack.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationHelper.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ExpressionOperand.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ExpressionOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ExpressionTree.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/NextOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ParsedFunction.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/VariableResolver.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/Function.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionGroup.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionResult.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/math/MathFunctions.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/string/StringFunctions.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/AdditionOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/BooleanAndOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/BooleanNotOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/BooleanOrOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/ClosedParenthesesOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/DivisionOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/EqualOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/GreaterThanOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/GreaterThanOrEqualOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/LessThanOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/LessThanOrEqualOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/ModulusOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/MultiplicationOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/NotEqualOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/OpenParenthesesOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/Operator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/SubtractionOperator.h"

@interface OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator () {
 @public
  id<JavaUtilList> operators_;
  id<JavaUtilMap> functions_;
  id<JavaUtilMap> variables_;
  jchar quoteCharacter_;
  id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> openParenthesesOperator_;
  id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> closedParenthesesOperator_;
  jboolean loadMathVariables_;
  jboolean loadMathFunctions_;
  jboolean loadStringFunctions_;
  jboolean processNestedFunctions_;
  NSString *previousExpression_;
  OrgOssPdfreporterUsesJavaUtilStack *previousOperatorStack_;
  OrgOssPdfreporterUsesJavaUtilStack *previousOperandStack_;
  OrgOssPdfreporterUsesJavaUtilStack *operatorStack_;
  OrgOssPdfreporterUsesJavaUtilStack *operandStack_;
  id<OrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver> variableResolver_;
}

- (void)installOperators;

- (jint)processOperandWithNSString:(NSString *)expression
                           withInt:(jint)charCtr
                           withInt:(jint)operatorIndex
withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack
withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)unaryOperator;

- (jint)processOperatorWithNSString:(NSString *)expression
                            withInt:(jint)originalOperatorIndex
withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)originalOperator
withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operatorStack
withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack
                        withBoolean:(jboolean)haveOperand
withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)unaryOperator;

- (jint)processUnaryOperatorWithInt:(jint)operatorIndex
withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)operator_;

- (OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *)processFunctionWithNSString:(NSString *)expression
                                                                              withInt:(jint)operatorIndex
                                               withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack;

- (void)processTreeWithOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack
                   withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operatorStack;

- (NSString *)getResultWithOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operatorStack
                       withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack
                                                  withBoolean:(jboolean)wrapStringFunctionResults;

- (OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *)getNextOperatorWithNSString:(NSString *)expression
                                                                              withInt:(jint)start
                         withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)match;

- (void)loadSystemFunctions;

- (void)loadSystemVariables;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, operators_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, functions_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, variables_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, openParenthesesOperator_, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, closedParenthesesOperator_, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, previousExpression_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, previousOperatorStack_, OrgOssPdfreporterUsesJavaUtilStack *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, previousOperandStack_, OrgOssPdfreporterUsesJavaUtilStack *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, operatorStack_, OrgOssPdfreporterUsesJavaUtilStack *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, operandStack_, OrgOssPdfreporterUsesJavaUtilStack *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, variableResolver_, id<OrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver>)

__attribute__((unused)) static void OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_installOperators(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self);

__attribute__((unused)) static jint OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processOperandWithNSString_withInt_withInt_withOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, NSString *expression, jint charCtr, jint operatorIndex, OrgOssPdfreporterUsesJavaUtilStack *operandStack, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> unaryOperator);

__attribute__((unused)) static jint OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processOperatorWithNSString_withInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_withBoolean_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, NSString *expression, jint originalOperatorIndex, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> originalOperator, OrgOssPdfreporterUsesJavaUtilStack *operatorStack, OrgOssPdfreporterUsesJavaUtilStack *operandStack, jboolean haveOperand, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> unaryOperator);

__attribute__((unused)) static jint OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processUnaryOperatorWithInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, jint operatorIndex, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_);

__attribute__((unused)) static OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processFunctionWithNSString_withInt_withOrgOssPdfreporterUsesJavaUtilStack_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, NSString *expression, jint operatorIndex, OrgOssPdfreporterUsesJavaUtilStack *operandStack);

__attribute__((unused)) static void OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processTreeWithOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, OrgOssPdfreporterUsesJavaUtilStack *operandStack, OrgOssPdfreporterUsesJavaUtilStack *operatorStack);

__attribute__((unused)) static NSString *OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_getResultWithOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_withBoolean_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, OrgOssPdfreporterUsesJavaUtilStack *operatorStack, OrgOssPdfreporterUsesJavaUtilStack *operandStack, jboolean wrapStringFunctionResults);

__attribute__((unused)) static OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_getNextOperatorWithNSString_withInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, NSString *expression, jint start, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> match);

__attribute__((unused)) static void OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_loadSystemFunctions(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self);

__attribute__((unused)) static void OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_loadSystemVariables(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self);

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithChar:(jchar)quoteCharacter
                 withBoolean:(jboolean)loadMathVariables
                 withBoolean:(jboolean)loadMathFunctions
                 withBoolean:(jboolean)loadStringFunctions
                 withBoolean:(jboolean)processNestedFunctions {
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_initWithChar_withBoolean_withBoolean_withBoolean_withBoolean_(self, quoteCharacter, loadMathVariables, loadMathFunctions, loadStringFunctions, processNestedFunctions);
  return self;
}

- (jchar)getQuoteCharacter {
  return quoteCharacter_;
}

- (void)setQuoteCharacterWithChar:(jchar)quoteCharacter {
  if (quoteCharacter == OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_SINGLE_QUOTE || quoteCharacter == OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_DOUBLE_QUOTE) {
    self->quoteCharacter_ = quoteCharacter;
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid quote character.");
  }
}

- (void)putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:(id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>)function {
  [self isValidNameWithNSString:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) nil_chk(function)) getName]];
  id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction> existingFunction = (id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) cast_check([((id<JavaUtilMap>) nil_chk(functions_)) getWithId:[function getName]], OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_class_());
  if (existingFunction == nil) {
    (void) [((id<JavaUtilMap>) nil_chk(functions_)) putWithId:[function getName] withId:function];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A function with the same name already exists.");
  }
}

- (id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>)getFunctionWithNSString:(NSString *)functionName {
  return (id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) cast_check([((id<JavaUtilMap>) nil_chk(functions_)) getWithId:functionName], OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_class_());
}

- (void)removeFunctionWithNSString:(NSString *)functionName {
  if ([((id<JavaUtilMap>) nil_chk(functions_)) containsKeyWithId:functionName]) {
    (void) [((id<JavaUtilMap>) nil_chk(functions_)) removeWithId:functionName];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The function does not exist.");
  }
}

- (void)clearFunctions {
  [((id<JavaUtilMap>) nil_chk(functions_)) clear];
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_loadSystemFunctions(self);
}

- (id<JavaUtilMap>)getFunctions {
  return functions_;
}

- (void)setFunctionsWithJavaUtilMap:(id<JavaUtilMap>)functions {
  self->functions_ = functions;
}

- (void)putVariableWithNSString:(NSString *)variableName
                   withNSString:(NSString *)variableValue {
  [self isValidNameWithNSString:variableName];
  (void) [((id<JavaUtilMap>) nil_chk(variables_)) putWithId:variableName withId:variableValue];
}

- (NSString *)getVariableValueWithNSString:(NSString *)variableName {
  NSString *variableValue = nil;
  if (variableResolver_ != nil) {
    @try {
      variableValue = [variableResolver_ resolveVariableWithNSString:variableName];
    }
    @catch (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *fe) {
      @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_([((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *) nil_chk(fe)) getMessage], fe);
    }
  }
  if (variableValue == nil) {
    variableValue = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(variables_)) getWithId:variableName], [NSString class]);
  }
  if (variableValue == nil) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(JreStrcat("$$$", @"Can not resolve variable with name equal to \"", variableName, @"\"."));
  }
  return variableValue;
}

- (void)removeVaraibleWithNSString:(NSString *)variableName {
  if ([((id<JavaUtilMap>) nil_chk(variables_)) containsKeyWithId:variableName]) {
    (void) [((id<JavaUtilMap>) nil_chk(variables_)) removeWithId:variableName];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The variable does not exist.");
  }
}

- (void)clearVariables {
  [((id<JavaUtilMap>) nil_chk(variables_)) clear];
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_loadSystemVariables(self);
}

- (id<JavaUtilMap>)getVariables {
  return variables_;
}

- (void)setVariablesWithJavaUtilMap:(id<JavaUtilMap>)variables {
  self->variables_ = variables;
}

- (id<OrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver>)getVariableResolver {
  return variableResolver_;
}

- (void)setVariableResolverWithOrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver:(id<OrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver>)variableResolver {
  self->variableResolver_ = variableResolver;
}

- (NSString *)evaluateWithNSString:(NSString *)expression {
  return [self evaluateWithNSString:expression withBoolean:true withBoolean:true];
}

- (NSString *)evaluate {
  NSString *expression = previousExpression_;
  if (expression == nil || ((jint) [expression length]) == 0) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"No expression has been specified.");
  }
  return [self evaluateWithNSString:expression withBoolean:true withBoolean:true];
}

- (NSString *)evaluateWithNSString:(NSString *)expression
                       withBoolean:(jboolean)keepQuotes
                       withBoolean:(jboolean)wrapStringFunctionResults {
  [self parseWithNSString:expression];
  NSString *result = OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_getResultWithOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_withBoolean_(self, operatorStack_, operandStack_, wrapStringFunctionResults);
  if ([self isExpressionStringWithNSString:result] && !keepQuotes) {
    result = [((NSString *) nil_chk(result)) substring:1 endIndex:((jint) [result length]) - 1];
  }
  return result;
}

- (NSString *)evaluateWithBoolean:(jboolean)keepQuotes
                      withBoolean:(jboolean)wrapStringFunctionResults {
  NSString *expression = previousExpression_;
  if (expression == nil || ((jint) [expression length]) == 0) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"No expression has been specified.");
  }
  return [self evaluateWithNSString:expression withBoolean:keepQuotes withBoolean:wrapStringFunctionResults];
}

- (jboolean)getBooleanResultWithNSString:(NSString *)expression {
  NSString *result = [self evaluateWithNSString:expression];
  @try {
    JavaLangDouble *doubleResult = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(result);
    if ([((JavaLangDouble *) nil_chk(doubleResult)) doubleValue] == 1.0) {
      return true;
    }
  }
  @catch (JavaLangNumberFormatException *exception) {
    return false;
  }
  return false;
}

- (jdouble)getNumberResultWithNSString:(NSString *)expression {
  NSString *result = [self evaluateWithNSString:expression];
  JavaLangDouble *doubleResult = nil;
  @try {
    doubleResult = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(result);
  }
  @catch (JavaLangNumberFormatException *nfe) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_(@"Expression does not produce a number.", nfe);
  }
  return [((JavaLangDouble *) nil_chk(doubleResult)) doubleValue];
}

- (void)parseWithNSString:(NSString *)expression {
  jboolean parse = true;
  if (![((NSString *) nil_chk(expression)) isEqual:previousExpression_]) {
    previousExpression_ = expression;
  }
  else {
    parse = false;
    operatorStack_ = [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(previousOperatorStack_)) clone];
    operandStack_ = [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(previousOperandStack_)) clone];
  }
  @try {
    if (parse) {
      operandStack_ = new_OrgOssPdfreporterUsesJavaUtilStack_init();
      operatorStack_ = new_OrgOssPdfreporterUsesJavaUtilStack_init();
      jboolean haveOperand = false;
      jboolean haveOperator = false;
      id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> unaryOperator = nil;
      jint numChars = ((jint) [expression length]);
      jint charCtr = 0;
      while (charCtr < numChars) {
        id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_ = nil;
        jint operatorIndex = -1;
        if (OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper_isSpaceWithChar_([expression charAtWithInt:charCtr])) {
          charCtr++;
          continue;
        }
        OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *nextOperator = OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_getNextOperatorWithNSString_withInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, expression, charCtr, nil);
        if (nextOperator != nil) {
          operator_ = [nextOperator getOperator];
          operatorIndex = [nextOperator getIndex];
        }
        if (operatorIndex > charCtr || operatorIndex == -1) {
          charCtr = OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processOperandWithNSString_withInt_withInt_withOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, expression, charCtr, operatorIndex, operandStack_, unaryOperator);
          haveOperand = true;
          haveOperator = false;
          unaryOperator = nil;
        }
        if (operatorIndex == charCtr) {
          if ([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *) nil_chk(nextOperator)) getOperator])) isUnary] && (haveOperator || charCtr == 0)) {
            charCtr = OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processUnaryOperatorWithInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, operatorIndex, [nextOperator getOperator]);
            if (unaryOperator == nil) {
              unaryOperator = [nextOperator getOperator];
            }
            else {
              @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(JreStrcat("$I$", @"Consecutive unary operators are not allowed (index=", charCtr, @")."));
            }
          }
          else {
            charCtr = OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processOperatorWithNSString_withInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_withBoolean_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, expression, operatorIndex, operator_, operatorStack_, operandStack_, haveOperand, unaryOperator);
            unaryOperator = nil;
          }
          if (!([[nextOperator getOperator] isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorClosedParenthesesOperator class]])) {
            haveOperand = false;
            haveOperator = true;
          }
        }
      }
      previousOperatorStack_ = [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack_)) clone];
      previousOperandStack_ = [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack_)) clone];
    }
  }
  @catch (JavaLangException *e) {
    previousExpression_ = @"";
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_([((JavaLangException *) nil_chk(e)) getMessage], e);
  }
}

- (void)installOperators {
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_installOperators(self);
}

- (jint)processOperandWithNSString:(NSString *)expression
                           withInt:(jint)charCtr
                           withInt:(jint)operatorIndex
withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack
withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)unaryOperator {
  return OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processOperandWithNSString_withInt_withInt_withOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, expression, charCtr, operatorIndex, operandStack, unaryOperator);
}

- (jint)processOperatorWithNSString:(NSString *)expression
                            withInt:(jint)originalOperatorIndex
withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)originalOperator
withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operatorStack
withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack
                        withBoolean:(jboolean)haveOperand
withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)unaryOperator {
  return OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processOperatorWithNSString_withInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_withBoolean_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, expression, originalOperatorIndex, originalOperator, operatorStack, operandStack, haveOperand, unaryOperator);
}

- (jint)processUnaryOperatorWithInt:(jint)operatorIndex
withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)operator_ {
  return OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processUnaryOperatorWithInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, operatorIndex, operator_);
}

- (OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *)processFunctionWithNSString:(NSString *)expression
                                                                              withInt:(jint)operatorIndex
                                               withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack {
  return OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processFunctionWithNSString_withInt_withOrgOssPdfreporterUsesJavaUtilStack_(self, expression, operatorIndex, operandStack);
}

- (void)processTreeWithOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack
                   withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operatorStack {
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processTreeWithOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_(self, operandStack, operatorStack);
}

- (NSString *)getResultWithOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operatorStack
                       withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack
                                                  withBoolean:(jboolean)wrapStringFunctionResults {
  return OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_getResultWithOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_withBoolean_(self, operatorStack, operandStack, wrapStringFunctionResults);
}

- (OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *)getNextOperatorWithNSString:(NSString *)expression
                                                                              withInt:(jint)start
                         withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)match {
  return OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_getNextOperatorWithNSString_withInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, expression, start, match);
}

- (jboolean)isExpressionStringWithNSString:(NSString *)expressionString {
  if (((jint) [((NSString *) nil_chk(expressionString)) length]) > 1 && [expressionString charAtWithInt:0] == quoteCharacter_ && [expressionString charAtWithInt:((jint) [expressionString length]) - 1] == quoteCharacter_) {
    return true;
  }
  if ([expressionString indexOf:quoteCharacter_] >= 0) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Invalid use of quotes.");
  }
  return false;
}

- (void)isValidNameWithNSString:(NSString *)name {
  if (((jint) [((NSString *) nil_chk(name)) length]) == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Variable is empty.");
  }
  jchar firstChar = [name charAtWithInt:0];
  if (firstChar >= '0' && firstChar <= '9') {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A variable or function name can not start with a number.");
  }
  if ([name indexOf:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_SINGLE_QUOTE] > -1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A variable or function name can not contain a quote character.");
  }
  else if ([name indexOf:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_DOUBLE_QUOTE] > -1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A variable or function name can not contain a quote character.");
  }
  if ([name indexOf:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_OPEN_BRACE] > -1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A variable or function name can not contain an open brace character.");
  }
  else if ([name indexOf:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_CLOSED_BRACE] > -1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A variable or function name can not contain a closed brace character.");
  }
  else if ([name indexOf:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_POUND_SIGN] > -1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A variable or function name can not contain a pound sign character.");
  }
  id<JavaUtilIterator> operatorIterator = [((id<JavaUtilList>) nil_chk(operators_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(operatorIterator)) hasNext]) {
    id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_ = (id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) cast_check([operatorIterator next], OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_class_());
    if ([name indexOfString:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getSymbol]] > -1) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A variable or function name can not contain an operator symbol.");
    }
  }
  if ([name indexOfString:@"!"] > -1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A variable or function name can not contain a special character.");
  }
  else if ([name indexOfString:@"~"] > -1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A variable or function name can not contain a special character.");
  }
  else if ([name indexOfString:@"^"] > -1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A variable or function name can not contain a special character.");
  }
  else if ([name indexOfString:@","] > -1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A variable or function name can not contain a special character.");
  }
}

- (void)loadSystemFunctions {
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_loadSystemFunctions(self);
}

- (void)loadSystemVariables {
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_loadSystemVariables(self);
}

- (NSString *)replaceVariablesWithNSString:(NSString *)expression {
  jint openIndex = [((NSString *) nil_chk(expression)) indexOfString:JreLoadStatic(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants, OPEN_VARIABLE)];
  if (openIndex < 0) {
    return expression;
  }
  NSString *replacedExpression = expression;
  while (openIndex >= 0) {
    jint closedIndex = -1;
    if (openIndex >= 0) {
      closedIndex = [replacedExpression indexOfString:JreLoadStatic(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants, CLOSED_VARIABLE) fromIndex:openIndex + 1];
      if (closedIndex > openIndex) {
        NSString *variableName = [replacedExpression substring:openIndex + ((jint) [((NSString *) nil_chk(JreLoadStatic(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants, OPEN_VARIABLE))) length]) endIndex:closedIndex];
        @try {
          [self isValidNameWithNSString:variableName];
        }
        @catch (JavaLangIllegalArgumentException *iae) {
          @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_(JreStrcat("$$$", @"Invalid variable name of \"", variableName, @"\"."), iae);
        }
        NSString *variableValue = [self getVariableValueWithNSString:variableName];
        NSString *variableString = JreStrcat("$$$", JreLoadStatic(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants, OPEN_VARIABLE), variableName, JreLoadStatic(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants, CLOSED_VARIABLE));
        replacedExpression = OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper_replaceAllWithNSString_withNSString_withNSString_(replacedExpression, variableString, variableValue);
      }
      else {
        break;
      }
    }
    openIndex = [((NSString *) nil_chk(replacedExpression)) indexOfString:JreLoadStatic(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants, OPEN_VARIABLE)];
  }
  jint openBraceIndex = [replacedExpression indexOfString:JreLoadStatic(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants, OPEN_VARIABLE)];
  if (openBraceIndex > -1) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(JreStrcat("$I$", @"A variable has not been closed (index=", openBraceIndex, @")."));
  }
  return replacedExpression;
}

- (NSString *)processNestedFunctionsWithNSString:(NSString *)arguments {
  JavaLangStringBuffer *evaluatedArguments = new_JavaLangStringBuffer_init();
  if (((jint) [((NSString *) nil_chk(arguments)) length]) > 0) {
    OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *argumentsEvaluator = new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_initWithChar_withBoolean_withBoolean_withBoolean_withBoolean_(quoteCharacter_, loadMathVariables_, loadMathFunctions_, loadStringFunctions_, processNestedFunctions_);
    [argumentsEvaluator setFunctionsWithJavaUtilMap:[self getFunctions]];
    [argumentsEvaluator setVariablesWithJavaUtilMap:[self getVariables]];
    [argumentsEvaluator setVariableResolverWithOrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver:[self getVariableResolver]];
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = new_OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_initWithNSString_withChar_(arguments, OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR);
    id<JavaUtilList> evalautedArgumentList = new_JavaUtilArrayList_init();
    while ([tokenizer hasMoreTokens]) {
      NSString *argument = [((NSString *) nil_chk([tokenizer nextToken])) trim];
      @try {
        argument = [argumentsEvaluator evaluateWithNSString:argument];
      }
      @catch (JavaLangException *e) {
        @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_([((JavaLangException *) nil_chk(e)) getMessage], e);
      }
      [evalautedArgumentList addWithId:argument];
    }
    id<JavaUtilIterator> evaluatedArgumentIterator = [evalautedArgumentList iterator];
    while ([((id<JavaUtilIterator>) nil_chk(evaluatedArgumentIterator)) hasNext]) {
      if ([evaluatedArguments length] > 0) {
        (void) [evaluatedArguments appendWithChar:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR];
      }
      NSString *evaluatedArgument = (NSString *) cast_chk([evaluatedArgumentIterator next], [NSString class]);
      (void) [evaluatedArguments appendWithNSString:evaluatedArgument];
    }
  }
  return [evaluatedArguments description];
}

- (jboolean)isLoadMathVariables {
  return loadMathVariables_;
}

- (jboolean)getLoadMathFunctions {
  return loadMathFunctions_;
}

- (jboolean)getLoadStringFunctions {
  return loadStringFunctions_;
}

- (jboolean)getProcessNestedFunctions {
  return processNestedFunctions_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Evaluator", NULL, 0x1, NULL, NULL },
    { "initWithChar:withBoolean:withBoolean:withBoolean:withBoolean:", "Evaluator", NULL, 0x1, NULL, NULL },
    { "getQuoteCharacter", NULL, "C", 0x1, NULL, NULL },
    { "setQuoteCharacterWithChar:", "setQuoteCharacter", "V", 0x1, NULL, NULL },
    { "putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:", "putFunction", "V", 0x1, NULL, NULL },
    { "getFunctionWithNSString:", "getFunction", "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.Function;", 0x1, NULL, NULL },
    { "removeFunctionWithNSString:", "removeFunction", "V", 0x1, NULL, NULL },
    { "clearFunctions", NULL, "V", 0x1, NULL, NULL },
    { "getFunctions", NULL, "Ljava.util.Map;", 0x1, NULL, NULL },
    { "setFunctionsWithJavaUtilMap:", "setFunctions", "V", 0x1, NULL, NULL },
    { "putVariableWithNSString:withNSString:", "putVariable", "V", 0x1, NULL, NULL },
    { "getVariableValueWithNSString:", "getVariableValue", "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "removeVaraibleWithNSString:", "removeVaraible", "V", 0x1, NULL, NULL },
    { "clearVariables", NULL, "V", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.Map;", 0x1, NULL, NULL },
    { "setVariablesWithJavaUtilMap:", "setVariables", "V", 0x1, NULL, NULL },
    { "getVariableResolver", NULL, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.VariableResolver;", 0x1, NULL, NULL },
    { "setVariableResolverWithOrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver:", "setVariableResolver", "V", 0x1, NULL, NULL },
    { "evaluateWithNSString:", "evaluate", "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "evaluate", NULL, "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "evaluateWithNSString:withBoolean:withBoolean:", "evaluate", "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "evaluateWithBoolean:withBoolean:", "evaluate", "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "getBooleanResultWithNSString:", "getBooleanResult", "Z", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "getNumberResultWithNSString:", "getNumberResult", "D", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "parseWithNSString:", "parse", "V", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "installOperators", NULL, "V", 0x2, NULL, NULL },
    { "processOperandWithNSString:withInt:withInt:withOrgOssPdfreporterUsesJavaUtilStack:withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:", "processOperand", "I", 0x2, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "processOperatorWithNSString:withInt:withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:withOrgOssPdfreporterUsesJavaUtilStack:withOrgOssPdfreporterUsesJavaUtilStack:withBoolean:withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:", "processOperator", "I", 0x2, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "processUnaryOperatorWithInt:withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:", "processUnaryOperator", "I", 0x2, NULL, NULL },
    { "processFunctionWithNSString:withInt:withOrgOssPdfreporterUsesJavaUtilStack:", "processFunction", "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.NextOperator;", 0x2, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "processTreeWithOrgOssPdfreporterUsesJavaUtilStack:withOrgOssPdfreporterUsesJavaUtilStack:", "processTree", "V", 0x2, NULL, NULL },
    { "getResultWithOrgOssPdfreporterUsesJavaUtilStack:withOrgOssPdfreporterUsesJavaUtilStack:withBoolean:", "getResult", "Ljava.lang.String;", 0x2, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "getNextOperatorWithNSString:withInt:withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:", "getNextOperator", "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.NextOperator;", 0x2, NULL, NULL },
    { "isExpressionStringWithNSString:", "isExpressionString", "Z", 0x4, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "isValidNameWithNSString:", "isValidName", "V", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "loadSystemFunctions", NULL, "V", 0x2, NULL, NULL },
    { "loadSystemVariables", NULL, "V", 0x2, NULL, NULL },
    { "replaceVariablesWithNSString:", "replaceVariables", "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "processNestedFunctionsWithNSString:", "processNestedFunctions", "Ljava.lang.String;", 0x4, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
    { "isLoadMathVariables", NULL, "Z", 0x1, NULL, NULL },
    { "getLoadMathFunctions", NULL, "Z", 0x1, NULL, NULL },
    { "getLoadStringFunctions", NULL, "Z", 0x1, NULL, NULL },
    { "getProcessNestedFunctions", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "operators_", NULL, 0x2, "Ljava.util.List;", NULL, NULL, .constantValue.asLong = 0 },
    { "functions_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL, .constantValue.asLong = 0 },
    { "variables_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL, .constantValue.asLong = 0 },
    { "quoteCharacter_", NULL, 0x2, "C", NULL, NULL, .constantValue.asLong = 0 },
    { "openParenthesesOperator_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.operator.Operator;", NULL, NULL, .constantValue.asLong = 0 },
    { "closedParenthesesOperator_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.operator.Operator;", NULL, NULL, .constantValue.asLong = 0 },
    { "loadMathVariables_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "loadMathFunctions_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "loadStringFunctions_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "processNestedFunctions_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "previousExpression_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "previousOperatorStack_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.java.util.Stack;", NULL, NULL, .constantValue.asLong = 0 },
    { "previousOperandStack_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.java.util.Stack;", NULL, NULL, .constantValue.asLong = 0 },
    { "operatorStack_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.java.util.Stack;", NULL, NULL, .constantValue.asLong = 0 },
    { "operandStack_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.java.util.Stack;", NULL, NULL, .constantValue.asLong = 0 },
    { "variableResolver_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.VariableResolver;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator = { 2, "Evaluator", "org.oss.pdfreporter.uses.net.sourceforge.jeval", NULL, 0x1, 43, methods, 16, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator;
}

@end

void OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_init(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self) {
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_initWithChar_withBoolean_withBoolean_withBoolean_withBoolean_(self, OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_SINGLE_QUOTE, true, true, true, true);
}

OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, init)
}

OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *create_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, init)
}

void OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_initWithChar_withBoolean_withBoolean_withBoolean_withBoolean_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, jchar quoteCharacter, jboolean loadMathVariables, jboolean loadMathFunctions, jboolean loadStringFunctions, jboolean processNestedFunctions) {
  NSObject_init(self);
  self->operators_ = new_JavaUtilArrayList_init();
  self->functions_ = new_JavaUtilHashMap_init();
  self->variables_ = new_JavaUtilHashMap_init();
  self->quoteCharacter_ = OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_SINGLE_QUOTE;
  self->openParenthesesOperator_ = new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOpenParenthesesOperator_init();
  self->closedParenthesesOperator_ = new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorClosedParenthesesOperator_init();
  self->previousExpression_ = nil;
  self->previousOperatorStack_ = nil;
  self->previousOperandStack_ = nil;
  self->operatorStack_ = nil;
  self->operandStack_ = nil;
  self->variableResolver_ = nil;
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_installOperators(self);
  self->loadMathVariables_ = loadMathVariables;
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_loadSystemVariables(self);
  self->loadMathFunctions_ = loadMathFunctions;
  self->loadStringFunctions_ = loadStringFunctions;
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_loadSystemFunctions(self);
  [self setQuoteCharacterWithChar:quoteCharacter];
  self->processNestedFunctions_ = processNestedFunctions;
}

OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_initWithChar_withBoolean_withBoolean_withBoolean_withBoolean_(jchar quoteCharacter, jboolean loadMathVariables, jboolean loadMathFunctions, jboolean loadStringFunctions, jboolean processNestedFunctions) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, initWithChar_withBoolean_withBoolean_withBoolean_withBoolean_, quoteCharacter, loadMathVariables, loadMathFunctions, loadStringFunctions, processNestedFunctions)
}

OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *create_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_initWithChar_withBoolean_withBoolean_withBoolean_withBoolean_(jchar quoteCharacter, jboolean loadMathVariables, jboolean loadMathFunctions, jboolean loadStringFunctions, jboolean processNestedFunctions) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator, initWithChar_withBoolean_withBoolean_withBoolean_withBoolean_, quoteCharacter, loadMathVariables, loadMathFunctions, loadStringFunctions, processNestedFunctions)
}

void OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_installOperators(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self) {
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:self->openParenthesesOperator_];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:self->closedParenthesesOperator_];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAdditionOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorSubtractionOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorMultiplicationOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorDivisionOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorEqualOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorNotEqualOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorLessThanOrEqualOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorLessThanOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorGreaterThanOrEqualOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorGreaterThanOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorBooleanAndOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorBooleanOrOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorBooleanNotOperator_init()];
  [((id<JavaUtilList>) nil_chk(self->operators_)) addWithId:new_OrgOssPdfreporterUsesNetSourceforgeJevalOperatorModulusOperator_init()];
}

jint OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processOperandWithNSString_withInt_withInt_withOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, NSString *expression, jint charCtr, jint operatorIndex, OrgOssPdfreporterUsesJavaUtilStack *operandStack, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> unaryOperator) {
  NSString *operandString = nil;
  jint rtnCtr = -1;
  if (operatorIndex == -1) {
    operandString = [((NSString *) nil_chk([((NSString *) nil_chk(expression)) substring:charCtr])) trim];
    rtnCtr = ((jint) [expression length]);
  }
  else {
    operandString = [((NSString *) nil_chk([((NSString *) nil_chk(expression)) substring:charCtr endIndex:operatorIndex])) trim];
    rtnCtr = operatorIndex;
  }
  if (((jint) [((NSString *) nil_chk(operandString)) length]) == 0) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Expression is invalid.");
  }
  OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *operand = new_OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand_initWithNSString_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(operandString, unaryOperator);
  (void) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) pushWithId:operand];
  return rtnCtr;
}

jint OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processOperatorWithNSString_withInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_withBoolean_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, NSString *expression, jint originalOperatorIndex, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> originalOperator, OrgOssPdfreporterUsesJavaUtilStack *operatorStack, OrgOssPdfreporterUsesJavaUtilStack *operandStack, jboolean haveOperand, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> unaryOperator) {
  jint operatorIndex = originalOperatorIndex;
  id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_ = originalOperator;
  if (haveOperand && [operator_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOpenParenthesesOperator class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *nextOperator = OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processFunctionWithNSString_withInt_withOrgOssPdfreporterUsesJavaUtilStack_(self, expression, operatorIndex, operandStack);
    operator_ = [((OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *) nil_chk(nextOperator)) getOperator];
    operatorIndex = [nextOperator getIndex] + [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getLength];
    nextOperator = OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_getNextOperatorWithNSString_withInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, expression, operatorIndex, nil);
    if (nextOperator != nil) {
      operator_ = [nextOperator getOperator];
      operatorIndex = [nextOperator getIndex];
    }
    else {
      return operatorIndex;
    }
  }
  if ([operator_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOpenParenthesesOperator class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *expressionOperator = new_OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator_initWithOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(operator_, unaryOperator);
    (void) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) pushWithId:expressionOperator];
  }
  else if ([operator_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorClosedParenthesesOperator class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *stackOperator = nil;
    if ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) size] > 0) {
      stackOperator = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) cast_chk([operatorStack peek], [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator class]);
    }
    while (stackOperator != nil && !([[stackOperator getOperator] isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOpenParenthesesOperator class]])) {
      OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processTreeWithOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_(self, operandStack, operatorStack);
      if ([operatorStack size] > 0) {
        stackOperator = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) cast_chk([operatorStack peek], [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator class]);
      }
      else {
        stackOperator = nil;
      }
    }
    if ([operatorStack isEmpty]) {
      @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Expression is invalid.");
    }
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *expressionOperator = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) cast_chk([operatorStack pop], [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator class]);
    if (!([[((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) nil_chk(expressionOperator)) getOperator] isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOpenParenthesesOperator class]])) {
      @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Expression is invalid.");
    }
    if ([expressionOperator getUnaryOperator] != nil) {
      id operand = [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) pop];
      OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *tree = new_OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree_initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_withId_withId_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, operand, nil, nil, [expressionOperator getUnaryOperator]);
      (void) [operandStack pushWithId:tree];
    }
  }
  else {
    if ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) size] > 0) {
      OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *stackOperator = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) cast_chk([operatorStack peek], [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator class]);
      while (stackOperator != nil && [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([stackOperator getOperator])) getPrecedence] >= [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getPrecedence]) {
        OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processTreeWithOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_(self, operandStack, operatorStack);
        if ([operatorStack size] > 0) {
          stackOperator = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) cast_chk([operatorStack peek], [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator class]);
        }
        else {
          stackOperator = nil;
        }
      }
    }
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *expressionOperator = new_OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator_initWithOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(operator_, unaryOperator);
    (void) [operatorStack pushWithId:expressionOperator];
  }
  jint rtnCtr = operatorIndex + [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getLength];
  return rtnCtr;
}

jint OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processUnaryOperatorWithInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, jint operatorIndex, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_) {
  jint rtnCtr = operatorIndex + ((jint) [((NSString *) nil_chk([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getSymbol])) length]);
  return rtnCtr;
}

OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processFunctionWithNSString_withInt_withOrgOssPdfreporterUsesJavaUtilStack_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, NSString *expression, jint operatorIndex, OrgOssPdfreporterUsesJavaUtilStack *operandStack) {
  jint parenthesisCount = 1;
  OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *nextOperator = nil;
  jint nextOperatorIndex = operatorIndex;
  while (parenthesisCount > 0) {
    nextOperator = OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_getNextOperatorWithNSString_withInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, expression, nextOperatorIndex + 1, nil);
    if (nextOperator == nil) {
      @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Function is not closed.");
    }
    else if ([[nextOperator getOperator] isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOpenParenthesesOperator class]]) {
      parenthesisCount++;
    }
    else if ([[nextOperator getOperator] isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorClosedParenthesesOperator class]]) {
      parenthesisCount--;
    }
    nextOperatorIndex = [nextOperator getIndex];
  }
  NSString *arguments = [((NSString *) nil_chk(expression)) substring:operatorIndex + 1 endIndex:nextOperatorIndex];
  OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *operand = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) cast_chk([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) pop], [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand class]);
  id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> unaryOperator = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(operand)) getUnaryOperator];
  NSString *functionName = [operand getValue];
  @try {
    [self isValidNameWithNSString:functionName];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_(JreStrcat("$$$", @"Invalid function name of \"", functionName, @"\"."), iae);
  }
  id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction> function = (id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) cast_check([((id<JavaUtilMap>) nil_chk(self->functions_)) getWithId:functionName], OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_class_());
  if (function == nil) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(JreStrcat("$I$", @"A function is not defined (index=", operatorIndex, @")."));
  }
  OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *parsedFunction = new_OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction_initWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_withNSString_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(function, arguments, unaryOperator);
  (void) [operandStack pushWithId:parsedFunction];
  return nextOperator;
}

void OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processTreeWithOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, OrgOssPdfreporterUsesJavaUtilStack *operandStack, OrgOssPdfreporterUsesJavaUtilStack *operatorStack) {
  id rightOperand = nil;
  id leftOperand = nil;
  id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_ = nil;
  if ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) size] > 0) {
    rightOperand = [operandStack pop];
  }
  if ([operandStack size] > 0) {
    leftOperand = [operandStack pop];
  }
  operator_ = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) nil_chk(((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) cast_chk([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) pop], [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator class])))) getOperator];
  OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *tree = new_OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree_initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_withId_withId_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, leftOperand, rightOperand, operator_, nil);
  (void) [operandStack pushWithId:tree];
}

NSString *OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_getResultWithOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_withBoolean_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, OrgOssPdfreporterUsesJavaUtilStack *operatorStack, OrgOssPdfreporterUsesJavaUtilStack *operandStack, jboolean wrapStringFunctionResults) {
  NSString *resultString = nil;
  while ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) size] > 0) {
    OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_processTreeWithOrgOssPdfreporterUsesJavaUtilStack_withOrgOssPdfreporterUsesJavaUtilStack_(self, operandStack, operatorStack);
  }
  if ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) size] != 1) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Expression is invalid.");
  }
  id finalOperand = [operandStack pop];
  if ([finalOperand isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree class]]) {
    resultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *) nil_chk(((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *) cast_chk(finalOperand, [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree class])))) evaluateWithBoolean:wrapStringFunctionResults];
  }
  else if ([finalOperand isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *resultExpressionOperand = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) cast_chk(finalOperand, [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand class]);
    resultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) cast_chk(finalOperand, [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand class])))) getValue];
    resultString = [self replaceVariablesWithNSString:resultString];
    if (![self isExpressionStringWithNSString:resultString]) {
      JavaLangDouble *resultDouble = nil;
      @try {
        resultDouble = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(resultString);
      }
      @catch (JavaLangException *e) {
        @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_(@"Expression is invalid.", e);
      }
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(resultExpressionOperand)) getUnaryOperator] != nil) {
        resultDouble = new_JavaLangDouble_initWithDouble_([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([resultExpressionOperand getUnaryOperator])) evaluateWithDouble:[((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]]);
      }
      resultString = NSString_valueOfDouble_([((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]);
    }
    else {
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(resultExpressionOperand)) getUnaryOperator] != nil) {
        @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Invalid operand for unary operator.");
      }
    }
  }
  else if ([finalOperand isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *parsedFunction = (OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) cast_chk(finalOperand, [OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction class]);
    id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction> function = [((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getFunction];
    NSString *arguments = [parsedFunction getArguments];
    if (self->processNestedFunctions_) {
      arguments = [self processNestedFunctionsWithNSString:arguments];
    }
    arguments = [self replaceVariablesWithNSString:arguments];
    @try {
      OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *functionResult = [((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) nil_chk(function)) executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:self withNSString:arguments];
      resultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *) nil_chk(functionResult)) getResult];
      if ([functionResult getType] == OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_NUMERIC) {
        JavaLangDouble *resultDouble = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(resultString);
        if ([parsedFunction getUnaryOperator] != nil) {
          resultDouble = new_JavaLangDouble_initWithDouble_([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([parsedFunction getUnaryOperator])) evaluateWithDouble:[((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]]);
        }
        resultString = NSString_valueOfDouble_([((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]);
      }
      else if ([functionResult getType] == OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_STRING) {
        if (wrapStringFunctionResults) {
          resultString = JreStrcat("C$C", self->quoteCharacter_, resultString, self->quoteCharacter_);
        }
        if ([parsedFunction getUnaryOperator] != nil) {
          @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Invalid operand for unary operator.");
        }
      }
    }
    @catch (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *fe) {
      @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_([((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *) nil_chk(fe)) getMessage], fe);
    }
  }
  else {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Expression is invalid.");
  }
  return resultString;
}

OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_getNextOperatorWithNSString_withInt_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self, NSString *expression, jint start, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> match) {
  jint numChars = ((jint) [((NSString *) nil_chk(expression)) length]);
  jint numQuoteCharacters = 0;
  for (jint charCtr = start; charCtr < numChars; charCtr++) {
    if ([expression charAtWithInt:charCtr] == self->quoteCharacter_) {
      numQuoteCharacters++;
    }
    if ((numQuoteCharacters % 2) == 1) {
      continue;
    }
    jint numOperators = [((id<JavaUtilList>) nil_chk(self->operators_)) size];
    for (jint operatorCtr = 0; operatorCtr < numOperators; operatorCtr++) {
      id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_ = (id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) cast_check([((id<JavaUtilList>) nil_chk(self->operators_)) getWithInt:operatorCtr], OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_class_());
      if (match != nil) {
        if (![match isEqual:operator_]) {
          continue;
        }
      }
      if ([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getLength] == 2) {
        jint endCtr = -1;
        if (charCtr + 2 <= ((jint) [expression length])) {
          endCtr = charCtr + 2;
        }
        else {
          endCtr = ((jint) [expression length]);
        }
        if ([((NSString *) nil_chk([expression substring:charCtr endIndex:endCtr])) isEqual:[operator_ getSymbol]]) {
          OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *nextOperator = new_OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator_initWithOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withInt_(operator_, charCtr);
          return nextOperator;
        }
      }
      else {
        if ([expression charAtWithInt:charCtr] == [((NSString *) nil_chk([operator_ getSymbol])) charAtWithInt:0]) {
          OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *nextOperator = new_OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator_initWithOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withInt_(operator_, charCtr);
          return nextOperator;
        }
      }
    }
  }
  return nil;
}

void OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_loadSystemFunctions(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self) {
  if (self->loadMathFunctions_) {
    id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionGroup> mathFunctions = new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionMathMathFunctions_init();
    [mathFunctions load__WithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:self];
  }
  if (self->loadStringFunctions_) {
    id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionGroup> stringFunctions = new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringStringFunctions_init();
    [stringFunctions load__WithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:self];
  }
}

void OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_loadSystemVariables(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *self) {
  if (self->loadMathVariables_) {
    [self putVariableWithNSString:@"E" withNSString:NSString_valueOfDouble_(JavaLangMath_E)];
    [self putVariableWithNSString:@"PI" withNSString:NSString_valueOfDouble_(JavaLangMath_PI)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator)
