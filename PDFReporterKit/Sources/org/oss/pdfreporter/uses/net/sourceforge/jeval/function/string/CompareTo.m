//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/function/string/CompareTo.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionHelper.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionResult.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/string/CompareTo.h"

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo

- (NSString *)getName {
  return @"compareTo";
}

- (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *)executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)evaluator
                                                                                                                    withNSString:(NSString *)arguments {
  JavaLangInteger *result = nil;
  NSString *exceptionMessage = @"Two string arguments are required.";
  JavaUtilArrayList *strings = OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_getStringsWithNSString_withChar_(arguments, OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR);
  if ([((JavaUtilArrayList *) nil_chk(strings)) size] != 2) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_(exceptionMessage);
  }
  @try {
    NSString *argumentOne = OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_trimAndRemoveQuoteCharsWithNSString_withChar_((NSString *) cast_chk([strings getWithInt:0], [NSString class]), [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator)) getQuoteCharacter]);
    NSString *argumentTwo = OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_trimAndRemoveQuoteCharsWithNSString_withChar_((NSString *) cast_chk([strings getWithInt:1], [NSString class]), [evaluator getQuoteCharacter]);
    result = new_JavaLangInteger_initWithInt_([((NSString *) nil_chk(argumentOne)) compareToWithId:argumentTwo]);
  }
  @catch (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *fe) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_withJavaLangException_([((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *) nil_chk(fe)) getMessage], fe);
  }
  @catch (JavaLangException *e) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_withJavaLangException_(exceptionMessage, e);
  }
  return new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult_initWithNSString_withInt_([((JavaLangInteger *) nil_chk(result)) description], OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_NUMERIC);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:withNSString:", "execute", "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionResult;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionException;", NULL },
    { "init", "CompareTo", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo = { 2, "CompareTo", "org.oss.pdfreporter.uses.net.sourceforge.jeval.function.string", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo;
}

@end

void OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo_init(OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo *self) {
  NSObject_init(self);
}

OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo *new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo, init)
}

OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo *create_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringCompareTo)
