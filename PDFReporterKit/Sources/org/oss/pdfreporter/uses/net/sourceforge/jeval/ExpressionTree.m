//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/ExpressionTree.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/NumberFormatException.h"
#include "org/oss/pdfreporter/converters/DecimalConverter.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ExpressionOperand.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ExpressionTree.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ParsedFunction.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/Function.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionResult.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/Operator.h"

@interface OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree () {
 @public
  id leftOperand_;
  id rightOperand_;
  id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator__;
  id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> unaryOperator_;
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *evaluator_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree, leftOperand_, id)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree, rightOperand_, id)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree, operator__, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree, unaryOperator_, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree, evaluator_, OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree

- (instancetype)initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)evaluator
                                                                   withId:(id)leftOperand
                                                                   withId:(id)rightOperand
             withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)operator_
             withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)unaryOperator {
  OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree_initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_withId_withId_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(self, evaluator, leftOperand, rightOperand, operator_, unaryOperator);
  return self;
}

- (id)getLeftOperand {
  return leftOperand_;
}

- (id)getRightOperand {
  return rightOperand_;
}

- (id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)getOperator {
  return operator__;
}

- (id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)getUnaryOperator {
  return unaryOperator_;
}

- (NSString *)evaluateWithBoolean:(jboolean)wrapStringFunctionResults {
  NSString *rtnResult = nil;
  NSString *leftResultString = nil;
  JavaLangDouble *leftResultDouble = nil;
  if ([leftOperand_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree class]]) {
    leftResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *) nil_chk(((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *) cast_chk(leftOperand_, [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree class])))) evaluateWithBoolean:wrapStringFunctionResults];
    @try {
      leftResultDouble = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(leftResultString);
      leftResultString = nil;
    }
    @catch (JavaLangNumberFormatException *exception) {
      leftResultDouble = nil;
    }
  }
  else if ([leftOperand_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *leftExpressionOperand = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) cast_chk(leftOperand_, [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand class]);
    leftResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(leftExpressionOperand)) getValue];
    leftResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) replaceVariablesWithNSString:leftResultString];
    if (![((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) isExpressionStringWithNSString:leftResultString]) {
      @try {
        leftResultDouble = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(leftResultString);
        leftResultString = nil;
      }
      @catch (JavaLangNumberFormatException *nfe) {
        @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_(@"Expression is invalid.", nfe);
      }
      if ([leftExpressionOperand getUnaryOperator] != nil) {
        leftResultDouble = new_JavaLangDouble_initWithDouble_([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([leftExpressionOperand getUnaryOperator])) evaluateWithDouble:[((JavaLangDouble *) nil_chk(leftResultDouble)) doubleValue]]);
      }
    }
    else {
      if ([leftExpressionOperand getUnaryOperator] != nil) {
        @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Invalid operand for unary operator.");
      }
    }
  }
  else if ([leftOperand_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *parsedFunction = (OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) cast_chk(leftOperand_, [OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction class]);
    id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction> function = [((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getFunction];
    NSString *arguments = [parsedFunction getArguments];
    arguments = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) replaceVariablesWithNSString:arguments];
    if ([((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) getProcessNestedFunctions]) {
      arguments = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) processNestedFunctionsWithNSString:arguments];
    }
    @try {
      OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *functionResult = [((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) nil_chk(function)) executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:evaluator_ withNSString:arguments];
      leftResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *) nil_chk(functionResult)) getResult];
      if ([functionResult getType] == OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_NUMERIC) {
        JavaLangDouble *resultDouble = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(leftResultString);
        if ([parsedFunction getUnaryOperator] != nil) {
          resultDouble = new_JavaLangDouble_initWithDouble_([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([parsedFunction getUnaryOperator])) evaluateWithDouble:[((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]]);
        }
        leftResultString = NSString_valueOfDouble_([((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]);
      }
      else if ([functionResult getType] == OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_STRING) {
        if (wrapStringFunctionResults) {
          leftResultString = JreStrcat("C$C", [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) getQuoteCharacter], leftResultString, [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) getQuoteCharacter]);
        }
        if ([parsedFunction getUnaryOperator] != nil) {
          @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Invalid operand for unary operator.");
        }
      }
    }
    @catch (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *fe) {
      @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_([((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *) nil_chk(fe)) getMessage], fe);
    }
    if (![((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) isExpressionStringWithNSString:leftResultString]) {
      @try {
        leftResultDouble = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(leftResultString);
        leftResultString = nil;
      }
      @catch (JavaLangNumberFormatException *nfe) {
        @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_(@"Expression is invalid.", nfe);
      }
    }
  }
  else {
    if (leftOperand_ != nil) {
      @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Expression is invalid.");
    }
  }
  NSString *rightResultString = nil;
  JavaLangDouble *rightResultDouble = nil;
  if ([rightOperand_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree class]]) {
    rightResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *) nil_chk(((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *) cast_chk(rightOperand_, [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree class])))) evaluateWithBoolean:wrapStringFunctionResults];
    @try {
      rightResultDouble = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(rightResultString);
      rightResultString = nil;
    }
    @catch (JavaLangNumberFormatException *exception) {
      rightResultDouble = nil;
    }
  }
  else if ([rightOperand_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *rightExpressionOperand = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) cast_chk(rightOperand_, [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand class]);
    rightResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) cast_chk(rightOperand_, [OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand class])))) getValue];
    rightResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) replaceVariablesWithNSString:rightResultString];
    if (![((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) isExpressionStringWithNSString:rightResultString]) {
      @try {
        rightResultDouble = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(rightResultString);
        rightResultString = nil;
      }
      @catch (JavaLangNumberFormatException *nfe) {
        @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_(@"Expression is invalid.", nfe);
      }
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(rightExpressionOperand)) getUnaryOperator] != nil) {
        rightResultDouble = new_JavaLangDouble_initWithDouble_([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([rightExpressionOperand getUnaryOperator])) evaluateWithDouble:[((JavaLangDouble *) nil_chk(rightResultDouble)) doubleValue]]);
      }
    }
    else {
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(rightExpressionOperand)) getUnaryOperator] != nil) {
        @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Invalid operand for unary operator.");
      }
    }
  }
  else if ([rightOperand_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *parsedFunction = (OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) cast_chk(rightOperand_, [OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction class]);
    id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction> function = [((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getFunction];
    NSString *arguments = [parsedFunction getArguments];
    arguments = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) replaceVariablesWithNSString:arguments];
    if ([((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) getProcessNestedFunctions]) {
      arguments = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) processNestedFunctionsWithNSString:arguments];
    }
    @try {
      OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *functionResult = [((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) nil_chk(function)) executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:evaluator_ withNSString:arguments];
      rightResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *) nil_chk(functionResult)) getResult];
      if ([functionResult getType] == OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_NUMERIC) {
        JavaLangDouble *resultDouble = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(rightResultString);
        if ([parsedFunction getUnaryOperator] != nil) {
          resultDouble = new_JavaLangDouble_initWithDouble_([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([parsedFunction getUnaryOperator])) evaluateWithDouble:[((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]]);
        }
        rightResultString = NSString_valueOfDouble_([((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]);
      }
      else if ([functionResult getType] == OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_STRING) {
        if (wrapStringFunctionResults) {
          rightResultString = JreStrcat("C$C", [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) getQuoteCharacter], rightResultString, [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) getQuoteCharacter]);
        }
        if ([parsedFunction getUnaryOperator] != nil) {
          @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Invalid operand for unary operator.");
        }
      }
    }
    @catch (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *fe) {
      @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_([((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *) nil_chk(fe)) getMessage], fe);
    }
    if (![((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) isExpressionStringWithNSString:rightResultString]) {
      @try {
        rightResultDouble = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(rightResultString);
        rightResultString = nil;
      }
      @catch (JavaLangNumberFormatException *nfe) {
        @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_withJavaLangException_(@"Expression is invalid.", nfe);
      }
    }
  }
  else if (rightOperand_ == nil) {
  }
  else {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Expression is invalid.");
  }
  if (leftResultDouble != nil && rightResultDouble != nil) {
    jdouble doubleResult = [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator__)) evaluateWithDouble:[leftResultDouble doubleValue] withDouble:[rightResultDouble doubleValue]];
    if ([self getUnaryOperator] != nil) {
      doubleResult = [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([self getUnaryOperator])) evaluateWithDouble:doubleResult];
    }
    rtnResult = NSString_valueOfDouble_(doubleResult);
  }
  else if (leftResultString != nil && rightResultString != nil) {
    rtnResult = [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator__)) evaluateWithNSString:leftResultString withNSString:rightResultString];
  }
  else if (leftResultDouble != nil && rightResultDouble == nil) {
    jdouble doubleResult = -1;
    if (unaryOperator_ != nil) {
      doubleResult = [unaryOperator_ evaluateWithDouble:[leftResultDouble doubleValue]];
    }
    else {
      @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Expression is invalid.");
    }
    rtnResult = NSString_valueOfDouble_(doubleResult);
  }
  else {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException_initWithNSString_(@"Expression is invalid.");
  }
  return rtnResult;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:withId:withId:withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:", "ExpressionTree", NULL, 0x1, NULL, NULL },
    { "getLeftOperand", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getRightOperand", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getOperator", NULL, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.operator.Operator;", 0x1, NULL, NULL },
    { "getUnaryOperator", NULL, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.operator.Operator;", 0x1, NULL, NULL },
    { "evaluateWithBoolean:", "evaluate", "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.EvaluationException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "leftOperand_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "rightOperand_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "operator__", "operator", 0x2, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.operator.Operator;", NULL, NULL, .constantValue.asLong = 0 },
    { "unaryOperator_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.operator.Operator;", NULL, NULL, .constantValue.asLong = 0 },
    { "evaluator_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.Evaluator;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree = { 2, "ExpressionTree", "org.oss.pdfreporter.uses.net.sourceforge.jeval", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree;
}

@end

void OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree_initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_withId_withId_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *self, OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *evaluator, id leftOperand, id rightOperand, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> unaryOperator) {
  NSObject_init(self);
  self->leftOperand_ = nil;
  self->rightOperand_ = nil;
  self->operator__ = nil;
  self->unaryOperator_ = nil;
  self->evaluator_ = nil;
  self->evaluator_ = evaluator;
  self->leftOperand_ = leftOperand;
  self->rightOperand_ = rightOperand;
  self->operator__ = operator_;
  self->unaryOperator_ = unaryOperator;
}

OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *new_OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree_initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_withId_withId_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *evaluator, id leftOperand, id rightOperand, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> unaryOperator) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree, initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_withId_withId_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_, evaluator, leftOperand, rightOperand, operator_, unaryOperator)
}

OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *create_OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree_initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_withId_withId_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *evaluator, id leftOperand, id rightOperand, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_, id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> unaryOperator) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree, initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_withId_withId_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator_, evaluator, leftOperand, rightOperand, operator_, unaryOperator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree)
