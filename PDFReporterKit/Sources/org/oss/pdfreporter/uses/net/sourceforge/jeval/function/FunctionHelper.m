//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionHelper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "org/oss/pdfreporter/converters/DecimalConverter.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionHelper.h"

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper

+ (NSString *)trimAndRemoveQuoteCharsWithNSString:(NSString *)arguments
                                         withChar:(jchar)quoteCharacter {
  return OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_trimAndRemoveQuoteCharsWithNSString_withChar_(arguments, quoteCharacter);
}

+ (JavaUtilArrayList *)getDoublesWithNSString:(NSString *)arguments
                                     withChar:(jchar)delimiter {
  return OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_getDoublesWithNSString_withChar_(arguments, delimiter);
}

+ (JavaUtilArrayList *)getStringsWithNSString:(NSString *)arguments
                                     withChar:(jchar)delimiter {
  return OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_getStringsWithNSString_withChar_(arguments, delimiter);
}

+ (JavaUtilArrayList *)getOneStringAndOneIntegerWithNSString:(NSString *)arguments
                                                    withChar:(jchar)delimiter {
  return OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_getOneStringAndOneIntegerWithNSString_withChar_(arguments, delimiter);
}

+ (JavaUtilArrayList *)getTwoStringsAndOneIntegerWithNSString:(NSString *)arguments
                                                     withChar:(jchar)delimiter {
  return OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_getTwoStringsAndOneIntegerWithNSString_withChar_(arguments, delimiter);
}

+ (JavaUtilArrayList *)getOneStringAndTwoIntegersWithNSString:(NSString *)arguments
                                                     withChar:(jchar)delimiter {
  return OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_getOneStringAndTwoIntegersWithNSString_withChar_(arguments, delimiter);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "trimAndRemoveQuoteCharsWithNSString:withChar:", "trimAndRemoveQuoteChars", "Ljava.lang.String;", 0x9, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionException;", NULL },
    { "getDoublesWithNSString:withChar:", "getDoubles", "Ljava.util.ArrayList;", 0x9, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionException;", NULL },
    { "getStringsWithNSString:withChar:", "getStrings", "Ljava.util.ArrayList;", 0x9, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionException;", NULL },
    { "getOneStringAndOneIntegerWithNSString:withChar:", "getOneStringAndOneInteger", "Ljava.util.ArrayList;", 0x9, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionException;", NULL },
    { "getTwoStringsAndOneIntegerWithNSString:withChar:", "getTwoStringsAndOneInteger", "Ljava.util.ArrayList;", 0x9, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionException;", NULL },
    { "getOneStringAndTwoIntegersWithNSString:withChar:", "getOneStringAndTwoIntegers", "Ljava.util.ArrayList;", 0x9, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionException;", NULL },
    { "init", "FunctionHelper", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper = { 2, "FunctionHelper", "org.oss.pdfreporter.uses.net.sourceforge.jeval.function", NULL, 0x1, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper;
}

@end

NSString *OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_trimAndRemoveQuoteCharsWithNSString_withChar_(NSString *arguments, jchar quoteCharacter) {
  OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_initialize();
  NSString *trimmedArgument = arguments;
  trimmedArgument = [((NSString *) nil_chk(trimmedArgument)) trim];
  if ([((NSString *) nil_chk(trimmedArgument)) charAtWithInt:0] == quoteCharacter) {
    trimmedArgument = [trimmedArgument substring:1 endIndex:((jint) [trimmedArgument length])];
  }
  else {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_(@"Value does not start with a quote.");
  }
  if ([((NSString *) nil_chk(trimmedArgument)) charAtWithInt:((jint) [trimmedArgument length]) - 1] == quoteCharacter) {
    trimmedArgument = [trimmedArgument substring:0 endIndex:((jint) [trimmedArgument length]) - 1];
  }
  else {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_(@"Value does not end with a quote.");
  }
  return trimmedArgument;
}

JavaUtilArrayList *OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_getDoublesWithNSString_withChar_(NSString *arguments, jchar delimiter) {
  OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_initialize();
  JavaUtilArrayList *returnValues = new_JavaUtilArrayList_init();
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = new_OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_initWithNSString_withChar_(arguments, delimiter);
    while ([tokenizer hasMoreTokens]) {
      NSString *token = [((NSString *) nil_chk([tokenizer nextToken])) trim];
      [returnValues addWithId:OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(token)];
    }
  }
  @catch (JavaLangException *e) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_withJavaLangException_(@"Invalid values in string.", e);
  }
  return returnValues;
}

JavaUtilArrayList *OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_getStringsWithNSString_withChar_(NSString *arguments, jchar delimiter) {
  OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_initialize();
  JavaUtilArrayList *returnValues = new_JavaUtilArrayList_init();
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = new_OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_initWithNSString_withChar_(arguments, delimiter);
    while ([tokenizer hasMoreTokens]) {
      NSString *token = [tokenizer nextToken];
      [returnValues addWithId:token];
    }
  }
  @catch (JavaLangException *e) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_withJavaLangException_(@"Invalid values in string.", e);
  }
  return returnValues;
}

JavaUtilArrayList *OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_getOneStringAndOneIntegerWithNSString_withChar_(NSString *arguments, jchar delimiter) {
  OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_initialize();
  JavaUtilArrayList *returnValues = new_JavaUtilArrayList_init();
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = new_OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_initWithNSString_withChar_(arguments, delimiter);
    jint tokenCtr = 0;
    while ([tokenizer hasMoreTokens]) {
      if (tokenCtr == 0) {
        NSString *token = [tokenizer nextToken];
        [returnValues addWithId:token];
      }
      else if (tokenCtr == 1) {
        NSString *token = [((NSString *) nil_chk([tokenizer nextToken])) trim];
        [returnValues addWithId:new_JavaLangInteger_initWithInt_([((JavaLangDouble *) nil_chk(OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(token))) intValue])];
      }
      else {
        @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_(@"Invalid values in string.");
      }
      tokenCtr++;
    }
  }
  @catch (JavaLangException *e) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_withJavaLangException_(@"Invalid values in string.", e);
  }
  return returnValues;
}

JavaUtilArrayList *OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_getTwoStringsAndOneIntegerWithNSString_withChar_(NSString *arguments, jchar delimiter) {
  OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_initialize();
  JavaUtilArrayList *returnValues = new_JavaUtilArrayList_init();
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = new_OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_initWithNSString_withChar_(arguments, delimiter);
    jint tokenCtr = 0;
    while ([tokenizer hasMoreTokens]) {
      if (tokenCtr == 0 || tokenCtr == 1) {
        NSString *token = [tokenizer nextToken];
        [returnValues addWithId:token];
      }
      else if (tokenCtr == 2) {
        NSString *token = [((NSString *) nil_chk([tokenizer nextToken])) trim];
        [returnValues addWithId:new_JavaLangInteger_initWithInt_([((JavaLangDouble *) nil_chk(OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(token))) intValue])];
      }
      else {
        @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_(@"Invalid values in string.");
      }
      tokenCtr++;
    }
  }
  @catch (JavaLangException *e) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_withJavaLangException_(@"Invalid values in string.", e);
  }
  return returnValues;
}

JavaUtilArrayList *OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_getOneStringAndTwoIntegersWithNSString_withChar_(NSString *arguments, jchar delimiter) {
  OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_initialize();
  JavaUtilArrayList *returnValues = new_JavaUtilArrayList_init();
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = new_OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_initWithNSString_withChar_(arguments, delimiter);
    jint tokenCtr = 0;
    while ([tokenizer hasMoreTokens]) {
      if (tokenCtr == 0) {
        NSString *token = [((NSString *) nil_chk([tokenizer nextToken])) trim];
        [returnValues addWithId:token];
      }
      else if (tokenCtr == 1 || tokenCtr == 2) {
        NSString *token = [((NSString *) nil_chk([tokenizer nextToken])) trim];
        [returnValues addWithId:new_JavaLangInteger_initWithInt_([((JavaLangDouble *) nil_chk(OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(token))) intValue])];
      }
      else {
        @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_(@"Invalid values in string.");
      }
      tokenCtr++;
    }
  }
  @catch (JavaLangException *e) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_withJavaLangException_(@"Invalid values in string.", e);
  }
  return returnValues;
}

void OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_init(OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper *self) {
  NSObject_init(self);
}

OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper *new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper, init)
}

OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper *create_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper)
