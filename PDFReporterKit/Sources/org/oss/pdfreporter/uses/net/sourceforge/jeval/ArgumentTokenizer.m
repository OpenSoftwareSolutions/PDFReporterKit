//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"

@interface OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer () {
 @public
  NSString *arguments_;
  jchar delimiter_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer, arguments_, NSString *)

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer

+ (jchar)defaultDelimiter {
  return OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_defaultDelimiter;
}

- (instancetype)initWithNSString:(NSString *)arguments
                        withChar:(jchar)delimiter {
  OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_initWithNSString_withChar_(self, arguments, delimiter);
  return self;
}

- (jboolean)hasMoreElements {
  return [self hasMoreTokens];
}

- (jboolean)hasMoreTokens {
  if (((jint) [((NSString *) nil_chk(arguments_)) length]) > 0) {
    return true;
  }
  return false;
}

- (id)nextElement {
  return [self nextToken];
}

- (NSString *)nextToken {
  jint charCtr = 0;
  jint size = ((jint) [((NSString *) nil_chk(arguments_)) length]);
  jint parenthesesCtr = 0;
  NSString *returnArgument = nil;
  while (charCtr < size) {
    if ([((NSString *) nil_chk(arguments_)) charAtWithInt:charCtr] == '(') {
      parenthesesCtr++;
    }
    else if ([((NSString *) nil_chk(arguments_)) charAtWithInt:charCtr] == ')') {
      parenthesesCtr--;
    }
    else if ([((NSString *) nil_chk(arguments_)) charAtWithInt:charCtr] == delimiter_ && parenthesesCtr == 0) {
      returnArgument = [((NSString *) nil_chk(arguments_)) substring:0 endIndex:charCtr];
      arguments_ = [((NSString *) nil_chk(arguments_)) substring:charCtr + 1];
      break;
    }
    charCtr++;
  }
  if (returnArgument == nil) {
    returnArgument = arguments_;
    arguments_ = @"";
  }
  return returnArgument;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withChar:", "ArgumentTokenizer", NULL, 0x1, NULL, NULL },
    { "hasMoreElements", NULL, "Z", 0x1, NULL, NULL },
    { "hasMoreTokens", NULL, "Z", 0x1, NULL, NULL },
    { "nextElement", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "nextToken", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaultDelimiter", "defaultDelimiter", 0x11, "C", NULL, NULL, .constantValue.asUnichar = OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_defaultDelimiter },
    { "arguments_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "delimiter_", NULL, 0x2, "C", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer = { 2, "ArgumentTokenizer", "org.oss.pdfreporter.uses.net.sourceforge.jeval", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer;
}

@end

void OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_initWithNSString_withChar_(OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *self, NSString *arguments, jchar delimiter) {
  NSObject_init(self);
  self->arguments_ = nil;
  self->delimiter_ = OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_defaultDelimiter;
  self->arguments_ = arguments;
  self->delimiter_ = delimiter;
}

OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *new_OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_initWithNSString_withChar_(NSString *arguments, jchar delimiter) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer, initWithNSString_withChar_, arguments, delimiter)
}

OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *create_OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_initWithNSString_withChar_(NSString *arguments, jchar delimiter) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer, initWithNSString_withChar_, arguments, delimiter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer)
