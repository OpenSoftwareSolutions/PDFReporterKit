//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationHelper.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuffer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationHelper.h"

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper

+ (NSString *)replaceAllWithNSString:(NSString *)expression
                        withNSString:(NSString *)oldString
                        withNSString:(NSString *)newString {
  return OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper_replaceAllWithNSString_withNSString_withNSString_(expression, oldString, newString);
}

+ (jboolean)isSpaceWithChar:(jchar)character {
  return OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper_isSpaceWithChar_(character);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "replaceAllWithNSString:withNSString:withNSString:", "replaceAll", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "isSpaceWithChar:", "isSpace", "Z", 0x9, NULL, NULL },
    { "init", "EvaluationHelper", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper = { 2, "EvaluationHelper", "org.oss.pdfreporter.uses.net.sourceforge.jeval", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper;
}

@end

NSString *OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper_replaceAllWithNSString_withNSString_withNSString_(NSString *expression, NSString *oldString, NSString *newString) {
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper_initialize();
  NSString *replacedExpression = expression;
  if (replacedExpression != nil) {
    jint charCtr = 0;
    jint oldStringIndex = [replacedExpression indexOfString:oldString fromIndex:charCtr];
    while (oldStringIndex > -1) {
      JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_initWithNSString_(JreStrcat("$$", [replacedExpression substring:0 endIndex:oldStringIndex], [replacedExpression substring:oldStringIndex + ((jint) [((NSString *) nil_chk(oldString)) length])]));
      (void) [buffer insertWithInt:oldStringIndex withNSString:newString];
      replacedExpression = [buffer description];
      charCtr = oldStringIndex + ((jint) [((NSString *) nil_chk(newString)) length]);
      if (charCtr < ((jint) [((NSString *) nil_chk(replacedExpression)) length])) {
        oldStringIndex = [replacedExpression indexOfString:oldString fromIndex:charCtr];
      }
      else {
        oldStringIndex = -1;
      }
    }
  }
  return replacedExpression;
}

jboolean OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper_isSpaceWithChar_(jchar character) {
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper_initialize();
  if (character == ' ' || character == 0x0009 || character == 0x000a || character == 0x000d || character == 0x000c) {
    return true;
  }
  return false;
}

void OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper_init(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper *self) {
  NSObject_init(self);
}

OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper *new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper, init)
}

OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper *create_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper)
