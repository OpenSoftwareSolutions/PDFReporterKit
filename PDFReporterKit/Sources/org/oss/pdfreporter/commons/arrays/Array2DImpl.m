//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-extensions/src/org/oss/pdfreporter/commons/arrays/Array2DImpl.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "org/oss/pdfreporter/commons/arrays/Array2DImpl.h"

@interface OrgOssPdfreporterCommonsArraysArray2DImpl () {
 @public
  jint iMax_, jMax_;
  IOSObjectArray *array_;
}

- (void)assertRangeWithInt:(jint)i
                   withInt:(jint)j;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCommonsArraysArray2DImpl, array_, IOSObjectArray *)

__attribute__((unused)) static void OrgOssPdfreporterCommonsArraysArray2DImpl_assertRangeWithInt_withInt_(OrgOssPdfreporterCommonsArraysArray2DImpl *self, jint i, jint j);

@implementation OrgOssPdfreporterCommonsArraysArray2DImpl

- (instancetype)initWithInt:(jint)iMax
                    withInt:(jint)jMax {
  OrgOssPdfreporterCommonsArraysArray2DImpl_initWithInt_withInt_(self, iMax, jMax);
  return self;
}

- (id)getWithInt:(jint)i
         withInt:(jint)j {
  OrgOssPdfreporterCommonsArraysArray2DImpl_assertRangeWithInt_withInt_(self, i, j);
  return IOSObjectArray_Get(nil_chk(array_), i * iMax_ + j);
}

- (void)setWithInt:(jint)i
           withInt:(jint)j
            withId:(id)element {
  OrgOssPdfreporterCommonsArraysArray2DImpl_assertRangeWithInt_withInt_(self, i, j);
  (void) IOSObjectArray_Set(nil_chk(array_), i * iMax_ + j, element);
}

- (jint)getLengthI {
  return iMax_;
}

- (jint)getLengthJ {
  return jMax_;
}

- (void)assertRangeWithInt:(jint)i
                   withInt:(jint)j {
  OrgOssPdfreporterCommonsArraysArray2DImpl_assertRangeWithInt_withInt_(self, i, j);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "Array2DImpl", NULL, 0x1, NULL, NULL },
    { "getWithInt:withInt:", "get", "TT;", 0x1, NULL, "(II)TT;" },
    { "setWithInt:withInt:withId:", "set", "V", 0x1, NULL, NULL },
    { "getLengthI", NULL, "I", 0x1, NULL, NULL },
    { "getLengthJ", NULL, "I", 0x1, NULL, NULL },
    { "assertRangeWithInt:withInt:", "assertRange", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iMax_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "jMax_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "array_", NULL, 0x12, "[Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCommonsArraysArray2DImpl = { 2, "Array2DImpl", "org.oss.pdfreporter.commons.arrays", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/oss/pdfreporter/commons/arrays/Array2D<TT;>;" };
  return &_OrgOssPdfreporterCommonsArraysArray2DImpl;
}

@end

void OrgOssPdfreporterCommonsArraysArray2DImpl_initWithInt_withInt_(OrgOssPdfreporterCommonsArraysArray2DImpl *self, jint iMax, jint jMax) {
  NSObject_init(self);
  self->iMax_ = iMax;
  self->jMax_ = jMax;
  self->array_ = [IOSObjectArray newArrayWithLength:iMax * jMax type:NSObject_class_()];
}

OrgOssPdfreporterCommonsArraysArray2DImpl *new_OrgOssPdfreporterCommonsArraysArray2DImpl_initWithInt_withInt_(jint iMax, jint jMax) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCommonsArraysArray2DImpl, initWithInt_withInt_, iMax, jMax)
}

OrgOssPdfreporterCommonsArraysArray2DImpl *create_OrgOssPdfreporterCommonsArraysArray2DImpl_initWithInt_withInt_(jint iMax, jint jMax) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCommonsArraysArray2DImpl, initWithInt_withInt_, iMax, jMax)
}

void OrgOssPdfreporterCommonsArraysArray2DImpl_assertRangeWithInt_withInt_(OrgOssPdfreporterCommonsArraysArray2DImpl *self, jint i, jint j) {
  if (i > self->iMax_ || j > self->jMax_ || i < 0 || j < 0) {
    @throw new_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"assert failed: 0 <= i < ", self->iMax_, @" and 0 <= j < ", self->jMax_));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCommonsArraysArray2DImpl)
