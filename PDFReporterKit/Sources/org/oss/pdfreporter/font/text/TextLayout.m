//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-portable/src/org/oss/pdfreporter/font/text/TextLayout.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontMetric.h"
#include "org/oss/pdfreporter/font/text/ITextLayout.h"
#include "org/oss/pdfreporter/font/text/TextLayout.h"
#include "org/oss/pdfreporter/text/Paragraph.h"
#include "org/oss/pdfreporter/text/ParagraphText.h"

@interface OrgOssPdfreporterFontTextTextLayout () {
 @public
  OrgOssPdfreporterTextParagraph *paragraph_;
  jint characterCount_;
  JavaLangFloat *advance_;
  JavaLangFloat *visibleAdvance_;
  JavaLangFloat *ascent_;
  JavaLangFloat *descent_;
  JavaLangFloat *leading_;
}

- (void)calcMetric;

- (void)calcAdvance;

+ (NSString *)invisibleCharsAtEndWithNSString:(NSString *)text;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontTextTextLayout, paragraph_, OrgOssPdfreporterTextParagraph *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontTextTextLayout, advance_, JavaLangFloat *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontTextTextLayout, visibleAdvance_, JavaLangFloat *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontTextTextLayout, ascent_, JavaLangFloat *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontTextTextLayout, descent_, JavaLangFloat *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontTextTextLayout, leading_, JavaLangFloat *)

__attribute__((unused)) static void OrgOssPdfreporterFontTextTextLayout_calcMetric(OrgOssPdfreporterFontTextTextLayout *self);

__attribute__((unused)) static void OrgOssPdfreporterFontTextTextLayout_calcAdvance(OrgOssPdfreporterFontTextTextLayout *self);

__attribute__((unused)) static NSString *OrgOssPdfreporterFontTextTextLayout_invisibleCharsAtEndWithNSString_(NSString *text);

@implementation OrgOssPdfreporterFontTextTextLayout

- (instancetype)initWithOrgOssPdfreporterTextParagraph:(OrgOssPdfreporterTextParagraph *)paragraph
                                               withInt:(jint)characterCount {
  OrgOssPdfreporterFontTextTextLayout_initWithOrgOssPdfreporterTextParagraph_withInt_(self, paragraph, characterCount);
  return self;
}

- (id<OrgOssPdfreporterFontTextITextLayout>)getJustifiedLayoutWithFloat:(jfloat)justificationWidth {
  return self;
}

- (jfloat)getAdvance {
  if (advance_ == nil) {
    OrgOssPdfreporterFontTextTextLayout_calcAdvance(self);
  }
  return [((JavaLangFloat *) nil_chk(advance_)) floatValue];
}

- (jfloat)getVisibleAdvance {
  if (visibleAdvance_ == nil) {
    OrgOssPdfreporterFontTextTextLayout_calcAdvance(self);
  }
  return [((JavaLangFloat *) nil_chk(visibleAdvance_)) floatValue];
}

- (jfloat)getAscent {
  if (ascent_ == nil) {
    OrgOssPdfreporterFontTextTextLayout_calcMetric(self);
  }
  return [((JavaLangFloat *) nil_chk(ascent_)) floatValue];
}

- (jfloat)getDescent {
  if (descent_ == nil) {
    OrgOssPdfreporterFontTextTextLayout_calcMetric(self);
  }
  return [((JavaLangFloat *) nil_chk(descent_)) floatValue];
}

- (jfloat)getLeading {
  if (leading_ == nil) {
    OrgOssPdfreporterFontTextTextLayout_calcMetric(self);
  }
  return [((JavaLangFloat *) nil_chk(leading_)) floatValue];
}

- (jboolean)isLeftToRight {
  return true;
}

- (jint)getCharacterCount {
  return characterCount_;
}

- (OrgOssPdfreporterTextParagraph *)getParagraph {
  return paragraph_;
}

- (NSString *)description {
  return JreStrcat("$I$F$F$F$F$$$", @"TextLayout [characterCount: ", [self getCharacterCount], @", advance: ", [self getAdvance], @", ascent: ", [self getAscent], @", descent: ", [self getDescent], @", leading: ", [self getLeading], @", text: '", [((OrgOssPdfreporterTextParagraph *) nil_chk([self getParagraph])) getText], @"']");
}

- (void)calcMetric {
  OrgOssPdfreporterFontTextTextLayout_calcMetric(self);
}

- (void)calcAdvance {
  OrgOssPdfreporterFontTextTextLayout_calcAdvance(self);
}

+ (NSString *)invisibleCharsAtEndWithNSString:(NSString *)text {
  return OrgOssPdfreporterFontTextTextLayout_invisibleCharsAtEndWithNSString_(text);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterTextParagraph:withInt:", "TextLayout", NULL, 0x0, NULL, NULL },
    { "getJustifiedLayoutWithFloat:", "getJustifiedLayout", "Lorg.oss.pdfreporter.font.text.ITextLayout;", 0x1, NULL, NULL },
    { "getAdvance", NULL, "F", 0x1, NULL, NULL },
    { "getVisibleAdvance", NULL, "F", 0x1, NULL, NULL },
    { "getAscent", NULL, "F", 0x1, NULL, NULL },
    { "getDescent", NULL, "F", 0x1, NULL, NULL },
    { "getLeading", NULL, "F", 0x1, NULL, NULL },
    { "isLeftToRight", NULL, "Z", 0x1, NULL, NULL },
    { "getCharacterCount", NULL, "I", 0x1, NULL, NULL },
    { "getParagraph", NULL, "Lorg.oss.pdfreporter.text.Paragraph;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "calcMetric", NULL, "V", 0x2, NULL, NULL },
    { "calcAdvance", NULL, "V", 0x2, NULL, NULL },
    { "invisibleCharsAtEndWithNSString:", "invisibleCharsAtEnd", "Ljava.lang.String;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "paragraph_", NULL, 0x12, "Lorg.oss.pdfreporter.text.Paragraph;", NULL, NULL, .constantValue.asLong = 0 },
    { "characterCount_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "advance_", NULL, 0x2, "Ljava.lang.Float;", NULL, NULL, .constantValue.asLong = 0 },
    { "visibleAdvance_", NULL, 0x2, "Ljava.lang.Float;", NULL, NULL, .constantValue.asLong = 0 },
    { "ascent_", NULL, 0x2, "Ljava.lang.Float;", NULL, NULL, .constantValue.asLong = 0 },
    { "descent_", NULL, 0x2, "Ljava.lang.Float;", NULL, NULL, .constantValue.asLong = 0 },
    { "leading_", NULL, 0x2, "Ljava.lang.Float;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterFontTextTextLayout = { 2, "TextLayout", "org.oss.pdfreporter.font.text", NULL, 0x1, 14, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterFontTextTextLayout;
}

@end

void OrgOssPdfreporterFontTextTextLayout_initWithOrgOssPdfreporterTextParagraph_withInt_(OrgOssPdfreporterFontTextTextLayout *self, OrgOssPdfreporterTextParagraph *paragraph, jint characterCount) {
  NSObject_init(self);
  self->advance_ = nil;
  self->visibleAdvance_ = nil;
  self->ascent_ = nil;
  self->descent_ = nil;
  self->leading_ = nil;
  self->paragraph_ = paragraph;
  self->characterCount_ = characterCount;
}

OrgOssPdfreporterFontTextTextLayout *new_OrgOssPdfreporterFontTextTextLayout_initWithOrgOssPdfreporterTextParagraph_withInt_(OrgOssPdfreporterTextParagraph *paragraph, jint characterCount) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterFontTextTextLayout, initWithOrgOssPdfreporterTextParagraph_withInt_, paragraph, characterCount)
}

OrgOssPdfreporterFontTextTextLayout *create_OrgOssPdfreporterFontTextTextLayout_initWithOrgOssPdfreporterTextParagraph_withInt_(OrgOssPdfreporterTextParagraph *paragraph, jint characterCount) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterFontTextTextLayout, initWithOrgOssPdfreporterTextParagraph_withInt_, paragraph, characterCount)
}

void OrgOssPdfreporterFontTextTextLayout_calcMetric(OrgOssPdfreporterFontTextTextLayout *self) {
  jfloat calcAscent = 0;
  jfloat calcDescent = 0;
  jfloat calcLeading = 0;
  for (OrgOssPdfreporterTextParagraphText * __strong text in nil_chk(self->paragraph_)) {
    id<OrgOssPdfreporterFontIFontMetric> metric = [((id<OrgOssPdfreporterFontIFont>) nil_chk([((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getFont])) getMetric];
    calcAscent = JavaLangMath_maxWithFloat_withFloat_(calcAscent, [((id<OrgOssPdfreporterFontIFontMetric>) nil_chk(metric)) getAscent]);
    calcDescent = JavaLangMath_maxWithFloat_withFloat_(calcDescent, [metric getDescent]);
    calcLeading = JavaLangMath_maxWithFloat_withFloat_(calcLeading, [metric getLeading]);
  }
  self->ascent_ = JavaLangFloat_valueOfWithFloat_(calcAscent);
  self->descent_ = JavaLangFloat_valueOfWithFloat_(calcDescent);
  self->leading_ = JavaLangFloat_valueOfWithFloat_(calcLeading);
}

void OrgOssPdfreporterFontTextTextLayout_calcAdvance(OrgOssPdfreporterFontTextTextLayout *self) {
  JavaLangStringBuilder *builder = new_JavaLangStringBuilder_init();
  jfloat totalAdvance = 0;
  for (OrgOssPdfreporterTextParagraphText * __strong text in nil_chk(self->paragraph_)) {
    JrePlusAssignFloatF(&totalAdvance, [((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getWidth]);
    (void) [builder appendWithNSString:[text getText]];
  }
  jfloat invisibleAdvance = [new_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterTextParagraphText_(OrgOssPdfreporterFontTextTextLayout_invisibleCharsAtEndWithNSString_([builder description]), [self->paragraph_ getLastParagraphText]) getWidth];
  self->advance_ = JavaLangFloat_valueOfWithFloat_(totalAdvance);
  self->visibleAdvance_ = JavaLangFloat_valueOfWithFloat_(totalAdvance - invisibleAdvance);
}

NSString *OrgOssPdfreporterFontTextTextLayout_invisibleCharsAtEndWithNSString_(NSString *text) {
  OrgOssPdfreporterFontTextTextLayout_initialize();
  jint begin = ((jint) [((NSString *) nil_chk(text)) length]);
  while (begin > 0 && [text charAtWithInt:begin - 1] <= ' ') {
    begin--;
  }
  return [text substring:begin endIndex:((jint) [text length])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterFontTextTextLayout)
