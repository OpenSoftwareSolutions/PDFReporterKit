//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/font/FontProxy.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/RuntimeException.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/font/AbstractFontManager.h"
#include "org/oss/pdfreporter/font/FontProxy.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontManager.h"
#include "org/oss/pdfreporter/font/IFontMetric.h"
#include "org/oss/pdfreporter/font/IFontPeer.h"

@interface OrgOssPdfreporterFontFontProxy () {
 @public
  OrgOssPdfreporterFontAbstractFontManager *fontManager_;
  NSString *filePath_;
  NSString *encoding_;
  jboolean embed_;
  NSString *name_;
  OrgOssPdfreporterFontIFont_FontStyle *style_;
  id<OrgOssPdfreporterFontIFontPeer> delegate_;
}

- (id<OrgOssPdfreporterFontIFontPeer>)getDelegate;

- (void)load__;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontFontProxy, fontManager_, OrgOssPdfreporterFontAbstractFontManager *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontFontProxy, filePath_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontFontProxy, encoding_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontFontProxy, name_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontFontProxy, style_, OrgOssPdfreporterFontIFont_FontStyle *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontFontProxy, delegate_, id<OrgOssPdfreporterFontIFontPeer>)

inline JavaUtilLoggingLogger *OrgOssPdfreporterFontFontProxy_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterFontFontProxy_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterFontFontProxy, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static id<OrgOssPdfreporterFontIFontPeer> OrgOssPdfreporterFontFontProxy_getDelegate(OrgOssPdfreporterFontFontProxy *self);

__attribute__((unused)) static void OrgOssPdfreporterFontFontProxy_load__(OrgOssPdfreporterFontFontProxy *self);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterFontFontProxy)

@implementation OrgOssPdfreporterFontFontProxy

- (instancetype)initWithOrgOssPdfreporterFontAbstractFontManager:(OrgOssPdfreporterFontAbstractFontManager *)fontManager
                                                    withNSString:(NSString *)filePath
                                                    withNSString:(NSString *)encoding
                                                     withBoolean:(jboolean)embed
                                                    withNSString:(NSString *)name
                        withOrgOssPdfreporterFontIFont_FontStyle:(OrgOssPdfreporterFontIFont_FontStyle *)style {
  OrgOssPdfreporterFontFontProxy_initWithOrgOssPdfreporterFontAbstractFontManager_withNSString_withNSString_withBoolean_withNSString_withOrgOssPdfreporterFontIFont_FontStyle_(self, fontManager, filePath, encoding, embed, name, style);
  return self;
}

- (NSString *)getName {
  return name_;
}

- (jfloat)getSize {
  return 1.0f;
}

- (OrgOssPdfreporterFontIFont_FontStyle *)getStyle {
  return style_;
}

- (OrgOssPdfreporterFontIFont_FontDecoration *)getDecoration {
  return JreLoadEnum(OrgOssPdfreporterFontIFont_FontDecoration, NONE);
}

- (id<OrgOssPdfreporterFontIFontMetric>)getMetric {
  return [((id<OrgOssPdfreporterFontIFontPeer>) nil_chk(OrgOssPdfreporterFontFontProxy_getDelegate(self))) getMetric];
}

- (NSString *)getResourcePath {
  return filePath_;
}

- (id)getPeer {
  return [((id<OrgOssPdfreporterFontIFontPeer>) nil_chk(OrgOssPdfreporterFontFontProxy_getDelegate(self))) getPeer];
}

- (id<OrgOssPdfreporterFontIFontPeer>)getDelegate {
  return OrgOssPdfreporterFontFontProxy_getDelegate(self);
}

- (NSString *)getEncoding {
  return encoding_;
}

- (void)load__ {
  OrgOssPdfreporterFontFontProxy_load__(self);
}

- (id<OrgOssPdfreporterFontIFontManager>)getFontManager {
  return fontManager_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterFontFontProxy class]) {
    OrgOssPdfreporterFontFontProxy_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterFontFontProxy_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterFontFontProxy)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterFontAbstractFontManager:withNSString:withNSString:withBoolean:withNSString:withOrgOssPdfreporterFontIFont_FontStyle:", "FontProxy", NULL, 0x0, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getSize", NULL, "F", 0x1, NULL, NULL },
    { "getStyle", NULL, "Lorg.oss.pdfreporter.font.IFont$FontStyle;", 0x1, NULL, NULL },
    { "getDecoration", NULL, "Lorg.oss.pdfreporter.font.IFont$FontDecoration;", 0x1, NULL, NULL },
    { "getMetric", NULL, "Lorg.oss.pdfreporter.font.IFontMetric;", 0x1, NULL, NULL },
    { "getResourcePath", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPeer", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getDelegate", NULL, "Lorg.oss.pdfreporter.font.IFontPeer;", 0x2, NULL, NULL },
    { "getEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "load__", "load", "V", 0x2, NULL, NULL },
    { "getFontManager", NULL, "Lorg.oss.pdfreporter.font.IFontManager;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterFontFontProxy_logger, NULL, .constantValue.asLong = 0 },
    { "fontManager_", NULL, 0x12, "Lorg.oss.pdfreporter.font.AbstractFontManager;", NULL, NULL, .constantValue.asLong = 0 },
    { "filePath_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "encoding_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "embed_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "style_", NULL, 0x12, "Lorg.oss.pdfreporter.font.IFont$FontStyle;", NULL, NULL, .constantValue.asLong = 0 },
    { "delegate_", NULL, 0x2, "Lorg.oss.pdfreporter.font.IFontPeer;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterFontFontProxy = { 2, "FontProxy", "org.oss.pdfreporter.font", NULL, 0x1, 12, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterFontFontProxy;
}

@end

void OrgOssPdfreporterFontFontProxy_initWithOrgOssPdfreporterFontAbstractFontManager_withNSString_withNSString_withBoolean_withNSString_withOrgOssPdfreporterFontIFont_FontStyle_(OrgOssPdfreporterFontFontProxy *self, OrgOssPdfreporterFontAbstractFontManager *fontManager, NSString *filePath, NSString *encoding, jboolean embed, NSString *name, OrgOssPdfreporterFontIFont_FontStyle *style) {
  NSObject_init(self);
  self->delegate_ = nil;
  self->fontManager_ = fontManager;
  self->filePath_ = filePath;
  self->encoding_ = encoding;
  self->embed_ = embed;
  self->name_ = name;
  self->style_ = style;
}

OrgOssPdfreporterFontFontProxy *new_OrgOssPdfreporterFontFontProxy_initWithOrgOssPdfreporterFontAbstractFontManager_withNSString_withNSString_withBoolean_withNSString_withOrgOssPdfreporterFontIFont_FontStyle_(OrgOssPdfreporterFontAbstractFontManager *fontManager, NSString *filePath, NSString *encoding, jboolean embed, NSString *name, OrgOssPdfreporterFontIFont_FontStyle *style) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterFontFontProxy, initWithOrgOssPdfreporterFontAbstractFontManager_withNSString_withNSString_withBoolean_withNSString_withOrgOssPdfreporterFontIFont_FontStyle_, fontManager, filePath, encoding, embed, name, style)
}

OrgOssPdfreporterFontFontProxy *create_OrgOssPdfreporterFontFontProxy_initWithOrgOssPdfreporterFontAbstractFontManager_withNSString_withNSString_withBoolean_withNSString_withOrgOssPdfreporterFontIFont_FontStyle_(OrgOssPdfreporterFontAbstractFontManager *fontManager, NSString *filePath, NSString *encoding, jboolean embed, NSString *name, OrgOssPdfreporterFontIFont_FontStyle *style) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterFontFontProxy, initWithOrgOssPdfreporterFontAbstractFontManager_withNSString_withNSString_withBoolean_withNSString_withOrgOssPdfreporterFontIFont_FontStyle_, fontManager, filePath, encoding, embed, name, style)
}

id<OrgOssPdfreporterFontIFontPeer> OrgOssPdfreporterFontFontProxy_getDelegate(OrgOssPdfreporterFontFontProxy *self) {
  OrgOssPdfreporterFontFontProxy_load__(self);
  return self->delegate_;
}

void OrgOssPdfreporterFontFontProxy_load__(OrgOssPdfreporterFontFontProxy *self) {
  @try {
    if (self->delegate_ == nil) {
      NSString *name = [((OrgOssPdfreporterFontAbstractFontManager *) nil_chk(self->fontManager_)) loadFontInternalWithNSString:self->filePath_ withNSString:self->encoding_ withBoolean:self->embed_];
      self->delegate_ = [self->fontManager_ getFontInternalWithNSString:name];
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterFontFontProxy_logger)) fineWithNSString:JreStrcat("$$$$$$$Z", @"Load TTF font: ", name, @", from: ", self->filePath_, @", encoding: ", self->encoding_, @", embed: ", self->embed_)];
    }
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Exception while loading font resource :", self->filePath_));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterFontFontProxy)
