//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/font/ScaledFontMetric.java
//

#include "J2ObjC_source.h"
#include "org/oss/pdfreporter/font/IFontMetric.h"
#include "org/oss/pdfreporter/font/ScaledFontMetric.h"

@interface OrgOssPdfreporterFontScaledFontMetric () {
 @public
  id<OrgOssPdfreporterFontIFontMetric> baseFontMetric_;
  jfloat fontSize_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterFontScaledFontMetric, baseFontMetric_, id<OrgOssPdfreporterFontIFontMetric>)

@implementation OrgOssPdfreporterFontScaledFontMetric

- (instancetype)initWithOrgOssPdfreporterFontIFontMetric:(id<OrgOssPdfreporterFontIFontMetric>)baseFontMetric
                                               withFloat:(jfloat)fontSize {
  OrgOssPdfreporterFontScaledFontMetric_initWithOrgOssPdfreporterFontIFontMetric_withFloat_(self, baseFontMetric, fontSize);
  return self;
}

- (jint)measureTextWithNSString:(NSString *)text
                        withInt:(jint)width
                    withBoolean:(jboolean)wordwrap {
  return [((id<OrgOssPdfreporterFontIFontMetric>) nil_chk(baseFontMetric_)) measureTextWithNSString:text withInt:width withBoolean:wordwrap];
}

- (jint)getWidthWithNSString:(NSString *)text {
  return [((id<OrgOssPdfreporterFontIFontMetric>) nil_chk(baseFontMetric_)) getWidthWithNSString:text];
}

- (jfloat)getAscent {
  return [((id<OrgOssPdfreporterFontIFontMetric>) nil_chk(baseFontMetric_)) getAscent] * fontSize_;
}

- (jfloat)getDescent {
  return [((id<OrgOssPdfreporterFontIFontMetric>) nil_chk(baseFontMetric_)) getDescent] * fontSize_;
}

- (jfloat)getLeading {
  return [((id<OrgOssPdfreporterFontIFontMetric>) nil_chk(baseFontMetric_)) getLeading] * fontSize_;
}

- (void)setFontSizeWithFloat:(jfloat)fontSize {
  self->fontSize_ = fontSize;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterFontIFontMetric:withFloat:", "ScaledFontMetric", NULL, 0x0, NULL, NULL },
    { "measureTextWithNSString:withInt:withBoolean:", "measureText", "I", 0x1, NULL, NULL },
    { "getWidthWithNSString:", "getWidth", "I", 0x1, NULL, NULL },
    { "getAscent", NULL, "F", 0x1, NULL, NULL },
    { "getDescent", NULL, "F", 0x1, NULL, NULL },
    { "getLeading", NULL, "F", 0x1, NULL, NULL },
    { "setFontSizeWithFloat:", "setFontSize", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "baseFontMetric_", NULL, 0x12, "Lorg.oss.pdfreporter.font.IFontMetric;", NULL, NULL, .constantValue.asLong = 0 },
    { "fontSize_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterFontScaledFontMetric = { 2, "ScaledFontMetric", "org.oss.pdfreporter.font", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterFontScaledFontMetric;
}

@end

void OrgOssPdfreporterFontScaledFontMetric_initWithOrgOssPdfreporterFontIFontMetric_withFloat_(OrgOssPdfreporterFontScaledFontMetric *self, id<OrgOssPdfreporterFontIFontMetric> baseFontMetric, jfloat fontSize) {
  NSObject_init(self);
  self->baseFontMetric_ = baseFontMetric;
  self->fontSize_ = fontSize;
}

OrgOssPdfreporterFontScaledFontMetric *new_OrgOssPdfreporterFontScaledFontMetric_initWithOrgOssPdfreporterFontIFontMetric_withFloat_(id<OrgOssPdfreporterFontIFontMetric> baseFontMetric, jfloat fontSize) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterFontScaledFontMetric, initWithOrgOssPdfreporterFontIFontMetric_withFloat_, baseFontMetric, fontSize)
}

OrgOssPdfreporterFontScaledFontMetric *create_OrgOssPdfreporterFontScaledFontMetric_initWithOrgOssPdfreporterFontIFontMetric_withFloat_(id<OrgOssPdfreporterFontIFontMetric> baseFontMetric, jfloat fontSize) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterFontScaledFontMetric, initWithOrgOssPdfreporterFontIFontMetric_withFloat_, baseFontMetric, fontSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterFontScaledFontMetric)
