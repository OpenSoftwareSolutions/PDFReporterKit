//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/compilers/jeval/functions/Message.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/Message.h"
#include "org/oss/pdfreporter/compilers/util/ResultUtil.h"
#include "org/oss/pdfreporter/converters/DecimalConverter.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/text/format/IMessageFormat.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionHelper.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionResult.h"

inline NSString *OrgOssPdfreporterCompilersJevalFunctionsMessage_get_DATE_CONVERTER();
static NSString *OrgOssPdfreporterCompilersJevalFunctionsMessage_DATE_CONVERTER = @"(date)";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterCompilersJevalFunctionsMessage, DATE_CONVERTER, NSString *)

@implementation OrgOssPdfreporterCompilersJevalFunctionsMessage

- (NSString *)getName {
  return @"msg";
}

- (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *)executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)evaluator
                                                                                                                    withNSString:(NSString *)arguments {
  NSString *pattern = nil;
  OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = new_OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_initWithNSString_withChar_(arguments, OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR);
  id<JavaUtilList> args = new_JavaUtilArrayList_init();
  pattern = OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_trimAndRemoveQuoteCharsWithNSString_withChar_([tokenizer nextToken], [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator)) getQuoteCharacter]);
  while ([tokenizer hasMoreTokens]) {
    NSString *rawarg = [tokenizer nextToken];
    if (OrgOssPdfreporterCompilersUtilResultUtil_isStringWithNSString_withChar_(rawarg, [evaluator getQuoteCharacter])) {
      NSString *stringArg = OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_trimAndRemoveQuoteCharsWithNSString_withChar_(rawarg, [evaluator getQuoteCharacter]);
      if ([((NSString *) nil_chk(stringArg)) hasPrefix:OrgOssPdfreporterCompilersJevalFunctionsMessage_DATE_CONVERTER]) {
        [args addWithId:new_JavaUtilDate_initWithLong_(JavaLangLong_parseLongWithNSString_([stringArg substring:6]))];
      }
      else {
        [args addWithId:stringArg];
      }
    }
    else {
      JavaLangDouble *doubleArg = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(rawarg);
      if ([((JavaLangDouble *) nil_chk(doubleArg)) compareToWithId:JavaLangDouble_valueOfWithDouble_(JavaLangMath_floorWithDouble_([doubleArg doubleValue]))] == 0) {
        [args addWithId:JavaLangLong_valueOfWithLong_([doubleArg longLongValue])];
      }
      else {
        [args addWithId:doubleArg];
      }
    }
  }
  id<OrgOssPdfreporterTextFormatIMessageFormat> formatter = [((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getIFormatFactoryWithOrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatType_(JreLoadEnum(OrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatType, STANDARD)))) newMessageFormatWithNSString:pattern withJavaUtilLocale:nil];
  return new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult_initWithNSString_withInt_([((id<OrgOssPdfreporterTextFormatIMessageFormat>) nil_chk(formatter)) formatWithNSObjectArray:[args toArray]], OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_STRING);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterCompilersJevalFunctionsMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:withNSString:", "execute", "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionResult;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionException;", NULL },
    { "init", "Message", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DATE_CONVERTER", "DATE_CONVERTER", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterCompilersJevalFunctionsMessage_DATE_CONVERTER, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersJevalFunctionsMessage = { 2, "Message", "org.oss.pdfreporter.compilers.jeval.functions", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersJevalFunctionsMessage;
}

@end

void OrgOssPdfreporterCompilersJevalFunctionsMessage_init(OrgOssPdfreporterCompilersJevalFunctionsMessage *self) {
  NSObject_init(self);
}

OrgOssPdfreporterCompilersJevalFunctionsMessage *new_OrgOssPdfreporterCompilersJevalFunctionsMessage_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersJevalFunctionsMessage, init)
}

OrgOssPdfreporterCompilersJevalFunctionsMessage *create_OrgOssPdfreporterCompilersJevalFunctionsMessage_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersJevalFunctionsMessage, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersJevalFunctionsMessage)
