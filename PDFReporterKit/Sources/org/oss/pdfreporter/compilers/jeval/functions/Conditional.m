//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/compilers/jeval/functions/Conditional.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/Conditional.h"
#include "org/oss/pdfreporter/compilers/util/ResultUtil.h"
#include "org/oss/pdfreporter/converters/DecimalConverter.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionHelper.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionResult.h"

inline JavaLangDouble *OrgOssPdfreporterCompilersJevalFunctionsConditional_get_TRUE();
static JavaLangDouble *OrgOssPdfreporterCompilersJevalFunctionsConditional_TRUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterCompilersJevalFunctionsConditional, TRUE, JavaLangDouble *)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterCompilersJevalFunctionsConditional)

@implementation OrgOssPdfreporterCompilersJevalFunctionsConditional

- (NSString *)getName {
  return @"ifelse";
}

- (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *)executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)evaluator
                                                                                                                    withNSString:(NSString *)arguments {
  NSString *resultTrue = nil;
  NSString *resultFalse = nil;
  JavaLangDouble *expression = nil;
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = new_OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer_initWithNSString_withChar_(arguments, OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR);
    expression = OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_([tokenizer nextToken]);
    resultTrue = [tokenizer nextToken];
    resultFalse = [tokenizer nextToken];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithNSString_withJavaLangException_(@"Invalid argument.", e);
  }
  NSString *result = [((JavaLangDouble *) nil_chk(expression)) compareToWithId:OrgOssPdfreporterCompilersJevalFunctionsConditional_TRUE] == 0 ? resultTrue : resultFalse;
  jboolean isResultString = OrgOssPdfreporterCompilersUtilResultUtil_isStringWithNSString_withChar_(result, [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator)) getQuoteCharacter]);
  if (isResultString) {
    result = OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper_trimAndRemoveQuoteCharsWithNSString_withChar_(result, [evaluator getQuoteCharacter]);
  }
  return new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult_initWithNSString_withInt_(result, isResultString ? OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_STRING : OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_NUMERIC);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterCompilersJevalFunctionsConditional_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [OrgOssPdfreporterCompilersJevalFunctionsConditional class]) {
    OrgOssPdfreporterCompilersJevalFunctionsConditional_TRUE = JavaLangDouble_valueOfWithDouble_(1.0);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterCompilersJevalFunctionsConditional)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:withNSString:", "execute", "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionResult;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionException;", NULL },
    { "init", "Conditional", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TRUE", "TRUE", 0x1a, "Ljava.lang.Double;", &OrgOssPdfreporterCompilersJevalFunctionsConditional_TRUE, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersJevalFunctionsConditional = { 2, "Conditional", "org.oss.pdfreporter.compilers.jeval.functions", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersJevalFunctionsConditional;
}

@end

void OrgOssPdfreporterCompilersJevalFunctionsConditional_init(OrgOssPdfreporterCompilersJevalFunctionsConditional *self) {
  NSObject_init(self);
}

OrgOssPdfreporterCompilersJevalFunctionsConditional *new_OrgOssPdfreporterCompilersJevalFunctionsConditional_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersJevalFunctionsConditional, init)
}

OrgOssPdfreporterCompilersJevalFunctionsConditional *create_OrgOssPdfreporterCompilersJevalFunctionsConditional_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersJevalFunctionsConditional, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersJevalFunctionsConditional)
