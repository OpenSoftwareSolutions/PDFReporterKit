//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/compilers/jeval/JEvalExpression.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/StringBuffer.h"
#include "java/math/BigDecimal.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/compilers/ExpressionEvaluationException.h"
#include "org/oss/pdfreporter/compilers/ExpressionParseException.h"
#include "org/oss/pdfreporter/compilers/IExpressionChunk.h"
#include "org/oss/pdfreporter/compilers/IVariable.h"
#include "org/oss/pdfreporter/compilers/IVariableExpressionChunk.h"
#include "org/oss/pdfreporter/compilers/expressionelements/ExpressionConstants.h"
#include "org/oss/pdfreporter/compilers/jeval/JEvalExpression.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/BooleanConverter.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/Conditional.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/CurrentDate.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/DateStringConverter.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/DisplayName.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/DoubleStringConverter.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/IntegerStringConverter.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/IsNull.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/Message.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/MessageWithArg.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/NullValue.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/TruncateDateTo.h"
#include "org/oss/pdfreporter/compilers/util/ResultUtil.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/VariableResolver.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/Function.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"

@interface OrgOssPdfreporterCompilersJevalJEvalExpression () {
 @public
  id<JavaUtilMap> variables_;
  id<JavaUtilMap> userFunctions_;
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *valueEvaluator_;
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *oldValueEvaluator_;
  NSString *expression_;
}

- (void)putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:(id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>)function;

- (void)parseWithJavaUtilList:(id<JavaUtilList>)chunks;

- (NSString *)buildExpressionWithJavaUtilList:(id<JavaUtilList>)chunks;

- (NSString *)getKeyWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType:(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)type
                                                                    withNSString:(NSString *)name;

- (NSString *)getStringWithId:(id)value;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJEvalExpression, variables_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJEvalExpression, userFunctions_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJEvalExpression, valueEvaluator_, OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJEvalExpression, oldValueEvaluator_, OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJEvalExpression, expression_, NSString *)

inline JavaUtilLoggingLogger *OrgOssPdfreporterCompilersJevalJEvalExpression_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterCompilersJevalJEvalExpression_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterCompilersJevalJEvalExpression, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static void OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(OrgOssPdfreporterCompilersJevalJEvalExpression *self, id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction> function);

__attribute__((unused)) static void OrgOssPdfreporterCompilersJevalJEvalExpression_parseWithJavaUtilList_(OrgOssPdfreporterCompilersJevalJEvalExpression *self, id<JavaUtilList> chunks);

__attribute__((unused)) static NSString *OrgOssPdfreporterCompilersJevalJEvalExpression_buildExpressionWithJavaUtilList_(OrgOssPdfreporterCompilersJevalJEvalExpression *self, id<JavaUtilList> chunks);

__attribute__((unused)) static NSString *OrgOssPdfreporterCompilersJevalJEvalExpression_getKeyWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(OrgOssPdfreporterCompilersJevalJEvalExpression *self, OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *type, NSString *name);

__attribute__((unused)) static NSString *OrgOssPdfreporterCompilersJevalJEvalExpression_getStringWithId_(OrgOssPdfreporterCompilersJevalJEvalExpression *self, id value);

@interface OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver : NSObject < OrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver > {
 @public
  OrgOssPdfreporterCompilersJevalJEvalExpression *this$0_;
}

- (NSString *)resolveVariableWithNSString:(NSString *)variableName;

- (instancetype)initWithOrgOssPdfreporterCompilersJevalJEvalExpression:(OrgOssPdfreporterCompilersJevalJEvalExpression *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver)

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver, this$0_, OrgOssPdfreporterCompilersJevalJEvalExpression *)

__attribute__((unused)) static void OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver *self, OrgOssPdfreporterCompilersJevalJEvalExpression *outer$);

__attribute__((unused)) static OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver *new_OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(OrgOssPdfreporterCompilersJevalJEvalExpression *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver *create_OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(OrgOssPdfreporterCompilersJevalJEvalExpression *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver)

@interface OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver : NSObject < OrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver > {
 @public
  OrgOssPdfreporterCompilersJevalJEvalExpression *this$0_;
}

- (NSString *)resolveVariableWithNSString:(NSString *)variableName;

- (instancetype)initWithOrgOssPdfreporterCompilersJevalJEvalExpression:(OrgOssPdfreporterCompilersJevalJEvalExpression *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver)

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver, this$0_, OrgOssPdfreporterCompilersJevalJEvalExpression *)

__attribute__((unused)) static void OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver *self, OrgOssPdfreporterCompilersJevalJEvalExpression *outer$);

__attribute__((unused)) static OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver *new_OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(OrgOssPdfreporterCompilersJevalJEvalExpression *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver *create_OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(OrgOssPdfreporterCompilersJevalJEvalExpression *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterCompilersJevalJEvalExpression)

@implementation OrgOssPdfreporterCompilersJevalJEvalExpression

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterCompilersJevalJEvalExpression_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:(id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>)function {
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, function);
}

+ (OrgOssPdfreporterCompilersJevalJEvalExpression *)newInstanceWithJavaUtilList:(id<JavaUtilList>)chunks {
  return OrgOssPdfreporterCompilersJevalJEvalExpression_newInstanceWithJavaUtilList_(chunks);
}

- (void)parseWithJavaUtilList:(id<JavaUtilList>)chunks {
  OrgOssPdfreporterCompilersJevalJEvalExpression_parseWithJavaUtilList_(self, chunks);
}

- (NSString *)getExpression {
  return expression_;
}

- (id<OrgOssPdfreporterCompilersIVariable>)getVariableWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(variables_)) getWithId:OrgOssPdfreporterCompilersJevalJEvalExpression_getKeyWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(self, JreLoadEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_VARIABLE), name)];
}

- (id<OrgOssPdfreporterCompilersIVariable>)getParameterWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(variables_)) getWithId:OrgOssPdfreporterCompilersJevalJEvalExpression_getKeyWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(self, JreLoadEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_PARAMETER), name)];
}

- (id<OrgOssPdfreporterCompilersIVariable>)getFieldWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(variables_)) getWithId:OrgOssPdfreporterCompilersJevalJEvalExpression_getKeyWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(self, JreLoadEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_FIELD), name)];
}

- (NSString *)buildExpressionWithJavaUtilList:(id<JavaUtilList>)chunks {
  return OrgOssPdfreporterCompilersJevalJEvalExpression_buildExpressionWithJavaUtilList_(self, chunks);
}

- (NSString *)getKeyWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType:(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)type
                                                                    withNSString:(NSString *)name {
  return OrgOssPdfreporterCompilersJevalJEvalExpression_getKeyWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(self, type, name);
}

- (NSString *)evaluateValue {
  @try {
    NSString *value = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(valueEvaluator_)) evaluate];
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterCompilersJevalJEvalExpression_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER) withNSString:@"Evaluating new exprsseion: {0} to {1} of type: {2}" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ expression_, value, [((NSString *) nil_chk(value)) hasPrefix:@"'"] ? @"STRING" : @"DOUBLE" } count:3 type:NSObject_class_()]];
    return value;
  }
  @catch (OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException *e) {
    @throw new_OrgOssPdfreporterCompilersExpressionEvaluationException_initWithNSString_withNSException_(JreStrcat("$$$$", @"Error while evaluating '", expression_, @"' with variables: ", OrgOssPdfreporterCompilersUtilResultUtil_getDumpWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(variables_)) values])), e);
  }
}

- (NSString *)evaluateOldValue {
  @try {
    NSString *value = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(oldValueEvaluator_)) evaluate];
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterCompilersJevalJEvalExpression_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER) withNSString:@"Evaluating old exprsseion: {0} to {1} of type: {2}" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ expression_, value, [((NSString *) nil_chk(value)) hasPrefix:@"'"] ? @"STRING" : @"DOUBLE" } count:3 type:NSObject_class_()]];
    return value;
  }
  @catch (OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException *e) {
    @throw new_OrgOssPdfreporterCompilersExpressionEvaluationException_initWithNSString_withNSException_(JreStrcat("$$$$", @"Error while evaluating '", expression_, @"' with variables: ", OrgOssPdfreporterCompilersUtilResultUtil_getDumpWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(variables_)) values])), e);
  }
}

- (NSString *)getStringWithId:(id)value {
  return OrgOssPdfreporterCompilersJevalJEvalExpression_getStringWithId_(self, value);
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterCompilersJevalJEvalExpression class]) {
    OrgOssPdfreporterCompilersJevalJEvalExpression_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterCompilersJevalJEvalExpression_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterCompilersJevalJEvalExpression)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JEvalExpression", NULL, 0x1, NULL, NULL },
    { "putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:", "putFunction", "V", 0x2, NULL, NULL },
    { "newInstanceWithJavaUtilList:", "newInstance", "Lorg.oss.pdfreporter.compilers.jeval.JEvalExpression;", 0x9, "Lorg.oss.pdfreporter.compilers.ExpressionParseException;", "(Ljava/util/List<Lorg/oss/pdfreporter/compilers/IExpressionChunk;>;)Lorg/oss/pdfreporter/compilers/jeval/JEvalExpression;" },
    { "parseWithJavaUtilList:", "parse", "V", 0x2, "Lorg.oss.pdfreporter.compilers.ExpressionParseException;", "(Ljava/util/List<Lorg/oss/pdfreporter/compilers/IExpressionChunk;>;)V" },
    { "getExpression", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getVariableWithNSString:", "getVariable", "Lorg.oss.pdfreporter.compilers.IVariable;", 0x1, NULL, NULL },
    { "getParameterWithNSString:", "getParameter", "Lorg.oss.pdfreporter.compilers.IVariable;", 0x1, NULL, NULL },
    { "getFieldWithNSString:", "getField", "Lorg.oss.pdfreporter.compilers.IVariable;", 0x1, NULL, NULL },
    { "buildExpressionWithJavaUtilList:", "buildExpression", "Ljava.lang.String;", 0x2, NULL, "(Ljava/util/List<Lorg/oss/pdfreporter/compilers/IExpressionChunk;>;)Ljava/lang/String;" },
    { "getKeyWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType:withNSString:", "getKey", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "evaluateValue", NULL, "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.compilers.ExpressionEvaluationException;", NULL },
    { "evaluateOldValue", NULL, "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.compilers.ExpressionEvaluationException;", NULL },
    { "getStringWithId:", "getString", "Ljava.lang.String;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterCompilersJevalJEvalExpression_logger, NULL, .constantValue.asLong = 0 },
    { "variables_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/compilers/IVariable;>;", .constantValue.asLong = 0 },
    { "userFunctions_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/uses/net/sourceforge/jeval/function/Function;>;", .constantValue.asLong = 0 },
    { "valueEvaluator_", NULL, 0x12, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.Evaluator;", NULL, NULL, .constantValue.asLong = 0 },
    { "oldValueEvaluator_", NULL, 0x12, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.Evaluator;", NULL, NULL, .constantValue.asLong = 0 },
    { "expression_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.compilers.jeval.JEvalExpression$ValueResolver;", "Lorg.oss.pdfreporter.compilers.jeval.JEvalExpression$OldValueResolver;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersJevalJEvalExpression = { 2, "JEvalExpression", "org.oss.pdfreporter.compilers.jeval", NULL, 0x1, 13, methods, 6, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterCompilersJevalJEvalExpression;
}

@end

void OrgOssPdfreporterCompilersJevalJEvalExpression_init(OrgOssPdfreporterCompilersJevalJEvalExpression *self) {
  NSObject_init(self);
  self->variables_ = new_JavaUtilHashMap_init();
  self->userFunctions_ = new_JavaUtilHashMap_init();
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, new_OrgOssPdfreporterCompilersJevalFunctionsBooleanConverter_init());
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, new_OrgOssPdfreporterCompilersJevalFunctionsIntegerStringConverter_init());
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, new_OrgOssPdfreporterCompilersJevalFunctionsDoubleStringConverter_init());
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, new_OrgOssPdfreporterCompilersJevalFunctionsDateStringConverter_init());
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, new_OrgOssPdfreporterCompilersJevalFunctionsTruncateDateTo_init());
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, new_OrgOssPdfreporterCompilersJevalFunctionsConditional_init());
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, new_OrgOssPdfreporterCompilersJevalFunctionsCurrentDate_init());
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, new_OrgOssPdfreporterCompilersJevalFunctionsNullValue_init());
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, new_OrgOssPdfreporterCompilersJevalFunctionsIsNull_init());
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, new_OrgOssPdfreporterCompilersJevalFunctionsMessage_init());
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, new_OrgOssPdfreporterCompilersJevalFunctionsDisplayName_init());
  OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(self, new_OrgOssPdfreporterCompilersJevalFunctionsMessageWithArg_init());
  self->valueEvaluator_ = new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_init();
  [self->valueEvaluator_ setVariableResolverWithOrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver:new_OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(self)];
  [((id<JavaUtilMap>) nil_chk([self->valueEvaluator_ getFunctions])) putAllWithJavaUtilMap:self->userFunctions_];
  self->oldValueEvaluator_ = new_OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator_init();
  [self->oldValueEvaluator_ setVariableResolverWithOrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver:new_OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(self)];
  [((id<JavaUtilMap>) nil_chk([self->oldValueEvaluator_ getFunctions])) putAllWithJavaUtilMap:self->userFunctions_];
}

OrgOssPdfreporterCompilersJevalJEvalExpression *new_OrgOssPdfreporterCompilersJevalJEvalExpression_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersJevalJEvalExpression, init)
}

OrgOssPdfreporterCompilersJevalJEvalExpression *create_OrgOssPdfreporterCompilersJevalJEvalExpression_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersJevalJEvalExpression, init)
}

void OrgOssPdfreporterCompilersJevalJEvalExpression_putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction_(OrgOssPdfreporterCompilersJevalJEvalExpression *self, id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction> function) {
  (void) [((id<JavaUtilMap>) nil_chk(self->userFunctions_)) putWithId:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) nil_chk(function)) getName] withId:function];
}

OrgOssPdfreporterCompilersJevalJEvalExpression *OrgOssPdfreporterCompilersJevalJEvalExpression_newInstanceWithJavaUtilList_(id<JavaUtilList> chunks) {
  OrgOssPdfreporterCompilersJevalJEvalExpression_initialize();
  OrgOssPdfreporterCompilersJevalJEvalExpression *expression = new_OrgOssPdfreporterCompilersJevalJEvalExpression_init();
  OrgOssPdfreporterCompilersJevalJEvalExpression_parseWithJavaUtilList_(expression, chunks);
  return expression;
}

void OrgOssPdfreporterCompilersJevalJEvalExpression_parseWithJavaUtilList_(OrgOssPdfreporterCompilersJevalJEvalExpression *self, id<JavaUtilList> chunks) {
  self->expression_ = OrgOssPdfreporterCompilersJevalJEvalExpression_buildExpressionWithJavaUtilList_(self, chunks);
  @try {
    [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(self->valueEvaluator_)) parseWithNSString:self->expression_];
    [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(self->oldValueEvaluator_)) parseWithNSString:self->expression_];
  }
  @catch (OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException *e) {
    @throw new_OrgOssPdfreporterCompilersExpressionParseException_initWithNSString_(JreStrcat("$$$$", @"Cannot parse '", self->expression_, @"', error: ", [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException *) nil_chk(e)) getMessage]));
  }
}

NSString *OrgOssPdfreporterCompilersJevalJEvalExpression_buildExpressionWithJavaUtilList_(OrgOssPdfreporterCompilersJevalJEvalExpression *self, id<JavaUtilList> chunks) {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  NSString *name;
  id<OrgOssPdfreporterCompilersIVariable> variable;
  for (id<OrgOssPdfreporterCompilersIExpressionChunk> __strong chunk in nil_chk(chunks)) {
    switch ([[((id<OrgOssPdfreporterCompilersIExpressionChunk>) nil_chk(chunk)) getType] ordinal]) {
      case OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_Enum_TYPE_FIELD:
      case OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_Enum_TYPE_PARAMETER:
      case OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_Enum_TYPE_VARIABLE:
      name = OrgOssPdfreporterCompilersJevalJEvalExpression_getKeyWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(self, [chunk getType], [chunk getText]);
      (void) [sb appendWithNSString:@"#{"];
      (void) [sb appendWithNSString:name];
      (void) [sb appendWithNSString:@"}"];
      variable = [((id<OrgOssPdfreporterCompilersIVariableExpressionChunk>) cast_check(chunk, OrgOssPdfreporterCompilersIVariableExpressionChunk_class_())) getVariable];
      (void) [((id<JavaUtilMap>) nil_chk(self->variables_)) putWithId:name withId:variable];
      break;
      case OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_Enum_TYPE_TEXT:
      case OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_Enum_TYPE_RESOURCE:
      (void) [sb appendWithNSString:[chunk getText]];
      break;
    }
  }
  return [sb description];
}

NSString *OrgOssPdfreporterCompilersJevalJEvalExpression_getKeyWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(OrgOssPdfreporterCompilersJevalJEvalExpression *self, OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *type, NSString *name) {
  switch ([((OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *) nil_chk(type)) ordinal]) {
    case 1:
    return JreStrcat("$$", @"P_", name);
    case 2:
    return JreStrcat("$$", @"F_", name);
    case 3:
    return JreStrcat("$$", @"V_", name);
    case 4:
    return JreStrcat("$$", @"R_", name);
    default:
    return JreStrcat("$$", @"T_", name);
  }
}

NSString *OrgOssPdfreporterCompilersJevalJEvalExpression_getStringWithId_(OrgOssPdfreporterCompilersJevalJEvalExpression *self, id value) {
  if ([value isKindOfClass:[JavaUtilDate class]]) {
    return NSString_valueOfLong_([((JavaUtilDate *) nil_chk(((JavaUtilDate *) cast_chk(value, [JavaUtilDate class])))) getTime]);
  }
  else if (value == nil) {
    return OrgOssPdfreporterCompilersExpressionelementsExpressionConstants_QUOTED_NULL;
  }
  else if ([value isKindOfClass:[NSString class]]) {
    return JreStrcat("C$C", OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_SINGLE_QUOTE, [value description], OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_SINGLE_QUOTE);
  }
  else if ([value isKindOfClass:[JavaUtilLocale class]]) {
    return JreStrcat("C$C", OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_SINGLE_QUOTE, [value description], OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_SINGLE_QUOTE);
  }
  else if ([value isKindOfClass:[JavaLangDouble class]]) {
    return [((JavaMathBigDecimal *) nil_chk(JavaMathBigDecimal_valueOfWithDouble_([(JavaLangDouble *) cast_chk(value, [JavaLangDouble class]) doubleValue]))) toPlainString];
  }
  else if ([value isKindOfClass:[JavaLangFloat class]]) {
    return [((JavaMathBigDecimal *) nil_chk(JavaMathBigDecimal_valueOfWithDouble_([(JavaLangFloat *) cast_chk(value, [JavaLangFloat class]) floatValue]))) toPlainString];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterCompilersJevalJEvalExpression_logger)) finestWithNSString:JreStrcat("$@$$", @"Convert Object to String class: ", [value getClass], @", toString: ", [value description])];
    return [value description];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersJevalJEvalExpression)

@implementation OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver

- (NSString *)resolveVariableWithNSString:(NSString *)variableName {
  @try {
    return OrgOssPdfreporterCompilersJevalJEvalExpression_getStringWithId_(this$0_, [((id<OrgOssPdfreporterCompilersIVariable>) nil_chk([((id<JavaUtilMap>) nil_chk(this$0_->variables_)) getWithId:variableName])) getValue]);
  }
  @catch (OrgOssPdfreporterCompilersExpressionEvaluationException *e) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithJavaLangException_(e);
  }
}

- (instancetype)initWithOrgOssPdfreporterCompilersJevalJEvalExpression:(OrgOssPdfreporterCompilersJevalJEvalExpression *)outer$ {
  OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "resolveVariableWithNSString:", "resolveVariable", "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionException;", NULL },
    { "initWithOrgOssPdfreporterCompilersJevalJEvalExpression:", "ValueResolver", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.oss.pdfreporter.compilers.jeval.JEvalExpression;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver = { 2, "ValueResolver", "org.oss.pdfreporter.compilers.jeval", "JEvalExpression", 0x2, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver;
}

@end

void OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver *self, OrgOssPdfreporterCompilersJevalJEvalExpression *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver *new_OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(OrgOssPdfreporterCompilersJevalJEvalExpression *outer$) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver, initWithOrgOssPdfreporterCompilersJevalJEvalExpression_, outer$)
}

OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver *create_OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(OrgOssPdfreporterCompilersJevalJEvalExpression *outer$) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver, initWithOrgOssPdfreporterCompilersJevalJEvalExpression_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver)

@implementation OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver

- (NSString *)resolveVariableWithNSString:(NSString *)variableName {
  @try {
    return OrgOssPdfreporterCompilersJevalJEvalExpression_getStringWithId_(this$0_, [((id<OrgOssPdfreporterCompilersIVariable>) nil_chk([((id<JavaUtilMap>) nil_chk(this$0_->variables_)) getWithId:variableName])) getOldValue]);
  }
  @catch (OrgOssPdfreporterCompilersExpressionEvaluationException *e) {
    @throw new_OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException_initWithJavaLangException_(e);
  }
}

- (instancetype)initWithOrgOssPdfreporterCompilersJevalJEvalExpression:(OrgOssPdfreporterCompilersJevalJEvalExpression *)outer$ {
  OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "resolveVariableWithNSString:", "resolveVariable", "Ljava.lang.String;", 0x1, "Lorg.oss.pdfreporter.uses.net.sourceforge.jeval.function.FunctionException;", NULL },
    { "initWithOrgOssPdfreporterCompilersJevalJEvalExpression:", "OldValueResolver", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.oss.pdfreporter.compilers.jeval.JEvalExpression;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver = { 2, "OldValueResolver", "org.oss.pdfreporter.compilers.jeval", "JEvalExpression", 0x2, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver;
}

@end

void OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver *self, OrgOssPdfreporterCompilersJevalJEvalExpression *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver *new_OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(OrgOssPdfreporterCompilersJevalJEvalExpression *outer$) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver, initWithOrgOssPdfreporterCompilersJevalJEvalExpression_, outer$)
}

OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver *create_OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver_initWithOrgOssPdfreporterCompilersJevalJEvalExpression_(OrgOssPdfreporterCompilersJevalJEvalExpression *outer$) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver, initWithOrgOssPdfreporterCompilersJevalJEvalExpression_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver)
