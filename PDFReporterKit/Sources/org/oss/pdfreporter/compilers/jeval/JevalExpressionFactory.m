//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/compilers/jeval/JevalExpressionFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/List.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/compilers/ExpressionParseException.h"
#include "org/oss/pdfreporter/compilers/IDataHolder.h"
#include "org/oss/pdfreporter/compilers/IExpressionElement.h"
#include "org/oss/pdfreporter/compilers/expressionelements/ChunkBuilder.h"
#include "org/oss/pdfreporter/compilers/expressionelements/ExpressionField.h"
#include "org/oss/pdfreporter/compilers/expressionelements/ExpressionParameter.h"
#include "org/oss/pdfreporter/compilers/expressionelements/ExpressionRessource.h"
#include "org/oss/pdfreporter/compilers/expressionelements/ExpressionVariable.h"
#include "org/oss/pdfreporter/compilers/jeval/JEvalExpression.h"
#include "org/oss/pdfreporter/compilers/jeval/JEvalResultCast.h"
#include "org/oss/pdfreporter/compilers/jeval/JevalExpressionFactory.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpressionChunk.h"

@interface OrgOssPdfreporterCompilersJevalJevalExpressionFactory () {
 @public
  JavaLangStringBuilder *rawExpression_;
  id<OrgOssPdfreporterCompilersIDataHolder> dataholder_;
}

- (instancetype)initWithOrgOssPdfreporterCompilersIDataHolder:(id<OrgOssPdfreporterCompilersIDataHolder>)dataholder;

- (id<OrgOssPdfreporterCompilersIExpressionElement>)buildWithOrgOssPdfreporterEngineJRExpressionChunkArray:(IOSObjectArray *)chunks
                                                                                                   withInt:(jint)expressionId;

- (void)appendRawParameterWithNSString:(NSString *)chunkText;

- (void)appendRawFieldWithNSString:(NSString *)chunkText;

- (void)appendRawVariableWithNSString:(NSString *)chunkText;

- (void)appendRawResourceWithNSString:(NSString *)chunkText;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJevalExpressionFactory, rawExpression_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJevalExpressionFactory, dataholder_, id<OrgOssPdfreporterCompilersIDataHolder>)

inline JavaUtilLoggingLogger *OrgOssPdfreporterCompilersJevalJevalExpressionFactory_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterCompilersJevalJevalExpressionFactory_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterCompilersJevalJevalExpressionFactory, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static void OrgOssPdfreporterCompilersJevalJevalExpressionFactory_initWithOrgOssPdfreporterCompilersIDataHolder_(OrgOssPdfreporterCompilersJevalJevalExpressionFactory *self, id<OrgOssPdfreporterCompilersIDataHolder> dataholder);

__attribute__((unused)) static OrgOssPdfreporterCompilersJevalJevalExpressionFactory *new_OrgOssPdfreporterCompilersJevalJevalExpressionFactory_initWithOrgOssPdfreporterCompilersIDataHolder_(id<OrgOssPdfreporterCompilersIDataHolder> dataholder) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterCompilersJevalJevalExpressionFactory *create_OrgOssPdfreporterCompilersJevalJevalExpressionFactory_initWithOrgOssPdfreporterCompilersIDataHolder_(id<OrgOssPdfreporterCompilersIDataHolder> dataholder);

__attribute__((unused)) static id<OrgOssPdfreporterCompilersIExpressionElement> OrgOssPdfreporterCompilersJevalJevalExpressionFactory_buildWithOrgOssPdfreporterEngineJRExpressionChunkArray_withInt_(OrgOssPdfreporterCompilersJevalJevalExpressionFactory *self, IOSObjectArray *chunks, jint expressionId);

__attribute__((unused)) static void OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawParameterWithNSString_(OrgOssPdfreporterCompilersJevalJevalExpressionFactory *self, NSString *chunkText);

__attribute__((unused)) static void OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawFieldWithNSString_(OrgOssPdfreporterCompilersJevalJevalExpressionFactory *self, NSString *chunkText);

__attribute__((unused)) static void OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawVariableWithNSString_(OrgOssPdfreporterCompilersJevalJevalExpressionFactory *self, NSString *chunkText);

__attribute__((unused)) static void OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawResourceWithNSString_(OrgOssPdfreporterCompilersJevalJevalExpressionFactory *self, NSString *chunkText);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterCompilersJevalJevalExpressionFactory)

@implementation OrgOssPdfreporterCompilersJevalJevalExpressionFactory

- (instancetype)initWithOrgOssPdfreporterCompilersIDataHolder:(id<OrgOssPdfreporterCompilersIDataHolder>)dataholder {
  OrgOssPdfreporterCompilersJevalJevalExpressionFactory_initWithOrgOssPdfreporterCompilersIDataHolder_(self, dataholder);
  return self;
}

+ (id<OrgOssPdfreporterCompilersIExpressionElement>)buildExpressionWithOrgOssPdfreporterCompilersIDataHolder:(id<OrgOssPdfreporterCompilersIDataHolder>)dataholder
                                                           withOrgOssPdfreporterEngineJRExpressionChunkArray:(IOSObjectArray *)chunks
                                                                                                     withInt:(jint)expressionId {
  return OrgOssPdfreporterCompilersJevalJevalExpressionFactory_buildExpressionWithOrgOssPdfreporterCompilersIDataHolder_withOrgOssPdfreporterEngineJRExpressionChunkArray_withInt_(dataholder, chunks, expressionId);
}

- (id<OrgOssPdfreporterCompilersIExpressionElement>)buildWithOrgOssPdfreporterEngineJRExpressionChunkArray:(IOSObjectArray *)chunks
                                                                                                   withInt:(jint)expressionId {
  return OrgOssPdfreporterCompilersJevalJevalExpressionFactory_buildWithOrgOssPdfreporterEngineJRExpressionChunkArray_withInt_(self, chunks, expressionId);
}

- (void)appendRawParameterWithNSString:(NSString *)chunkText {
  OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawParameterWithNSString_(self, chunkText);
}

- (void)appendRawFieldWithNSString:(NSString *)chunkText {
  OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawFieldWithNSString_(self, chunkText);
}

- (void)appendRawVariableWithNSString:(NSString *)chunkText {
  OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawVariableWithNSString_(self, chunkText);
}

- (void)appendRawResourceWithNSString:(NSString *)chunkText {
  OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawResourceWithNSString_(self, chunkText);
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterCompilersJevalJevalExpressionFactory class]) {
    OrgOssPdfreporterCompilersJevalJevalExpressionFactory_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterCompilersJevalJevalExpressionFactory_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterCompilersJevalJevalExpressionFactory)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCompilersIDataHolder:", "JevalExpressionFactory", NULL, 0x2, NULL, NULL },
    { "buildExpressionWithOrgOssPdfreporterCompilersIDataHolder:withOrgOssPdfreporterEngineJRExpressionChunkArray:withInt:", "buildExpression", "Lorg.oss.pdfreporter.compilers.IExpressionElement;", 0x9, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "buildWithOrgOssPdfreporterEngineJRExpressionChunkArray:withInt:", "build", "Lorg.oss.pdfreporter.compilers.IExpressionElement;", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "appendRawParameterWithNSString:", "appendRawParameter", "V", 0x2, NULL, NULL },
    { "appendRawFieldWithNSString:", "appendRawField", "V", 0x2, NULL, NULL },
    { "appendRawVariableWithNSString:", "appendRawVariable", "V", 0x2, NULL, NULL },
    { "appendRawResourceWithNSString:", "appendRawResource", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterCompilersJevalJevalExpressionFactory_logger, NULL, .constantValue.asLong = 0 },
    { "rawExpression_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL, .constantValue.asLong = 0 },
    { "dataholder_", NULL, 0x12, "Lorg.oss.pdfreporter.compilers.IDataHolder;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersJevalJevalExpressionFactory = { 2, "JevalExpressionFactory", "org.oss.pdfreporter.compilers.jeval", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersJevalJevalExpressionFactory;
}

@end

void OrgOssPdfreporterCompilersJevalJevalExpressionFactory_initWithOrgOssPdfreporterCompilersIDataHolder_(OrgOssPdfreporterCompilersJevalJevalExpressionFactory *self, id<OrgOssPdfreporterCompilersIDataHolder> dataholder) {
  NSObject_init(self);
  self->dataholder_ = dataholder;
}

OrgOssPdfreporterCompilersJevalJevalExpressionFactory *new_OrgOssPdfreporterCompilersJevalJevalExpressionFactory_initWithOrgOssPdfreporterCompilersIDataHolder_(id<OrgOssPdfreporterCompilersIDataHolder> dataholder) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersJevalJevalExpressionFactory, initWithOrgOssPdfreporterCompilersIDataHolder_, dataholder)
}

OrgOssPdfreporterCompilersJevalJevalExpressionFactory *create_OrgOssPdfreporterCompilersJevalJevalExpressionFactory_initWithOrgOssPdfreporterCompilersIDataHolder_(id<OrgOssPdfreporterCompilersIDataHolder> dataholder) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersJevalJevalExpressionFactory, initWithOrgOssPdfreporterCompilersIDataHolder_, dataholder)
}

id<OrgOssPdfreporterCompilersIExpressionElement> OrgOssPdfreporterCompilersJevalJevalExpressionFactory_buildExpressionWithOrgOssPdfreporterCompilersIDataHolder_withOrgOssPdfreporterEngineJRExpressionChunkArray_withInt_(id<OrgOssPdfreporterCompilersIDataHolder> dataholder, IOSObjectArray *chunks, jint expressionId) {
  OrgOssPdfreporterCompilersJevalJevalExpressionFactory_initialize();
  return OrgOssPdfreporterCompilersJevalJevalExpressionFactory_buildWithOrgOssPdfreporterEngineJRExpressionChunkArray_withInt_(new_OrgOssPdfreporterCompilersJevalJevalExpressionFactory_initWithOrgOssPdfreporterCompilersIDataHolder_(dataholder), chunks, expressionId);
}

id<OrgOssPdfreporterCompilersIExpressionElement> OrgOssPdfreporterCompilersJevalJevalExpressionFactory_buildWithOrgOssPdfreporterEngineJRExpressionChunkArray_withInt_(OrgOssPdfreporterCompilersJevalJevalExpressionFactory *self, IOSObjectArray *chunks, jint expressionId) {
  OrgOssPdfreporterCompilersJevalJEvalResultCast *result = new_OrgOssPdfreporterCompilersJevalJEvalResultCast_init();
  OrgOssPdfreporterCompilersExpressionelementsChunkBuilder *expressionBuilder = new_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_init();
  self->rawExpression_ = new_JavaLangStringBuilder_init();
  @try {
    {
      IOSObjectArray *a__ = chunks;
      id<OrgOssPdfreporterEngineJRExpressionChunk> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<OrgOssPdfreporterEngineJRExpressionChunk> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<OrgOssPdfreporterEngineJRExpressionChunk> designChunk = *b__++;
        NSString *chunkText = [((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(designChunk)) getText];
        if (chunkText == nil) {
          chunkText = @"";
        }
        switch ([designChunk getType]) {
          case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_TEXT:
          {
            (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:chunkText];
            if (OrgOssPdfreporterCompilersJevalJEvalResultCast_isCastWithNSString_(chunkText)) {
              result = OrgOssPdfreporterCompilersJevalJEvalResultCast_parseCastWithNSString_(chunkText);
              (void) [expressionBuilder addTextWithNSString:OrgOssPdfreporterCompilersJevalJEvalResultCast_getNextWithNSString_(chunkText)];
            }
            else {
              (void) [expressionBuilder addTextWithNSString:chunkText];
            }
            break;
          }
          case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_PARAMETER:
          {
            OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawParameterWithNSString_(self, chunkText);
            (void) [expressionBuilder addVariableWithOrgOssPdfreporterCompilersIVariable:new_OrgOssPdfreporterCompilersExpressionelementsExpressionParameter_initWithOrgOssPdfreporterCompilersIDataHolder_withNSString_(self->dataholder_, chunkText)];
            break;
          }
          case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_FIELD:
          {
            OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawFieldWithNSString_(self, chunkText);
            (void) [expressionBuilder addVariableWithOrgOssPdfreporterCompilersIVariable:new_OrgOssPdfreporterCompilersExpressionelementsExpressionField_initWithOrgOssPdfreporterCompilersIDataHolder_withNSString_(self->dataholder_, chunkText)];
            break;
          }
          case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_VARIABLE:
          {
            OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawVariableWithNSString_(self, chunkText);
            (void) [expressionBuilder addVariableWithOrgOssPdfreporterCompilersIVariable:new_OrgOssPdfreporterCompilersExpressionelementsExpressionVariable_initWithOrgOssPdfreporterCompilersIDataHolder_withNSString_(self->dataholder_, chunkText)];
            break;
          }
          case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_RESOURCE:
          {
            OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawResourceWithNSString_(self, chunkText);
            (void) [expressionBuilder addVariableWithOrgOssPdfreporterCompilersIVariable:new_OrgOssPdfreporterCompilersExpressionelementsExpressionRessource_initWithOrgOssPdfreporterCompilersIDataHolder_withNSString_(self->dataholder_, chunkText)];
            break;
          }
        }
      }
    }
    [((OrgOssPdfreporterCompilersJevalJEvalResultCast *) nil_chk(result)) setExpressionWithOrgOssPdfreporterCompilersJevalJEvalExpression:OrgOssPdfreporterCompilersJevalJEvalExpression_newInstanceWithJavaUtilList_([expressionBuilder getChunkList])];
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterCompilersJevalJevalExpressionFactory_logger)) finestWithNSString:JreStrcat("$I$$", @"Compiled expression ", expressionId, @" - ", [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) description])];
    return result;
  }
  @catch (OrgOssPdfreporterCompilersExpressionParseException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterCompilersJevalJevalExpressionFactory_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$$$", @"Error parsing '", [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) description], @"' in JRXML DesignReport.") withNSException:e];
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(JreStrcat("$$$", @"Error parsing '", [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) description], @"' in JRXML DesignReport."), e);
  }
}

void OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawParameterWithNSString_(OrgOssPdfreporterCompilersJevalJevalExpressionFactory *self, NSString *chunkText) {
  (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:@"$P{"];
  (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:chunkText];
  (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:@"}"];
}

void OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawFieldWithNSString_(OrgOssPdfreporterCompilersJevalJevalExpressionFactory *self, NSString *chunkText) {
  (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:@"$F{"];
  (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:chunkText];
  (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:@"}"];
}

void OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawVariableWithNSString_(OrgOssPdfreporterCompilersJevalJevalExpressionFactory *self, NSString *chunkText) {
  (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:@"$V{"];
  (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:chunkText];
  (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:@"}"];
}

void OrgOssPdfreporterCompilersJevalJevalExpressionFactory_appendRawResourceWithNSString_(OrgOssPdfreporterCompilersJevalJevalExpressionFactory *self, NSString *chunkText) {
  (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:@"$R{"];
  (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:chunkText];
  (void) [((JavaLangStringBuilder *) nil_chk(self->rawExpression_)) appendWithNSString:@"}"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersJevalJevalExpressionFactory)
