//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/compilers/jeval/JEvalExpressionEvaluator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/compilers/ExpressionParseException.h"
#include "org/oss/pdfreporter/compilers/IExpressionElement.h"
#include "org/oss/pdfreporter/compilers/SingleChunkExpressionFactory.h"
#include "org/oss/pdfreporter/compilers/SingleChunkTextTypeFactory.h"
#include "org/oss/pdfreporter/compilers/jeval/JEvalExpressionEvaluator.h"
#include "org/oss/pdfreporter/compilers/jeval/JevalExpressionFactory.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionChunk.h"
#include "org/oss/pdfreporter/engine/JRValueParameter.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/design/JRSourceCompileTask.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillField.h"
#include "org/oss/pdfreporter/engine/fill/JRFillVariable.h"

@interface OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator () {
 @public
  id<JavaUtilMap> m_parameters_;
  id<JavaUtilMap> m_fields_;
  id<JavaUtilMap> m_variables_;
  id<JavaUtilMap> m_expressions_;
}

- (id<OrgOssPdfreporterCompilersIExpressionElement>)buildExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
                                                                                                   withInt:(jint)expressionId;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator, m_parameters_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator, m_fields_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator, m_variables_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator, m_expressions_, id<JavaUtilMap>)

__attribute__((unused)) static id<OrgOssPdfreporterCompilersIExpressionElement> OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator_buildExpressionWithOrgOssPdfreporterEngineJRExpression_withInt_(OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator *self, id<OrgOssPdfreporterEngineJRExpression> expression, jint expressionId);

@implementation OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator

- (void)initializeWithDefaultsWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:(OrgOssPdfreporterEngineDesignJRSourceCompileTask *)sourceTask {
  if ([((OrgOssPdfreporterEngineDesignJRSourceCompileTask *) nil_chk(sourceTask)) getParametersMap] != nil) {
    [((id<JavaUtilMap>) nil_chk(m_parameters_)) clear];
    for (NSString * __strong key in nil_chk([((id<JavaUtilMap>) nil_chk([sourceTask getParametersMap])) keySet])) {
      (void) [m_parameters_ putWithId:key withId:nil];
    }
  }
  if ([sourceTask getFieldsMap] != nil) {
    [((id<JavaUtilMap>) nil_chk(m_fields_)) clear];
    for (NSString * __strong key in nil_chk([((id<JavaUtilMap>) nil_chk([sourceTask getFieldsMap])) keySet])) {
      (void) [m_fields_ putWithId:key withId:nil];
    }
  }
  if ([sourceTask getVariables] != nil) {
    [((id<JavaUtilMap>) nil_chk(m_variables_)) clear];
    {
      IOSObjectArray *a__ = [sourceTask getVariables];
      id<OrgOssPdfreporterEngineJRVariable> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<OrgOssPdfreporterEngineJRVariable> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<OrgOssPdfreporterEngineJRVariable> var = *b__++;
        (void) [m_variables_ putWithId:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(var)) getName] withId:nil];
      }
    }
  }
}

- (void)parseExpressionsWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:(OrgOssPdfreporterEngineDesignJRSourceCompileTask *)sourceTask {
  [((id<JavaUtilMap>) nil_chk(m_expressions_)) clear];
  id<JavaUtilList> expressions = [((OrgOssPdfreporterEngineDesignJRSourceCompileTask *) nil_chk(sourceTask)) getExpressions];
  for (id<OrgOssPdfreporterEngineJRExpression> __strong expression in nil_chk(expressions)) {
    JavaLangInteger *id_ = [sourceTask getExpressionIdWithOrgOssPdfreporterEngineJRExpression:expression];
    (void) [m_expressions_ putWithId:id_ withId:OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator_buildExpressionWithOrgOssPdfreporterEngineJRExpression_withInt_(self, expression, [((JavaLangInteger *) nil_chk(id_)) intValue])];
  }
}

- (void)customizedInitWithJavaUtilMap:(id<JavaUtilMap>)parametersMap
                      withJavaUtilMap:(id<JavaUtilMap>)fieldsMap
                      withJavaUtilMap:(id<JavaUtilMap>)variablesMap {
  if (parametersMap != nil) {
    [((id<JavaUtilMap>) nil_chk(m_parameters_)) putAllWithJavaUtilMap:parametersMap];
  }
  if (fieldsMap != nil) {
    [((id<JavaUtilMap>) nil_chk(m_fields_)) putAllWithJavaUtilMap:fieldsMap];
  }
  if (variablesMap != nil) {
    [((id<JavaUtilMap>) nil_chk(m_variables_)) putAllWithJavaUtilMap:variablesMap];
  }
}

- (id)evaluateWithInt:(jint)id_ {
  return [((id<JavaUtilMap>) nil_chk(m_expressions_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)] ? [((id<OrgOssPdfreporterCompilersIExpressionElement>) nil_chk([m_expressions_ getWithId:JavaLangInteger_valueOfWithInt_(id_)])) getValue] : nil;
}

- (id)evaluateOldWithInt:(jint)id_ {
  return [((id<JavaUtilMap>) nil_chk(m_expressions_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)] ? [((id<OrgOssPdfreporterCompilersIExpressionElement>) nil_chk([m_expressions_ getWithId:JavaLangInteger_valueOfWithInt_(id_)])) getOldValue] : nil;
}

- (id)evaluateEstimatedWithInt:(jint)id_ {
  return [((id<JavaUtilMap>) nil_chk(m_expressions_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(id_)] ? [((id<OrgOssPdfreporterCompilersIExpressionElement>) nil_chk([m_expressions_ getWithId:JavaLangInteger_valueOfWithInt_(id_)])) getValue] : nil;
}

- (id<OrgOssPdfreporterEngineJRValueParameter>)getParameterWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(m_parameters_)) getWithId:name];
}

- (OrgOssPdfreporterEngineFillJRFillField *)getFieldWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(m_fields_)) getWithId:name];
}

- (OrgOssPdfreporterEngineFillJRFillVariable *)getVariableWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(m_variables_)) getWithId:name];
}

- (id<OrgOssPdfreporterCompilersIExpressionElement>)buildExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
                                                                                                   withInt:(jint)expressionId {
  return OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator_buildExpressionWithOrgOssPdfreporterEngineJRExpression_withInt_(self, expression, expressionId);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initializeWithDefaultsWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:", "initializeWithDefaults", "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "parseExpressionsWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:", "parseExpressions", "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "customizedInitWithJavaUtilMap:withJavaUtilMap:withJavaUtilMap:", "customizedInit", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", "(Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/fill/IJRFillParameter;>;Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/fill/JRFillField;>;Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/fill/JRFillVariable;>;)V" },
    { "evaluateWithInt:", "evaluate", "Ljava.lang.Object;", 0x4, "Ljava.lang.Throwable;", NULL },
    { "evaluateOldWithInt:", "evaluateOld", "Ljava.lang.Object;", 0x4, "Ljava.lang.Throwable;", NULL },
    { "evaluateEstimatedWithInt:", "evaluateEstimated", "Ljava.lang.Object;", 0x4, "Ljava.lang.Throwable;", NULL },
    { "getParameterWithNSString:", "getParameter", "Lorg.oss.pdfreporter.engine.JRValueParameter;", 0x1, NULL, NULL },
    { "getFieldWithNSString:", "getField", "Lorg.oss.pdfreporter.engine.fill.JRFillField;", 0x1, NULL, NULL },
    { "getVariableWithNSString:", "getVariable", "Lorg.oss.pdfreporter.engine.fill.JRFillVariable;", 0x1, NULL, NULL },
    { "buildExpressionWithOrgOssPdfreporterEngineJRExpression:withInt:", "buildExpression", "Lorg.oss.pdfreporter.compilers.IExpressionElement;", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "init", "JEvalExpressionEvaluator", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "m_parameters_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/JRValueParameter;>;", .constantValue.asLong = 0 },
    { "m_fields_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/fill/JRFillField;>;", .constantValue.asLong = 0 },
    { "m_variables_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/fill/JRFillVariable;>;", .constantValue.asLong = 0 },
    { "m_expressions_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Integer;Lorg/oss/pdfreporter/compilers/IExpressionElement;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator = { 2, "JEvalExpressionEvaluator", "org.oss.pdfreporter.compilers.jeval", NULL, 0x1, 11, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator;
}

@end

id<OrgOssPdfreporterCompilersIExpressionElement> OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator_buildExpressionWithOrgOssPdfreporterEngineJRExpression_withInt_(OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator *self, id<OrgOssPdfreporterEngineJRExpression> expression, jint expressionId) {
  IOSObjectArray *designExpressionChunks = [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(expression)) getChunks];
  @try {
    jboolean singleChunk = (designExpressionChunks == nil || designExpressionChunks->size_ == 1);
    if (designExpressionChunks != nil && designExpressionChunks->size_ > 0) {
      if (singleChunk) {
        id<OrgOssPdfreporterCompilersIExpressionElement> result = OrgOssPdfreporterCompilersSingleChunkExpressionFactory_buildExpressionWithOrgOssPdfreporterCompilersIDataHolder_withOrgOssPdfreporterEngineJRExpressionChunk_(self, IOSObjectArray_Get(designExpressionChunks, 0));
        return result == nil ? OrgOssPdfreporterCompilersJevalJevalExpressionFactory_buildExpressionWithOrgOssPdfreporterCompilersIDataHolder_withOrgOssPdfreporterEngineJRExpressionChunkArray_withInt_(self, designExpressionChunks, expressionId) : result;
      }
      else {
        return OrgOssPdfreporterCompilersJevalJevalExpressionFactory_buildExpressionWithOrgOssPdfreporterCompilersIDataHolder_withOrgOssPdfreporterEngineJRExpressionChunkArray_withInt_(self, designExpressionChunks, expressionId);
      }
    }
    return OrgOssPdfreporterCompilersSingleChunkTextTypeFactory_buildExpressionWithNSString_(@"null");
  }
  @catch (OrgOssPdfreporterCompilersExpressionParseException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSException_(e);
  }
}

void OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator_init(OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator *self) {
  OrgOssPdfreporterEngineFillJREvaluator_init(self);
  self->m_parameters_ = new_JavaUtilHashMap_init();
  self->m_fields_ = new_JavaUtilHashMap_init();
  self->m_variables_ = new_JavaUtilHashMap_init();
  self->m_expressions_ = new_JavaUtilHashMap_init();
}

OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator *new_OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator, init)
}

OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator *create_OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator)
