//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/compilers/util/EmptyCollection.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "org/oss/pdfreporter/compilers/ExpressionEvaluationException.h"
#include "org/oss/pdfreporter/compilers/ExpressionParseException.h"
#include "org/oss/pdfreporter/compilers/expressionelements/AbstractExpressionElement.h"
#include "org/oss/pdfreporter/compilers/util/EmptyCollection.h"

@interface OrgOssPdfreporterCompilersUtilEmptyCollection () {
 @public
  id<JavaUtilCollection> collection_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersUtilEmptyCollection, collection_, id<JavaUtilCollection>)

inline NSString *OrgOssPdfreporterCompilersUtilEmptyCollection_get_ARRAYLIST_MATCH();
inline NSString *OrgOssPdfreporterCompilersUtilEmptyCollection_set_ARRAYLIST_MATCH(NSString *value);
static NSString *OrgOssPdfreporterCompilersUtilEmptyCollection_ARRAYLIST_MATCH = @"new java.util.ArrayList()";
J2OBJC_STATIC_FIELD_OBJ(OrgOssPdfreporterCompilersUtilEmptyCollection, ARRAYLIST_MATCH, NSString *)

inline NSString *OrgOssPdfreporterCompilersUtilEmptyCollection_get_HASHSET_MATCH();
inline NSString *OrgOssPdfreporterCompilersUtilEmptyCollection_set_HASHSET_MATCH(NSString *value);
static NSString *OrgOssPdfreporterCompilersUtilEmptyCollection_HASHSET_MATCH = @"new java.util.HashSet()";
J2OBJC_STATIC_FIELD_OBJ(OrgOssPdfreporterCompilersUtilEmptyCollection, HASHSET_MATCH, NSString *)

@implementation OrgOssPdfreporterCompilersUtilEmptyCollection

+ (jboolean)isCollectionWithNSString:(NSString *)text {
  return OrgOssPdfreporterCompilersUtilEmptyCollection_isCollectionWithNSString_(text);
}

+ (OrgOssPdfreporterCompilersUtilEmptyCollection *)parseCollectionWithNSString:(NSString *)s {
  return OrgOssPdfreporterCompilersUtilEmptyCollection_parseCollectionWithNSString_(s);
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  OrgOssPdfreporterCompilersUtilEmptyCollection_initWithJavaUtilCollection_(self, collection);
  return self;
}

- (id)getValue {
  return collection_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isCollectionWithNSString:", "isCollection", "Z", 0x9, NULL, NULL },
    { "parseCollectionWithNSString:", "parseCollection", "Lorg.oss.pdfreporter.compilers.util.EmptyCollection;", 0x9, "Lorg.oss.pdfreporter.compilers.ExpressionParseException;", NULL },
    { "initWithJavaUtilCollection:", "EmptyCollection", NULL, 0x1, NULL, "(Ljava/util/Collection<*>;)V" },
    { "getValue", NULL, "Ljava.lang.Object;", 0x1, "Lorg.oss.pdfreporter.compilers.ExpressionEvaluationException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ARRAYLIST_MATCH", "ARRAYLIST_MATCH", 0xa, "Ljava.lang.String;", &OrgOssPdfreporterCompilersUtilEmptyCollection_ARRAYLIST_MATCH, NULL, .constantValue.asLong = 0 },
    { "HASHSET_MATCH", "HASHSET_MATCH", 0xa, "Ljava.lang.String;", &OrgOssPdfreporterCompilersUtilEmptyCollection_HASHSET_MATCH, NULL, .constantValue.asLong = 0 },
    { "collection_", NULL, 0x12, "Ljava.util.Collection;", NULL, "Ljava/util/Collection<*>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersUtilEmptyCollection = { 2, "EmptyCollection", "org.oss.pdfreporter.compilers.util", NULL, 0x1, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersUtilEmptyCollection;
}

@end

jboolean OrgOssPdfreporterCompilersUtilEmptyCollection_isCollectionWithNSString_(NSString *text) {
  OrgOssPdfreporterCompilersUtilEmptyCollection_initialize();
  return [((NSString *) nil_chk(text)) isEqual:OrgOssPdfreporterCompilersUtilEmptyCollection_ARRAYLIST_MATCH] || [text isEqual:OrgOssPdfreporterCompilersUtilEmptyCollection_HASHSET_MATCH];
}

OrgOssPdfreporterCompilersUtilEmptyCollection *OrgOssPdfreporterCompilersUtilEmptyCollection_parseCollectionWithNSString_(NSString *s) {
  OrgOssPdfreporterCompilersUtilEmptyCollection_initialize();
  if ([((NSString *) nil_chk(s)) isEqual:OrgOssPdfreporterCompilersUtilEmptyCollection_ARRAYLIST_MATCH]) {
    return new_OrgOssPdfreporterCompilersUtilEmptyCollection_initWithJavaUtilCollection_(new_JavaUtilArrayList_init());
  }
  else if ([s isEqual:OrgOssPdfreporterCompilersUtilEmptyCollection_HASHSET_MATCH]) {
    return new_OrgOssPdfreporterCompilersUtilEmptyCollection_initWithJavaUtilCollection_(new_JavaUtilHashSet_init());
  }
  @throw new_OrgOssPdfreporterCompilersExpressionParseException_initWithNSString_(JreStrcat("$$", @"Unsupported Collection ", s));
}

void OrgOssPdfreporterCompilersUtilEmptyCollection_initWithJavaUtilCollection_(OrgOssPdfreporterCompilersUtilEmptyCollection *self, id<JavaUtilCollection> collection) {
  OrgOssPdfreporterCompilersExpressionelementsAbstractExpressionElement_init(self);
  self->collection_ = collection;
}

OrgOssPdfreporterCompilersUtilEmptyCollection *new_OrgOssPdfreporterCompilersUtilEmptyCollection_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersUtilEmptyCollection, initWithJavaUtilCollection_, collection)
}

OrgOssPdfreporterCompilersUtilEmptyCollection *create_OrgOssPdfreporterCompilersUtilEmptyCollection_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersUtilEmptyCollection, initWithJavaUtilCollection_, collection)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersUtilEmptyCollection)
