//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/compilers/util/TextConstant.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/oss/pdfreporter/compilers/ExpressionEvaluationException.h"
#include "org/oss/pdfreporter/compilers/ExpressionParseException.h"
#include "org/oss/pdfreporter/compilers/expressionelements/AbstractExpressionElement.h"
#include "org/oss/pdfreporter/compilers/util/TextConstant.h"

@interface OrgOssPdfreporterCompilersUtilTextConstant () {
 @public
  NSString *text_;
}

+ (NSString *)convertTextChunkWithNSString:(NSString *)chunkText;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersUtilTextConstant, text_, NSString *)

inline NSString *OrgOssPdfreporterCompilersUtilTextConstant_get_TEXT_MATCH();
inline NSString *OrgOssPdfreporterCompilersUtilTextConstant_set_TEXT_MATCH(NSString *value);
static NSString *OrgOssPdfreporterCompilersUtilTextConstant_TEXT_MATCH = @"(^\".*\"$)|(^'.*'$)";
J2OBJC_STATIC_FIELD_OBJ(OrgOssPdfreporterCompilersUtilTextConstant, TEXT_MATCH, NSString *)

__attribute__((unused)) static NSString *OrgOssPdfreporterCompilersUtilTextConstant_convertTextChunkWithNSString_(NSString *chunkText);

@implementation OrgOssPdfreporterCompilersUtilTextConstant

+ (jboolean)isTextWithNSString:(NSString *)text {
  return OrgOssPdfreporterCompilersUtilTextConstant_isTextWithNSString_(text);
}

+ (OrgOssPdfreporterCompilersUtilTextConstant *)parseTextWithNSString:(NSString *)s {
  return OrgOssPdfreporterCompilersUtilTextConstant_parseTextWithNSString_(s);
}

+ (NSString *)convertTextChunkWithNSString:(NSString *)chunkText {
  return OrgOssPdfreporterCompilersUtilTextConstant_convertTextChunkWithNSString_(chunkText);
}

- (instancetype)initWithNSString:(NSString *)text {
  OrgOssPdfreporterCompilersUtilTextConstant_initWithNSString_(self, text);
  return self;
}

- (id)getValue {
  return text_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isTextWithNSString:", "isText", "Z", 0x9, NULL, NULL },
    { "parseTextWithNSString:", "parseText", "Lorg.oss.pdfreporter.compilers.util.TextConstant;", 0x9, "Lorg.oss.pdfreporter.compilers.ExpressionParseException;", NULL },
    { "convertTextChunkWithNSString:", "convertTextChunk", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "initWithNSString:", "TextConstant", NULL, 0x1, NULL, NULL },
    { "getValue", NULL, "Ljava.lang.Object;", 0x1, "Lorg.oss.pdfreporter.compilers.ExpressionEvaluationException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TEXT_MATCH", "TEXT_MATCH", 0xa, "Ljava.lang.String;", &OrgOssPdfreporterCompilersUtilTextConstant_TEXT_MATCH, NULL, .constantValue.asLong = 0 },
    { "text_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersUtilTextConstant = { 2, "TextConstant", "org.oss.pdfreporter.compilers.util", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersUtilTextConstant;
}

@end

jboolean OrgOssPdfreporterCompilersUtilTextConstant_isTextWithNSString_(NSString *text) {
  OrgOssPdfreporterCompilersUtilTextConstant_initialize();
  return [((NSString *) nil_chk(text)) matches:OrgOssPdfreporterCompilersUtilTextConstant_TEXT_MATCH];
}

OrgOssPdfreporterCompilersUtilTextConstant *OrgOssPdfreporterCompilersUtilTextConstant_parseTextWithNSString_(NSString *s) {
  OrgOssPdfreporterCompilersUtilTextConstant_initialize();
  if ([((NSString *) nil_chk(s)) matches:OrgOssPdfreporterCompilersUtilTextConstant_TEXT_MATCH]) {
    return new_OrgOssPdfreporterCompilersUtilTextConstant_initWithNSString_(OrgOssPdfreporterCompilersUtilTextConstant_convertTextChunkWithNSString_(s));
  }
  @throw new_OrgOssPdfreporterCompilersExpressionParseException_initWithNSString_(JreStrcat("$$", @"Unsupported Text constant ", s));
}

NSString *OrgOssPdfreporterCompilersUtilTextConstant_convertTextChunkWithNSString_(NSString *chunkText) {
  OrgOssPdfreporterCompilersUtilTextConstant_initialize();
  chunkText = [((NSString *) nil_chk(chunkText)) substring:1 endIndex:((jint) [chunkText length]) - 1];
  chunkText = [((NSString *) nil_chk(chunkText)) replace:@"\\n" withSequence:@"\n"];
  chunkText = [((NSString *) nil_chk(chunkText)) replace:@"\\t" withSequence:@"\t"];
  chunkText = [((NSString *) nil_chk(chunkText)) replace:@"\\\"" withSequence:@"\""];
  return chunkText;
}

void OrgOssPdfreporterCompilersUtilTextConstant_initWithNSString_(OrgOssPdfreporterCompilersUtilTextConstant *self, NSString *text) {
  OrgOssPdfreporterCompilersExpressionelementsAbstractExpressionElement_init(self);
  self->text_ = text;
}

OrgOssPdfreporterCompilersUtilTextConstant *new_OrgOssPdfreporterCompilersUtilTextConstant_initWithNSString_(NSString *text) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersUtilTextConstant, initWithNSString_, text)
}

OrgOssPdfreporterCompilersUtilTextConstant *create_OrgOssPdfreporterCompilersUtilTextConstant_initWithNSString_(NSString *text) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersUtilTextConstant, initWithNSString_, text)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersUtilTextConstant)
