//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/compilers/util/ResultUtil.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "org/oss/pdfreporter/compilers/ExpressionEvaluationException.h"
#include "org/oss/pdfreporter/compilers/IVariable.h"
#include "org/oss/pdfreporter/compilers/expressionelements/ExpressionConstants.h"
#include "org/oss/pdfreporter/compilers/expressionelements/ExpressionType.h"
#include "org/oss/pdfreporter/compilers/util/ResultUtil.h"
#include "org/oss/pdfreporter/converters/DecimalConverter.h"

@interface OrgOssPdfreporterCompilersUtilResultUtil ()

+ (NSString *)getTypeWithId:(id)result;

@end

__attribute__((unused)) static NSString *OrgOssPdfreporterCompilersUtilResultUtil_getTypeWithId_(id result);

@implementation OrgOssPdfreporterCompilersUtilResultUtil

+ (jboolean)isStringWithNSString:(NSString *)result
                        withChar:(jchar)quotedChar {
  return OrgOssPdfreporterCompilersUtilResultUtil_isStringWithNSString_withChar_(result, quotedChar);
}

+ (jboolean)isNullWithNSString:(NSString *)result {
  return OrgOssPdfreporterCompilersUtilResultUtil_isNullWithNSString_(result);
}

+ (NSString *)getStringResultWithNSString:(NSString *)result {
  return OrgOssPdfreporterCompilersUtilResultUtil_getStringResultWithNSString_(result);
}

+ (JavaLangDouble *)getDoubleResultWithNSString:(NSString *)result {
  return OrgOssPdfreporterCompilersUtilResultUtil_getDoubleResultWithNSString_(result);
}

+ (JavaLangFloat *)getFloatResultWithNSString:(NSString *)result {
  return OrgOssPdfreporterCompilersUtilResultUtil_getFloatResultWithNSString_(result);
}

+ (JavaLangInteger *)getIntResultWithNSString:(NSString *)result {
  return OrgOssPdfreporterCompilersUtilResultUtil_getIntResultWithNSString_(result);
}

+ (JavaLangLong *)getLongResultWithNSString:(NSString *)result {
  return OrgOssPdfreporterCompilersUtilResultUtil_getLongResultWithNSString_(result);
}

+ (JavaUtilDate *)geDateResultWithNSString:(NSString *)result {
  return OrgOssPdfreporterCompilersUtilResultUtil_geDateResultWithNSString_(result);
}

+ (JavaLangBoolean *)getBooleanResultWithNSString:(NSString *)result {
  return OrgOssPdfreporterCompilersUtilResultUtil_getBooleanResultWithNSString_(result);
}

+ (void)assertResultTypeWithOrgOssPdfreporterCompilersExpressionelementsExpressionType:(OrgOssPdfreporterCompilersExpressionelementsExpressionType *)expectedType
                                                                                withId:(id)result {
  OrgOssPdfreporterCompilersUtilResultUtil_assertResultTypeWithOrgOssPdfreporterCompilersExpressionelementsExpressionType_withId_(expectedType, result);
}

+ (NSNumber *)numberCastWithOrgOssPdfreporterCompilersExpressionelementsExpressionType:(OrgOssPdfreporterCompilersExpressionelementsExpressionType *)expectedType
                                                                          withNSNumber:(NSNumber *)result {
  return OrgOssPdfreporterCompilersUtilResultUtil_numberCastWithOrgOssPdfreporterCompilersExpressionelementsExpressionType_withNSNumber_(expectedType, result);
}

+ (NSString *)getTypeWithId:(id)result {
  return OrgOssPdfreporterCompilersUtilResultUtil_getTypeWithId_(result);
}

+ (NSString *)getDumpWithJavaUtilCollection:(id<JavaUtilCollection>)variables {
  return OrgOssPdfreporterCompilersUtilResultUtil_getDumpWithJavaUtilCollection_(variables);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterCompilersUtilResultUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isStringWithNSString:withChar:", "isString", "Z", 0x9, NULL, NULL },
    { "isNullWithNSString:", "isNull", "Z", 0x9, NULL, NULL },
    { "getStringResultWithNSString:", "getStringResult", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getDoubleResultWithNSString:", "getDoubleResult", "Ljava.lang.Double;", 0x9, NULL, NULL },
    { "getFloatResultWithNSString:", "getFloatResult", "Ljava.lang.Float;", 0x9, NULL, NULL },
    { "getIntResultWithNSString:", "getIntResult", "Ljava.lang.Integer;", 0x9, NULL, NULL },
    { "getLongResultWithNSString:", "getLongResult", "Ljava.lang.Long;", 0x9, NULL, NULL },
    { "geDateResultWithNSString:", "geDateResult", "Ljava.util.Date;", 0x9, NULL, NULL },
    { "getBooleanResultWithNSString:", "getBooleanResult", "Ljava.lang.Boolean;", 0x9, NULL, NULL },
    { "assertResultTypeWithOrgOssPdfreporterCompilersExpressionelementsExpressionType:withId:", "assertResultType", "V", 0x9, "Lorg.oss.pdfreporter.compilers.ExpressionEvaluationException;", NULL },
    { "numberCastWithOrgOssPdfreporterCompilersExpressionelementsExpressionType:withNSNumber:", "numberCast", "Ljava.lang.Number;", 0x9, "Lorg.oss.pdfreporter.compilers.ExpressionEvaluationException;", NULL },
    { "getTypeWithId:", "getType", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "getDumpWithJavaUtilCollection:", "getDump", "Ljava.lang.String;", 0x9, "Lorg.oss.pdfreporter.compilers.ExpressionEvaluationException;", "(Ljava/util/Collection<Lorg/oss/pdfreporter/compilers/IVariable;>;)Ljava/lang/String;" },
    { "init", "ResultUtil", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersUtilResultUtil = { 2, "ResultUtil", "org.oss.pdfreporter.compilers.util", NULL, 0x1, 14, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersUtilResultUtil;
}

@end

jboolean OrgOssPdfreporterCompilersUtilResultUtil_isStringWithNSString_withChar_(NSString *result, jchar quotedChar) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  if (result != nil && ((jint) [result length]) >= 2) {
    if ([result charAtWithInt:0] == quotedChar && [result charAtWithInt:((jint) [result length]) - 1] == quotedChar) {
      return true;
    }
  }
  return false;
}

jboolean OrgOssPdfreporterCompilersUtilResultUtil_isNullWithNSString_(NSString *result) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  return [((NSString *) nil_chk(result)) isEqual:OrgOssPdfreporterCompilersExpressionelementsExpressionConstants_QUOTED_NULL];
}

NSString *OrgOssPdfreporterCompilersUtilResultUtil_getStringResultWithNSString_(NSString *result) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  return [((NSString *) nil_chk(result)) substring:1 endIndex:((jint) [result length]) - 1];
}

JavaLangDouble *OrgOssPdfreporterCompilersUtilResultUtil_getDoubleResultWithNSString_(NSString *result) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  return OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(result);
}

JavaLangFloat *OrgOssPdfreporterCompilersUtilResultUtil_getFloatResultWithNSString_(NSString *result) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  return JavaLangFloat_valueOfWithFloat_([((JavaLangDouble *) nil_chk(OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(result))) floatValue]);
}

JavaLangInteger *OrgOssPdfreporterCompilersUtilResultUtil_getIntResultWithNSString_(NSString *result) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  return JavaLangInteger_valueOfWithInt_([((JavaLangDouble *) nil_chk(OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(result))) intValue]);
}

JavaLangLong *OrgOssPdfreporterCompilersUtilResultUtil_getLongResultWithNSString_(NSString *result) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  return JavaLangLong_valueOfWithLong_([((JavaLangDouble *) nil_chk(OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(result))) longLongValue]);
}

JavaUtilDate *OrgOssPdfreporterCompilersUtilResultUtil_geDateResultWithNSString_(NSString *result) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  return new_JavaUtilDate_initWithLong_([((JavaLangDouble *) nil_chk(OrgOssPdfreporterConvertersDecimalConverter_toDoubleWithNSString_(result))) longLongValue]);
}

JavaLangBoolean *OrgOssPdfreporterCompilersUtilResultUtil_getBooleanResultWithNSString_(NSString *result) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  return JavaLangBoolean_valueOfWithBoolean_([((NSString *) nil_chk(OrgOssPdfreporterCompilersExpressionelementsExpressionConstants_EXP_TRUE)) isEqual:result]);
}

void OrgOssPdfreporterCompilersUtilResultUtil_assertResultTypeWithOrgOssPdfreporterCompilersExpressionelementsExpressionType_withId_(OrgOssPdfreporterCompilersExpressionelementsExpressionType *expectedType, id result) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  switch ([expectedType ordinal]) {
    case OrgOssPdfreporterCompilersExpressionelementsExpressionType_Enum_DATE:
    if (!([result isKindOfClass:[JavaUtilDate class]])) {
      @throw new_OrgOssPdfreporterCompilersExpressionEvaluationException_initWithNSString_(JreStrcat("$$", @"Date result expected and not: ", OrgOssPdfreporterCompilersUtilResultUtil_getTypeWithId_(result)));
    }
    break;
    case OrgOssPdfreporterCompilersExpressionelementsExpressionType_Enum_DOUBLE:
    if (!([result isKindOfClass:[JavaLangDouble class]])) {
      @throw new_OrgOssPdfreporterCompilersExpressionEvaluationException_initWithNSString_(JreStrcat("$$", @"Double result expected and not: ", OrgOssPdfreporterCompilersUtilResultUtil_getTypeWithId_(result)));
    }
    break;
    case OrgOssPdfreporterCompilersExpressionelementsExpressionType_Enum_FLOAT:
    if (!([result isKindOfClass:[JavaLangFloat class]])) {
      @throw new_OrgOssPdfreporterCompilersExpressionEvaluationException_initWithNSString_(JreStrcat("$$", @"Float result expected and not: ", OrgOssPdfreporterCompilersUtilResultUtil_getTypeWithId_(result)));
    }
    break;
    case OrgOssPdfreporterCompilersExpressionelementsExpressionType_Enum_LONG:
    if (!([result isKindOfClass:[JavaLangLong class]])) {
      @throw new_OrgOssPdfreporterCompilersExpressionEvaluationException_initWithNSString_(JreStrcat("$$", @"Long result expected and not: ", OrgOssPdfreporterCompilersUtilResultUtil_getTypeWithId_(result)));
    }
    break;
    case OrgOssPdfreporterCompilersExpressionelementsExpressionType_Enum_INTEGER:
    if (!([result isKindOfClass:[JavaLangInteger class]])) {
      @throw new_OrgOssPdfreporterCompilersExpressionEvaluationException_initWithNSString_(JreStrcat("$$", @"Integer result expected and not: ", OrgOssPdfreporterCompilersUtilResultUtil_getTypeWithId_(result)));
    }
    break;
    case OrgOssPdfreporterCompilersExpressionelementsExpressionType_Enum_BOOLEAN:
    if (!([result isKindOfClass:[JavaLangBoolean class]])) {
      @throw new_OrgOssPdfreporterCompilersExpressionEvaluationException_initWithNSString_(JreStrcat("$$", @"Boolean result expected and not: ", OrgOssPdfreporterCompilersUtilResultUtil_getTypeWithId_(result)));
    }
    break;
    case OrgOssPdfreporterCompilersExpressionelementsExpressionType_Enum_STRING:
    if (!([result isKindOfClass:[NSString class]])) {
      @throw new_OrgOssPdfreporterCompilersExpressionEvaluationException_initWithNSString_(JreStrcat("$$", @"String result expected and not: ", OrgOssPdfreporterCompilersUtilResultUtil_getTypeWithId_(result)));
    }
    break;
  }
}

NSNumber *OrgOssPdfreporterCompilersUtilResultUtil_numberCastWithOrgOssPdfreporterCompilersExpressionelementsExpressionType_withNSNumber_(OrgOssPdfreporterCompilersExpressionelementsExpressionType *expectedType, NSNumber *result) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  switch ([expectedType ordinal]) {
    case OrgOssPdfreporterCompilersExpressionelementsExpressionType_Enum_FLOAT:
    if (!([result isKindOfClass:[JavaLangFloat class]])) {
      return JavaLangFloat_valueOfWithFloat_([((NSNumber *) nil_chk(result)) floatValue]);
    }
    break;
    case OrgOssPdfreporterCompilersExpressionelementsExpressionType_Enum_DOUBLE:
    if (!([result isKindOfClass:[JavaLangDouble class]])) {
      return JavaLangDouble_valueOfWithDouble_([((NSNumber *) nil_chk(result)) doubleValue]);
    }
    break;
    case OrgOssPdfreporterCompilersExpressionelementsExpressionType_Enum_LONG:
    if (!([result isKindOfClass:[JavaLangLong class]])) {
      return JavaLangLong_valueOfWithLong_([((NSNumber *) nil_chk(result)) longLongValue]);
    }
    break;
    case OrgOssPdfreporterCompilersExpressionelementsExpressionType_Enum_INTEGER:
    if (!([result isKindOfClass:[JavaLangInteger class]])) {
      return JavaLangInteger_valueOfWithInt_([((NSNumber *) nil_chk(result)) intValue]);
    }
    break;
  }
  return result;
}

NSString *OrgOssPdfreporterCompilersUtilResultUtil_getTypeWithId_(id result) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  return result == nil ? @"null" : [[result getClass] getSimpleName];
}

NSString *OrgOssPdfreporterCompilersUtilResultUtil_getDumpWithJavaUtilCollection_(id<JavaUtilCollection> variables) {
  OrgOssPdfreporterCompilersUtilResultUtil_initialize();
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  (void) [buf appendWithNSString:@"{"];
  for (id<OrgOssPdfreporterCompilersIVariable> __strong var in nil_chk(variables)) {
    id newValue = [((id<OrgOssPdfreporterCompilersIVariable>) nil_chk(var)) getValue];
    id oldValue = [var getOldValue];
    (void) [buf appendWithNSString:JreStrcat("$$@$$$@$$$", [var getName], @": ", newValue, @" [", OrgOssPdfreporterCompilersUtilResultUtil_getTypeWithId_(newValue), @"] (", oldValue, @" [", OrgOssPdfreporterCompilersUtilResultUtil_getTypeWithId_(oldValue), @"])")];
    (void) [buf appendWithNSString:@","];
  }
  (void) [buf appendWithNSString:@"}"];
  return [buf description];
}

void OrgOssPdfreporterCompilersUtilResultUtil_init(OrgOssPdfreporterCompilersUtilResultUtil *self) {
  NSObject_init(self);
}

OrgOssPdfreporterCompilersUtilResultUtil *new_OrgOssPdfreporterCompilersUtilResultUtil_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersUtilResultUtil, init)
}

OrgOssPdfreporterCompilersUtilResultUtil *create_OrgOssPdfreporterCompilersUtilResultUtil_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersUtilResultUtil, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersUtilResultUtil)
