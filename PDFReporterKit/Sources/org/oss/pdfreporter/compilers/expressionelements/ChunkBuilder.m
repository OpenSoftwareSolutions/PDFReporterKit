//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/compilers/expressionelements/ChunkBuilder.java
//

#include "J2ObjC_source.h"
#include "java/util/AbstractList.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/compilers/IExpressionChunk.h"
#include "org/oss/pdfreporter/compilers/IVariable.h"
#include "org/oss/pdfreporter/compilers/IVariableExpressionChunk.h"
#include "org/oss/pdfreporter/compilers/expressionelements/ChunkBuilder.h"

@class OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList;

@interface OrgOssPdfreporterCompilersExpressionelementsChunkBuilder () {
 @public
  OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList *chunkList_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder, chunkList_, OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList *)

@interface OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList : JavaUtilAbstractList {
 @public
  id<JavaUtilList> delegate_;
}

- (id<OrgOssPdfreporterCompilersIExpressionChunk>)getWithInt:(jint)index;

- (jint)size;

- (jboolean)addWithId:(id<OrgOssPdfreporterCompilersIExpressionChunk>)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList)

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList, delegate_, id<JavaUtilList>)

__attribute__((unused)) static void OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList_init(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList *self);

__attribute__((unused)) static OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList *new_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList *create_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList)

@interface OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk : NSObject < OrgOssPdfreporterCompilersIExpressionChunk > {
 @public
  OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *type_;
  NSString *text_;
}

- (instancetype)initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType:(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)type
                                                                    withNSString:(NSString *)text;

- (OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)getType;

- (NSString *)getText;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk)

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk, type_, OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk, text_, NSString *)

__attribute__((unused)) static void OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk_initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk *self, OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *type, NSString *text);

__attribute__((unused)) static OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk *new_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk_initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *type, NSString *text) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk *create_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk_initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *type, NSString *text);

J2OBJC_TYPE_LITERAL_HEADER(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk)

@interface OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk : OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk < OrgOssPdfreporterCompilersIVariableExpressionChunk > {
 @public
  id<OrgOssPdfreporterCompilersIVariable> variable_;
}

- (instancetype)initWithOrgOssPdfreporterCompilersIVariable:(id<OrgOssPdfreporterCompilersIVariable>)variable;

- (id<OrgOssPdfreporterCompilersIVariable>)getVariable;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk)

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk, variable_, id<OrgOssPdfreporterCompilersIVariable>)

__attribute__((unused)) static void OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk_initWithOrgOssPdfreporterCompilersIVariable_(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk *self, id<OrgOssPdfreporterCompilersIVariable> variable);

__attribute__((unused)) static OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk *new_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk_initWithOrgOssPdfreporterCompilersIVariable_(id<OrgOssPdfreporterCompilersIVariable> variable) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk *create_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk_initWithOrgOssPdfreporterCompilersIVariable_(id<OrgOssPdfreporterCompilersIVariable> variable);

J2OBJC_TYPE_LITERAL_HEADER(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk)

@implementation OrgOssPdfreporterCompilersExpressionelementsChunkBuilder

- (OrgOssPdfreporterCompilersExpressionelementsChunkBuilder *)addTextWithNSString:(NSString *)text {
  [((OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList *) nil_chk(chunkList_)) addWithId:new_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk_initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(JreLoadEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_TEXT), text)];
  return self;
}

- (OrgOssPdfreporterCompilersExpressionelementsChunkBuilder *)addResourceWithNSString:(NSString *)text {
  [((OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList *) nil_chk(chunkList_)) addWithId:new_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk_initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(JreLoadEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_RESOURCE), text)];
  return self;
}

- (OrgOssPdfreporterCompilersExpressionelementsChunkBuilder *)addVariableWithOrgOssPdfreporterCompilersIVariable:(id<OrgOssPdfreporterCompilersIVariable>)variable {
  [((OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList *) nil_chk(chunkList_)) addWithId:new_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk_initWithOrgOssPdfreporterCompilersIVariable_(variable)];
  return self;
}

- (id<JavaUtilList>)getChunkList {
  return chunkList_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addTextWithNSString:", "addText", "Lorg.oss.pdfreporter.compilers.expressionelements.ChunkBuilder;", 0x1, NULL, NULL },
    { "addResourceWithNSString:", "addResource", "Lorg.oss.pdfreporter.compilers.expressionelements.ChunkBuilder;", 0x1, NULL, NULL },
    { "addVariableWithOrgOssPdfreporterCompilersIVariable:", "addVariable", "Lorg.oss.pdfreporter.compilers.expressionelements.ChunkBuilder;", 0x1, NULL, NULL },
    { "getChunkList", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/compilers/IExpressionChunk;>;" },
    { "init", "ChunkBuilder", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "chunkList_", NULL, 0x12, "Lorg.oss.pdfreporter.compilers.expressionelements.ChunkBuilder$ChunkList;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.compilers.expressionelements.ChunkBuilder$ChunkList;", "Lorg.oss.pdfreporter.compilers.expressionelements.ChunkBuilder$Chunk;", "Lorg.oss.pdfreporter.compilers.expressionelements.ChunkBuilder$VariableChunk;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersExpressionelementsChunkBuilder = { 2, "ChunkBuilder", "org.oss.pdfreporter.compilers.expressionelements", NULL, 0x1, 5, methods, 1, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder;
}

@end

void OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_init(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder *self) {
  NSObject_init(self);
  self->chunkList_ = new_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList_init();
}

OrgOssPdfreporterCompilersExpressionelementsChunkBuilder *new_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder, init)
}

OrgOssPdfreporterCompilersExpressionelementsChunkBuilder *create_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder)

@implementation OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList

- (id<OrgOssPdfreporterCompilersIExpressionChunk>)getWithInt:(jint)index {
  return [((id<JavaUtilList>) nil_chk(delegate_)) getWithInt:index];
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(delegate_)) size];
}

- (jboolean)addWithId:(id<OrgOssPdfreporterCompilersIExpressionChunk>)e {
  return [((id<JavaUtilList>) nil_chk(delegate_)) addWithId:e];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getWithInt:", "get", "Lorg.oss.pdfreporter.compilers.IExpressionChunk;", 0x1, NULL, "(I)Lorg/oss/pdfreporter/compilers/IExpressionChunk;" },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL, "(Lorg/oss/pdfreporter/compilers/IExpressionChunk;)Z" },
    { "init", "ChunkList", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/compilers/IExpressionChunk;>;", .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lorg.oss.pdfreporter.compilers.IExpressionChunk;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList = { 2, "ChunkList", "org.oss.pdfreporter.compilers.expressionelements", "ChunkBuilder", 0xa, 4, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/util/AbstractList<Lorg/oss/pdfreporter/compilers/IExpressionChunk;>;" };
  return &_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList;
}

@end

void OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList_init(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList *self) {
  JavaUtilAbstractList_init(self);
  self->delegate_ = new_JavaUtilArrayList_init();
}

OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList *new_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList, init)
}

OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList *create_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_ChunkList)

@implementation OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk

- (instancetype)initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType:(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)type
                                                                    withNSString:(NSString *)text {
  OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk_initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(self, type, text);
  return self;
}

- (OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)getType {
  return type_;
}

- (NSString *)getText {
  return text_;
}

- (NSString *)description {
  return JreStrcat("$@$$C", @"Chunk [type=", type_, @", text=", text_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType:withNSString:", "Chunk", NULL, 0x0, NULL, NULL },
    { "getType", NULL, "Lorg.oss.pdfreporter.compilers.IExpressionChunk$ExpresionType;", 0x1, NULL, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x12, "Lorg.oss.pdfreporter.compilers.IExpressionChunk$ExpresionType;", NULL, NULL, .constantValue.asLong = 0 },
    { "text_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk = { 2, "Chunk", "org.oss.pdfreporter.compilers.expressionelements", "ChunkBuilder", 0xa, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk;
}

@end

void OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk_initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk *self, OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *type, NSString *text) {
  NSObject_init(self);
  self->type_ = type;
  self->text_ = text;
}

OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk *new_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk_initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *type, NSString *text) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk, initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_, type, text)
}

OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk *create_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk_initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *type, NSString *text) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk, initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_, type, text)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk)

@implementation OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk

- (instancetype)initWithOrgOssPdfreporterCompilersIVariable:(id<OrgOssPdfreporterCompilersIVariable>)variable {
  OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk_initWithOrgOssPdfreporterCompilersIVariable_(self, variable);
  return self;
}

- (id<OrgOssPdfreporterCompilersIVariable>)getVariable {
  return variable_;
}

- (NSString *)description {
  return JreStrcat("$@C", @"VariableChunk [variable=", variable_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterCompilersIVariable:", "VariableChunk", NULL, 0x1, NULL, NULL },
    { "getVariable", NULL, "Lorg.oss.pdfreporter.compilers.IVariable;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "variable_", NULL, 0x12, "Lorg.oss.pdfreporter.compilers.IVariable;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk = { 2, "VariableChunk", "org.oss.pdfreporter.compilers.expressionelements", "ChunkBuilder", 0xa, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk;
}

@end

void OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk_initWithOrgOssPdfreporterCompilersIVariable_(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk *self, id<OrgOssPdfreporterCompilersIVariable> variable) {
  OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_Chunk_initWithOrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_withNSString_(self, [((id<OrgOssPdfreporterCompilersIVariable>) nil_chk(variable)) getType], [variable getName]);
  self->variable_ = variable;
}

OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk *new_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk_initWithOrgOssPdfreporterCompilersIVariable_(id<OrgOssPdfreporterCompilersIVariable> variable) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk, initWithOrgOssPdfreporterCompilersIVariable_, variable)
}

OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk *create_OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk_initWithOrgOssPdfreporterCompilersIVariable_(id<OrgOssPdfreporterCompilersIVariable> variable) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk, initWithOrgOssPdfreporterCompilersIVariable_, variable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersExpressionelementsChunkBuilder_VariableChunk)
