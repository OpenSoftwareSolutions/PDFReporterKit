//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/compilers/IExpressionChunk.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/oss/pdfreporter/compilers/IExpressionChunk.h"

@interface OrgOssPdfreporterCompilersIExpressionChunk : NSObject

@end

__attribute__((unused)) static void OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_initWithNSString_withInt_(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *new_OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation OrgOssPdfreporterCompilersIExpressionChunk

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getType", NULL, "Lorg.oss.pdfreporter.compilers.IExpressionChunk$ExpresionType;", 0x401, NULL, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x401, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.compilers.IExpressionChunk$ExpresionType;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersIExpressionChunk = { 2, "IExpressionChunk", "org.oss.pdfreporter.compilers", NULL, 0x609, 2, methods, 0, NULL, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterCompilersIExpressionChunk;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersIExpressionChunk)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType)

OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_values_[5];

@implementation OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType

+ (OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)TYPE_TEXT {
  return JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_TEXT);
}

+ (OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)TYPE_PARAMETER {
  return JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_PARAMETER);
}

+ (OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)TYPE_FIELD {
  return JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_FIELD);
}

+ (OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)TYPE_VARIABLE {
  return JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_VARIABLE);
}

+ (OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)TYPE_RESOURCE {
  return JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_RESOURCE);
}

+ (IOSObjectArray *)values {
  return OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_values();
}

+ (OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *)valueOfWithNSString:(NSString *)name {
  return OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType class]) {
    JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_TEXT) = new_OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_initWithNSString_withInt_(@"TYPE_TEXT", 0);
    JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_PARAMETER) = new_OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_initWithNSString_withInt_(@"TYPE_PARAMETER", 1);
    JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_FIELD) = new_OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_initWithNSString_withInt_(@"TYPE_FIELD", 2);
    JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_VARIABLE) = new_OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_initWithNSString_withInt_(@"TYPE_VARIABLE", 3);
    JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_RESOURCE) = new_OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_initWithNSString_withInt_(@"TYPE_RESOURCE", 4);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_TEXT", "TYPE_TEXT", 0x4019, "Lorg.oss.pdfreporter.compilers.IExpressionChunk$ExpresionType;", &JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_TEXT), NULL, .constantValue.asLong = 0 },
    { "TYPE_PARAMETER", "TYPE_PARAMETER", 0x4019, "Lorg.oss.pdfreporter.compilers.IExpressionChunk$ExpresionType;", &JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_PARAMETER), NULL, .constantValue.asLong = 0 },
    { "TYPE_FIELD", "TYPE_FIELD", 0x4019, "Lorg.oss.pdfreporter.compilers.IExpressionChunk$ExpresionType;", &JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_FIELD), NULL, .constantValue.asLong = 0 },
    { "TYPE_VARIABLE", "TYPE_VARIABLE", 0x4019, "Lorg.oss.pdfreporter.compilers.IExpressionChunk$ExpresionType;", &JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_VARIABLE), NULL, .constantValue.asLong = 0 },
    { "TYPE_RESOURCE", "TYPE_RESOURCE", 0x4019, "Lorg.oss.pdfreporter.compilers.IExpressionChunk$ExpresionType;", &JreEnum(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, TYPE_RESOURCE), NULL, .constantValue.asLong = 0 },
  };
  static const char *superclass_type_args[] = {"Lorg.oss.pdfreporter.compilers.IExpressionChunk$ExpresionType;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType = { 2, "ExpresionType", "org.oss.pdfreporter.compilers", "IExpressionChunk", 0x4019, 0, NULL, 5, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lorg/oss/pdfreporter/compilers/IExpressionChunk$ExpresionType;>;" };
  return &_OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType;
}

@end

void OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_initWithNSString_withInt_(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *new_OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_values() {
  OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_initialize();
  return [IOSObjectArray arrayWithObjects:OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_values_ count:5 type:OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_class_()];
}

OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_valueOfWithNSString_(NSString *name) {
  OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_initialize();
  for (int i = 0; i < 5; i++) {
    OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *e = OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType *OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_fromOrdinal(NSUInteger ordinal) {
  OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersIExpressionChunk_ExpresionType)
