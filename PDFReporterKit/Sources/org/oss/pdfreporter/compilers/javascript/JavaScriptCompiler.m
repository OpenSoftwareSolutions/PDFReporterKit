//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/compilers/javascript/JavaScriptCompiler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/compilers/javascript/JavaScriptCompileData.h"
#include "org/oss/pdfreporter/compilers/javascript/JavaScriptCompiler.h"
#include "org/oss/pdfreporter/compilers/javascript/JavaScriptCompilerBase.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/EvaluatorException.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/IContext.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/IContextFactory.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/IJavaScriptFactory.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/IScript.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/design/JRCompilationUnit.h"
#include "org/oss/pdfreporter/engine/design/JRSourceCompileTask.h"
#include "org/oss/pdfreporter/engine/util/CompositeExpressionChunkVisitor.h"
#include "org/oss/pdfreporter/engine/util/ExpressionChunkVisitor.h"
#include "org/oss/pdfreporter/engine/util/JRExpressionUtil.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"

@implementation OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, jasperReportsContext);
  return self;
}

- (void)checkLanguageWithNSString:(NSString *)language {
}

- (NSString *)compileUnitsWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:(IOSObjectArray *)units
                                                                     withNSString:(NSString *)classpath
                                                                   withJavaIoFile:(JavaIoFile *)tempDirFile {
  id<OrgOssPdfreporterCompilersJavascriptFactoryIContext> context = [((id<OrgOssPdfreporterCompilersJavascriptFactoryIContextFactory>) nil_chk([((id<OrgOssPdfreporterCompilersJavascriptFactoryIJavaScriptFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getJavascriptFactory())) getGlobal])) enterContext];
  @try {
    OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_Errors *errors = new_OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_Errors_init();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(units))->size_; i++) {
      OrgOssPdfreporterEngineDesignJRCompilationUnit *unit = IOSObjectArray_Get(units, i);
      OrgOssPdfreporterCompilersJavascriptJavaScriptCompileData *compileData = new_OrgOssPdfreporterCompilersJavascriptJavaScriptCompileData_init();
      for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk(unit)) getExpressions])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        id<OrgOssPdfreporterEngineJRExpression> expr = [it next];
        jint id_ = [((JavaLangInteger *) nil_chk([((OrgOssPdfreporterEngineDesignJRSourceCompileTask *) nil_chk([unit getCompileTask])) getExpressionIdWithOrgOssPdfreporterEngineJRExpression:expr])) intValue];
        OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_ScriptExpressionVisitor *defaultVisitor = [self defaultExpressionCreator];
        OrgOssPdfreporterEngineUtilJRExpressionUtil_visitChunksWithOrgOssPdfreporterEngineJRExpression_withOrgOssPdfreporterEngineUtilExpressionChunkVisitor_(expr, defaultVisitor);
        NSString *defaultExpression = [((OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_ScriptExpressionVisitor *) nil_chk(defaultVisitor)) getScript];
        @try {
          (void) [((id<OrgOssPdfreporterCompilersJavascriptFactoryIContext>) nil_chk(context)) compileStringWithNSString:defaultExpression withNSString:@"expression" withInt:0 withId:nil];
        }
        @catch (JavaLangException *e) {
          [errors addErrorWithOrgOssPdfreporterCompilersJavascriptFactoryEvaluatorException:(OrgOssPdfreporterCompilersJavascriptFactoryEvaluatorException *) cast_chk(e, [OrgOssPdfreporterCompilersJavascriptFactoryEvaluatorException class])];
        }
        if (![errors hasErrors]) {
          OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_ScriptExpressionVisitor *oldVisitor = [self oldExpressionCreator];
          OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_ScriptExpressionVisitor *estimatedVisitor = [self estimatedExpressionCreator];
          OrgOssPdfreporterEngineUtilJRExpressionUtil_visitChunksWithOrgOssPdfreporterEngineJRExpression_withOrgOssPdfreporterEngineUtilExpressionChunkVisitor_(expr, new_OrgOssPdfreporterEngineUtilCompositeExpressionChunkVisitor_initWithOrgOssPdfreporterEngineUtilExpressionChunkVisitorArray_([IOSObjectArray newArrayWithObjects:(id[]){ oldVisitor, estimatedVisitor } count:2 type:OrgOssPdfreporterEngineUtilExpressionChunkVisitor_class_()]));
          [compileData addExpressionWithInt:id_ withNSString:defaultExpression withNSString:[((OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_ScriptExpressionVisitor *) nil_chk(estimatedVisitor)) getScript] withNSString:[((OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_ScriptExpressionVisitor *) nil_chk(oldVisitor)) getScript]];
        }
      }
      if (![errors hasErrors]) {
        [unit setCompileDataWithJavaIoSerializable:compileData];
      }
    }
    return [errors errorMessage];
  }
  @finally {
    [((id<OrgOssPdfreporterCompilersJavascriptFactoryIContextFactory>) nil_chk([((id<OrgOssPdfreporterCompilersJavascriptFactoryIJavaScriptFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getJavascriptFactory())) getGlobal])) exit];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineJasperReportsContext:", "JavaScriptCompiler", NULL, 0x1, NULL, NULL },
    { "checkLanguageWithNSString:", "checkLanguage", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "compileUnitsWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:withNSString:withJavaIoFile:", "compileUnits", "Ljava.lang.String;", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler = { 2, "JavaScriptCompiler", "org.oss.pdfreporter.compilers.javascript", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler;
}

@end

void OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler_initWithOrgOssPdfreporterEngineJasperReportsContext_(OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, jasperReportsContext);
}

OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler *new_OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler, initWithOrgOssPdfreporterEngineJasperReportsContext_, jasperReportsContext)
}

OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler *create_OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler, initWithOrgOssPdfreporterEngineJasperReportsContext_, jasperReportsContext)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersJavascriptJavaScriptCompiler)
