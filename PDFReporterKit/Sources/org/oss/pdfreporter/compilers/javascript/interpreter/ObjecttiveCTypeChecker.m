//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-ios/src/org/oss/pdfreporter/compilers/javascript/interpreter/ObjecttiveCTypeChecker.java
//

#include "J2ObjC_source.h"
#include "org/oss/pdfreporter/compilers/javascript/interpreter/ObjecttiveCTypeChecker.h"

@implementation OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker

- (jboolean)isBooleanWithId:(id)source {
  if ([source isKindOfClass:NSValue.class]) {
    return strcmp([source objCType], [@(YES) objCType]) == 0;
  }
  return NO;
}

- (jboolean)isStringWithId:(id)source {
  return [source isKindOfClass:NSString.class];
}

- (jboolean)isNumberWithId:(id)source {
  return [source isKindOfClass:NSNumber.class];
}

- (jboolean)isDateWithId:(id)source {
  return [source isKindOfClass:NSDate.class];
}

- (jboolean)isCollectionWithId:(id)source {
  return [source isKindOfClass:NSArray.class];
}

- (jboolean)isMapWithId:(id)source {
  return [source isKindOfClass:NSDictionary.class];
}

- (jint)getCollectionSizeWithId:(id)source {
  return [source count];
}

- (jint)getMapSizeWithId:(id)source {
  return [source count];
}

- (id)getMapElementWithId:(id)source
             withNSString:(NSString *)key {
  return [source objectForKey:key];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isBooleanWithId:", "isBoolean", "Z", 0x101, NULL, NULL },
    { "isStringWithId:", "isString", "Z", 0x101, NULL, NULL },
    { "isNumberWithId:", "isNumber", "Z", 0x101, NULL, NULL },
    { "isDateWithId:", "isDate", "Z", 0x101, NULL, NULL },
    { "isCollectionWithId:", "isCollection", "Z", 0x101, NULL, NULL },
    { "isMapWithId:", "isMap", "Z", 0x101, NULL, NULL },
    { "getCollectionSizeWithId:", "getCollectionSize", "I", 0x101, NULL, NULL },
    { "getMapSizeWithId:", "getMapSize", "I", 0x101, NULL, NULL },
    { "getMapElementWithId:withNSString:", "getMapElement", "Ljava.lang.Object;", 0x101, NULL, NULL },
    { "init", "ObjecttiveCTypeChecker", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker = { 2, "ObjecttiveCTypeChecker", "org.oss.pdfreporter.compilers.javascript.interpreter", NULL, 0x1, 10, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker;
}

@end

void OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker_init(OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker *self) {
  NSObject_init(self);
}

OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker *new_OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker, init)
}

OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker *create_OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersJavascriptInterpreterObjecttiveCTypeChecker)
