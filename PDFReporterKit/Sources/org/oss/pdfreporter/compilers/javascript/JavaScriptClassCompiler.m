//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/compilers/javascript/JavaScriptClassCompiler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/compilers/javascript/JavaScriptClassCompiler.h"
#include "org/oss/pdfreporter/compilers/javascript/JavaScriptCompiledData.h"
#include "org/oss/pdfreporter/compilers/javascript/JavaScriptCompiledEvaluator.h"
#include "org/oss/pdfreporter/compilers/javascript/JavaScriptCompilerBase.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/EvaluatorException.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/IClassCompiler.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/ICompilerEnvirons.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/IContext.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/IContextFactory.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/IJavaScriptFactory.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/IScript.h"
#include "org/oss/pdfreporter/compilers/javascript/factory/IWrapFactory.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/design/JRCompilationUnit.h"
#include "org/oss/pdfreporter/engine/design/JRSourceCompileTask.h"
#include "org/oss/pdfreporter/engine/util/CompositeExpressionChunkVisitor.h"
#include "org/oss/pdfreporter/engine/util/ExpressionChunkVisitor.h"
#include "org/oss/pdfreporter/engine/util/JRExpressionUtil.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"

inline JavaUtilLoggingLogger *OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler, logger, JavaUtilLoggingLogger *)

@interface OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources () {
 @public
  jint expressionsPerSource_;
  jint scriptMaxLength_;
  id<JavaUtilMap> expressionIndexes_;
  id<JavaUtilList> scriptSources_;
  jint currentScriptIndex_;
  jint currentExpressionId_;
  JavaLangStringBuilder *currentScriptSource_;
}

- (JavaLangStringBuilder *)initScriptSource OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources, expressionIndexes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources, scriptSources_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources, currentScriptSource_, JavaLangStringBuilder *)

__attribute__((unused)) static JavaLangStringBuilder *OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources_initScriptSource(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources *self);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler)

NSString *OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_PROPERTY_OPTIMIZATION_LEVEL = @"net.sf.jasperreports.javascript.class.compiler.optimization.level";
NSString *OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_PROPERTY_EXPRESSIONS_PER_SCRIPT = @"net.sf.jasperreports.javascript.class.compiler.expressions.per.script";
NSString *OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_PROPERTY_SCRIPT_MAX_SIZE = @"net.sf.jasperreports.javascript.class.compiler.script.max.size";
NSString *OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_EXCEPTION_MESSAGE_KEY_UNEXPECTED_CLASS_NAME = @"compilers.javascript.unexpected.class.name";
NSString *OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_EXCEPTION_MESSAGE_KEY_UNEXPECTED_CLASSES_LENGTH = @"compilers.javascript.unexpected.classes.length";

@implementation OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler

+ (NSString *)PROPERTY_OPTIMIZATION_LEVEL {
  return OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_PROPERTY_OPTIMIZATION_LEVEL;
}

+ (NSString *)PROPERTY_EXPRESSIONS_PER_SCRIPT {
  return OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_PROPERTY_EXPRESSIONS_PER_SCRIPT;
}

+ (NSString *)PROPERTY_SCRIPT_MAX_SIZE {
  return OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_PROPERTY_SCRIPT_MAX_SIZE;
}

+ (NSString *)EXCEPTION_MESSAGE_KEY_UNEXPECTED_CLASS_NAME {
  return OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_EXCEPTION_MESSAGE_KEY_UNEXPECTED_CLASS_NAME;
}

+ (NSString *)EXCEPTION_MESSAGE_KEY_UNEXPECTED_CLASSES_LENGTH {
  return OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_EXCEPTION_MESSAGE_KEY_UNEXPECTED_CLASSES_LENGTH;
}

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, jasperReportsContext);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)compileUnitsWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:(IOSObjectArray *)units
                                                                     withNSString:(NSString *)classpath
                                                                   withJavaIoFile:(JavaIoFile *)tempDirFile {
  id<OrgOssPdfreporterCompilersJavascriptFactoryIContext> context = [((id<OrgOssPdfreporterCompilersJavascriptFactoryIContextFactory>) nil_chk([((id<OrgOssPdfreporterCompilersJavascriptFactoryIJavaScriptFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getJavascriptFactory())) getGlobal])) enterContext];
  @try {
    OrgOssPdfreporterEngineJRPropertiesUtil *properties = OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_);
    jint expressionsPerScript = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(properties)) getIntegerPropertyWithNSString:OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_PROPERTY_EXPRESSIONS_PER_SCRIPT];
    jint scriptMaxLength = [properties getIntegerPropertyWithNSString:OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_PROPERTY_SCRIPT_MAX_SIZE];
    jint optimizationLevel = [properties getIntegerPropertyWithNSString:OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_PROPERTY_OPTIMIZATION_LEVEL];
    [((id<OrgOssPdfreporterCompilersJavascriptFactoryIContext>) nil_chk(context)) setOptimizationLevelWithInt:optimizationLevel];
    [((id<OrgOssPdfreporterCompilersJavascriptFactoryIWrapFactory>) nil_chk([context getWrapFactory])) setJavaPrimitiveWrapWithBoolean:false];
    OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_Errors *errors = new_OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_Errors_init();
    id<OrgOssPdfreporterCompilersJavascriptFactoryICompilerEnvirons> compilerEnv = [((id<OrgOssPdfreporterCompilersJavascriptFactoryIJavaScriptFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getJavascriptFactory())) initFromContextWithOrgOssPdfreporterCompilersJavascriptFactoryIContext:context];
    [context setOptimizationLevelWithInt:-1];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(units))->size_; i++) {
      OrgOssPdfreporterEngineDesignJRCompilationUnit *unit = IOSObjectArray_Get(units, i);
      OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources *compileSources = new_OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources_initWithInt_withInt_(expressionsPerScript, scriptMaxLength);
      OrgOssPdfreporterCompilersJavascriptJavaScriptCompiledData *compiledData = new_OrgOssPdfreporterCompilersJavascriptJavaScriptCompiledData_init();
      for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk(unit)) getExpressions])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        id<OrgOssPdfreporterEngineJRExpression> expr = [it next];
        jint id_ = [((JavaLangInteger *) nil_chk([((OrgOssPdfreporterEngineDesignJRSourceCompileTask *) nil_chk([unit getCompileTask])) getExpressionIdWithOrgOssPdfreporterEngineJRExpression:expr])) intValue];
        OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_ScriptExpressionVisitor *defaultVisitor = [self defaultExpressionCreator];
        OrgOssPdfreporterEngineUtilJRExpressionUtil_visitChunksWithOrgOssPdfreporterEngineJRExpression_withOrgOssPdfreporterEngineUtilExpressionChunkVisitor_(expr, defaultVisitor);
        NSString *defaultExpression = [((OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_ScriptExpressionVisitor *) nil_chk(defaultVisitor)) getScript];
        @try {
          (void) [context compileStringWithNSString:defaultExpression withNSString:@"expression" withInt:0 withId:nil];
        }
        @catch (JavaLangException *e) {
          [errors addErrorWithOrgOssPdfreporterCompilersJavascriptFactoryEvaluatorException:(OrgOssPdfreporterCompilersJavascriptFactoryEvaluatorException *) cast_chk(e, [OrgOssPdfreporterCompilersJavascriptFactoryEvaluatorException class])];
        }
        if (![errors hasErrors]) {
          OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_ScriptExpressionVisitor *oldVisitor = [self oldExpressionCreator];
          OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_ScriptExpressionVisitor *estimatedVisitor = [self estimatedExpressionCreator];
          OrgOssPdfreporterEngineUtilJRExpressionUtil_visitChunksWithOrgOssPdfreporterEngineJRExpression_withOrgOssPdfreporterEngineUtilExpressionChunkVisitor_(expr, new_OrgOssPdfreporterEngineUtilCompositeExpressionChunkVisitor_initWithOrgOssPdfreporterEngineUtilExpressionChunkVisitorArray_([IOSObjectArray newArrayWithObjects:(id[]){ oldVisitor, estimatedVisitor } count:2 type:OrgOssPdfreporterEngineUtilExpressionChunkVisitor_class_()]));
          jint defaultExpressionIdx = [compileSources addExpressionWithNSString:defaultExpression];
          jint oldExpressionIdx = [compileSources addExpressionWithNSString:[((OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_ScriptExpressionVisitor *) nil_chk(oldVisitor)) getScript]];
          jint estimatedExpressionIdx = [compileSources addExpressionWithNSString:[((OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_ScriptExpressionVisitor *) nil_chk(estimatedVisitor)) getScript]];
          [compiledData addExpressionWithInt:id_ withInt:defaultExpressionIdx withInt:oldExpressionIdx withInt:estimatedExpressionIdx];
        }
      }
      if (![errors hasErrors]) {
        [self compileScriptsWithOrgOssPdfreporterEngineDesignJRCompilationUnit:unit withOrgOssPdfreporterCompilersJavascriptFactoryICompilerEnvirons:compilerEnv withOrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources:compileSources withOrgOssPdfreporterCompilersJavascriptJavaScriptCompiledData:compiledData];
        [unit setCompileDataWithJavaIoSerializable:compiledData];
      }
    }
    return [errors errorMessage];
  }
  @finally {
    [((id<OrgOssPdfreporterCompilersJavascriptFactoryIContextFactory>) nil_chk([((id<OrgOssPdfreporterCompilersJavascriptFactoryIJavaScriptFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getJavascriptFactory())) getGlobal])) exit];
  }
}

- (void)compileScriptsWithOrgOssPdfreporterEngineDesignJRCompilationUnit:(OrgOssPdfreporterEngineDesignJRCompilationUnit *)unit
        withOrgOssPdfreporterCompilersJavascriptFactoryICompilerEnvirons:(id<OrgOssPdfreporterCompilersJavascriptFactoryICompilerEnvirons>)compilerEnv
withOrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources:(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources *)compileSources
          withOrgOssPdfreporterCompilersJavascriptJavaScriptCompiledData:(OrgOssPdfreporterCompilersJavascriptJavaScriptCompiledData *)compiledData {
  id<JavaUtilList> scripts = [((OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources *) nil_chk(compileSources)) getScripts];
  jint scriptIndex = 0;
  for (NSString * __strong scriptSource in nil_chk(scripts)) {
    NSString *scriptClassName = JreStrcat("$CI", [((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk(unit)) getName], '_', scriptIndex);
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_logger)) finestWithNSString:JreStrcat("$$C$", @"compiling script with name ", scriptClassName, 0x000a, scriptSource)];
    id<OrgOssPdfreporterCompilersJavascriptFactoryIClassCompiler> compiler = [((id<OrgOssPdfreporterCompilersJavascriptFactoryIJavaScriptFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getJavascriptFactory())) newClassCompilerWithOrgOssPdfreporterCompilersJavascriptFactoryICompilerEnvirons:compilerEnv];
    IOSObjectArray *compilationResult = [((id<OrgOssPdfreporterCompilersJavascriptFactoryIClassCompiler>) nil_chk(compiler)) compileToClassFilesWithNSString:scriptSource withNSString:[unit getName] withInt:0 withNSString:scriptClassName];
    if (((IOSObjectArray *) nil_chk(compilationResult))->size_ != 2) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(JreStrcat("$I", @"Unexpected compiled classes length ", compilationResult->size_));
    }
    if (![scriptClassName isEqual:IOSObjectArray_Get(compilationResult, 0)]) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(JreStrcat("$@$$", @"Unexpected compiled class name ", IOSObjectArray_Get(compilationResult, 0), @", expecting ", scriptClassName));
    }
    IOSByteArray *compiledClass = (IOSByteArray *) cast_chk(IOSObjectArray_Get(compilationResult, 1), [IOSByteArray class]);
    [((OrgOssPdfreporterCompilersJavascriptJavaScriptCompiledData *) nil_chk(compiledData)) addClassWithNSString:scriptClassName withByteArray:compiledClass];
    ++scriptIndex;
  }
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler class]) {
    OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineJasperReportsContext:", "JavaScriptClassCompiler", NULL, 0x1, NULL, NULL },
    { "init", "JavaScriptClassCompiler", NULL, 0x1, NULL, NULL },
    { "compileUnitsWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:withNSString:withJavaIoFile:", "compileUnits", "Ljava.lang.String;", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "compileScriptsWithOrgOssPdfreporterEngineDesignJRCompilationUnit:withOrgOssPdfreporterCompilersJavascriptFactoryICompilerEnvirons:withOrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources:withOrgOssPdfreporterCompilersJavascriptJavaScriptCompiledData:", "compileScripts", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PROPERTY_OPTIMIZATION_LEVEL", "PROPERTY_OPTIMIZATION_LEVEL", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_PROPERTY_OPTIMIZATION_LEVEL, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_EXPRESSIONS_PER_SCRIPT", "PROPERTY_EXPRESSIONS_PER_SCRIPT", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_PROPERTY_EXPRESSIONS_PER_SCRIPT, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_SCRIPT_MAX_SIZE", "PROPERTY_SCRIPT_MAX_SIZE", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_PROPERTY_SCRIPT_MAX_SIZE, NULL, .constantValue.asLong = 0 },
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_logger, NULL, .constantValue.asLong = 0 },
    { "EXCEPTION_MESSAGE_KEY_UNEXPECTED_CLASS_NAME", "EXCEPTION_MESSAGE_KEY_UNEXPECTED_CLASS_NAME", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_EXCEPTION_MESSAGE_KEY_UNEXPECTED_CLASS_NAME, NULL, .constantValue.asLong = 0 },
    { "EXCEPTION_MESSAGE_KEY_UNEXPECTED_CLASSES_LENGTH", "EXCEPTION_MESSAGE_KEY_UNEXPECTED_CLASSES_LENGTH", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_EXCEPTION_MESSAGE_KEY_UNEXPECTED_CLASSES_LENGTH, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.compilers.javascript.JavaScriptClassCompiler$CompileSources;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler = { 2, "JavaScriptClassCompiler", "org.oss.pdfreporter.compilers.javascript", NULL, 0x1, 4, methods, 6, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler;
}

@end

void OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_initWithOrgOssPdfreporterEngineJasperReportsContext_(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  OrgOssPdfreporterCompilersJavascriptJavaScriptCompilerBase_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, jasperReportsContext);
}

OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler *new_OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler, initWithOrgOssPdfreporterEngineJasperReportsContext_, jasperReportsContext)
}

OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler *create_OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler, initWithOrgOssPdfreporterEngineJasperReportsContext_, jasperReportsContext)
}

void OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_init(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler *self) {
  OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance());
}

OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler *new_OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler, init)
}

OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler *create_OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler)

@implementation OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources

- (instancetype)initWithInt:(jint)expressionsPerSource
                    withInt:(jint)scriptMaxLength {
  OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources_initWithInt_withInt_(self, expressionsPerSource, scriptMaxLength);
  return self;
}

- (JavaLangStringBuilder *)initScriptSource {
  return OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources_initScriptSource(self);
}

- (JavaLangInteger *)expressionIndexWithNSString:(NSString *)expression {
  return [((id<JavaUtilMap>) nil_chk(expressionIndexes_)) getWithId:expression];
}

- (jint)addExpressionWithNSString:(NSString *)expression {
  JavaLangInteger *existingIdx = [((id<JavaUtilMap>) nil_chk(expressionIndexes_)) getWithId:expression];
  if (existingIdx != nil) {
    return [existingIdx intValue];
  }
  NSString *expressionFragment = JreStrcat("$I$$$", @"case ", currentExpressionId_, @":\n", expression, @"\nbreak\n");
  if (currentExpressionId_ >= expressionsPerSource_ || [((JavaLangStringBuilder *) nil_chk(currentScriptSource_)) length] + ((jint) [expressionFragment length]) > scriptMaxLength_) {
    [self addScriptSource];
    expressionFragment = JreStrcat("$I$$$", @"case ", currentExpressionId_, @":\n", expression, @"\nbreak\n");
  }
  (void) [((JavaLangStringBuilder *) nil_chk(currentScriptSource_)) appendWithNSString:expressionFragment];
  jint expressionIdx = OrgOssPdfreporterCompilersJavascriptJavaScriptCompiledData_makeExpressionIndexWithInt_withInt_(currentScriptIndex_, currentExpressionId_);
  ++currentExpressionId_;
  (void) [expressionIndexes_ putWithId:expression withId:JavaLangInteger_valueOfWithInt_(expressionIdx)];
  [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler, logger))) finestWithNSString:JreStrcat("$I$$", @"expression index ", expressionIdx, @" for expression ", expression)];
  return expressionIdx;
}

- (void)addScriptSource {
  [self closeCurrentScript];
  currentScriptSource_ = OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources_initScriptSource(self);
  ++currentScriptIndex_;
  currentExpressionId_ = 0;
}

- (void)closeCurrentScript {
  if (currentExpressionId_ > 0) {
    (void) [((JavaLangStringBuilder *) nil_chk(currentScriptSource_)) appendWithNSString:@"}"];
    NSString *scriptSource = [((JavaLangStringBuilder *) nil_chk(currentScriptSource_)) description];
    [((id<JavaUtilList>) nil_chk(scriptSources_)) addWithId:scriptSource];
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler, logger))) finerWithNSString:JreStrcat("$I$I", @"created script of length ", ((jint) [((NSString *) nil_chk(scriptSource)) length]), @", expression count ", currentExpressionId_)];
  }
}

- (id<JavaUtilList>)getScripts {
  [self closeCurrentScript];
  return scriptSources_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "CompileSources", NULL, 0x1, NULL, NULL },
    { "initScriptSource", NULL, "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "expressionIndexWithNSString:", "expressionIndex", "Ljava.lang.Integer;", 0x1, NULL, NULL },
    { "addExpressionWithNSString:", "addExpression", "I", 0x1, NULL, NULL },
    { "addScriptSource", NULL, "V", 0x4, NULL, NULL },
    { "closeCurrentScript", NULL, "V", 0x4, NULL, NULL },
    { "getScripts", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Ljava/lang/String;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "expressionsPerSource_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "scriptMaxLength_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "expressionIndexes_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
    { "scriptSources_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "currentScriptIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "currentExpressionId_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "currentScriptSource_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources = { 2, "CompileSources", "org.oss.pdfreporter.compilers.javascript", "JavaScriptClassCompiler", 0xc, 7, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources;
}

@end

void OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources_initWithInt_withInt_(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources *self, jint expressionsPerSource, jint scriptMaxLength) {
  NSObject_init(self);
  self->expressionIndexes_ = new_JavaUtilHashMap_init();
  self->scriptSources_ = new_JavaUtilLinkedList_init();
  self->currentScriptIndex_ = 0;
  self->currentExpressionId_ = 0;
  self->expressionsPerSource_ = expressionsPerSource;
  self->scriptMaxLength_ = scriptMaxLength;
  self->currentScriptSource_ = OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources_initScriptSource(self);
}

OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources *new_OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources_initWithInt_withInt_(jint expressionsPerSource, jint scriptMaxLength) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources, initWithInt_withInt_, expressionsPerSource, scriptMaxLength)
}

OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources *create_OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources_initWithInt_withInt_(jint expressionsPerSource, jint scriptMaxLength) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources, initWithInt_withInt_, expressionsPerSource, scriptMaxLength)
}

JavaLangStringBuilder *OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources_initScriptSource(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources *self) {
  JavaLangStringBuilder *source = new_JavaLangStringBuilder_initWithInt_(1024);
  (void) [source appendWithNSString:@"switch("];
  (void) [source appendWithNSString:OrgOssPdfreporterCompilersJavascriptJavaScriptCompiledEvaluator_EXPRESSION_ID_VAR];
  (void) [source appendWithNSString:@"){\n"];
  return source;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterCompilersJavascriptJavaScriptClassCompiler_CompileSources)
