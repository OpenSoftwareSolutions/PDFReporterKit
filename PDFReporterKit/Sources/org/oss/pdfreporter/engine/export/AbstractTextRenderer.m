//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/export/AbstractTextRenderer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/StringTokenizer.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRStyledTextAttributeSelector.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/TabStop.h"
#include "org/oss/pdfreporter/engine/export/AbstractTextRenderer.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/LineSpacingEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/util/JRStringUtil.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/engine/util/JRStyledTextUtil.h"
#include "org/oss/pdfreporter/engine/util/ParagraphUtil.h"
#include "org/oss/pdfreporter/font/factory/IFontFactory.h"
#include "org/oss/pdfreporter/font/text/ILineBreakMeasurer.h"
#include "org/oss/pdfreporter/font/text/ITextLayout.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/uses/java/awt/text/AttributedString.h"
#include "org/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator.h"
#include "org/oss/pdfreporter/uses/java/awt/text/ICharacterIterator.h"

@interface OrgOssPdfreporterEngineExportAbstractTextRenderer () {
 @public
  jboolean isMinimizePrinterJobSize_;
  jboolean ignoreMissingFont_;
  id<OrgOssPdfreporterFontFactoryIFontFactory> fontFactory_;
}

- (void)renderParagraphWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)allParagraphs
                                                                                withInt:(jint)lastParagraphStart
                                                                           withNSString:(NSString *)lastParagraphText;

- (void)logTextWithInt:(jint)beginIndex
               withInt:(jint)endIndex
withOrgOssPdfreporterFontTextITextLayout:(id<OrgOssPdfreporterFontTextITextLayout>)textLayout
withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)paragraph;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineExportAbstractTextRenderer, fontFactory_, id<OrgOssPdfreporterFontFactoryIFontFactory>)

inline JavaUtilLoggingLogger *OrgOssPdfreporterEngineExportAbstractTextRenderer_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterEngineExportAbstractTextRenderer_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineExportAbstractTextRenderer, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static void OrgOssPdfreporterEngineExportAbstractTextRenderer_renderParagraphWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withNSString_(OrgOssPdfreporterEngineExportAbstractTextRenderer *self, id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> allParagraphs, jint lastParagraphStart, NSString *lastParagraphText);

__attribute__((unused)) static void OrgOssPdfreporterEngineExportAbstractTextRenderer_logTextWithInt_withInt_withOrgOssPdfreporterFontTextITextLayout_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_(OrgOssPdfreporterEngineExportAbstractTextRenderer *self, jint beginIndex, jint endIndex, id<OrgOssPdfreporterFontTextITextLayout> textLayout, id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> paragraph);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineExportAbstractTextRenderer)

@implementation OrgOssPdfreporterEngineExportAbstractTextRenderer

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                        withBoolean:(jboolean)isMinimizePrinterJobSize
                                                        withBoolean:(jboolean)ignoreMissingFont {
  OrgOssPdfreporterEngineExportAbstractTextRenderer_initWithOrgOssPdfreporterEngineJasperReportsContext_withBoolean_withBoolean_(self, jasperReportsContext, isMinimizePrinterJobSize, ignoreMissingFont);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)isMinimizePrinterJobSize
                    withBoolean:(jboolean)ignoreMissingFont {
  OrgOssPdfreporterEngineExportAbstractTextRenderer_initWithBoolean_withBoolean_(self, isMinimizePrinterJobSize, ignoreMissingFont);
  return self;
}

- (jint)getX {
  return x_;
}

- (jint)getY {
  return y_;
}

- (jint)getWidth {
  return width_;
}

- (jint)getHeight {
  return height_;
}

- (OrgOssPdfreporterEngineUtilJRStyledText *)getStyledText {
  return styledText_;
}

- (NSString *)getPlainText {
  return allText_;
}

- (void)initialize__WithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text
                                                   withInt:(jint)offsetX
                                                   withInt:(jint)offsetY {
  styledText_ = [((OrgOssPdfreporterEngineUtilJRStyledTextUtil *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_))) getStyledTextWithOrgOssPdfreporterEngineJRPrintText:text withOrgOssPdfreporterEngineJRStyledTextAttributeSelector:noBackcolorSelector_];
  if (styledText_ == nil) {
    return;
  }
  allText_ = [styledText_ getText];
  x_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getX] + offsetX;
  y_ = [text getY] + offsetY;
  width_ = [text getWidth];
  height_ = [text getHeight];
  topPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([text getLineBox])) getTopPadding])) intValue];
  leftPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([text getLineBox])) getLeftPadding])) intValue];
  bottomPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([text getLineBox])) getBottomPadding])) intValue];
  rightPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([text getLineBox])) getRightPadding])) intValue];
  switch ([[text getRotationValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_LEFT:
    {
      y_ = [text getY] + offsetY + [text getHeight];
      width_ = [text getHeight];
      height_ = [text getWidth];
      jint tmpPadding = topPadding_;
      topPadding_ = leftPadding_;
      leftPadding_ = bottomPadding_;
      bottomPadding_ = rightPadding_;
      rightPadding_ = tmpPadding;
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_RIGHT:
    {
      x_ = [text getX] + offsetX + [text getWidth];
      width_ = [text getHeight];
      height_ = [text getWidth];
      jint tmpPadding = topPadding_;
      topPadding_ = rightPadding_;
      rightPadding_ = bottomPadding_;
      bottomPadding_ = leftPadding_;
      leftPadding_ = tmpPadding;
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_UPSIDE_DOWN:
    {
      jint tmpPadding = topPadding_;
      x_ = [text getX] + offsetX + [text getWidth];
      y_ = [text getY] + offsetY + [text getHeight];
      topPadding_ = bottomPadding_;
      bottomPadding_ = tmpPadding;
      tmpPadding = leftPadding_;
      leftPadding_ = rightPadding_;
      rightPadding_ = tmpPadding;
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_NONE:
    default:
    {
    }
  }
  self->text_ = text;
  verticalAlignOffset_ = 0.0f;
  switch ([[text getVerticalAlignmentValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeVerticalAlignEnum_Enum_TOP:
    {
      verticalAlignOffset_ = 0.0f;
      break;
    }
    case OrgOssPdfreporterEngineTypeVerticalAlignEnum_Enum_MIDDLE:
    {
      verticalAlignOffset_ = (height_ - topPadding_ - bottomPadding_ - [text getTextHeight]) / 2.0f;
      break;
    }
    case OrgOssPdfreporterEngineTypeVerticalAlignEnum_Enum_BOTTOM:
    {
      verticalAlignOffset_ = height_ - topPadding_ - bottomPadding_ - [text getTextHeight];
      break;
    }
    default:
    {
      verticalAlignOffset_ = 0.0f;
    }
  }
  drawPosY_ = 0;
  drawPosX_ = 0;
  isMaxHeightReached_ = false;
}

- (void)render {
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> allParagraphs = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk([((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText_)) getAwtAttributedStringWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withBoolean:ignoreMissingFont_])) getIterator];
  jint tokenPosition = 0;
  jint lastParagraphStart = 0;
  NSString *lastParagraphText = nil;
  JavaUtilStringTokenizer *tkzer = new_JavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(allText_, @"\n", true);
  while ([tkzer hasMoreTokens] && !isMaxHeightReached_) {
    NSString *token = [tkzer nextToken];
    if ([@"\n" isEqual:token]) {
      OrgOssPdfreporterEngineExportAbstractTextRenderer_renderParagraphWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withNSString_(self, allParagraphs, lastParagraphStart, lastParagraphText);
      lastParagraphStart = tokenPosition + ([tkzer hasMoreTokens] || tokenPosition == 0 ? 1 : 0);
      lastParagraphText = nil;
    }
    else {
      lastParagraphStart = tokenPosition;
      lastParagraphText = token;
    }
    tokenPosition += ((jint) [((NSString *) nil_chk(token)) length]);
  }
  if (!isMaxHeightReached_ && lastParagraphStart < ((jint) [((NSString *) nil_chk(allText_)) length])) {
    OrgOssPdfreporterEngineExportAbstractTextRenderer_renderParagraphWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withNSString_(self, allParagraphs, lastParagraphStart, lastParagraphText);
  }
}

- (void)renderParagraphWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)allParagraphs
                                                                                withInt:(jint)lastParagraphStart
                                                                           withNSString:(NSString *)lastParagraphText {
  OrgOssPdfreporterEngineExportAbstractTextRenderer_renderParagraphWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withNSString_(self, allParagraphs, lastParagraphStart, lastParagraphText);
}

- (void)logTextWithInt:(jint)beginIndex
               withInt:(jint)endIndex
withOrgOssPdfreporterFontTextITextLayout:(id<OrgOssPdfreporterFontTextITextLayout>)textLayout
withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)paragraph {
  OrgOssPdfreporterEngineExportAbstractTextRenderer_logTextWithInt_withInt_withOrgOssPdfreporterFontTextITextLayout_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_(self, beginIndex, endIndex, textLayout, paragraph);
}

- (void)draw {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (jfloat)getLineHeightWithBoolean:(jboolean)isFirstLine
withOrgOssPdfreporterEngineJRParagraph:(id<OrgOssPdfreporterEngineJRParagraph>)paragraph
                         withFloat:(jfloat)maxLeading
                         withFloat:(jfloat)maxAscent {
  return OrgOssPdfreporterEngineExportAbstractTextRenderer_getLineHeightWithBoolean_withOrgOssPdfreporterEngineJRParagraph_withFloat_withFloat_(isFirstLine, paragraph, maxLeading, maxAscent);
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineExportAbstractTextRenderer class]) {
    OrgOssPdfreporterEngineExportAbstractTextRenderer_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterEngineExportAbstractTextRenderer_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineExportAbstractTextRenderer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineJasperReportsContext:withBoolean:withBoolean:", "AbstractTextRenderer", NULL, 0x1, NULL, NULL },
    { "initWithBoolean:withBoolean:", "AbstractTextRenderer", NULL, 0x1, NULL, NULL },
    { "getX", NULL, "I", 0x1, NULL, NULL },
    { "getY", NULL, "I", 0x1, NULL, NULL },
    { "getWidth", NULL, "I", 0x1, NULL, NULL },
    { "getHeight", NULL, "I", 0x1, NULL, NULL },
    { "getStyledText", NULL, "Lorg.oss.pdfreporter.engine.util.JRStyledText;", 0x1, NULL, NULL },
    { "getPlainText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initialize__WithOrgOssPdfreporterEngineJRPrintText:withInt:withInt:", "initialize", "V", 0x1, NULL, NULL },
    { "render", NULL, "V", 0x1, NULL, NULL },
    { "renderParagraphWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:withInt:withNSString:", "renderParagraph", "V", 0x2, NULL, NULL },
    { "logTextWithInt:withInt:withOrgOssPdfreporterFontTextITextLayout:withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:", "logText", "V", 0x2, NULL, NULL },
    { "draw", NULL, "V", 0x401, NULL, NULL },
    { "getLineHeightWithBoolean:withOrgOssPdfreporterEngineJRParagraph:withFloat:withFloat:", "getLineHeight", "F", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterEngineExportAbstractTextRenderer_logger, NULL, .constantValue.asLong = 0 },
    { "jasperReportsContext_", NULL, 0x14, "Lorg.oss.pdfreporter.engine.JasperReportsContext;", NULL, NULL, .constantValue.asLong = 0 },
    { "noBackcolorSelector_", NULL, 0x14, "Lorg.oss.pdfreporter.engine.JRStyledTextAttributeSelector;", NULL, NULL, .constantValue.asLong = 0 },
    { "text_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRPrintText;", NULL, NULL, .constantValue.asLong = 0 },
    { "styledText_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.util.JRStyledText;", NULL, NULL, .constantValue.asLong = 0 },
    { "allText_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "x_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "y_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "width_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "height_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "topPadding_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "leftPadding_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "bottomPadding_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "rightPadding_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "verticalAlignOffset_", NULL, 0x4, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "drawPosY_", NULL, 0x4, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "drawPosX_", NULL, 0x4, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "lineHeight_", NULL, 0x4, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "isMaxHeightReached_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "segments_", NULL, 0x4, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/engine/export/AbstractTextRenderer$TabSegment;>;", .constantValue.asLong = 0 },
    { "segmentIndex_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "isMinimizePrinterJobSize_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "ignoreMissingFont_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "fontFactory_", NULL, 0x12, "Lorg.oss.pdfreporter.font.factory.IFontFactory;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.engine.export.AbstractTextRenderer$TabSegment;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineExportAbstractTextRenderer = { 2, "AbstractTextRenderer", "org.oss.pdfreporter.engine.export", NULL, 0x401, 14, methods, 24, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterEngineExportAbstractTextRenderer;
}

@end

void OrgOssPdfreporterEngineExportAbstractTextRenderer_initWithOrgOssPdfreporterEngineJasperReportsContext_withBoolean_withBoolean_(OrgOssPdfreporterEngineExportAbstractTextRenderer *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, jboolean isMinimizePrinterJobSize, jboolean ignoreMissingFont) {
  NSObject_init(self);
  self->isMinimizePrinterJobSize_ = true;
  self->jasperReportsContext_ = jasperReportsContext;
  self->noBackcolorSelector_ = OrgOssPdfreporterEngineJRStyledTextAttributeSelector_getNoBackcolorSelectorWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext);
  self->isMinimizePrinterJobSize_ = isMinimizePrinterJobSize;
  self->ignoreMissingFont_ = ignoreMissingFont;
  self->fontFactory_ = OrgOssPdfreporterRegistryApiRegistry_getFontFactory();
}

void OrgOssPdfreporterEngineExportAbstractTextRenderer_initWithBoolean_withBoolean_(OrgOssPdfreporterEngineExportAbstractTextRenderer *self, jboolean isMinimizePrinterJobSize, jboolean ignoreMissingFont) {
  OrgOssPdfreporterEngineExportAbstractTextRenderer_initWithOrgOssPdfreporterEngineJasperReportsContext_withBoolean_withBoolean_(self, OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance(), isMinimizePrinterJobSize, ignoreMissingFont);
}

void OrgOssPdfreporterEngineExportAbstractTextRenderer_renderParagraphWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withNSString_(OrgOssPdfreporterEngineExportAbstractTextRenderer *self, id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> allParagraphs, jint lastParagraphStart, NSString *lastParagraphText) {
  @autoreleasepool {
    id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> paragraph = nil;
    if (lastParagraphText == nil) {
      lastParagraphText = @" ";
      paragraph = [new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_withJavaUtilMap_(lastParagraphText, [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk([new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(allParagraphs, lastParagraphStart, lastParagraphStart + ((jint) [lastParagraphText length])) getIterator])) getAttributes]) getIterator];
    }
    else {
      paragraph = [new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(allParagraphs, lastParagraphStart, lastParagraphStart + ((jint) [lastParagraphText length])) getIterator];
    }
    id<JavaUtilList> tabIndexes = OrgOssPdfreporterEngineUtilJRStringUtil_getTabIndexesWithNSString_(lastParagraphText);
    jint currentTab = 0;
    jint lines = 0;
    jfloat endX = 0;
    OrgOssPdfreporterEngineTabStop *nextTabStop = nil;
    jboolean requireNextWord = false;
    id<OrgOssPdfreporterFontTextILineBreakMeasurer> lineMeasurer = [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk(self->fontFactory_)) newLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_(paragraph)];
    while ([((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer)) getPosition] < [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(paragraph)) getEndIndex] && !self->isMaxHeightReached_) {
      jboolean lineComplete = false;
      jfloat maxAscent = 0;
      jfloat maxDescent = 0;
      jfloat maxLeading = 0;
      self->segments_ = new_JavaUtilArrayList_initWithInt_(1);
      OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *oldSegment = nil;
      OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *crtSegment = nil;
      while (!lineComplete) {
        jint tabIndexOrEndIndex = (tabIndexes == nil || currentTab >= [tabIndexes size] ? [paragraph getEndIndex] : [((JavaLangInteger *) nil_chk([tabIndexes getWithInt:currentTab])) intValue] + 1);
        jfloat startX = ([lineMeasurer getPosition] == 0 ? [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getParagraph])) getFirstLineIndent])) intValue] : 0) + self->leftPadding_;
        endX = self->width_ - [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getParagraph])) getRightIndent])) intValue] - self->rightPadding_;
        endX = endX < startX ? startX : endX;
        jint startIndex = [lineMeasurer getPosition];
        jfloat rightX = 0;
        if ([((id<JavaUtilList>) nil_chk(self->segments_)) size] == 0) {
          rightX = startX;
        }
        else {
          rightX = ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(oldSegment))->rightX_;
          nextTabStop = OrgOssPdfreporterEngineUtilParagraphUtil_getNextTabStopWithOrgOssPdfreporterEngineJRParagraph_withFloat_withFloat_([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getParagraph], endX, rightX);
        }
        jfloat availableWidth = endX - [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getParagraph])) getLeftIndent])) intValue] - OrgOssPdfreporterEngineUtilParagraphUtil_getSegmentOffsetWithOrgOssPdfreporterEngineTabStop_withFloat_(nextTabStop, rightX);
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportAbstractTextRenderer_logger)) finestWithNSString:JreStrcat("$F$I$Z", @"width: ", availableWidth, @", endLimit: ", tabIndexOrEndIndex, @", requireWord: ", requireNextWord)];
        jint beginIndex = [lineMeasurer getPosition];
        id<OrgOssPdfreporterFontTextITextLayout> layout = [lineMeasurer nextLayoutWithFloat:availableWidth withInt:tabIndexOrEndIndex withBoolean:requireNextWord];
        jint endIndex = [lineMeasurer getPosition];
        OrgOssPdfreporterEngineExportAbstractTextRenderer_logTextWithInt_withInt_withOrgOssPdfreporterFontTextITextLayout_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_(self, beginIndex, endIndex, layout, paragraph);
        if (layout != nil) {
          OrgOssPdfreporterUsesJavaAwtTextAttributedString *tmpText = new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(paragraph, startIndex, startIndex + [layout getCharacterCount]);
          if ([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getHorizontalAlignmentValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeHorizontalAlignEnum, JUSTIFIED) && [lineMeasurer getPosition] < [paragraph getEndIndex]) {
            layout = [layout getJustifiedLayoutWithFloat:availableWidth];
          }
          maxAscent = JavaLangMath_maxWithFloat_withFloat_(maxAscent, [((id<OrgOssPdfreporterFontTextITextLayout>) nil_chk(layout)) getAscent]);
          maxDescent = JavaLangMath_maxWithFloat_withFloat_(maxDescent, [layout getDescent]);
          maxLeading = JavaLangMath_maxWithFloat_withFloat_(maxLeading, [layout getLeading]);
          crtSegment = new_OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment_init();
          crtSegment->layout_ = layout;
          crtSegment->as_ = tmpText;
          crtSegment->text_ = [lastParagraphText substring:startIndex endIndex:startIndex + [layout getCharacterCount]];
          jfloat leftX = OrgOssPdfreporterEngineUtilParagraphUtil_getLeftXWithOrgOssPdfreporterEngineTabStop_withFloat_(nextTabStop, [layout getAdvance]);
          if (rightX > leftX) {
            crtSegment->leftX_ = rightX;
            crtSegment->rightX_ = rightX + [layout getAdvance];
          }
          else {
            crtSegment->leftX_ = leftX;
            crtSegment->rightX_ = OrgOssPdfreporterEngineUtilParagraphUtil_getRightXWithOrgOssPdfreporterEngineTabStop_withFloat_(nextTabStop, [layout getAdvance]);
          }
          [((id<JavaUtilList>) nil_chk(self->segments_)) addWithId:crtSegment];
        }
        requireNextWord = true;
        if ([lineMeasurer getPosition] == tabIndexOrEndIndex) {
          currentTab++;
        }
        if ([lineMeasurer getPosition] == [paragraph getEndIndex]) {
          lineComplete = true;
          nextTabStop = nil;
        }
        else {
          if ([lineMeasurer getPosition] == tabIndexOrEndIndex) {
            if (((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(crtSegment))->rightX_ >= [((OrgOssPdfreporterEngineTabStop *) nil_chk(OrgOssPdfreporterEngineUtilParagraphUtil_getLastTabStopWithOrgOssPdfreporterEngineJRParagraph_withFloat_([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getParagraph], endX))) getPosition]) {
              lineComplete = true;
              nextTabStop = OrgOssPdfreporterEngineUtilParagraphUtil_getFirstTabStopWithOrgOssPdfreporterEngineJRParagraph_withFloat_([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getParagraph], endX);
            }
          }
          else {
            lineComplete = true;
            if (layout == nil) {
              if ([((OrgOssPdfreporterEngineTabStop *) nil_chk(nextTabStop)) getPosition] == [((OrgOssPdfreporterEngineTabStop *) nil_chk(OrgOssPdfreporterEngineUtilParagraphUtil_getFirstTabStopWithOrgOssPdfreporterEngineJRParagraph_withFloat_([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getParagraph], endX))) getPosition]) {
                nextTabStop = nil;
                requireNextWord = false;
                OrgOssPdfreporterUsesJavaAwtTextAttributedString *tmpText = new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(paragraph, startIndex, startIndex + 1);
                id<OrgOssPdfreporterFontTextILineBreakMeasurer> lbm = [self->fontFactory_ newLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:tmpText];
                id<OrgOssPdfreporterFontTextITextLayout> tlyt = [((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lbm)) nextLayoutWithFloat:100];
                maxAscent = [((id<OrgOssPdfreporterFontTextITextLayout>) nil_chk(tlyt)) getAscent];
                maxDescent = [tlyt getDescent];
                maxLeading = [tlyt getLeading];
              }
              else {
                nextTabStop = OrgOssPdfreporterEngineUtilParagraphUtil_getFirstTabStopWithOrgOssPdfreporterEngineJRParagraph_withFloat_([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getParagraph], endX);
              }
            }
            else {
              nextTabStop = nil;
              requireNextWord = false;
            }
          }
        }
        oldSegment = crtSegment;
      }
      self->lineHeight_ = OrgOssPdfreporterEngineExportAbstractTextRenderer_getLineHeightWithBoolean_withOrgOssPdfreporterEngineJRParagraph_withFloat_withFloat_(lastParagraphStart == 0 && lines == 0, [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getParagraph], maxLeading, maxAscent);
      if (lastParagraphStart == 0 && lines == 0) {
        JrePlusAssignFloatF(&self->lineHeight_, [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getParagraph])) getSpacingBefore])) intValue]);
      }
      if (self->drawPosY_ + self->lineHeight_ <= [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getTextHeight]) {
        lines++;
        JrePlusAssignFloatF(&self->drawPosY_, self->lineHeight_);
        jfloat lastRightX = (self->segments_ == nil || [self->segments_ size] == 0 ? 0 : ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk([self->segments_ getWithInt:[self->segments_ size] - 1]))->rightX_);
        for (self->segmentIndex_ = 0; self->segmentIndex_ < [((id<JavaUtilList>) nil_chk(self->segments_)) size]; self->segmentIndex_++) {
          OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *segment = [((id<JavaUtilList>) nil_chk(self->segments_)) getWithInt:self->segmentIndex_];
          id<OrgOssPdfreporterFontTextITextLayout> layout = ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(segment))->layout_;
          switch ([[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getHorizontalAlignmentValue] ordinal]) {
            case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_Enum_JUSTIFIED:
            {
              if ([((id<OrgOssPdfreporterFontTextITextLayout>) nil_chk(layout)) isLeftToRight]) {
                self->drawPosX_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getParagraph])) getLeftIndent])) intValue] + segment->leftX_;
              }
              else {
                self->drawPosX_ = (endX - lastRightX + segment->leftX_);
              }
              break;
            }
            case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_Enum_RIGHT:
            {
              self->drawPosX_ = (endX - lastRightX + segment->leftX_);
              break;
            }
            case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_Enum_CENTER:
            {
              self->drawPosX_ = ((endX - lastRightX) / 2) + segment->leftX_;
              break;
            }
            case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_Enum_LEFT:
            default:
            {
              self->drawPosX_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(self->text_)) getParagraph])) getLeftIndent])) intValue] + segment->leftX_;
            }
          }
          [self draw];
        }
        JrePlusAssignFloatF(&self->drawPosY_, maxDescent);
      }
      else {
        self->isMaxHeightReached_ = true;
      }
    }
  }
}

void OrgOssPdfreporterEngineExportAbstractTextRenderer_logTextWithInt_withInt_withOrgOssPdfreporterFontTextITextLayout_withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_(OrgOssPdfreporterEngineExportAbstractTextRenderer *self, jint beginIndex, jint endIndex, id<OrgOssPdfreporterFontTextITextLayout> textLayout, id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> paragraph) {
  if (textLayout != nil) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportAbstractTextRenderer_logger)) finestWithNSString:JreStrcat("$F$F", @"Space advance: ", [textLayout getAdvance], @", Visible space advance: ", [textLayout getVisibleAdvance])];
  }
  JavaLangStringBuilder *builder = new_JavaLangStringBuilder_init();
  OrgOssPdfreporterUsesJavaAwtTextAttributedString *attributedText = new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(paragraph, beginIndex, endIndex);
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> iterator = [attributedText getIterator];
  for (jchar c = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) first]; c != OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE; c = [iterator next]) {
    (void) [builder appendWithChar:c];
  }
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportAbstractTextRenderer_logger)) finestWithNSString:JreStrcat("$I$I$$", @"Pos: ", beginIndex, @", next: ", endIndex, @", text: ", [builder description])];
}

jfloat OrgOssPdfreporterEngineExportAbstractTextRenderer_getLineHeightWithBoolean_withOrgOssPdfreporterEngineJRParagraph_withFloat_withFloat_(jboolean isFirstLine, id<OrgOssPdfreporterEngineJRParagraph> paragraph, jfloat maxLeading, jfloat maxAscent) {
  OrgOssPdfreporterEngineExportAbstractTextRenderer_initialize();
  jfloat lineHeight = 0;
  switch ([[((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) getLineSpacing] ordinal]) {
    case OrgOssPdfreporterEngineTypeLineSpacingEnum_Enum_SINGLE:
    default:
    {
      lineHeight = maxLeading + 1.0f * maxAscent;
      break;
    }
    case OrgOssPdfreporterEngineTypeLineSpacingEnum_Enum_ONE_AND_HALF:
    {
      if (isFirstLine) {
        lineHeight = maxLeading + 1.0f * maxAscent;
      }
      else {
        lineHeight = maxLeading + 1.5f * maxAscent;
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeLineSpacingEnum_Enum_DOUBLE:
    {
      if (isFirstLine) {
        lineHeight = maxLeading + 1.0f * maxAscent;
      }
      else {
        lineHeight = maxLeading + 2.0f * maxAscent;
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeLineSpacingEnum_Enum_PROPORTIONAL:
    {
      if (isFirstLine) {
        lineHeight = maxLeading + 1.0f * maxAscent;
      }
      else {
        lineHeight = maxLeading + [((JavaLangFloat *) nil_chk([paragraph getLineSpacingSize])) floatValue] * maxAscent;
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeLineSpacingEnum_Enum_AT_LEAST:
    {
      if (isFirstLine) {
        lineHeight = maxLeading + 1.0f * maxAscent;
      }
      else {
        lineHeight = JavaLangMath_maxWithFloat_withFloat_(maxLeading + 1.0f * maxAscent, [((JavaLangFloat *) nil_chk([paragraph getLineSpacingSize])) floatValue]);
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeLineSpacingEnum_Enum_FIXED:
    {
      if (isFirstLine) {
        lineHeight = maxLeading + 1.0f * maxAscent;
      }
      else {
        lineHeight = [((JavaLangFloat *) nil_chk([paragraph getLineSpacingSize])) floatValue];
      }
      break;
    }
  }
  return lineHeight;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineExportAbstractTextRenderer)

@implementation OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TabSegment", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "layout_", NULL, 0x1, "Lorg.oss.pdfreporter.font.text.ITextLayout;", NULL, NULL, .constantValue.asLong = 0 },
    { "as_", NULL, 0x1, "Lorg.oss.pdfreporter.uses.java.awt.text.AttributedString;", NULL, NULL, .constantValue.asLong = 0 },
    { "text_", NULL, 0x1, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "leftX_", NULL, 0x1, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "rightX_", NULL, 0x1, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment = { 2, "TabSegment", "org.oss.pdfreporter.engine.export", "AbstractTextRenderer", 0x8, 1, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment;
}

@end

void OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment_init(OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *new_OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment, init)
}

OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *create_OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment)
