//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/export/JRPdfExporter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRAbstractExporter.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExporterParameter.h"
#include "org/oss/pdfreporter/engine/JRFont.h"
#include "org/oss/pdfreporter/engine/JRGenericElementType.h"
#include "org/oss/pdfreporter/engine/JRGenericPrintElement.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRPen.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintEllipse.h"
#include "org/oss/pdfreporter/engine/JRPrintFrame.h"
#include "org/oss/pdfreporter/engine/JRPrintImage.h"
#include "org/oss/pdfreporter/engine/JRPrintLine.h"
#include "org/oss/pdfreporter/engine/JRPrintPage.h"
#include "org/oss/pdfreporter/engine/JRPrintRectangle.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/Renderable.h"
#include "org/oss/pdfreporter/engine/base/JRBaseFont.h"
#include "org/oss/pdfreporter/engine/base/JRBoxPen.h"
#include "org/oss/pdfreporter/engine/export/AbstractPdfTextRenderer.h"
#include "org/oss/pdfreporter/engine/export/ExporterFilter.h"
#include "org/oss/pdfreporter/engine/export/GenericElementHandler.h"
#include "org/oss/pdfreporter/engine/export/GenericElementHandlerEnviroment.h"
#include "org/oss/pdfreporter/engine/export/GenericElementPdfHandler.h"
#include "org/oss/pdfreporter/engine/export/JRExportProgressMonitor.h"
#include "org/oss/pdfreporter/engine/export/JRPdfExporter.h"
#include "org/oss/pdfreporter/engine/export/JRPdfExporterContext.h"
#include "org/oss/pdfreporter/engine/export/JRPdfExporterParameter.h"
#include "org/oss/pdfreporter/engine/export/PdfTextRenderer.h"
#include "org/oss/pdfreporter/engine/export/SimplePdfTextRenderer.h"
#include "org/oss/pdfreporter/engine/export/legacy/BorderOffset.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/LineDirectionEnum.h"
#include "org/oss/pdfreporter/engine/type/LineStyleEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/OrientationEnum.h"
#include "org/oss/pdfreporter/engine/type/RenderableTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/ScaleImageEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/util/JRPdfaIccProfileNotFoundException.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontManager.h"
#include "org/oss/pdfreporter/font/factory/IFontFactory.h"
#include "org/oss/pdfreporter/font/text/TextAttribute.h"
#include "org/oss/pdfreporter/geometry/IAffineTransformMatrix.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/geometry/IDimension.h"
#include "org/oss/pdfreporter/geometry/IRectangle.h"
#include "org/oss/pdfreporter/geometry/factory/IGeometryFactory.h"
#include "org/oss/pdfreporter/image/IImage.h"
#include "org/oss/pdfreporter/pdf/DocumentException.h"
#include "org/oss/pdfreporter/pdf/IDocument.h"
#include "org/oss/pdfreporter/pdf/IEncryption.h"
#include "org/oss/pdfreporter/pdf/IPage.h"
#include "org/oss/pdfreporter/pdf/ParagraphRenderer.h"
#include "org/oss/pdfreporter/pdf/factory/IPdfFactory.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/text/HorizontalAlignment.h"
#include "org/oss/pdfreporter/text/IPositionedLine.h"
#include "org/oss/pdfreporter/text/Paragraph.h"
#include "org/oss/pdfreporter/text/ParagraphText.h"
#include "org/oss/pdfreporter/text/PositionedLined.h"
#include "org/oss/pdfreporter/uses/java/awt/text/AttributedString.h"
#include "org/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator.h"

@interface OrgOssPdfreporterEngineExportJRPdfExporter () {
 @public
  jboolean collapseMissingBookmarkLevels_;
  id<JavaUtilMap> pdfFontMap_;
}

- (jfloat)getXAlignFactorWithOrgOssPdfreporterEngineJRPrintImage:(id<OrgOssPdfreporterEngineJRPrintImage>)printImage;

- (jfloat)getYAlignFactorWithOrgOssPdfreporterEngineJRPrintImage:(id<OrgOssPdfreporterEngineJRPrintImage>)printImage;

- (jboolean)hasSupersciptWithJavaUtilMap:(id<JavaUtilMap>)attributes;

- (jboolean)hasSubsciptWithJavaUtilMap:(id<JavaUtilMap>)attributes;

+ (IOSIntArray *)toDashPatternWithFloat:(jfloat)on
                              withFloat:(jfloat)off;

+ (void)drawRoundRectWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)aPdfPage
                                         withFloat:(jfloat)x
                                         withFloat:(jfloat)y
                                         withFloat:(jfloat)width
                                         withFloat:(jfloat)height
                                           withInt:(jint)radius;

+ (void)drawEllipseWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)aPdfPage
                                       withFloat:(jfloat)x1
                                       withFloat:(jfloat)y1
                                       withFloat:(jfloat)x2
                                       withFloat:(jfloat)y2;

+ (id<OrgOssPdfreporterFontIFont>)toPdfFontWithOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)font
                                                                 withBoolean:(jboolean)underline
                                                                 withBoolean:(jboolean)strikethrough
                                                                 withBoolean:(jboolean)superscript
                                                                 withBoolean:(jboolean)subscript;

+ (void)preparePenWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)aPdfPage
               withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)pen
          withOrgOssPdfreporterPdfIPage_LineCap:(OrgOssPdfreporterPdfIPage_LineCap *)lineCap;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineExportJRPdfExporter, pdfFontMap_, id<JavaUtilMap>)

inline JavaUtilLoggingLogger *OrgOssPdfreporterEngineExportJRPdfExporter_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterEngineExportJRPdfExporter_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineExportJRPdfExporter, logger, JavaUtilLoggingLogger *)

inline NSString *OrgOssPdfreporterEngineExportJRPdfExporter_get_EMPTY_BOOKMARK_TITLE();
static NSString *OrgOssPdfreporterEngineExportJRPdfExporter_EMPTY_BOOKMARK_TITLE = @"";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineExportJRPdfExporter, EMPTY_BOOKMARK_TITLE, NSString *)

__attribute__((unused)) static jfloat OrgOssPdfreporterEngineExportJRPdfExporter_getXAlignFactorWithOrgOssPdfreporterEngineJRPrintImage_(OrgOssPdfreporterEngineExportJRPdfExporter *self, id<OrgOssPdfreporterEngineJRPrintImage> printImage);

__attribute__((unused)) static jfloat OrgOssPdfreporterEngineExportJRPdfExporter_getYAlignFactorWithOrgOssPdfreporterEngineJRPrintImage_(OrgOssPdfreporterEngineExportJRPdfExporter *self, id<OrgOssPdfreporterEngineJRPrintImage> printImage);

__attribute__((unused)) static jboolean OrgOssPdfreporterEngineExportJRPdfExporter_hasSupersciptWithJavaUtilMap_(OrgOssPdfreporterEngineExportJRPdfExporter *self, id<JavaUtilMap> attributes);

__attribute__((unused)) static jboolean OrgOssPdfreporterEngineExportJRPdfExporter_hasSubsciptWithJavaUtilMap_(OrgOssPdfreporterEngineExportJRPdfExporter *self, id<JavaUtilMap> attributes);

__attribute__((unused)) static IOSIntArray *OrgOssPdfreporterEngineExportJRPdfExporter_toDashPatternWithFloat_withFloat_(jfloat on, jfloat off);

__attribute__((unused)) static void OrgOssPdfreporterEngineExportJRPdfExporter_drawRoundRectWithOrgOssPdfreporterPdfIPage_withFloat_withFloat_withFloat_withFloat_withInt_(id<OrgOssPdfreporterPdfIPage> aPdfPage, jfloat x, jfloat y, jfloat width, jfloat height, jint radius);

__attribute__((unused)) static void OrgOssPdfreporterEngineExportJRPdfExporter_drawEllipseWithOrgOssPdfreporterPdfIPage_withFloat_withFloat_withFloat_withFloat_(id<OrgOssPdfreporterPdfIPage> aPdfPage, jfloat x1, jfloat y1, jfloat x2, jfloat y2);

__attribute__((unused)) static id<OrgOssPdfreporterFontIFont> OrgOssPdfreporterEngineExportJRPdfExporter_toPdfFontWithOrgOssPdfreporterEngineJRFont_withBoolean_withBoolean_withBoolean_withBoolean_(id<OrgOssPdfreporterEngineJRFont> font, jboolean underline, jboolean strikethrough, jboolean superscript, jboolean subscript);

__attribute__((unused)) static void OrgOssPdfreporterEngineExportJRPdfExporter_preparePenWithOrgOssPdfreporterPdfIPage_withOrgOssPdfreporterEngineJRPen_withOrgOssPdfreporterPdfIPage_LineCap_(id<OrgOssPdfreporterPdfIPage> aPdfPage, id<OrgOssPdfreporterEngineJRPen> pen, OrgOssPdfreporterPdfIPage_LineCap *lineCap);

@interface OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext () {
 @public
  OrgOssPdfreporterEngineExportJRPdfExporter *this$1_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext, this$1_, OrgOssPdfreporterEngineExportJRPdfExporter *)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineExportJRPdfExporter)

NSString *OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_PROPERTIES_PREFIX = @"net.sf.jasperreports.export.pdf.";
NSString *OrgOssPdfreporterEngineExportJRPdfExporter_PDF_FONT_FILES_PREFIX = @"net.sf.jasperreports.export.pdf.font.";
NSString *OrgOssPdfreporterEngineExportJRPdfExporter_PDF_FONT_DIRS_PREFIX = @"net.sf.jasperreports.export.pdf.fontdir.";
NSString *OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_KEY = @"net.sf.jasperreports.pdf";
NSString *OrgOssPdfreporterEngineExportJRPdfExporter_JR_PAGE_ANCHOR_PREFIX = @"JR_PAGE_ANCHOR_";
jboolean OrgOssPdfreporterEngineExportJRPdfExporter_fontsRegistered;

@implementation OrgOssPdfreporterEngineExportJRPdfExporter

+ (NSString *)PDF_EXPORTER_PROPERTIES_PREFIX {
  return OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_PROPERTIES_PREFIX;
}

+ (NSString *)PDF_FONT_FILES_PREFIX {
  return OrgOssPdfreporterEngineExportJRPdfExporter_PDF_FONT_FILES_PREFIX;
}

+ (NSString *)PDF_FONT_DIRS_PREFIX {
  return OrgOssPdfreporterEngineExportJRPdfExporter_PDF_FONT_DIRS_PREFIX;
}

+ (NSString *)PDF_EXPORTER_KEY {
  return OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_KEY;
}

+ (NSString *)JR_PAGE_ANCHOR_PREFIX {
  return OrgOssPdfreporterEngineExportJRPdfExporter_JR_PAGE_ANCHOR_PREFIX;
}

+ (jboolean)fontsRegistered {
  return OrgOssPdfreporterEngineExportJRPdfExporter_fontsRegistered;
}

+ (void)setFontsRegistered:(jboolean)value {
  OrgOssPdfreporterEngineExportJRPdfExporter_fontsRegistered = value;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineExportJRPdfExporter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  OrgOssPdfreporterEngineExportJRPdfExporter_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, jasperReportsContext);
  return self;
}

- (void)exportReport {
  OrgOssPdfreporterEngineExportJRPdfExporter_registerFonts();
  progressMonitor_ = (id<OrgOssPdfreporterEngineExportJRExportProgressMonitor>) cast_check([((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:JreLoadStatic(OrgOssPdfreporterEngineJRExporterParameter, PROGRESS_MONITOR)], OrgOssPdfreporterEngineExportJRExportProgressMonitor_class_());
  [self setOffset];
  @try {
    [self setExportContext];
    [self setInput];
    if (![((id<JavaUtilMap>) nil_chk(parameters_)) containsKeyWithId:JreLoadStatic(OrgOssPdfreporterEngineJRExporterParameter, FILTER)]) {
      filter_ = [self createFilterWithNSString:OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_PROPERTIES_PREFIX];
    }
    if (!isModeBatch_) {
      [self setPageRange];
    }
    isCreatingBatchModeBookmarks_ = [self getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, IS_CREATING_BATCH_MODE_BOOKMARKS) withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_CREATE_BATCH_MODE_BOOKMARKS withBoolean:false];
    forceSvgShapes_ = [self getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, FORCE_SVG_SHAPES) withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_FORCE_SVG_SHAPES withBoolean:false];
    isCompressed_ = [self getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, IS_COMPRESSED) withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_COMPRESSED withBoolean:false];
    isEncrypted_ = [self getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, IS_ENCRYPTED) withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_ENCRYPTED withBoolean:false];
    is128BitKey_ = [self getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, IS_128_BIT_KEY) withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_128_BIT_KEY withBoolean:false];
    userPassword_ = [self getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, USER_PASSWORD) withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_USER_PASSWORD];
    ownerPassword_ = [self getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, OWNER_PASSWORD) withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_OWNER_PASSWORD];
    JavaLangInteger *permissionsParameter = (JavaLangInteger *) cast_chk([((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, PERMISSIONS)], [JavaLangInteger class]);
    if (permissionsParameter != nil) {
      permissions_ = [permissionsParameter intValue];
    }
    pdfVersion_ = [self getCharacterParameterWithOrgOssPdfreporterEngineJRExporterParameter:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, PDF_VERSION) withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_PDF_VERSION];
    [self setFontMap];
    [self setSplitCharacter];
    [self setHyperlinkProducerFactory];
    pdfJavaScript_ = [self getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, PDF_JAVASCRIPT) withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_PDF_JAVASCRIPT];
    printScaling_ = [self getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, PRINT_SCALING) withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_PRINT_SCALING];
    collapseMissingBookmarkLevels_ = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_))) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperPrint_ withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_COLLAPSE_MISSING_BOOKMARK_LEVELS withBoolean:false];
    NSString *fileName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:JreLoadStatic(OrgOssPdfreporterEngineJRExporterParameter, OUTPUT_FILE_NAME)], [NSString class]);
    if (fileName == nil) {
      JavaIoFile *destFile = (JavaIoFile *) cast_chk([((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:JreLoadStatic(OrgOssPdfreporterEngineJRExporterParameter, OUTPUT_FILE)], [JavaIoFile class]);
      if (destFile == nil) {
        @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"Only export to file by file or filename is supported.");
      }
      fileName = [destFile getAbsolutePath];
    }
    [self exportToFileWithNSString:fileName];
  }
  @finally {
    [self resetExportContext];
  }
}

- (void)setFontMap {
  pdfFontMap_ = (id<JavaUtilMap>) cast_check([((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:JreLoadStatic(OrgOssPdfreporterEngineJRExporterParameter, FONT_MAP)], JavaUtilMap_class_());
}

- (void)setSplitCharacter {
  jboolean useFillSplitCharacter;
  JavaLangBoolean *useFillSplitCharacterParam = (JavaLangBoolean *) cast_chk([((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, FORCE_LINEBREAK_POLICY)], [JavaLangBoolean class]);
  if (useFillSplitCharacterParam == nil) {
    useFillSplitCharacter = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_))) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPropertiesMap] withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_FORCE_LINEBREAK_POLICY withBoolean:false];
  }
  else {
    useFillSplitCharacter = [useFillSplitCharacterParam booleanValue];
  }
}

- (void)exportToFileWithNSString:(NSString *)fileName {
  jboolean sizePageToContent = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_))) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperPrint_ withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_SIZE_PAGE_TO_CONTENT withBoolean:false];
  jboolean closeDocuments = true;
  @try {
    document_ = [((id<OrgOssPdfreporterPdfFactoryIPdfFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getPdfFactory())) newDocumentWithNSString:fileName];
    if (pdfVersion_ != nil) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setPdfVersionWithChar:[pdfVersion_ charValue]];
    }
    [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setCompressionWithBoolean:isCompressed_];
    if (isEncrypted_) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setEncryptionWithOrgOssPdfreporterPdfIEncryption_KeyLength:is128BitKey_ ? JreLoadEnum(OrgOssPdfreporterPdfIEncryption_KeyLength, ENCRYPTION_128) : JreLoadEnum(OrgOssPdfreporterPdfIEncryption_KeyLength, ENCRYPTION_40) withNSString:userPassword_ withNSString:ownerPassword_ withInt:permissions_];
    }
    if (printScaling_ != nil) {
    }
    NSString *title = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, METADATA_TITLE)], [NSString class]);
    if (title != nil) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setTitleWithNSString:title];
    }
    NSString *author = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, METADATA_AUTHOR)], [NSString class]);
    if (author != nil) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setAuthorWithNSString:author];
    }
    NSString *subject = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, METADATA_SUBJECT)], [NSString class]);
    if (subject != nil) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setSubjectWithNSString:subject];
    }
    NSString *keywords = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, METADATA_KEYWORDS)], [NSString class]);
    if (keywords != nil) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setKeywordsWithNSString:keywords];
    }
    NSString *creator = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, METADATA_CREATOR)], [NSString class]);
    if (creator != nil) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setCreatorWithNSString:creator];
    }
    else {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setCreatorWithNSString:JreStrcat("$$C", @"PDFReporter (", [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getName], ')')];
    }
    NSString *pdfaConformance = [self getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, PDFA_CONFORMANCE) withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_PDFA_CONFORMANCE];
    jboolean gotPdfa = false;
    if (pdfaConformance != nil && ![((NSString *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporterParameter_PDFA_CONFORMANCE_NONE)) equalsIgnoreCase:pdfaConformance]) {
      if ([((NSString *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporterParameter_PDFA_CONFORMANCE_1A)) equalsIgnoreCase:pdfaConformance]) {
        [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setPdfConformanceWithOrgOssPdfreporterPdfIDocument_ConformanceLevel:JreLoadEnum(OrgOssPdfreporterPdfIDocument_ConformanceLevel, PDF_1A)];
        gotPdfa = true;
      }
      else if ([((NSString *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporterParameter_PDFA_CONFORMANCE_1B)) equalsIgnoreCase:pdfaConformance]) {
        [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setPdfConformanceWithOrgOssPdfreporterPdfIDocument_ConformanceLevel:JreLoadEnum(OrgOssPdfreporterPdfIDocument_ConformanceLevel, PDF_1B)];
        gotPdfa = true;
      }
    }
    if (gotPdfa) {
    }
    [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) open];
    if (gotPdfa) {
      NSString *iccProfilePath = [self getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:JreLoadStatic(OrgOssPdfreporterEngineExportJRPdfExporterParameter, PDFA_ICC_PROFILE_PATH) withNSString:OrgOssPdfreporterEngineExportJRPdfExporterParameter_PROPERTY_PDFA_ICC_PROFILE_PATH];
      if (iccProfilePath != nil) {
      }
      else {
        @throw new_OrgOssPdfreporterEngineUtilJRPdfaIccProfileNotFoundException_init();
      }
    }
    if (pdfJavaScript_ != nil) {
    }
    for (reportIndex_ = 0; reportIndex_ < [((id<JavaUtilList>) nil_chk(jasperPrintList_)) size]; reportIndex_++) {
      [self setJasperPrintWithOrgOssPdfreporterEngineJasperPrint:[((id<JavaUtilList>) nil_chk(jasperPrintList_)) getWithInt:reportIndex_]];
      OrgOssPdfreporterEngineExportLegacyBorderOffset_setLegacyWithBoolean_([((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_))) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperPrint_ withNSString:OrgOssPdfreporterEngineExportLegacyBorderOffset_PROPERTY_LEGACY_BORDER_OFFSET withBoolean:false]);
      id<JavaUtilList> pages = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPages];
      if (pages != nil && [pages size] > 0) {
        if (isModeBatch_) {
          @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"Batchmode is not supported.");
        }
        for (jint pageIndex = startPageIndex_; pageIndex <= endPageIndex_; pageIndex++) {
          if (JavaLangThread_interrupted()) {
            @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"Current thread interrupted.");
          }
          id<OrgOssPdfreporterEngineJRPrintPage> page = [pages getWithInt:pageIndex];
          if (sizePageToContent) {
            [self newPageWithOrgOssPdfreporterEngineJRPrintPage:page];
          }
          else {
            [self newPageWithOrgOssPdfreporterEngineJRPrintPage:nil];
          }
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineCapWithOrgOssPdfreporterPdfIPage_LineCap:JreLoadEnum(OrgOssPdfreporterPdfIPage_LineCap, PROJECTING_SCUARE_END)];
          [self exportPageWithOrgOssPdfreporterEngineJRPrintPage:page];
        }
      }
    }
    closeDocuments = false;
    [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) close];
  }
  @catch (OrgOssPdfreporterPdfDocumentException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(JreStrcat("$$", @"PDF Document error : ", [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getName]), e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(JreStrcat("$$", @"Error generating PDF report : ", [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getName]), e);
  }
  @finally {
    if (closeDocuments) {
      @try {
        [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) close];
      }
      @catch (JavaLangException *e) {
      }
      @try {
      }
      @catch (JavaLangException *e) {
      }
    }
  }
}

- (void)writePageAnchorWithInt:(jint)pageIndex {
}

- (void)newPageWithOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)page {
  jint pageWidth = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageWidth];
  jint pageHeight = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight];
  if (page != nil) {
    id<JavaUtilCollection> elements = [page getElements];
    for (id<OrgOssPdfreporterEngineJRPrintElement> __strong element in nil_chk(elements)) {
      jint elementRight = [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [element getWidth];
      jint elementBottom = [element getY] + [element getHeight];
      pageWidth = pageWidth < elementRight ? elementRight : pageWidth;
      pageHeight = pageHeight < elementBottom ? elementBottom : pageHeight;
    }
    pageWidth += [((JavaLangInteger *) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getRightMargin])) intValue];
    pageHeight += [((JavaLangInteger *) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getBottomMargin])) intValue];
  }
  switch ([[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getOrientationValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeOrientationEnum_Enum_LANDSCAPE:
    pdfPage_ = [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) newPageWithOrgOssPdfreporterPdfIDocument_PageOrientation:JreLoadEnum(OrgOssPdfreporterPdfIDocument_PageOrientation, LANDSCAPE) withInt:pageHeight withInt:pageWidth];
    break;
    default:
    pdfPage_ = [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) newPageWithOrgOssPdfreporterPdfIDocument_PageOrientation:JreLoadEnum(OrgOssPdfreporterPdfIDocument_PageOrientation, PORTRAIT) withInt:pageWidth withInt:pageHeight];
    break;
  }
}

- (void)exportPageWithOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)page {
  id<JavaUtilCollection> elements = [((id<OrgOssPdfreporterEngineJRPrintPage>) nil_chk(page)) getElements];
  [self exportElementsWithJavaUtilCollection:elements];
  if (progressMonitor_ != nil) {
    [progressMonitor_ afterPageExport];
  }
}

- (void)exportElementsWithJavaUtilCollection:(id<JavaUtilCollection>)elements {
  if (elements != nil && [elements size] > 0) {
    for (id<JavaUtilIterator> it = [elements iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterEngineJRPrintElement> element = [it next];
      if (filter_ == nil || [filter_ isToExportWithOrgOssPdfreporterEngineJRPrintElement:element]) {
        if ([OrgOssPdfreporterEngineJRPrintLine_class_() isInstance:element]) {
          [self exportLineWithOrgOssPdfreporterEngineJRPrintLine:(id<OrgOssPdfreporterEngineJRPrintLine>) cast_check(element, OrgOssPdfreporterEngineJRPrintLine_class_())];
        }
        else if ([OrgOssPdfreporterEngineJRPrintRectangle_class_() isInstance:element]) {
          [self exportRectangleWithOrgOssPdfreporterEngineJRPrintRectangle:(id<OrgOssPdfreporterEngineJRPrintRectangle>) cast_check(element, OrgOssPdfreporterEngineJRPrintRectangle_class_())];
        }
        else if ([OrgOssPdfreporterEngineJRPrintEllipse_class_() isInstance:element]) {
          [self exportEllipseWithOrgOssPdfreporterEngineJRPrintEllipse:(id<OrgOssPdfreporterEngineJRPrintEllipse>) cast_check(element, OrgOssPdfreporterEngineJRPrintEllipse_class_())];
        }
        else if ([OrgOssPdfreporterEngineJRPrintImage_class_() isInstance:element]) {
          [self exportImageWithOrgOssPdfreporterEngineJRPrintImage:(id<OrgOssPdfreporterEngineJRPrintImage>) cast_check(element, OrgOssPdfreporterEngineJRPrintImage_class_())];
        }
        else if ([OrgOssPdfreporterEngineJRPrintText_class_() isInstance:element]) {
          [self exportTextWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>) cast_check(element, OrgOssPdfreporterEngineJRPrintText_class_())];
        }
        else if ([OrgOssPdfreporterEngineJRPrintFrame_class_() isInstance:element]) {
          [self exportFrameWithOrgOssPdfreporterEngineJRPrintFrame:(id<OrgOssPdfreporterEngineJRPrintFrame>) cast_check(element, OrgOssPdfreporterEngineJRPrintFrame_class_())];
        }
        else if ([OrgOssPdfreporterEngineJRGenericPrintElement_class_() isInstance:element]) {
          [self exportGenericElementWithOrgOssPdfreporterEngineJRGenericPrintElement:(id<OrgOssPdfreporterEngineJRGenericPrintElement>) cast_check(element, OrgOssPdfreporterEngineJRGenericPrintElement_class_())];
        }
      }
    }
  }
}

- (void)exportLineWithOrgOssPdfreporterEngineJRPrintLine:(id<OrgOssPdfreporterEngineJRPrintLine>)line {
  jfloat lineWidth = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getLinePen])) getLineWidth])) floatValue];
  if (lineWidth > 0.0f) {
    OrgOssPdfreporterEngineExportJRPdfExporter_preparePenWithOrgOssPdfreporterPdfIPage_withOrgOssPdfreporterEngineJRPen_withOrgOssPdfreporterPdfIPage_LineCap_(pdfPage_, [line getLinePen], JreLoadEnum(OrgOssPdfreporterPdfIPage_LineCap, BUTT_END));
    if ([line getWidth] == 1) {
      if ([line getHeight] != 1) {
        if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([line getLinePen])) getLineStyleValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeLineStyleEnum, DOUBLE)) {
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[line getX] + [self getOffsetX] + 0.5f - lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY]];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[line getX] + [self getOffsetX] + 0.5f - lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - [line getHeight]];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[line getX] + [self getOffsetX] + 0.5f + lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY]];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[line getX] + [self getOffsetX] + 0.5f + lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - [line getHeight]];
        }
        else {
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[line getX] + [self getOffsetX] + 0.5f withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY]];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[line getX] + [self getOffsetX] + 0.5f withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - [line getHeight]];
        }
      }
    }
    else {
      if ([line getHeight] == 1) {
        if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([line getLinePen])) getLineStyleValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeLineStyleEnum, DOUBLE)) {
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[line getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - 0.5f + lineWidth / 3];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[line getX] + [self getOffsetX] + [line getWidth] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - 0.5f + lineWidth / 3];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[line getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - 0.5f - lineWidth / 3];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[line getX] + [self getOffsetX] + [line getWidth] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - 0.5f - lineWidth / 3];
        }
        else {
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[line getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - 0.5f];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[line getX] + [self getOffsetX] + [line getWidth] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - 0.5f];
        }
      }
      else {
        if ([line getDirectionValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeLineDirectionEnum, TOP_DOWN)) {
          if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([line getLinePen])) getLineStyleValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeLineStyleEnum, DOUBLE)) {
            jdouble xtrans = lineWidth / (3 * JavaLangMath_sqrtWithDouble_(1 + JavaLangMath_powWithDouble_withDouble_([line getWidth], 2) / JavaLangMath_powWithDouble_withDouble_([line getHeight], 2)));
            jdouble ytrans = lineWidth / (3 * JavaLangMath_sqrtWithDouble_(1 + JavaLangMath_powWithDouble_withDouble_([line getHeight], 2) / JavaLangMath_powWithDouble_withDouble_([line getWidth], 2)));
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[line getX] + [self getOffsetX] + (jfloat) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] + (jfloat) ytrans];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[line getX] + [self getOffsetX] + [line getWidth] + (jfloat) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - [line getHeight] + (jfloat) ytrans];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[line getX] + [self getOffsetX] - (jfloat) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - (jfloat) ytrans];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[line getX] + [self getOffsetX] + [line getWidth] - (jfloat) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - [line getHeight] - (jfloat) ytrans];
          }
          else {
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[line getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY]];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[line getX] + [self getOffsetX] + [line getWidth] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - [line getHeight]];
          }
        }
        else {
          if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([line getLinePen])) getLineStyleValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeLineStyleEnum, DOUBLE)) {
            jdouble xtrans = lineWidth / (3 * JavaLangMath_sqrtWithDouble_(1 + JavaLangMath_powWithDouble_withDouble_([line getWidth], 2) / JavaLangMath_powWithDouble_withDouble_([line getHeight], 2)));
            jdouble ytrans = lineWidth / (3 * JavaLangMath_sqrtWithDouble_(1 + JavaLangMath_powWithDouble_withDouble_([line getHeight], 2) / JavaLangMath_powWithDouble_withDouble_([line getWidth], 2)));
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[line getX] + [self getOffsetX] + (jfloat) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - [line getHeight] - (jfloat) ytrans];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[line getX] + [self getOffsetX] + [line getWidth] + (jfloat) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - (jfloat) ytrans];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[line getX] + [self getOffsetX] - (jfloat) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - [line getHeight] + (jfloat) ytrans];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[line getX] + [self getOffsetX] + [line getWidth] - (jfloat) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] + (jfloat) ytrans];
          }
          else {
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[line getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY] - [line getHeight]];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[line getX] + [self getOffsetX] + [line getWidth] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [line getY] - [self getOffsetY]];
          }
        }
      }
    }
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineDashWithIntArray:nil withInt:0];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineCapWithOrgOssPdfreporterPdfIPage_LineCap:JreLoadEnum(OrgOssPdfreporterPdfIPage_LineCap, PROJECTING_SCUARE_END)];
  }
}

- (void)exportRectangleWithOrgOssPdfreporterEngineJRPrintRectangle:(id<OrgOssPdfreporterEngineJRPrintRectangle>)rectangle {
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setRGBColorFillWithOrgOssPdfreporterGeometryIColor:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getBackcolor]];
  OrgOssPdfreporterEngineExportJRPdfExporter_preparePenWithOrgOssPdfreporterPdfIPage_withOrgOssPdfreporterEngineJRPen_withOrgOssPdfreporterPdfIPage_LineCap_(pdfPage_, [rectangle getLinePen], JreLoadEnum(OrgOssPdfreporterPdfIPage_LineCap, PROJECTING_SCUARE_END));
  jfloat lineWidth = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([rectangle getLinePen])) getLineWidth])) floatValue];
  jfloat lineOffset = OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_([rectangle getLinePen]);
  if ([rectangle getModeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeModeEnum, OPAQUE)) {
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) roundRectangleWithFloat:[rectangle getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [rectangle getY] - [self getOffsetY] - [rectangle getHeight] withFloat:[rectangle getWidth] withFloat:[rectangle getHeight] withInt:[rectangle getRadius]];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) fill];
  }
  if (lineWidth > 0.0f) {
    if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([rectangle getLinePen])) getLineStyleValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeLineStyleEnum, DOUBLE)) {
      OrgOssPdfreporterEngineExportJRPdfExporter_drawRoundRectWithOrgOssPdfreporterPdfIPage_withFloat_withFloat_withFloat_withFloat_withInt_(pdfPage_, [rectangle getX] + [self getOffsetX] - lineWidth / 3, [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [rectangle getY] - [self getOffsetY] - [rectangle getHeight] - lineWidth / 3, [rectangle getWidth] + 2 * lineWidth / 3, [rectangle getHeight] + 2 * lineWidth / 3, [rectangle getRadius]);
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
      OrgOssPdfreporterEngineExportJRPdfExporter_drawRoundRectWithOrgOssPdfreporterPdfIPage_withFloat_withFloat_withFloat_withFloat_withInt_(pdfPage_, [rectangle getX] + [self getOffsetX] + lineWidth / 3, [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [rectangle getY] - [self getOffsetY] - [rectangle getHeight] + lineWidth / 3, [rectangle getWidth] - 2 * lineWidth / 3, [rectangle getHeight] - 2 * lineWidth / 3, [rectangle getRadius]);
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
    else {
      OrgOssPdfreporterEngineExportJRPdfExporter_drawRoundRectWithOrgOssPdfreporterPdfIPage_withFloat_withFloat_withFloat_withFloat_withInt_(pdfPage_, [rectangle getX] + [self getOffsetX] + lineOffset, [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [rectangle getY] - [self getOffsetY] - [rectangle getHeight] + lineOffset, [rectangle getWidth] - 2 * lineOffset, [rectangle getHeight] - 2 * lineOffset, [rectangle getRadius]);
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
  }
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineDashWithIntArray:nil withInt:0];
}

- (void)exportEllipseWithOrgOssPdfreporterEngineJRPrintEllipse:(id<OrgOssPdfreporterEngineJRPrintEllipse>)ellipse {
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setRGBColorFillWithOrgOssPdfreporterGeometryIColor:[((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getBackcolor]];
  OrgOssPdfreporterEngineExportJRPdfExporter_preparePenWithOrgOssPdfreporterPdfIPage_withOrgOssPdfreporterEngineJRPen_withOrgOssPdfreporterPdfIPage_LineCap_(pdfPage_, [ellipse getLinePen], JreLoadEnum(OrgOssPdfreporterPdfIPage_LineCap, PROJECTING_SCUARE_END));
  jfloat lineWidth = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([ellipse getLinePen])) getLineWidth])) floatValue];
  jfloat lineOffset = OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_([ellipse getLinePen]);
  if ([ellipse getModeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeModeEnum, OPAQUE)) {
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) ellipseWithFloat:[ellipse getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [ellipse getY] - [self getOffsetY] - [ellipse getHeight] withFloat:[ellipse getX] + [self getOffsetX] + [ellipse getWidth] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [ellipse getY] - [self getOffsetY]];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) fill];
  }
  if (lineWidth > 0.0f) {
    if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([ellipse getLinePen])) getLineStyleValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeLineStyleEnum, DOUBLE)) {
      OrgOssPdfreporterEngineExportJRPdfExporter_drawEllipseWithOrgOssPdfreporterPdfIPage_withFloat_withFloat_withFloat_withFloat_(pdfPage_, [ellipse getX] + [self getOffsetX] - lineWidth / 3, [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [ellipse getY] - [self getOffsetY] - [ellipse getHeight] - lineWidth / 3, [ellipse getX] + [self getOffsetX] + [ellipse getWidth] + lineWidth / 3, [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [ellipse getY] - [self getOffsetY] + lineWidth / 3);
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
      OrgOssPdfreporterEngineExportJRPdfExporter_drawEllipseWithOrgOssPdfreporterPdfIPage_withFloat_withFloat_withFloat_withFloat_(pdfPage_, [ellipse getX] + [self getOffsetX] + lineWidth / 3, [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [ellipse getY] - [self getOffsetY] - [ellipse getHeight] + lineWidth / 3, [ellipse getX] + [self getOffsetX] + [ellipse getWidth] - lineWidth / 3, [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [ellipse getY] - [self getOffsetY] - lineWidth / 3);
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
    else {
      OrgOssPdfreporterEngineExportJRPdfExporter_drawEllipseWithOrgOssPdfreporterPdfIPage_withFloat_withFloat_withFloat_withFloat_(pdfPage_, [ellipse getX] + [self getOffsetX] + lineOffset, [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [ellipse getY] - [self getOffsetY] - [ellipse getHeight] + lineOffset, [ellipse getX] + [self getOffsetX] + [ellipse getWidth] - lineOffset, [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [ellipse getY] - [self getOffsetY] - lineOffset);
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
  }
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineDashWithIntArray:nil withInt:0];
}

- (void)exportImageWithOrgOssPdfreporterEngineJRPrintImage:(id<OrgOssPdfreporterEngineJRPrintImage>)printImage {
  if ([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getModeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeModeEnum, OPAQUE)) {
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setRGBColorFillWithOrgOssPdfreporterGeometryIColor:[printImage getBackcolor]];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) rectangleWithFloat:[printImage getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [printImage getY] - [self getOffsetY] withFloat:[printImage getWidth] withFloat:-[printImage getHeight]];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) fill];
  }
  jint topPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([printImage getLineBox])) getTopPadding])) intValue];
  jint leftPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([printImage getLineBox])) getLeftPadding])) intValue];
  jint bottomPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([printImage getLineBox])) getBottomPadding])) intValue];
  jint rightPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([printImage getLineBox])) getRightPadding])) intValue];
  jint availableImageWidth = [printImage getWidth] - leftPadding - rightPadding;
  availableImageWidth = (availableImageWidth < 0) ? 0 : availableImageWidth;
  jint availableImageHeight = [printImage getHeight] - topPadding - bottomPadding;
  availableImageHeight = (availableImageHeight < 0) ? 0 : availableImageHeight;
  id<OrgOssPdfreporterEngineRenderable> renderer = [printImage getRenderable];
  if (renderer != nil) {
    jint xoffset = 0;
    jint yoffset = 0;
    OrgOssPdfreporterPdfIPage_ScaleMode *scaleMode = nil;
    id<OrgOssPdfreporterGeometryIDimension> imageDimension = [renderer getDimensionWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_];
    if ([renderer getTypeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeRenderableTypeEnum, IMAGE)) {
      jfloat xalignFactor = OrgOssPdfreporterEngineExportJRPdfExporter_getXAlignFactorWithOrgOssPdfreporterEngineJRPrintImage_(self, printImage);
      jfloat yalignFactor = OrgOssPdfreporterEngineExportJRPdfExporter_getYAlignFactorWithOrgOssPdfreporterEngineJRPrintImage_(self, printImage);
      switch ([[printImage getScaleImageValue] ordinal]) {
        case OrgOssPdfreporterEngineTypeScaleImageEnum_Enum_CLIP:
        {
          scaleMode = JreLoadEnum(OrgOssPdfreporterPdfIPage_ScaleMode, NONE);
          xoffset = JreFpToInt((xalignFactor * (availableImageWidth - [((id<OrgOssPdfreporterGeometryIDimension>) nil_chk(imageDimension)) getWidth])));
          yoffset = JreFpToInt((yalignFactor * (availableImageHeight - [imageDimension getHeight])));
          if (xalignFactor != 0 || yalignFactor != 0) {
            [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger)) finestWithNSString:JreStrcat("$F$I$F$I", @"xoffset: ", xalignFactor, @" * (", availableImageWidth, @" - ", [imageDimension getWidth], @") = ", xoffset)];
            [OrgOssPdfreporterEngineExportJRPdfExporter_logger finestWithNSString:JreStrcat("$F$I$F$I", @"yoffset: ", yalignFactor, @" * (", availableImageHeight, @" - ", [imageDimension getHeight], @") = ", yoffset)];
          }
          break;
        }
        case OrgOssPdfreporterEngineTypeScaleImageEnum_Enum_FILL_FRAME:
        {
          scaleMode = JreLoadEnum(OrgOssPdfreporterPdfIPage_ScaleMode, SCALE);
          break;
        }
        case OrgOssPdfreporterEngineTypeScaleImageEnum_Enum_RETAIN_SHAPE:
        default:
        {
          scaleMode = JreLoadEnum(OrgOssPdfreporterPdfIPage_ScaleMode, SIZE);
          jfloat scaleX = availableImageWidth * 1.0f / [((id<OrgOssPdfreporterGeometryIDimension>) nil_chk(imageDimension)) getWidth];
          jfloat scaleY = availableImageHeight * 1.0f / [imageDimension getHeight];
          jfloat scale_ = JavaLangMath_minWithFloat_withFloat_(scaleX, scaleY);
          jfloat scaledWidth = [imageDimension getWidth] * scale_;
          jfloat scaledHeight = [imageDimension getHeight] * scale_;
          xoffset = JreFpToInt((xalignFactor * (availableImageWidth - scaledWidth)));
          yoffset = JreFpToInt((yalignFactor * (availableImageHeight - scaledHeight)));
          if (xalignFactor != 0 || yalignFactor != 0) {
            [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger)) finestWithNSString:JreStrcat("$F$I$F$I", @"xoffset: ", xalignFactor, @" * (", availableImageWidth, @" - ", scaledWidth, @") = ", xoffset)];
            [OrgOssPdfreporterEngineExportJRPdfExporter_logger finestWithNSString:JreStrcat("$F$I$F$I", @"yoffset: ", yalignFactor, @" * (", availableImageHeight, @" - ", scaledHeight, @") = ", yoffset)];
          }
          break;
        }
      }
    }
    else {
      @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"SVG Images not supported.");
    }
    jfloat x = [printImage getX] + [self getOffsetX] + leftPadding;
    jfloat y = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [printImage getY] - [printImage getHeight] - [self getOffsetY] + topPadding;
    jfloat width = [printImage getWidth] - leftPadding - rightPadding;
    jfloat height = [printImage getHeight] - topPadding - bottomPadding;
    id<OrgOssPdfreporterImageIImage> image = [renderer getImageWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_];
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger)) finestWithNSString:JreStrcat("$F$I$F$I$F$F$@", @"drawImage(x: ", x, @"(+", xoffset, @"), y: ", y, @"(+", yoffset, @"), width: ", width, @", height: ", height, @", mode: ", scaleMode)];
    if (xoffset >= 0 && yoffset >= 0) {
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) drawWithOrgOssPdfreporterImageIImage:image withFloat:x + xoffset withFloat:y + yoffset withFloat:width withFloat:height withOrgOssPdfreporterPdfIPage_ScaleMode:scaleMode];
    }
    else {
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) drawCroppedWithOrgOssPdfreporterImageIImage:image withFloat:xoffset withFloat:yoffset withFloat:x withFloat:y withFloat:width withFloat:height];
    }
  }
  if ([((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([printImage getLineBox])) getTopPen])) getLineWidth])) floatValue] <= 0.0f && [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([printImage getLineBox])) getLeftPen])) getLineWidth])) floatValue] <= 0.0f && [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([printImage getLineBox])) getBottomPen])) getLineWidth])) floatValue] <= 0.0f && [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([printImage getLineBox])) getRightPen])) getLineWidth])) floatValue] <= 0.0f) {
    if ([((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([printImage getLinePen])) getLineWidth])) floatValue] > 0.0f) {
      [self exportPenWithOrgOssPdfreporterEngineJRPen:[printImage getLinePen] withOrgOssPdfreporterEngineJRPrintElement:printImage];
    }
  }
  else {
    [self exportBoxWithOrgOssPdfreporterEngineJRLineBox:[printImage getLineBox] withOrgOssPdfreporterEngineJRPrintElement:printImage];
  }
}

- (jfloat)getXAlignFactorWithOrgOssPdfreporterEngineJRPrintImage:(id<OrgOssPdfreporterEngineJRPrintImage>)printImage {
  return OrgOssPdfreporterEngineExportJRPdfExporter_getXAlignFactorWithOrgOssPdfreporterEngineJRPrintImage_(self, printImage);
}

- (jfloat)getYAlignFactorWithOrgOssPdfreporterEngineJRPrintImage:(id<OrgOssPdfreporterEngineJRPrintImage>)printImage {
  return OrgOssPdfreporterEngineExportJRPdfExporter_getYAlignFactorWithOrgOssPdfreporterEngineJRPrintImage_(self, printImage);
}

- (OrgOssPdfreporterTextParagraph *)getParagraphWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)as
                                                                                        withNSString:(NSString *)text
                                                              withOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)textElement {
  OrgOssPdfreporterTextParagraph *paragraph = new_OrgOssPdfreporterTextParagraph_init();
  jint runLimit = 0;
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> iterator = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(as)) getIterator];
  jboolean firstText = true;
  while (runLimit < ((jint) [((NSString *) nil_chk(text)) length]) && (runLimit = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getRunLimit]) <= ((jint) [text length])) {
    id<JavaUtilMap> attributes = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getAttributes];
    OrgOssPdfreporterTextParagraphText *paragraphText = [self getParagrapghTextWithJavaUtilMap:attributes withNSString:[text substring:[iterator getIndex] endIndex:runLimit]];
    if (firstText) {
    }
    [paragraph addWithOrgOssPdfreporterTextParagraphText:paragraphText];
    [iterator setIndexWithInt:runLimit];
    firstText = false;
  }
  return paragraph;
}

- (OrgOssPdfreporterTextParagraphText *)getParagrapghTextWithJavaUtilMap:(id<JavaUtilMap>)attributes
                                                            withNSString:(NSString *)text {
  id<OrgOssPdfreporterFontIFont> font = [self getFontWithJavaUtilMap:attributes];
  id<OrgOssPdfreporterGeometryIColor> forecolor = (id<OrgOssPdfreporterGeometryIColor>) cast_check([((id<JavaUtilMap>) nil_chk(attributes)) getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, FOREGROUND)], OrgOssPdfreporterGeometryIColor_class_());
  id<OrgOssPdfreporterGeometryIColor> backcolor = (id<OrgOssPdfreporterGeometryIColor>) cast_check([attributes getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, BACKGROUND)], OrgOssPdfreporterGeometryIColor_class_());
  jboolean underline = [self hasUnderlineWithJavaUtilMap:attributes];
  jboolean strikethrough = [self hasStrikethroughWithJavaUtilMap:attributes];
  id<OrgOssPdfreporterTextIPositionedLine> line = underline ? OrgOssPdfreporterTextPositionedLined_newUnderline() : strikethrough ? OrgOssPdfreporterTextPositionedLined_newStrikethrough() : nil;
  return new_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterTextIPositionedLine_(text, font, forecolor, backcolor, line);
}

- (jboolean)hasUnderlineWithJavaUtilMap:(id<JavaUtilMap>)textAttributes {
  JavaLangInteger *underline = (JavaLangInteger *) cast_chk([((id<JavaUtilMap>) nil_chk(textAttributes)) getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, UNDERLINE)], [JavaLangInteger class]);
  return [((JavaLangInteger *) nil_chk(JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, UNDERLINE_ON))) isEqual:underline];
}

- (jboolean)hasStrikethroughWithJavaUtilMap:(id<JavaUtilMap>)textAttributes {
  JavaLangBoolean *strike = (JavaLangBoolean *) cast_chk([((id<JavaUtilMap>) nil_chk(textAttributes)) getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, STRIKETHROUGH)], [JavaLangBoolean class]);
  return [((JavaLangBoolean *) nil_chk(JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, STRIKETHROUGH_ON))) isEqual:strike];
}

- (jboolean)hasSupersciptWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  return OrgOssPdfreporterEngineExportJRPdfExporter_hasSupersciptWithJavaUtilMap_(self, attributes);
}

- (jboolean)hasSubsciptWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  return OrgOssPdfreporterEngineExportJRPdfExporter_hasSubsciptWithJavaUtilMap_(self, attributes);
}

- (id<OrgOssPdfreporterFontIFont>)getFontWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  id<OrgOssPdfreporterEngineJRFont> jrFont = new_OrgOssPdfreporterEngineBaseJRBaseFont_initWithJavaUtilMap_(attributes);
  return OrgOssPdfreporterEngineExportJRPdfExporter_toPdfFontWithOrgOssPdfreporterEngineJRFont_withBoolean_withBoolean_withBoolean_withBoolean_(jrFont, [self hasUnderlineWithJavaUtilMap:attributes], [self hasStrikethroughWithJavaUtilMap:attributes], OrgOssPdfreporterEngineExportJRPdfExporter_hasSupersciptWithJavaUtilMap_(self, attributes), OrgOssPdfreporterEngineExportJRPdfExporter_hasSubsciptWithJavaUtilMap_(self, attributes));
}

- (void)exportTextWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text {
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [OrgOssPdfreporterEngineExportJRPdfExporter_logger finestWithNSString:JreStrcat("$I$I$I$F$$$", @"X: ", [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getX], @", Y: ", [text getY], @", Width: ", [text getWidth], @", Height: ", [text getTextHeight], @", Text: ['", [text getFullText], @"']")];
  }
  OrgOssPdfreporterEngineExportAbstractPdfTextRenderer *textRenderer = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getLeadingOffset] == 0 ? new_OrgOssPdfreporterEngineExportPdfTextRenderer_initWithOrgOssPdfreporterEngineJasperReportsContext_withBoolean_(jasperReportsContext_, [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getBooleanPropertyWithNSString:OrgOssPdfreporterEngineUtilJRStyledText_PROPERTY_AWT_IGNORE_MISSING_FONT]) : new_OrgOssPdfreporterEngineExportSimplePdfTextRenderer_initWithOrgOssPdfreporterEngineJasperReportsContext_withBoolean_(jasperReportsContext_, [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getBooleanPropertyWithNSString:OrgOssPdfreporterEngineUtilJRStyledText_PROPERTY_AWT_IGNORE_MISSING_FONT]);
  [textRenderer initialize__WithOrgOssPdfreporterEngineExportJRPdfExporter:self withOrgOssPdfreporterPdfIPage:pdfPage_ withOrgOssPdfreporterEngineJRPrintText:text withInt:[self getOffsetX] withInt:[self getOffsetY]];
  OrgOssPdfreporterEngineUtilJRStyledText *styledText = [textRenderer getStyledText];
  if (styledText == nil) {
    return;
  }
  OrgOssPdfreporterGeometryFactoryIGeometryFactory_Rotate90 *angle = JreLoadEnum(OrgOssPdfreporterGeometryFactoryIGeometryFactory_Rotate90, DEGREE_360);
  switch ([[text getRotationValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_LEFT:
    {
      angle = JreLoadEnum(OrgOssPdfreporterGeometryFactoryIGeometryFactory_Rotate90, DEGREE_90);
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_RIGHT:
    {
      angle = JreLoadEnum(OrgOssPdfreporterGeometryFactoryIGeometryFactory_Rotate90, DEGREE_270);
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_UPSIDE_DOWN:
    {
      angle = JreLoadEnum(OrgOssPdfreporterGeometryFactoryIGeometryFactory_Rotate90, DEGREE_180);
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_NONE:
    default:
    {
    }
  }
  jboolean doRestoreState = false;
  if ([text getRotationValue] != JreLoadEnum(OrgOssPdfreporterEngineTypeRotationEnum, NONE)) {
    id<OrgOssPdfreporterGeometryIAffineTransformMatrix> matrix = [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getGeometryFactory())) newAffineTransformMatrixWithFloat:[textRenderer getX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [textRenderer getY] withOrgOssPdfreporterGeometryFactoryIGeometryFactory_Rotate90:angle];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) transformWithOrgOssPdfreporterGeometryIAffineTransformMatrix:matrix];
    doRestoreState = true;
  }
  if ([text getModeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeModeEnum, OPAQUE)) {
    id<OrgOssPdfreporterGeometryIColor> backcolor = [text getBackcolor];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setRGBColorFillWithOrgOssPdfreporterGeometryIColor:backcolor];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) rectangleWithFloat:[textRenderer getX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [textRenderer getY] withFloat:[textRenderer getWidth] withFloat:-[textRenderer getHeight]];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) fill];
  }
  if ([styledText length] > 0) {
    [textRenderer render];
  }
  if (doRestoreState) {
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) restoreTransformation];
  }
  [self exportBoxWithOrgOssPdfreporterEngineJRLineBox:[text getLineBox] withOrgOssPdfreporterEngineJRPrintElement:text];
}

- (void)exportBoxWithOrgOssPdfreporterEngineJRLineBox:(id<OrgOssPdfreporterEngineJRLineBox>)box
            withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  [self exportTopPenWithOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getTopPen] withOrgOssPdfreporterEngineJRPen:[box getLeftPen] withOrgOssPdfreporterEngineJRPen:[box getRightPen] withOrgOssPdfreporterEngineJRPrintElement:element];
  [self exportLeftPenWithOrgOssPdfreporterEngineJRPen:[box getTopPen] withOrgOssPdfreporterEngineJRPen:[box getLeftPen] withOrgOssPdfreporterEngineJRPen:[box getBottomPen] withOrgOssPdfreporterEngineJRPrintElement:element];
  [self exportBottomPenWithOrgOssPdfreporterEngineJRPen:[box getLeftPen] withOrgOssPdfreporterEngineJRPen:[box getBottomPen] withOrgOssPdfreporterEngineJRPen:[box getRightPen] withOrgOssPdfreporterEngineJRPrintElement:element];
  [self exportRightPenWithOrgOssPdfreporterEngineJRPen:[box getTopPen] withOrgOssPdfreporterEngineJRPen:[box getBottomPen] withOrgOssPdfreporterEngineJRPen:[box getRightPen] withOrgOssPdfreporterEngineJRPrintElement:element];
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineDashWithIntArray:nil withInt:0];
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineCapWithOrgOssPdfreporterPdfIPage_LineCap:JreLoadEnum(OrgOssPdfreporterPdfIPage_LineCap, PROJECTING_SCUARE_END)];
}

- (void)exportPenWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)pen
        withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  [self exportTopPenWithOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPrintElement:element];
  [self exportLeftPenWithOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPrintElement:element];
  [self exportBottomPenWithOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPrintElement:element];
  [self exportRightPenWithOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPrintElement:element];
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineDashWithIntArray:nil withInt:0];
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineCapWithOrgOssPdfreporterPdfIPage_LineCap:JreLoadEnum(OrgOssPdfreporterPdfIPage_LineCap, PROJECTING_SCUARE_END)];
}

- (void)exportTopPenWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)topPen
                    withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)leftPen
                    withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)rightPen
           withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  if ([((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(topPen)) getLineWidth])) floatValue] > 0.0f) {
    jfloat leftOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(leftPen)) getLineWidth])) floatValue] / 2 - OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_(leftPen);
    jfloat rightOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(rightPen)) getLineWidth])) floatValue] / 2 - OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_(rightPen);
    OrgOssPdfreporterEngineExportJRPdfExporter_preparePenWithOrgOssPdfreporterPdfIPage_withOrgOssPdfreporterEngineJRPen_withOrgOssPdfreporterPdfIPage_LineCap_(pdfPage_, topPen, JreLoadEnum(OrgOssPdfreporterPdfIPage_LineCap, BUTT_END));
    if ([topPen getLineStyleValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeLineStyleEnum, DOUBLE)) {
      jfloat topOffset = [((JavaLangFloat *) nil_chk([topPen getLineWidth])) floatValue];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] - leftOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] + topOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[element getX] + [self getOffsetX] + [element getWidth] + rightOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] + topOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[element getX] + [self getOffsetX] + leftOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - topOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[element getX] + [self getOffsetX] + [element getWidth] - rightOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - topOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
    else {
      jfloat topOffset = OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_(topPen);
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] - leftOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - topOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[element getX] + [self getOffsetX] + [element getWidth] + rightOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - topOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
  }
}

- (void)exportLeftPenWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)topPen
                     withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)leftPen
                     withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)bottomPen
            withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  if ([((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(leftPen)) getLineWidth])) floatValue] > 0.0f) {
    jfloat topOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(topPen)) getLineWidth])) floatValue] / 2 - OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_(topPen);
    jfloat bottomOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(bottomPen)) getLineWidth])) floatValue] / 2 - OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_(bottomPen);
    OrgOssPdfreporterEngineExportJRPdfExporter_preparePenWithOrgOssPdfreporterPdfIPage_withOrgOssPdfreporterEngineJRPen_withOrgOssPdfreporterPdfIPage_LineCap_(pdfPage_, leftPen, JreLoadEnum(OrgOssPdfreporterPdfIPage_LineCap, BUTT_END));
    if ([leftPen getLineStyleValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeLineStyleEnum, DOUBLE)) {
      jfloat leftOffset = [((JavaLangFloat *) nil_chk([leftPen getLineWidth])) floatValue];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] - leftOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] + topOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[element getX] + [self getOffsetX] - leftOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - [element getHeight] - bottomOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[element getX] + [self getOffsetX] + leftOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - topOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[element getX] + [self getOffsetX] + leftOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - [element getHeight] + bottomOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
    else {
      jfloat leftOffset = OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_(leftPen);
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + leftOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] + topOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[element getX] + [self getOffsetX] + leftOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - [element getHeight] - bottomOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
  }
}

- (void)exportBottomPenWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)leftPen
                       withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)bottomPen
                       withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)rightPen
              withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  if ([((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(bottomPen)) getLineWidth])) floatValue] > 0.0f) {
    jfloat leftOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(leftPen)) getLineWidth])) floatValue] / 2 - OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_(leftPen);
    jfloat rightOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(rightPen)) getLineWidth])) floatValue] / 2 - OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_(rightPen);
    OrgOssPdfreporterEngineExportJRPdfExporter_preparePenWithOrgOssPdfreporterPdfIPage_withOrgOssPdfreporterEngineJRPen_withOrgOssPdfreporterPdfIPage_LineCap_(pdfPage_, bottomPen, JreLoadEnum(OrgOssPdfreporterPdfIPage_LineCap, BUTT_END));
    if ([bottomPen getLineStyleValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeLineStyleEnum, DOUBLE)) {
      jfloat bottomOffset = [((JavaLangFloat *) nil_chk([bottomPen getLineWidth])) floatValue];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] - leftOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - [element getHeight] - bottomOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[element getX] + [self getOffsetX] + [element getWidth] + rightOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - [element getHeight] - bottomOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[element getX] + [self getOffsetX] + leftOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - [element getHeight] + bottomOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[element getX] + [self getOffsetX] + [element getWidth] - rightOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - [element getHeight] + bottomOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
    else {
      jfloat bottomOffset = OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_(bottomPen);
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] - leftOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - [element getHeight] + bottomOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[element getX] + [self getOffsetX] + [element getWidth] + rightOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - [element getHeight] + bottomOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
  }
}

- (void)exportRightPenWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)topPen
                      withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)bottomPen
                      withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)rightPen
             withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  if ([((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(rightPen)) getLineWidth])) floatValue] > 0.0f) {
    jfloat topOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(topPen)) getLineWidth])) floatValue] / 2 - OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_(topPen);
    jfloat bottomOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(bottomPen)) getLineWidth])) floatValue] / 2 - OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_(bottomPen);
    OrgOssPdfreporterEngineExportJRPdfExporter_preparePenWithOrgOssPdfreporterPdfIPage_withOrgOssPdfreporterEngineJRPen_withOrgOssPdfreporterPdfIPage_LineCap_(pdfPage_, rightPen, JreLoadEnum(OrgOssPdfreporterPdfIPage_LineCap, BUTT_END));
    if ([rightPen getLineStyleValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeLineStyleEnum, DOUBLE)) {
      jfloat rightOffset = [((JavaLangFloat *) nil_chk([rightPen getLineWidth])) floatValue];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [element getWidth] + rightOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] + topOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[element getX] + [self getOffsetX] + [element getWidth] + rightOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - [element getHeight] - bottomOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[element getX] + [self getOffsetX] + [element getWidth] - rightOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - topOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[element getX] + [self getOffsetX] + [element getWidth] - rightOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - [element getHeight] + bottomOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
    else {
      jfloat rightOffset = OrgOssPdfreporterEngineExportLegacyBorderOffset_getOffsetWithOrgOssPdfreporterEngineJRPen_(rightPen);
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [element getWidth] - rightOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] + topOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[element getX] + [self getOffsetX] + [element getWidth] - rightOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [element getY] - [self getOffsetY] - [element getHeight] - bottomOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
  }
}

+ (IOSIntArray *)toDashPatternWithFloat:(jfloat)on
                              withFloat:(jfloat)off {
  return OrgOssPdfreporterEngineExportJRPdfExporter_toDashPatternWithFloat_withFloat_(on, off);
}

+ (void)drawRoundRectWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)aPdfPage
                                         withFloat:(jfloat)x
                                         withFloat:(jfloat)y
                                         withFloat:(jfloat)width
                                         withFloat:(jfloat)height
                                           withInt:(jint)radius {
  OrgOssPdfreporterEngineExportJRPdfExporter_drawRoundRectWithOrgOssPdfreporterPdfIPage_withFloat_withFloat_withFloat_withFloat_withInt_(aPdfPage, x, y, width, height, radius);
}

+ (void)drawEllipseWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)aPdfPage
                                       withFloat:(jfloat)x1
                                       withFloat:(jfloat)y1
                                       withFloat:(jfloat)x2
                                       withFloat:(jfloat)y2 {
  OrgOssPdfreporterEngineExportJRPdfExporter_drawEllipseWithOrgOssPdfreporterPdfIPage_withFloat_withFloat_withFloat_withFloat_(aPdfPage, x1, y1, x2, y2);
}

+ (id<OrgOssPdfreporterFontIFont>)toPdfFontWithOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)font
                                                                 withBoolean:(jboolean)underline
                                                                 withBoolean:(jboolean)strikethrough
                                                                 withBoolean:(jboolean)superscript
                                                                 withBoolean:(jboolean)subscript {
  return OrgOssPdfreporterEngineExportJRPdfExporter_toPdfFontWithOrgOssPdfreporterEngineJRFont_withBoolean_withBoolean_withBoolean_withBoolean_(font, underline, strikethrough, superscript, subscript);
}

+ (void)drawParagraphWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)aPdfPage
                withOrgOssPdfreporterTextParagraph:(OrgOssPdfreporterTextParagraph *)paragraph
                                         withFloat:(jfloat)llx
                                         withFloat:(jfloat)lly
                                         withFloat:(jfloat)urx
                                         withFloat:(jfloat)ury
                                         withFloat:(jfloat)leading
      withOrgOssPdfreporterTextHorizontalAlignment:(OrgOssPdfreporterTextHorizontalAlignment *)alignment {
  OrgOssPdfreporterEngineExportJRPdfExporter_drawParagraphWithOrgOssPdfreporterPdfIPage_withOrgOssPdfreporterTextParagraph_withFloat_withFloat_withFloat_withFloat_withFloat_withOrgOssPdfreporterTextHorizontalAlignment_(aPdfPage, paragraph, llx, lly, urx, ury, leading, alignment);
}

+ (void)preparePenWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)aPdfPage
               withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)pen
          withOrgOssPdfreporterPdfIPage_LineCap:(OrgOssPdfreporterPdfIPage_LineCap *)lineCap {
  OrgOssPdfreporterEngineExportJRPdfExporter_preparePenWithOrgOssPdfreporterPdfIPage_withOrgOssPdfreporterEngineJRPen_withOrgOssPdfreporterPdfIPage_LineCap_(aPdfPage, pen, lineCap);
}

+ (void)registerFonts {
  OrgOssPdfreporterEngineExportJRPdfExporter_registerFonts();
}

- (void)exportFrameWithOrgOssPdfreporterEngineJRPrintFrame:(id<OrgOssPdfreporterEngineJRPrintFrame>)frame {
  if ([((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getModeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeModeEnum, OPAQUE)) {
    jint x = [frame getX] + [self getOffsetX];
    jint y = [frame getY] + [self getOffsetY];
    id<OrgOssPdfreporterGeometryIColor> backcolor = [frame getBackcolor];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setRGBColorFillWithOrgOssPdfreporterGeometryIColor:backcolor];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) rectangleWithFloat:x withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - y withFloat:[frame getWidth] withFloat:-[frame getHeight]];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) fill];
  }
  [self setFrameElementsOffsetWithOrgOssPdfreporterEngineJRPrintFrame:frame withBoolean:false];
  @try {
    [self exportElementsWithJavaUtilCollection:[frame getElements]];
  }
  @finally {
    [self restoreElementOffsets];
  }
  [self exportBoxWithOrgOssPdfreporterEngineJRLineBox:[frame getLineBox] withOrgOssPdfreporterEngineJRPrintElement:frame];
}

- (void)exportGenericElementWithOrgOssPdfreporterEngineJRGenericPrintElement:(id<OrgOssPdfreporterEngineJRGenericPrintElement>)element {
  id<OrgOssPdfreporterEngineExportGenericElementPdfHandler> handler = (id<OrgOssPdfreporterEngineExportGenericElementPdfHandler>) cast_check([((OrgOssPdfreporterEngineExportGenericElementHandlerEnviroment *) nil_chk(OrgOssPdfreporterEngineExportGenericElementHandlerEnviroment_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_([self getJasperReportsContext]))) getElementHandlerWithOrgOssPdfreporterEngineJRGenericElementType:[((id<OrgOssPdfreporterEngineJRGenericPrintElement>) nil_chk(element)) getGenericType] withNSString:OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_KEY], OrgOssPdfreporterEngineExportGenericElementPdfHandler_class_());
  if (handler != nil) {
    [handler exportElementWithOrgOssPdfreporterEngineExportJRPdfExporterContext:exporterContext_ withOrgOssPdfreporterEngineJRGenericPrintElement:element];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger)) warningWithNSString:JreStrcat("$@", @"No PDF generic element handler for ", [element getGenericType])];
  }
}

- (NSString *)getExporterKey {
  return OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_KEY;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineExportJRPdfExporter class]) {
    OrgOssPdfreporterEngineExportJRPdfExporter_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterEngineExportJRPdfExporter_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineExportJRPdfExporter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JRPdfExporter", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineJasperReportsContext:", "JRPdfExporter", NULL, 0x1, NULL, NULL },
    { "exportReport", NULL, "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "setFontMap", NULL, "V", 0x4, NULL, NULL },
    { "setSplitCharacter", NULL, "V", 0x4, NULL, NULL },
    { "exportToFileWithNSString:", "exportToFile", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "writePageAnchorWithInt:", "writePageAnchor", "V", 0x4, "Lorg.oss.pdfreporter.pdf.DocumentException;", NULL },
    { "newPageWithOrgOssPdfreporterEngineJRPrintPage:", "newPage", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;Lorg.oss.pdfreporter.pdf.DocumentException;Ljava.io.IOException;", NULL },
    { "exportPageWithOrgOssPdfreporterEngineJRPrintPage:", "exportPage", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;Lorg.oss.pdfreporter.pdf.DocumentException;Ljava.io.IOException;", NULL },
    { "exportElementsWithJavaUtilCollection:", "exportElements", "V", 0x4, "Lorg.oss.pdfreporter.pdf.DocumentException;Ljava.io.IOException;Lorg.oss.pdfreporter.engine.JRException;", "(Ljava/util/Collection<Lorg/oss/pdfreporter/engine/JRPrintElement;>;)V" },
    { "exportLineWithOrgOssPdfreporterEngineJRPrintLine:", "exportLine", "V", 0x4, NULL, NULL },
    { "exportRectangleWithOrgOssPdfreporterEngineJRPrintRectangle:", "exportRectangle", "V", 0x4, NULL, NULL },
    { "exportEllipseWithOrgOssPdfreporterEngineJRPrintEllipse:", "exportEllipse", "V", 0x4, NULL, NULL },
    { "exportImageWithOrgOssPdfreporterEngineJRPrintImage:", "exportImage", "V", 0x1, "Lorg.oss.pdfreporter.pdf.DocumentException;Ljava.io.IOException;Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "getXAlignFactorWithOrgOssPdfreporterEngineJRPrintImage:", "getXAlignFactor", "F", 0x2, NULL, NULL },
    { "getYAlignFactorWithOrgOssPdfreporterEngineJRPrintImage:", "getYAlignFactor", "F", 0x2, NULL, NULL },
    { "getParagraphWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:withNSString:withOrgOssPdfreporterEngineJRPrintText:", "getParagraph", "Lorg.oss.pdfreporter.text.Paragraph;", 0x4, NULL, NULL },
    { "getParagrapghTextWithJavaUtilMap:withNSString:", "getParagrapghText", "Lorg.oss.pdfreporter.text.ParagraphText;", 0x4, NULL, "(Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;Ljava/lang/String;)Lorg/oss/pdfreporter/text/ParagraphText;" },
    { "hasUnderlineWithJavaUtilMap:", "hasUnderline", "Z", 0x4, NULL, "(Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;)Z" },
    { "hasStrikethroughWithJavaUtilMap:", "hasStrikethrough", "Z", 0x4, NULL, "(Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;)Z" },
    { "hasSupersciptWithJavaUtilMap:", "hasSuperscipt", "Z", 0x2, NULL, "(Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;)Z" },
    { "hasSubsciptWithJavaUtilMap:", "hasSubscipt", "Z", 0x2, NULL, "(Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;)Z" },
    { "getFontWithJavaUtilMap:", "getFont", "Lorg.oss.pdfreporter.font.IFont;", 0x4, NULL, "(Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;)Lorg/oss/pdfreporter/font/IFont;" },
    { "exportTextWithOrgOssPdfreporterEngineJRPrintText:", "exportText", "V", 0x1, "Lorg.oss.pdfreporter.pdf.DocumentException;", NULL },
    { "exportBoxWithOrgOssPdfreporterEngineJRLineBox:withOrgOssPdfreporterEngineJRPrintElement:", "exportBox", "V", 0x4, NULL, NULL },
    { "exportPenWithOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPrintElement:", "exportPen", "V", 0x4, NULL, NULL },
    { "exportTopPenWithOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPrintElement:", "exportTopPen", "V", 0x4, NULL, NULL },
    { "exportLeftPenWithOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPrintElement:", "exportLeftPen", "V", 0x4, NULL, NULL },
    { "exportBottomPenWithOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPrintElement:", "exportBottomPen", "V", 0x4, NULL, NULL },
    { "exportRightPenWithOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterEngineJRPrintElement:", "exportRightPen", "V", 0x4, NULL, NULL },
    { "toDashPatternWithFloat:withFloat:", "toDashPattern", "[I", 0xa, NULL, NULL },
    { "drawRoundRectWithOrgOssPdfreporterPdfIPage:withFloat:withFloat:withFloat:withFloat:withInt:", "drawRoundRect", "V", 0xa, NULL, NULL },
    { "drawEllipseWithOrgOssPdfreporterPdfIPage:withFloat:withFloat:withFloat:withFloat:", "drawEllipse", "V", 0xa, NULL, NULL },
    { "toPdfFontWithOrgOssPdfreporterEngineJRFont:withBoolean:withBoolean:withBoolean:withBoolean:", "toPdfFont", "Lorg.oss.pdfreporter.font.IFont;", 0xa, NULL, NULL },
    { "drawParagraphWithOrgOssPdfreporterPdfIPage:withOrgOssPdfreporterTextParagraph:withFloat:withFloat:withFloat:withFloat:withFloat:withOrgOssPdfreporterTextHorizontalAlignment:", "drawParagraph", "V", 0x8, NULL, NULL },
    { "preparePenWithOrgOssPdfreporterPdfIPage:withOrgOssPdfreporterEngineJRPen:withOrgOssPdfreporterPdfIPage_LineCap:", "preparePen", "V", 0xa, NULL, NULL },
    { "registerFonts", NULL, "V", 0x2c, NULL, NULL },
    { "exportFrameWithOrgOssPdfreporterEngineJRPrintFrame:", "exportFrame", "V", 0x4, "Lorg.oss.pdfreporter.pdf.DocumentException;Ljava.io.IOException;Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "exportGenericElementWithOrgOssPdfreporterEngineJRGenericPrintElement:", "exportGenericElement", "V", 0x4, NULL, NULL },
    { "getExporterKey", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterEngineExportJRPdfExporter_logger, NULL, .constantValue.asLong = 0 },
    { "PDF_EXPORTER_PROPERTIES_PREFIX", "PDF_EXPORTER_PROPERTIES_PREFIX", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_PROPERTIES_PREFIX, NULL, .constantValue.asLong = 0 },
    { "PDF_FONT_FILES_PREFIX", "PDF_FONT_FILES_PREFIX", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineExportJRPdfExporter_PDF_FONT_FILES_PREFIX, NULL, .constantValue.asLong = 0 },
    { "PDF_FONT_DIRS_PREFIX", "PDF_FONT_DIRS_PREFIX", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineExportJRPdfExporter_PDF_FONT_DIRS_PREFIX, NULL, .constantValue.asLong = 0 },
    { "PDF_EXPORTER_KEY", "PDF_EXPORTER_KEY", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_KEY, NULL, .constantValue.asLong = 0 },
    { "EMPTY_BOOKMARK_TITLE", "EMPTY_BOOKMARK_TITLE", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineExportJRPdfExporter_EMPTY_BOOKMARK_TITLE, NULL, .constantValue.asLong = 0 },
    { "JR_PAGE_ANCHOR_PREFIX", "JR_PAGE_ANCHOR_PREFIX", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineExportJRPdfExporter_JR_PAGE_ANCHOR_PREFIX, NULL, .constantValue.asLong = 0 },
    { "fontsRegistered", "fontsRegistered", 0xc, "Z", &OrgOssPdfreporterEngineExportJRPdfExporter_fontsRegistered, NULL, .constantValue.asLong = 0 },
    { "document_", NULL, 0x4, "Lorg.oss.pdfreporter.pdf.IDocument;", NULL, NULL, .constantValue.asLong = 0 },
    { "pdfPage_", NULL, 0x4, "Lorg.oss.pdfreporter.pdf.IPage;", NULL, NULL, .constantValue.asLong = 0 },
    { "progressMonitor_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.export.JRExportProgressMonitor;", NULL, NULL, .constantValue.asLong = 0 },
    { "reportIndex_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "forceSvgShapes_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isCreatingBatchModeBookmarks_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isCompressed_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isEncrypted_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "is128BitKey_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "userPassword_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "ownerPassword_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "permissions_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "pdfVersion_", NULL, 0x4, "Ljava.lang.Character;", NULL, NULL, .constantValue.asLong = 0 },
    { "pdfJavaScript_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "printScaling_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "collapseMissingBookmarkLevels_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "pdfFontMap_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/oss/pdfreporter/engine/export/FontKey;Lorg/oss/pdfreporter/engine/export/PdfFont;>;", .constantValue.asLong = 0 },
    { "exporterContext_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.export.JRPdfExporterContext;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.engine.export.JRPdfExporter$ExporterContext;", "Lorg.oss.pdfreporter.engine.export.JRPdfExporter$NullOutputStream;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineExportJRPdfExporter = { 2, "JRPdfExporter", "org.oss.pdfreporter.engine.export", NULL, 0x1, 40, methods, 26, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterEngineExportJRPdfExporter;
}

@end

void OrgOssPdfreporterEngineExportJRPdfExporter_init(OrgOssPdfreporterEngineExportJRPdfExporter *self) {
  OrgOssPdfreporterEngineExportJRPdfExporter_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance());
}

OrgOssPdfreporterEngineExportJRPdfExporter *new_OrgOssPdfreporterEngineExportJRPdfExporter_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineExportJRPdfExporter, init)
}

OrgOssPdfreporterEngineExportJRPdfExporter *create_OrgOssPdfreporterEngineExportJRPdfExporter_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineExportJRPdfExporter, init)
}

void OrgOssPdfreporterEngineExportJRPdfExporter_initWithOrgOssPdfreporterEngineJasperReportsContext_(OrgOssPdfreporterEngineExportJRPdfExporter *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  OrgOssPdfreporterEngineJRAbstractExporter_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, jasperReportsContext);
  self->exporterContext_ = new_OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext_initWithOrgOssPdfreporterEngineExportJRPdfExporter_(self);
}

OrgOssPdfreporterEngineExportJRPdfExporter *new_OrgOssPdfreporterEngineExportJRPdfExporter_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineExportJRPdfExporter, initWithOrgOssPdfreporterEngineJasperReportsContext_, jasperReportsContext)
}

OrgOssPdfreporterEngineExportJRPdfExporter *create_OrgOssPdfreporterEngineExportJRPdfExporter_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineExportJRPdfExporter, initWithOrgOssPdfreporterEngineJasperReportsContext_, jasperReportsContext)
}

jfloat OrgOssPdfreporterEngineExportJRPdfExporter_getXAlignFactorWithOrgOssPdfreporterEngineJRPrintImage_(OrgOssPdfreporterEngineExportJRPdfExporter *self, id<OrgOssPdfreporterEngineJRPrintImage> printImage) {
  jfloat xalignFactor = 0.0f;
  switch ([[((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getHorizontalAlignmentValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_Enum_RIGHT:
    {
      xalignFactor = 1.0f;
      break;
    }
    case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_Enum_CENTER:
    {
      xalignFactor = 0.5f;
      break;
    }
    case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_Enum_LEFT:
    default:
    {
      xalignFactor = 0.0f;
      break;
    }
  }
  return xalignFactor;
}

jfloat OrgOssPdfreporterEngineExportJRPdfExporter_getYAlignFactorWithOrgOssPdfreporterEngineJRPrintImage_(OrgOssPdfreporterEngineExportJRPdfExporter *self, id<OrgOssPdfreporterEngineJRPrintImage> printImage) {
  jfloat yalignFactor = 0.0f;
  switch ([[((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getVerticalAlignmentValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeVerticalAlignEnum_Enum_BOTTOM:
    {
      yalignFactor = 1.0f;
      break;
    }
    case OrgOssPdfreporterEngineTypeVerticalAlignEnum_Enum_MIDDLE:
    {
      yalignFactor = 0.5f;
      break;
    }
    case OrgOssPdfreporterEngineTypeVerticalAlignEnum_Enum_TOP:
    default:
    {
      yalignFactor = 0.0f;
      break;
    }
  }
  return yalignFactor;
}

jboolean OrgOssPdfreporterEngineExportJRPdfExporter_hasSupersciptWithJavaUtilMap_(OrgOssPdfreporterEngineExportJRPdfExporter *self, id<JavaUtilMap> attributes) {
  JavaLangInteger *scriptStyle = (JavaLangInteger *) cast_chk([((id<JavaUtilMap>) nil_chk(attributes)) getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, SUPERSCRIPT)], [JavaLangInteger class]);
  return (scriptStyle != nil && [((JavaLangInteger *) nil_chk(JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, SUPERSCRIPT_SUPER))) isEqual:scriptStyle]);
}

jboolean OrgOssPdfreporterEngineExportJRPdfExporter_hasSubsciptWithJavaUtilMap_(OrgOssPdfreporterEngineExportJRPdfExporter *self, id<JavaUtilMap> attributes) {
  JavaLangInteger *scriptStyle = (JavaLangInteger *) cast_chk([((id<JavaUtilMap>) nil_chk(attributes)) getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, SUPERSCRIPT)], [JavaLangInteger class]);
  return (scriptStyle != nil && [((JavaLangInteger *) nil_chk(JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, SUPERSCRIPT_SUB))) isEqual:scriptStyle]);
}

IOSIntArray *OrgOssPdfreporterEngineExportJRPdfExporter_toDashPatternWithFloat_withFloat_(jfloat on, jfloat off) {
  OrgOssPdfreporterEngineExportJRPdfExporter_initialize();
  return [IOSIntArray newArrayWithInts:(jint[]){ JreFpToInt(on), JreFpToInt(off) } count:2];
}

void OrgOssPdfreporterEngineExportJRPdfExporter_drawRoundRectWithOrgOssPdfreporterPdfIPage_withFloat_withFloat_withFloat_withFloat_withInt_(id<OrgOssPdfreporterPdfIPage> aPdfPage, jfloat x, jfloat y, jfloat width, jfloat height, jint radius) {
  OrgOssPdfreporterEngineExportJRPdfExporter_initialize();
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) roundRectangleWithFloat:JreFpToInt(x) withFloat:JreFpToInt(y) withFloat:JreFpToInt(width) withFloat:JreFpToInt(height) withInt:radius];
}

void OrgOssPdfreporterEngineExportJRPdfExporter_drawEllipseWithOrgOssPdfreporterPdfIPage_withFloat_withFloat_withFloat_withFloat_(id<OrgOssPdfreporterPdfIPage> aPdfPage, jfloat x1, jfloat y1, jfloat x2, jfloat y2) {
  OrgOssPdfreporterEngineExportJRPdfExporter_initialize();
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) ellipseWithFloat:JreFpToInt(x1) withFloat:JreFpToInt(y1) withFloat:JreFpToInt(x2) withFloat:JreFpToInt(y2)];
}

id<OrgOssPdfreporterFontIFont> OrgOssPdfreporterEngineExportJRPdfExporter_toPdfFontWithOrgOssPdfreporterEngineJRFont_withBoolean_withBoolean_withBoolean_withBoolean_(id<OrgOssPdfreporterEngineJRFont> font, jboolean underline, jboolean strikethrough, jboolean superscript, jboolean subscript) {
  OrgOssPdfreporterEngineExportJRPdfExporter_initialize();
  id<OrgOssPdfreporterFontFactoryIFontFactory> fontFactory = OrgOssPdfreporterRegistryApiRegistry_getFontFactory();
  id<OrgOssPdfreporterFontIFontManager> fontManager = [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk(fontFactory)) getFontManager];
  OrgOssPdfreporterFontIFont_FontStyle *style = [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isBold] && [font isItalic] ? JreLoadEnum(OrgOssPdfreporterFontIFont_FontStyle, BOLD_OBLIQUE) : [font isBold] ? JreLoadEnum(OrgOssPdfreporterFontIFont_FontStyle, BOLD) : [font isItalic] ? JreLoadEnum(OrgOssPdfreporterFontIFont_FontStyle, OBLIQUE) : JreLoadEnum(OrgOssPdfreporterFontIFont_FontStyle, PLAIN);
  id<OrgOssPdfreporterFontIFont> pdfFont = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getFontWithNSString:[font getFontName] withOrgOssPdfreporterFontIFont_FontStyle:style];
  if (pdfFont == nil) {
    pdfFont = [fontManager findFontWithNSString:[font getFontName] withOrgOssPdfreporterFontIFont_FontStyle:style];
  }
  OrgOssPdfreporterFontIFont_FontDecoration *decoration = underline ? JreLoadEnum(OrgOssPdfreporterFontIFont_FontDecoration, UNDERLINE) : strikethrough ? JreLoadEnum(OrgOssPdfreporterFontIFont_FontDecoration, STRIKE_THROUGH) : superscript ? JreLoadEnum(OrgOssPdfreporterFontIFont_FontDecoration, SUPERSCRIPT) : subscript ? JreLoadEnum(OrgOssPdfreporterFontIFont_FontDecoration, SUBSCRIPT) : JreLoadEnum(OrgOssPdfreporterFontIFont_FontDecoration, NONE);
  jfloat fontSizeScale = superscript || subscript ? 2.0f / 3 : 1.0f;
  return [fontManager getModifiedFontWithOrgOssPdfreporterFontIFont:pdfFont withFloat:[font getFontSize] * fontSizeScale withOrgOssPdfreporterFontIFont_FontDecoration:decoration];
}

void OrgOssPdfreporterEngineExportJRPdfExporter_drawParagraphWithOrgOssPdfreporterPdfIPage_withOrgOssPdfreporterTextParagraph_withFloat_withFloat_withFloat_withFloat_withFloat_withOrgOssPdfreporterTextHorizontalAlignment_(id<OrgOssPdfreporterPdfIPage> aPdfPage, OrgOssPdfreporterTextParagraph *paragraph, jfloat llx, jfloat lly, jfloat urx, jfloat ury, jfloat leading, OrgOssPdfreporterTextHorizontalAlignment *alignment) {
  OrgOssPdfreporterEngineExportJRPdfExporter_initialize();
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger)) finestWithNSString:JreStrcat("$$$F$F$F$F$F$@", @"drawParagraph('", [((OrgOssPdfreporterTextParagraph *) nil_chk(paragraph)) getText], @"', ", llx, @", ", lly, @", ", urx, @", ", ury, @", ", leading, @", ", alignment)];
  [OrgOssPdfreporterEngineExportJRPdfExporter_logger finestWithNSString:JreStrcat("$I$I$I$I", @"Pos(x=", JreFpToInt(llx), @", y=", JreFpToInt(lly), @", width=", JreFpToInt((urx - llx)), @", height=", JreFpToInt((lly - ury)))];
  jfloat verticalAlignmentHack = [((id<OrgOssPdfreporterFontIFont>) nil_chk([((OrgOssPdfreporterTextParagraphText *) nil_chk([paragraph getFirstParagraphText])) getFont])) getSize];
  id<OrgOssPdfreporterGeometryIRectangle> rect = [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getGeometryFactory())) newRectangleWithFloat:JreFpToInt(llx) withFloat:JreFpToInt((lly - verticalAlignmentHack)) withFloat:JreFpToInt((urx - llx)) withFloat:JreFpToInt((lly - ury))];
  OrgOssPdfreporterPdfParagraphRenderer *renderer = new_OrgOssPdfreporterPdfParagraphRenderer_initWithOrgOssPdfreporterTextParagraph_withOrgOssPdfreporterTextHorizontalAlignment_withOrgOssPdfreporterGeometryIRectangle_(paragraph, alignment, rect);
  [renderer renderWithOrgOssPdfreporterPdfIPage:aPdfPage withBoolean:true];
}

void OrgOssPdfreporterEngineExportJRPdfExporter_preparePenWithOrgOssPdfreporterPdfIPage_withOrgOssPdfreporterEngineJRPen_withOrgOssPdfreporterPdfIPage_LineCap_(id<OrgOssPdfreporterPdfIPage> aPdfPage, id<OrgOssPdfreporterEngineJRPen> pen, OrgOssPdfreporterPdfIPage_LineCap *lineCap) {
  OrgOssPdfreporterEngineExportJRPdfExporter_initialize();
  jfloat lineWidth = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(pen)) getLineWidth])) floatValue];
  if (lineWidth <= 0) {
    return;
  }
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) setLineWidthWithFloat:lineWidth];
  [aPdfPage setLineCapWithOrgOssPdfreporterPdfIPage_LineCap:lineCap];
  id<OrgOssPdfreporterGeometryIColor> color = [pen getLineColor];
  [aPdfPage setRGBColorStrokeWithOrgOssPdfreporterGeometryIColor:color];
  switch ([[pen getLineStyleValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeLineStyleEnum_Enum_DOUBLE:
    {
      [aPdfPage setLineWidthWithFloat:lineWidth / 3];
      [aPdfPage setLineDashWithIntArray:nil withInt:0];
      break;
    }
    case OrgOssPdfreporterEngineTypeLineStyleEnum_Enum_DOTTED:
    {
      switch ([lineCap ordinal]) {
        case OrgOssPdfreporterPdfIPage_LineCap_Enum_BUTT_END:
        {
          [aPdfPage setLineDashWithIntArray:OrgOssPdfreporterEngineExportJRPdfExporter_toDashPatternWithFloat_withFloat_(lineWidth, lineWidth) withInt:0];
          break;
        }
        case OrgOssPdfreporterPdfIPage_LineCap_Enum_PROJECTING_SCUARE_END:
        {
          [aPdfPage setLineDashWithIntArray:OrgOssPdfreporterEngineExportJRPdfExporter_toDashPatternWithFloat_withFloat_(0, 2 * lineWidth) withInt:0];
          break;
        }
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeLineStyleEnum_Enum_DASHED:
    {
      switch ([lineCap ordinal]) {
        case OrgOssPdfreporterPdfIPage_LineCap_Enum_BUTT_END:
        {
          [aPdfPage setLineDashWithIntArray:OrgOssPdfreporterEngineExportJRPdfExporter_toDashPatternWithFloat_withFloat_(5 * lineWidth, 3 * lineWidth) withInt:0];
          break;
        }
        case OrgOssPdfreporterPdfIPage_LineCap_Enum_PROJECTING_SCUARE_END:
        {
          [aPdfPage setLineDashWithIntArray:OrgOssPdfreporterEngineExportJRPdfExporter_toDashPatternWithFloat_withFloat_(4 * lineWidth, 4 * lineWidth) withInt:0];
          break;
        }
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeLineStyleEnum_Enum_SOLID:
    default:
    {
      [aPdfPage setLineDashWithIntArray:nil withInt:0];
      break;
    }
  }
}

void OrgOssPdfreporterEngineExportJRPdfExporter_registerFonts() {
  OrgOssPdfreporterEngineExportJRPdfExporter_initialize();
  @synchronized(OrgOssPdfreporterEngineExportJRPdfExporter_class_()) {
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineExportJRPdfExporter)

@implementation OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext

- (NSString *)getExportPropertiesPrefix {
  return OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_PROPERTIES_PREFIX;
}

- (id<OrgOssPdfreporterPdfIDocument>)getPdfDocument {
  return this$1_->document_;
}

- (id<OrgOssPdfreporterPdfIPage>)getCurrentPage {
  return this$1_->pdfPage_;
}

- (instancetype)initWithOrgOssPdfreporterEngineExportJRPdfExporter:(OrgOssPdfreporterEngineExportJRPdfExporter *)outer$ {
  OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext_initWithOrgOssPdfreporterEngineExportJRPdfExporter_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getExportPropertiesPrefix", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPdfDocument", NULL, "Lorg.oss.pdfreporter.pdf.IDocument;", 0x1, NULL, NULL },
    { "getCurrentPage", NULL, "Lorg.oss.pdfreporter.pdf.IPage;", 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineExportJRPdfExporter:", "ExporterContext", NULL, 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", NULL, 0x1012, "Lorg.oss.pdfreporter.engine.export.JRPdfExporter;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext = { 2, "ExporterContext", "org.oss.pdfreporter.engine.export", "JRPdfExporter", 0x4, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext;
}

@end

void OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext_initWithOrgOssPdfreporterEngineExportJRPdfExporter_(OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext *self, OrgOssPdfreporterEngineExportJRPdfExporter *outer$) {
  self->this$1_ = outer$;
  OrgOssPdfreporterEngineJRAbstractExporter_BaseExporterContext_initWithOrgOssPdfreporterEngineJRAbstractExporter_(self, outer$);
}

OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext *new_OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext_initWithOrgOssPdfreporterEngineExportJRPdfExporter_(OrgOssPdfreporterEngineExportJRPdfExporter *outer$) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext, initWithOrgOssPdfreporterEngineExportJRPdfExporter_, outer$)
}

OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext *create_OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext_initWithOrgOssPdfreporterEngineExportJRPdfExporter_(OrgOssPdfreporterEngineExportJRPdfExporter *outer$) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext, initWithOrgOssPdfreporterEngineExportJRPdfExporter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext)

@implementation OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)writeWithInt:(jint)b {
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
}

- (void)writeWithByteArray:(IOSByteArray *)b {
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "NullOutputStream", NULL, 0x1, NULL, NULL },
    { "writeWithInt:", "write", "V", 0x1, NULL, NULL },
    { "writeWithByteArray:withInt:withInt:", "write", "V", 0x1, NULL, NULL },
    { "writeWithByteArray:", "write", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream = { 2, "NullOutputStream", "org.oss.pdfreporter.engine.export", "JRPdfExporter", 0x9, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream;
}

@end

void OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream_init(OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream *self) {
  JavaIoOutputStream_init(self);
}

OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream *new_OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream, init)
}

OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream *create_OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream)
