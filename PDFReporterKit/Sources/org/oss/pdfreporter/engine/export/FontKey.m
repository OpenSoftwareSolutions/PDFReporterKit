//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/export/FontKey.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/oss/pdfreporter/engine/export/FontKey.h"

@interface OrgOssPdfreporterEngineExportFontKey () {
 @public
  NSString *fontName_;
  jboolean isBold_;
  jboolean isItalic_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineExportFontKey, fontName_, NSString *)

@implementation OrgOssPdfreporterEngineExportFontKey

- (instancetype)initWithNSString:(NSString *)fontName
                     withBoolean:(jboolean)bold
                     withBoolean:(jboolean)italic {
  OrgOssPdfreporterEngineExportFontKey_initWithNSString_withBoolean_withBoolean_(self, fontName, bold, italic);
  return self;
}

- (NSString *)getFontName {
  return fontName_;
}

- (jboolean)isBold {
  return isBold_;
}

- (jboolean)isItalic {
  return isItalic_;
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (o == nil || [self getClass] != (id) [o getClass]) {
    return false;
  }
  OrgOssPdfreporterEngineExportFontKey *key = (OrgOssPdfreporterEngineExportFontKey *) cast_chk(o, [OrgOssPdfreporterEngineExportFontKey class]);
  if (isBold_ != key->isBold_) {
    return false;
  }
  if (isItalic_ != key->isItalic_) {
    return false;
  }
  if (fontName_ != nil ? ![fontName_ isEqual:key->fontName_] : key->fontName_ != nil) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint result;
  result = (fontName_ != nil ? ((jint) [fontName_ hash]) : 0);
  result = 29 * result + (isBold_ ? 1 : 0);
  result = 29 * result + (isItalic_ ? 1 : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withBoolean:withBoolean:", "FontKey", NULL, 0x1, NULL, NULL },
    { "getFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isBold", NULL, "Z", 0x1, NULL, NULL },
    { "isItalic", NULL, "Z", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fontName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "isBold_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "isItalic_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineExportFontKey = { 2, "FontKey", "org.oss.pdfreporter.engine.export", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineExportFontKey;
}

@end

void OrgOssPdfreporterEngineExportFontKey_initWithNSString_withBoolean_withBoolean_(OrgOssPdfreporterEngineExportFontKey *self, NSString *fontName, jboolean bold, jboolean italic) {
  NSObject_init(self);
  self->fontName_ = fontName;
  self->isBold_ = bold;
  self->isItalic_ = italic;
}

OrgOssPdfreporterEngineExportFontKey *new_OrgOssPdfreporterEngineExportFontKey_initWithNSString_withBoolean_withBoolean_(NSString *fontName, jboolean bold, jboolean italic) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineExportFontKey, initWithNSString_withBoolean_withBoolean_, fontName, bold, italic)
}

OrgOssPdfreporterEngineExportFontKey *create_OrgOssPdfreporterEngineExportFontKey_initWithNSString_withBoolean_withBoolean_(NSString *fontName, jboolean bold, jboolean italic) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineExportFontKey, initWithNSString_withBoolean_withBoolean_, fontName, bold, italic)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineExportFontKey)
