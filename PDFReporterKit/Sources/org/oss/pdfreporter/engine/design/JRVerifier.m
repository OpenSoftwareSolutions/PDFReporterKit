//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/design/JRVerifier.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/commons/arrays/Array2D.h"
#include "org/oss/pdfreporter/crosstabs/JRCellContents.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabBucket.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabPercentageEnum.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRAnchor.h"
#include "org/oss/pdfreporter/engine/JRBand.h"
#include "org/oss/pdfreporter/engine/JRComponentElement.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRDatasetParameter.h"
#include "org/oss/pdfreporter/engine/JRDatasetRun.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRElementDataset.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionChunk.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRField.h"
#include "org/oss/pdfreporter/engine/JRFrame.h"
#include "org/oss/pdfreporter/engine/JRGenericElement.h"
#include "org/oss/pdfreporter/engine/JRGenericElementParameter.h"
#include "org/oss/pdfreporter/engine/JRGenericElementType.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRHyperlink.h"
#include "org/oss/pdfreporter/engine/JRHyperlinkParameter.h"
#include "org/oss/pdfreporter/engine/JRImage.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRPropertyExpression.h"
#include "org/oss/pdfreporter/engine/JRQuery.h"
#include "org/oss/pdfreporter/engine/JRQueryChunk.h"
#include "org/oss/pdfreporter/engine/JRReport.h"
#include "org/oss/pdfreporter/engine/JRReportTemplate.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRSection.h"
#include "org/oss/pdfreporter/engine/JRSortField.h"
#include "org/oss/pdfreporter/engine/JRStaticText.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRSubreport.h"
#include "org/oss/pdfreporter/engine/JRSubreportParameter.h"
#include "org/oss/pdfreporter/engine/JRSubreportReturnValue.h"
#include "org/oss/pdfreporter/engine/JRTextField.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/component/Component.h"
#include "org/oss/pdfreporter/engine/component/ComponentCompiler.h"
#include "org/oss/pdfreporter/engine/component/ComponentKey.h"
#include "org/oss/pdfreporter/engine/component/ComponentsEnvironment.h"
#include "org/oss/pdfreporter/engine/component/IComponentManager.h"
#include "org/oss/pdfreporter/engine/design/JRDesignDataset.h"
#include "org/oss/pdfreporter/engine/design/JRValidationFault.h"
#include "org/oss/pdfreporter/engine/design/JRVerifier.h"
#include "org/oss/pdfreporter/engine/design/JasperDesign.h"
#include "org/oss/pdfreporter/engine/query/QueryExecuterFactory.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"
#include "org/oss/pdfreporter/engine/type/EvaluationTimeEnum.h"
#include "org/oss/pdfreporter/engine/type/IncrementTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/ResetTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/SortFieldTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/SplitTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRClassLoader.h"
#include "org/oss/pdfreporter/engine/util/JRQueryExecuterUtils.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"

@interface OrgOssPdfreporterEngineDesignJRVerifier () {
 @public
  id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext_;
  OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign_;
  id<JavaUtilCollection> brokenRules_;
  OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector_;
  JavaUtilLinkedList *currentComponentElementStack_;
  jboolean allowElementNegativeWidth_;
  jboolean allowElementNegativeY_;
}

- (void)verifyDesignAttributes;

- (void)verifyQueryWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset;

- (void)verifyExpressionsWithJavaUtilList:(id<JavaUtilList>)expressions
                          withJavaUtilMap:(id<JavaUtilMap>)parametersMap
                          withJavaUtilMap:(id<JavaUtilMap>)fieldsMap
                          withJavaUtilMap:(id<JavaUtilMap>)variablesMap;

- (void)verifyExpressionsWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset;

- (void)verifyStyles;

- (void)verifyConditionalStylesWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style;

- (void)verifyParametersWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset;

- (void)verifyFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset;

- (void)verifySortFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset;

- (void)verifyVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset;

- (void)verifyGroupsWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset;

- (void)verifyGroupHeaderAndFooterWithOrgOssPdfreporterEngineJRGroup:(id<OrgOssPdfreporterEngineJRGroup>)group;

- (void)verifySectionWithOrgOssPdfreporterEngineJRSection:(id<OrgOssPdfreporterEngineJRSection>)section;

- (void)verifyBandWithOrgOssPdfreporterEngineJRBand:(id<OrgOssPdfreporterEngineJRBand>)band;

- (void)verifyStaticTextWithOrgOssPdfreporterEngineJRStaticText:(id<OrgOssPdfreporterEngineJRStaticText>)staticText;

- (void)verifyTextFieldWithOrgOssPdfreporterEngineJRTextField:(id<OrgOssPdfreporterEngineJRTextField>)textField;

- (void)verifyAnchorWithOrgOssPdfreporterEngineJRAnchor:(id<OrgOssPdfreporterEngineJRAnchor>)anchor;

- (void)verifyImageWithOrgOssPdfreporterEngineJRImage:(id<OrgOssPdfreporterEngineJRImage>)image;

- (void)verifySubreportWithOrgOssPdfreporterEngineJRSubreport:(id<OrgOssPdfreporterEngineJRSubreport>)subreport;

- (void)verifyCrosstabWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab;

- (void)verifyParametersWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab;

- (void)verifyCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)group;

- (void)verifyCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)group;

- (void)verifyCrosstabGroupWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>)group;

- (void)verifyCrosstabBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>)group;

- (void)verifyCrosstabCellsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab;

- (NSString *)getCrosstabCellTextWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroupArray:(IOSObjectArray *)rowGroups
                              withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroupArray:(IOSObjectArray *)columnGroups
                                                                               withInt:(jint)rowIndex
                                                                               withInt:(jint)columnIndex;

- (void)verifyCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure;

- (void)verifyExpressionsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab;

- (void)verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents:(id<OrgOssPdfreporterCrosstabsJRCellContents>)contents
                                                          withNSString:(NSString *)cellText;

- (void)verifyDatasets;

- (void)verifyDatasetWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset;

- (void)verifyFrameWithOrgOssPdfreporterEngineJRFrame:(id<OrgOssPdfreporterEngineJRFrame>)frame;

+ (jint)getBreakHeightWithOrgOssPdfreporterEngineJRBand:(id<OrgOssPdfreporterEngineJRBand>)band;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineDesignJRVerifier, jasperReportsContext_, id<OrgOssPdfreporterEngineJasperReportsContext>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineDesignJRVerifier, jasperDesign_, OrgOssPdfreporterEngineDesignJasperDesign *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineDesignJRVerifier, brokenRules_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineDesignJRVerifier, expressionCollector_, OrgOssPdfreporterEngineJRExpressionCollector *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineDesignJRVerifier, currentComponentElementStack_, JavaUtilLinkedList *)

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignAttributes(OrgOssPdfreporterEngineDesignJRVerifier *self);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyQueryWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithJavaUtilList_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<JavaUtilList> expressions, id<JavaUtilMap> parametersMap, id<JavaUtilMap> fieldsMap, id<JavaUtilMap> variablesMap);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyStyles(OrgOssPdfreporterEngineDesignJRVerifier *self);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyConditionalStylesWithOrgOssPdfreporterEngineJRStyle_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRStyle> style);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyParametersWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifySortFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyGroupsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyGroupHeaderAndFooterWithOrgOssPdfreporterEngineJRGroup_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRGroup> group);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifySectionWithOrgOssPdfreporterEngineJRSection_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRSection> section);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRBand> band);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyStaticTextWithOrgOssPdfreporterEngineJRStaticText_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRStaticText> staticText);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyTextFieldWithOrgOssPdfreporterEngineJRTextField_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRTextField> textField);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyAnchorWithOrgOssPdfreporterEngineJRAnchor_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRAnchor> anchor);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyImageWithOrgOssPdfreporterEngineJRImage_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRImage> image);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifySubreportWithOrgOssPdfreporterEngineJRSubreport_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRSubreport> subreport);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyParametersWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> group);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> group);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabGroupWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterCrosstabsJRCrosstabGroup> group);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterCrosstabsJRCrosstabGroup> group);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabCellsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab);

__attribute__((unused)) static NSString *OrgOssPdfreporterEngineDesignJRVerifier_getCrosstabCellTextWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroupArray_withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroupArray_withInt_withInt_(OrgOssPdfreporterEngineDesignJRVerifier *self, IOSObjectArray *rowGroups, IOSObjectArray *columnGroups, jint rowIndex, jint columnIndex);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> measure);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents_withNSString_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterCrosstabsJRCellContents> contents, NSString *cellText);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyDatasets(OrgOssPdfreporterEngineDesignJRVerifier *self);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyDatasetWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRVerifier_verifyFrameWithOrgOssPdfreporterEngineJRFrame_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRFrame> frame);

__attribute__((unused)) static jint OrgOssPdfreporterEngineDesignJRVerifier_getBreakHeightWithOrgOssPdfreporterEngineJRBand_(id<OrgOssPdfreporterEngineJRBand> band);

NSString *OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_OVERLAP = @"net.sf.jasperreports.allow.element.overlap";
NSString *OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_WIDTH = @"net.sf.jasperreports.allow.element.negative.width";
NSString *OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y = @"net.sf.jasperreports.allow.element.negative.y";

@implementation OrgOssPdfreporterEngineDesignJRVerifier

+ (NSString *)PROPERTY_ALLOW_ELEMENT_OVERLAP {
  return OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_OVERLAP;
}

+ (NSString *)PROPERTY_ALLOW_ELEMENT_NEGATIVE_WIDTH {
  return OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_WIDTH;
}

+ (NSString *)PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y {
  return OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y;
}

- (instancetype)initWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineDesignJasperDesign_(self, jasperDesign);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                 withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector {
  OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(self, jasperDesign, expressionCollector);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                      withOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                   withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector {
  OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(self, jasperReportsContext, jasperDesign, expressionCollector);
  return self;
}

- (OrgOssPdfreporterEngineDesignJasperDesign *)getReportDesign {
  return jasperDesign_;
}

- (void)addBrokenRuleWithNSString:(NSString *)message
                           withId:(id)source {
  OrgOssPdfreporterEngineDesignJRVerifier_addBrokenRuleWithJavaUtilCollection_withNSString_withId_(brokenRules_, message, source);
}

+ (void)addBrokenRuleWithJavaUtilCollection:(id<JavaUtilCollection>)brokenRules
                               withNSString:(NSString *)message
                                     withId:(id)source {
  OrgOssPdfreporterEngineDesignJRVerifier_addBrokenRuleWithJavaUtilCollection_withNSString_withId_(brokenRules, message, source);
}

- (void)addBrokenRuleWithJavaLangException:(JavaLangException *)e
                                    withId:(id)source {
  OrgOssPdfreporterEngineDesignJRValidationFault *fault = new_OrgOssPdfreporterEngineDesignJRValidationFault_init();
  [fault setMessageWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
  [fault setSourceWithId:source];
  [((id<JavaUtilCollection>) nil_chk(brokenRules_)) addWithId:fault];
}

+ (id<JavaUtilCollection>)verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                   withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector {
  return OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(jasperDesign, expressionCollector);
}

+ (id<JavaUtilCollection>)verifyDesignWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                        withOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                     withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector {
  return OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(jasperReportsContext, jasperDesign, expressionCollector);
}

+ (id<JavaUtilCollection>)verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  return OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign_(jasperDesign);
}

- (id<JavaUtilCollection>)verifyDesign {
  [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) preprocess];
  OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignAttributes(self);
  [self verifyReportTemplates];
  OrgOssPdfreporterEngineDesignJRVerifier_verifyDatasetWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getMainDesignDataset]);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyDatasets(self);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyStyles(self);
  if ([self toVerifyElementOverlap]) {
    [self verifyEmptyBackground];
  }
  OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(self, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getBackground]);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(self, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTitle]);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(self, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeader]);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(self, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnHeader]);
  OrgOssPdfreporterEngineDesignJRVerifier_verifySectionWithOrgOssPdfreporterEngineJRSection_(self, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getDetailSection]);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(self, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnFooter]);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(self, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageFooter]);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(self, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getLastPageFooter]);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(self, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getSummary]);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(self, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getNoData]);
  return brokenRules_;
}

- (void)verifyEmptyBackground {
  id<OrgOssPdfreporterEngineJRBand> background = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getBackground];
  if (background != nil && [background getHeight] > 0) {
    IOSObjectArray *elements = [background getElements];
    if (elements != nil && elements->size_ > 0) {
      jboolean foundContent = false;
      for (jint i = 0; i < elements->size_; i++) {
        if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(IOSObjectArray_Get(elements, i))) getWidth] > 0 && [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(IOSObjectArray_Get(elements, i))) getHeight] > 0) {
          foundContent = true;
          break;
        }
      }
      if (foundContent) {
        [self addBrokenRuleWithNSString:@"Use of the background section is not recommended for reports that are supposed to be exported using grid exporters such as HTML and XLS because the background content would likely be overlapped by other sections resulting in it not showing up." withId:background];
      }
    }
  }
}

- (void)verifyDesignAttributes {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignAttributes(self);
}

+ (void)verifyBandHeightsWithJavaUtilCollection:(id<JavaUtilCollection>)brokenRules
            withOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                                        withInt:(jint)pageHeight
                                        withInt:(jint)topMargin
                                        withInt:(jint)bottomMargin {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyBandHeightsWithJavaUtilCollection_withOrgOssPdfreporterEngineJRReport_withInt_withInt_withInt_(brokenRules, report, pageHeight, topMargin, bottomMargin);
}

- (void)verifyFormatFactoryClass {
  NSString *formatFactoryClassName = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getFormatFactoryClass];
  if (formatFactoryClassName != nil) {
    @try {
      IOSClass *formatFactoryClass = OrgOssPdfreporterEngineUtilJRClassLoader_loadClassForNameWithNSString_(formatFactoryClassName);
      if (![OrgOssPdfreporterTextFormatFactoryIFormatFactory_class_() isAssignableFrom:formatFactoryClass]) {
        [self addBrokenRuleWithNSString:JreStrcat("$$", @"The report format factory class is not compatible with ", [OrgOssPdfreporterTextFormatFactoryIFormatFactory_class_() getName]) withId:jasperDesign_];
      }
    }
    @catch (JavaLangClassNotFoundException *e) {
      [self addBrokenRuleWithNSString:[((JavaLangClassNotFoundException *) nil_chk(e)) description] withId:jasperDesign_];
    }
  }
}

- (void)verifyQueryWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyQueryWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
}

- (void)verifyExpressionsWithJavaUtilList:(id<JavaUtilList>)expressions
                          withJavaUtilMap:(id<JavaUtilMap>)parametersMap
                          withJavaUtilMap:(id<JavaUtilMap>)fieldsMap
                          withJavaUtilMap:(id<JavaUtilMap>)variablesMap {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithJavaUtilList_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(self, expressions, parametersMap, fieldsMap, variablesMap);
}

- (void)verifyExpressionsWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
}

- (void)verifyReportTemplates {
  IOSObjectArray *templates = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTemplates];
  if (templates != nil) {
    for (jint i = 0; i < templates->size_; i++) {
      id<OrgOssPdfreporterEngineJRReportTemplate> template_ = IOSObjectArray_Get(templates, i);
      [self verifyTemplateWithOrgOssPdfreporterEngineJRReportTemplate:template_];
    }
  }
}

- (void)verifyTemplateWithOrgOssPdfreporterEngineJRReportTemplate:(id<OrgOssPdfreporterEngineJRReportTemplate>)template_ {
  id<OrgOssPdfreporterEngineJRExpression> sourceExpression = [((id<OrgOssPdfreporterEngineJRReportTemplate>) nil_chk(template_)) getSourceExpression];
  if (sourceExpression == nil) {
    [self addBrokenRuleWithNSString:@"Template source expression missing." withId:template_];
  }
}

- (void)verifyStyles {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyStyles(self);
}

- (void)verifyConditionalStylesWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyConditionalStylesWithOrgOssPdfreporterEngineJRStyle_(self, style);
}

- (void)verifyParametersWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyParametersWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
}

- (void)verifyFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
}

- (void)verifySortFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  OrgOssPdfreporterEngineDesignJRVerifier_verifySortFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
}

- (void)verifyVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
}

- (void)verifyGroupsWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyGroupsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
}

- (void)verifyGroupHeaderAndFooterWithOrgOssPdfreporterEngineJRGroup:(id<OrgOssPdfreporterEngineJRGroup>)group {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyGroupHeaderAndFooterWithOrgOssPdfreporterEngineJRGroup_(self, group);
}

- (jboolean)toVerifyElementOverlap {
  return ![((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_))) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperDesign_ withNSString:OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_OVERLAP withBoolean:true];
}

- (jboolean)isAllowedToOverlapWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element {
  return [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) hasProperties] && OrgOssPdfreporterEngineJRPropertiesUtil_asBooleanWithNSString_([((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([element getPropertiesMap])) getPropertyWithNSString:OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_OVERLAP]);
}

- (void)verifyElementOverlapWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element1
                            withOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element2 {
  if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element1)) getWidth] <= 0 || [element1 getHeight] <= 0 || [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element2)) getWidth] <= 0 || [element2 getHeight] <= 0) {
    return;
  }
  if (([element1 getX] < [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element2)) getX] + [element2 getWidth] && [element2 getX] < [element1 getX] + [element1 getWidth]) && ([element1 getY] < [element2 getY] + [element2 getHeight] && [element2 getY] < [element1 getY] + [element1 getHeight])) {
    JavaLangStringBuffer *message = new_JavaLangStringBuffer_init();
    (void) [message appendWithNSString:@"Element "];
    if ([element2 getKey] != nil) {
      (void) [message appendWithNSString:@"\""];
      (void) [message appendWithNSString:[element2 getKey]];
      (void) [message appendWithNSString:@"\" "];
    }
    (void) [message appendWithNSString:@"at "];
    (void) [message appendWithNSString:[self getElementPositionTextWithOrgOssPdfreporterEngineJRElement:element2]];
    (void) [message appendWithNSString:@" overlaps element "];
    if ([element1 getKey] != nil) {
      (void) [message appendWithNSString:@"\""];
      (void) [message appendWithNSString:[element1 getKey]];
      (void) [message appendWithNSString:@"\" "];
    }
    (void) [message appendWithNSString:@"at "];
    (void) [message appendWithNSString:[self getElementPositionTextWithOrgOssPdfreporterEngineJRElement:element1]];
    [self addBrokenRuleWithNSString:[message description] withId:element2];
  }
}

- (NSString *)getElementPositionTextWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element {
  return JreStrcat("$I$I$I$IC", @"[x = ", [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getX], @", y = ", [element getY], @", width = ", [element getWidth], @", height = ", [element getHeight], ']');
}

- (void)verifyElementsOverlapWithOrgOssPdfreporterEngineJRElementArray:(IOSObjectArray *)elements {
  if (![self toVerifyElementOverlap]) {
    return;
  }
  for (jint index = 1; index < ((IOSObjectArray *) nil_chk(elements))->size_; index++) {
    id<OrgOssPdfreporterEngineJRElement> element = IOSObjectArray_Get(elements, index);
    if (![self isAllowedToOverlapWithOrgOssPdfreporterEngineJRElement:element]) {
      for (jint overlapIndex = 0; overlapIndex < index; ++overlapIndex) {
        if (![self isAllowedToOverlapWithOrgOssPdfreporterEngineJRElement:IOSObjectArray_Get(elements, overlapIndex)]) {
          [self verifyElementOverlapWithOrgOssPdfreporterEngineJRElement:IOSObjectArray_Get(elements, overlapIndex) withOrgOssPdfreporterEngineJRElement:element];
        }
      }
    }
  }
}

- (void)verifySectionWithOrgOssPdfreporterEngineJRSection:(id<OrgOssPdfreporterEngineJRSection>)section {
  OrgOssPdfreporterEngineDesignJRVerifier_verifySectionWithOrgOssPdfreporterEngineJRSection_(self, section);
}

- (void)verifyBandWithOrgOssPdfreporterEngineJRBand:(id<OrgOssPdfreporterEngineJRBand>)band {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(self, band);
}

- (void)verifyElementWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element {
  if ([OrgOssPdfreporterEngineJRStaticText_class_() isInstance:element]) {
    OrgOssPdfreporterEngineDesignJRVerifier_verifyStaticTextWithOrgOssPdfreporterEngineJRStaticText_(self, (id<OrgOssPdfreporterEngineJRStaticText>) cast_check(element, OrgOssPdfreporterEngineJRStaticText_class_()));
  }
  else if ([OrgOssPdfreporterEngineJRTextField_class_() isInstance:element]) {
    OrgOssPdfreporterEngineDesignJRVerifier_verifyTextFieldWithOrgOssPdfreporterEngineJRTextField_(self, (id<OrgOssPdfreporterEngineJRTextField>) cast_check(element, OrgOssPdfreporterEngineJRTextField_class_()));
  }
  else if ([OrgOssPdfreporterEngineJRImage_class_() isInstance:element]) {
    OrgOssPdfreporterEngineDesignJRVerifier_verifyImageWithOrgOssPdfreporterEngineJRImage_(self, (id<OrgOssPdfreporterEngineJRImage>) cast_check(element, OrgOssPdfreporterEngineJRImage_class_()));
  }
  else if ([OrgOssPdfreporterEngineJRSubreport_class_() isInstance:element]) {
    OrgOssPdfreporterEngineDesignJRVerifier_verifySubreportWithOrgOssPdfreporterEngineJRSubreport_(self, (id<OrgOssPdfreporterEngineJRSubreport>) cast_check(element, OrgOssPdfreporterEngineJRSubreport_class_()));
  }
  else if ([OrgOssPdfreporterCrosstabsJRCrosstab_class_() isInstance:element]) {
    OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(self, (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) cast_chk(element, [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab class]));
  }
  else if ([OrgOssPdfreporterEngineJRFrame_class_() isInstance:element]) {
    OrgOssPdfreporterEngineDesignJRVerifier_verifyFrameWithOrgOssPdfreporterEngineJRFrame_(self, (id<OrgOssPdfreporterEngineJRFrame>) cast_check(element, OrgOssPdfreporterEngineJRFrame_class_()));
  }
  else if ([OrgOssPdfreporterEngineJRComponentElement_class_() isInstance:element]) {
    [self verifyComponentElementWithOrgOssPdfreporterEngineJRComponentElement:(id<OrgOssPdfreporterEngineJRComponentElement>) cast_check(element, OrgOssPdfreporterEngineJRComponentElement_class_())];
  }
  else if ([OrgOssPdfreporterEngineJRGenericElement_class_() isInstance:element]) {
    [self verifyGenericElementWithOrgOssPdfreporterEngineJRGenericElement:(id<OrgOssPdfreporterEngineJRGenericElement>) cast_check(element, OrgOssPdfreporterEngineJRGenericElement_class_())];
  }
}

- (void)verifyStaticTextWithOrgOssPdfreporterEngineJRStaticText:(id<OrgOssPdfreporterEngineJRStaticText>)staticText {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyStaticTextWithOrgOssPdfreporterEngineJRStaticText_(self, staticText);
}

- (void)verifyTextFieldWithOrgOssPdfreporterEngineJRTextField:(id<OrgOssPdfreporterEngineJRTextField>)textField {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyTextFieldWithOrgOssPdfreporterEngineJRTextField_(self, textField);
}

- (void)verifyAnchorWithOrgOssPdfreporterEngineJRAnchor:(id<OrgOssPdfreporterEngineJRAnchor>)anchor {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyAnchorWithOrgOssPdfreporterEngineJRAnchor_(self, anchor);
}

- (void)verifyHyperlinkWithOrgOssPdfreporterEngineJRHyperlink:(id<OrgOssPdfreporterEngineJRHyperlink>)hyperlink {
  if (hyperlink != nil) {
    IOSObjectArray *parameters = [hyperlink getHyperlinkParameters];
    if (parameters != nil) {
      for (jint i = 0; i < parameters->size_; i++) {
        id<OrgOssPdfreporterEngineJRHyperlinkParameter> parameter = IOSObjectArray_Get(parameters, i);
        [self verifyHyperlinkParameterWithOrgOssPdfreporterEngineJRHyperlinkParameter:parameter];
      }
    }
  }
}

- (void)verifyHyperlinkParameterWithOrgOssPdfreporterEngineJRHyperlinkParameter:(id<OrgOssPdfreporterEngineJRHyperlinkParameter>)parameter {
  if (parameter != nil) {
    NSString *name = [parameter getName];
    if (name == nil || ((jint) [name length]) == 0) {
      [self addBrokenRuleWithNSString:@"Hyperlink parameter name missing." withId:parameter];
    }
  }
}

- (void)verifyImageWithOrgOssPdfreporterEngineJRImage:(id<OrgOssPdfreporterEngineJRImage>)image {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyImageWithOrgOssPdfreporterEngineJRImage_(self, image);
}

- (void)verifySubreportWithOrgOssPdfreporterEngineJRSubreport:(id<OrgOssPdfreporterEngineJRSubreport>)subreport {
  OrgOssPdfreporterEngineDesignJRVerifier_verifySubreportWithOrgOssPdfreporterEngineJRSubreport_(self, subreport);
}

- (void)verifyCrosstabWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(self, crosstab);
}

- (void)verifyParametersWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyParametersWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(self, crosstab);
}

- (void)verifyCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)group {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup_(self, group);
}

- (void)verifyCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)group {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup_(self, group);
}

- (void)verifyCrosstabGroupWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>)group {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabGroupWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_(self, group);
}

- (void)verifyCrosstabBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>)group {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_(self, group);
}

- (void)verifyCrosstabCellsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabCellsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(self, crosstab);
}

- (NSString *)getCrosstabCellTextWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroupArray:(IOSObjectArray *)rowGroups
                              withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroupArray:(IOSObjectArray *)columnGroups
                                                                               withInt:(jint)rowIndex
                                                                               withInt:(jint)columnIndex {
  return OrgOssPdfreporterEngineDesignJRVerifier_getCrosstabCellTextWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroupArray_withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroupArray_withInt_withInt_(self, rowGroups, columnGroups, rowIndex, columnIndex);
}

- (void)verifyCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure_(self, measure);
}

- (void)verifyExpressionsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(self, crosstab);
}

- (void)verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents:(id<OrgOssPdfreporterCrosstabsJRCellContents>)contents
                                                          withNSString:(NSString *)cellText {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents_withNSString_(self, contents, cellText);
}

- (void)verifyElementDatasetWithOrgOssPdfreporterEngineJRElementDataset:(id<OrgOssPdfreporterEngineJRElementDataset>)dataset {
  id<OrgOssPdfreporterEngineJRDatasetRun> datasetRun = [((id<OrgOssPdfreporterEngineJRElementDataset>) nil_chk(dataset)) getDatasetRun];
  if (datasetRun != nil) {
    OrgOssPdfreporterEngineTypeIncrementTypeEnum *incrementType = [dataset getIncrementTypeValue];
    if (incrementType == JreLoadEnum(OrgOssPdfreporterEngineTypeIncrementTypeEnum, PAGE) || incrementType == JreLoadEnum(OrgOssPdfreporterEngineTypeIncrementTypeEnum, COLUMN)) {
      [self addBrokenRuleWithNSString:@"Chart datasets with dataset run cannont have Column or Page increment type." withId:dataset];
    }
    OrgOssPdfreporterEngineTypeResetTypeEnum *resetType = [dataset getResetTypeValue];
    if (resetType == JreLoadEnum(OrgOssPdfreporterEngineTypeResetTypeEnum, PAGE) || resetType == JreLoadEnum(OrgOssPdfreporterEngineTypeResetTypeEnum, COLUMN)) {
      [self addBrokenRuleWithNSString:@"Chart datasets with dataset run cannont have Column or Page reset type." withId:dataset];
    }
    [self verifyDatasetRunWithOrgOssPdfreporterEngineJRDatasetRun:datasetRun];
  }
}

- (void)verifyDatasetRunWithOrgOssPdfreporterEngineJRDatasetRun:(id<OrgOssPdfreporterEngineJRDatasetRun>)datasetRun {
  OrgOssPdfreporterEngineDesignJRDesignDataset *dataset = nil;
  NSString *datasetName = [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getDatasetName];
  if (datasetName == nil || ((jint) [datasetName length]) == 0) {
    [self addBrokenRuleWithNSString:@"Dataset name is missing for dataset run." withId:datasetRun];
  }
  else {
    dataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) cast_chk([((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getDatasetMap])) getWithId:datasetName], [OrgOssPdfreporterEngineDesignJRDesignDataset class]);
    if (dataset == nil) {
      [self addBrokenRuleWithNSString:JreStrcat("$$C", @"Unknown dataset name ", datasetName, '.') withId:datasetRun];
    }
  }
  IOSObjectArray *parameters = [datasetRun getParameters];
  if (parameters != nil && parameters->size_ > 0) {
    for (jint index = 0; index < parameters->size_; index++) {
      id<OrgOssPdfreporterEngineJRDatasetParameter> parameter = IOSObjectArray_Get(parameters, index);
      NSString *paramName = [((id<OrgOssPdfreporterEngineJRDatasetParameter>) nil_chk(parameter)) getName];
      if (paramName == nil || ((jint) [((NSString *) nil_chk([paramName trim])) length]) == 0) {
        [self addBrokenRuleWithNSString:JreStrcat("$$$", @"Dataset ", datasetName, @" parameter name missing.") withId:parameter];
      }
      id<OrgOssPdfreporterEngineJRParameter> datasetParam = nil;
      if (dataset != nil) {
        datasetParam = [((id<JavaUtilMap>) nil_chk([dataset getParametersMap])) getWithId:paramName];
        if (datasetParam == nil) {
          [self addBrokenRuleWithNSString:JreStrcat("$$$$C", @"Unknown parameter ", paramName, @" in dataset ", datasetName, '.') withId:parameter];
        }
      }
    }
  }
  id<OrgOssPdfreporterEngineJRExpression> connectionExpression = [datasetRun getConnectionExpression];
  id<OrgOssPdfreporterEngineJRExpression> dataSourceExpression = [datasetRun getDataSourceExpression];
  if (connectionExpression != nil && dataSourceExpression != nil) {
    [self addBrokenRuleWithNSString:JreStrcat("$$$", @"Dataset ", datasetName, @" cannot have both connection expresion and data source expression.") withId:datasetRun];
  }
}

- (void)verifyDatasets {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyDatasets(self);
}

- (void)verifyDatasetWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyDatasetWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
}

- (void)verifyFrameWithOrgOssPdfreporterEngineJRFrame:(id<OrgOssPdfreporterEngineJRFrame>)frame {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyFrameWithOrgOssPdfreporterEngineJRFrame_(self, frame);
}

- (void)verifyReportElementWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element {
  if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getWidth] < 0) {
    if (!allowElementNegativeWidth_) {
      [self addBrokenRuleWithNSString:@"Element cannot have negative width." withId:element];
    }
  }
  if ([element getY] < 0 && ![self allowElementNegativeYWithOrgOssPdfreporterEngineJRElement:element]) {
    [self addBrokenRuleWithNSString:JreStrcat("$I$", @"Element negative Y ", [element getY], @" not allowed") withId:element];
  }
  [self verifyProperyExpressionsWithOrgOssPdfreporterEngineJRPropertyExpressionArray:[element getPropertyExpressions]];
}

- (jboolean)allowElementNegativeYWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element {
  jboolean allow = allowElementNegativeY_;
  if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) hasProperties]) {
    OrgOssPdfreporterEngineJRPropertiesMap *properties = [element getPropertiesMap];
    if ([((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(properties)) containsPropertyWithNSString:OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y]) {
      allow = OrgOssPdfreporterEngineJRPropertiesUtil_asBooleanWithNSString_([properties getPropertyWithNSString:OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y]);
    }
  }
  return allow;
}

- (void)verifyProperyExpressionsWithOrgOssPdfreporterEngineJRPropertyExpressionArray:(IOSObjectArray *)propertyExpressions {
  if (propertyExpressions != nil) {
    for (jint i = 0; i < propertyExpressions->size_; i++) {
      [self verifyPropertyExpressionWithOrgOssPdfreporterEngineJRPropertyExpression:IOSObjectArray_Get(propertyExpressions, i)];
    }
  }
}

- (void)verifyPropertyExpressionWithOrgOssPdfreporterEngineJRPropertyExpression:(id<OrgOssPdfreporterEngineJRPropertyExpression>)propertyExpression {
  NSString *name = [((id<OrgOssPdfreporterEngineJRPropertyExpression>) nil_chk(propertyExpression)) getName];
  if (name == nil) {
    [self addBrokenRuleWithNSString:@"Property name missing." withId:propertyExpression];
  }
  id<OrgOssPdfreporterEngineJRExpression> expr = [propertyExpression getValueExpression];
  if (expr == nil) {
    [self addBrokenRuleWithNSString:@"Property value expression missing." withId:propertyExpression];
  }
}

- (void)verifyComponentElementWithOrgOssPdfreporterEngineJRComponentElement:(id<OrgOssPdfreporterEngineJRComponentElement>)element {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:element];
  OrgOssPdfreporterEngineComponentComponentKey *componentKey = [((id<OrgOssPdfreporterEngineJRComponentElement>) nil_chk(element)) getComponentKey];
  if (componentKey == nil) {
    [self addBrokenRuleWithNSString:@"No component key set for component element" withId:element];
  }
  id<OrgOssPdfreporterEngineComponentComponent> component = [element getComponent];
  if (component == nil) {
    [self addBrokenRuleWithNSString:@"No component set for component element" withId:element];
  }
  if (componentKey != nil && component != nil) {
    id<OrgOssPdfreporterEngineComponentComponentCompiler> compiler = [((id<OrgOssPdfreporterEngineComponentIComponentManager>) nil_chk([((OrgOssPdfreporterEngineComponentComponentsEnvironment *) nil_chk(OrgOssPdfreporterEngineComponentComponentsEnvironment_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_))) getManagerWithOrgOssPdfreporterEngineComponentComponentKey:componentKey])) getComponentCompilerWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_];
    [self pushCurrentComponentElementWithOrgOssPdfreporterEngineJRComponentElement:element];
    @try {
      [((id<OrgOssPdfreporterEngineComponentComponentCompiler>) nil_chk(compiler)) verifyWithOrgOssPdfreporterEngineComponentComponent:component withOrgOssPdfreporterEngineDesignJRVerifier:self];
    }
    @finally {
      [self popCurrentComponentElement];
    }
  }
}

- (id<OrgOssPdfreporterEngineJRComponentElement>)getCurrentComponentElement {
  if ([((JavaUtilLinkedList *) nil_chk(currentComponentElementStack_)) isEmpty]) {
    return nil;
  }
  return [((JavaUtilLinkedList *) nil_chk(currentComponentElementStack_)) getFirst];
}

- (void)pushCurrentComponentElementWithOrgOssPdfreporterEngineJRComponentElement:(id<OrgOssPdfreporterEngineJRComponentElement>)element {
  [((JavaUtilLinkedList *) nil_chk(currentComponentElementStack_)) addFirstWithId:element];
}

- (void)popCurrentComponentElement {
  (void) [((JavaUtilLinkedList *) nil_chk(currentComponentElementStack_)) removeFirst];
}

- (void)verifyGenericElementWithOrgOssPdfreporterEngineJRGenericElement:(id<OrgOssPdfreporterEngineJRGenericElement>)element {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:element];
  if ([((id<OrgOssPdfreporterEngineJRGenericElement>) nil_chk(element)) getEvaluationTimeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeEvaluationTimeEnum, GROUP)) {
    NSString *groupName = [element getEvaluationGroupName];
    if (groupName == nil) {
      [self addBrokenRuleWithNSString:@"Evaluation group not set for generic element" withId:element];
    }
    else {
      if (![((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getGroupsMap])) containsKeyWithId:groupName]) {
        [self addBrokenRuleWithNSString:JreStrcat("$$$", @"Generic element evaluation group ", groupName, @" not found in report") withId:element];
      }
    }
  }
  OrgOssPdfreporterEngineJRGenericElementType *type = [element getGenericType];
  if (type == nil) {
    [self addBrokenRuleWithNSString:@"No type set for generic element" withId:element];
  }
  else {
    if ([type getNamespace] == nil) {
      [self addBrokenRuleWithNSString:@"No namespace set for generic element type" withId:type];
    }
    if ([type getName] == nil) {
      [self addBrokenRuleWithNSString:@"No name set for generic element type" withId:type];
    }
  }
  IOSObjectArray *parameters = [element getParameters];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(parameters))->size_; i++) {
    id<OrgOssPdfreporterEngineJRGenericElementParameter> parameter = IOSObjectArray_Get(parameters, i);
    if ([((id<OrgOssPdfreporterEngineJRGenericElementParameter>) nil_chk(parameter)) getName] == nil) {
      [self addBrokenRuleWithNSString:@"No name set for generic element parameter" withId:parameter];
    }
  }
}

+ (jint)getBreakHeightWithOrgOssPdfreporterEngineJRBand:(id<OrgOssPdfreporterEngineJRBand>)band {
  return OrgOssPdfreporterEngineDesignJRVerifier_getBreakHeightWithOrgOssPdfreporterEngineJRBand_(band);
}

- (void)verifyExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
                                                         withId:(id)parent
                                                   withNSString:(NSString *)mandatoryMessage {
  if (expression == nil) {
    if (mandatoryMessage != nil) {
      [self addBrokenRuleWithNSString:mandatoryMessage withId:parent];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineDesignJasperDesign:", "JRVerifier", NULL, 0x4, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineDesignJasperDesign:withOrgOssPdfreporterEngineJRExpressionCollector:", "JRVerifier", NULL, 0x4, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineJasperReportsContext:withOrgOssPdfreporterEngineDesignJasperDesign:withOrgOssPdfreporterEngineJRExpressionCollector:", "JRVerifier", NULL, 0x4, NULL, NULL },
    { "getReportDesign", NULL, "Lorg.oss.pdfreporter.engine.design.JasperDesign;", 0x1, NULL, NULL },
    { "addBrokenRuleWithNSString:withId:", "addBrokenRule", "V", 0x1, NULL, NULL },
    { "addBrokenRuleWithJavaUtilCollection:withNSString:withId:", "addBrokenRule", "V", 0xc, NULL, "(Ljava/util/Collection<Lorg/oss/pdfreporter/engine/design/JRValidationFault;>;Ljava/lang/String;Ljava/lang/Object;)V" },
    { "addBrokenRuleWithJavaLangException:withId:", "addBrokenRule", "V", 0x1, NULL, NULL },
    { "verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:withOrgOssPdfreporterEngineJRExpressionCollector:", "verifyDesign", "Ljava.util.Collection;", 0x9, NULL, "(Lorg/oss/pdfreporter/engine/design/JasperDesign;Lorg/oss/pdfreporter/engine/JRExpressionCollector;)Ljava/util/Collection<Lorg/oss/pdfreporter/engine/design/JRValidationFault;>;" },
    { "verifyDesignWithOrgOssPdfreporterEngineJasperReportsContext:withOrgOssPdfreporterEngineDesignJasperDesign:withOrgOssPdfreporterEngineJRExpressionCollector:", "verifyDesign", "Ljava.util.Collection;", 0x9, NULL, "(Lorg/oss/pdfreporter/engine/JasperReportsContext;Lorg/oss/pdfreporter/engine/design/JasperDesign;Lorg/oss/pdfreporter/engine/JRExpressionCollector;)Ljava/util/Collection<Lorg/oss/pdfreporter/engine/design/JRValidationFault;>;" },
    { "verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:", "verifyDesign", "Ljava.util.Collection;", 0x9, NULL, "(Lorg/oss/pdfreporter/engine/design/JasperDesign;)Ljava/util/Collection<Lorg/oss/pdfreporter/engine/design/JRValidationFault;>;" },
    { "verifyDesign", NULL, "Ljava.util.Collection;", 0x4, NULL, "()Ljava/util/Collection<Lorg/oss/pdfreporter/engine/design/JRValidationFault;>;" },
    { "verifyEmptyBackground", NULL, "V", 0x4, NULL, NULL },
    { "verifyDesignAttributes", NULL, "V", 0x2, NULL, NULL },
    { "verifyBandHeightsWithJavaUtilCollection:withOrgOssPdfreporterEngineJRReport:withInt:withInt:withInt:", "verifyBandHeights", "V", 0x9, NULL, "(Ljava/util/Collection<Lorg/oss/pdfreporter/engine/design/JRValidationFault;>;Lorg/oss/pdfreporter/engine/JRReport;III)V" },
    { "verifyFormatFactoryClass", NULL, "V", 0x4, NULL, NULL },
    { "verifyQueryWithOrgOssPdfreporterEngineDesignJRDesignDataset:", "verifyQuery", "V", 0x2, NULL, NULL },
    { "verifyExpressionsWithJavaUtilList:withJavaUtilMap:withJavaUtilMap:withJavaUtilMap:", "verifyExpressions", "V", 0x2, NULL, "(Ljava/util/List<Lorg/oss/pdfreporter/engine/JRExpression;>;Ljava/util/Map<Ljava/lang/String;+Lorg/oss/pdfreporter/engine/JRParameter;>;Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/JRField;>;Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/JRVariable;>;)V" },
    { "verifyExpressionsWithOrgOssPdfreporterEngineDesignJRDesignDataset:", "verifyExpressions", "V", 0x2, NULL, NULL },
    { "verifyReportTemplates", NULL, "V", 0x4, NULL, NULL },
    { "verifyTemplateWithOrgOssPdfreporterEngineJRReportTemplate:", "verifyTemplate", "V", 0x4, NULL, NULL },
    { "verifyStyles", NULL, "V", 0x2, NULL, NULL },
    { "verifyConditionalStylesWithOrgOssPdfreporterEngineJRStyle:", "verifyConditionalStyles", "V", 0x2, NULL, NULL },
    { "verifyParametersWithOrgOssPdfreporterEngineDesignJRDesignDataset:", "verifyParameters", "V", 0x2, NULL, NULL },
    { "verifyFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset:", "verifyFields", "V", 0x2, NULL, NULL },
    { "verifySortFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset:", "verifySortFields", "V", 0x2, NULL, NULL },
    { "verifyVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset:", "verifyVariables", "V", 0x2, "Lorg.oss.pdfreporter.engine.JRRuntimeException;", NULL },
    { "verifyGroupsWithOrgOssPdfreporterEngineDesignJRDesignDataset:", "verifyGroups", "V", 0x2, NULL, NULL },
    { "verifyGroupHeaderAndFooterWithOrgOssPdfreporterEngineJRGroup:", "verifyGroupHeaderAndFooter", "V", 0x2, NULL, NULL },
    { "toVerifyElementOverlap", NULL, "Z", 0x4, NULL, NULL },
    { "isAllowedToOverlapWithOrgOssPdfreporterEngineJRElement:", "isAllowedToOverlap", "Z", 0x4, NULL, NULL },
    { "verifyElementOverlapWithOrgOssPdfreporterEngineJRElement:withOrgOssPdfreporterEngineJRElement:", "verifyElementOverlap", "V", 0x4, NULL, NULL },
    { "getElementPositionTextWithOrgOssPdfreporterEngineJRElement:", "getElementPositionText", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "verifyElementsOverlapWithOrgOssPdfreporterEngineJRElementArray:", "verifyElementsOverlap", "V", 0x4, NULL, NULL },
    { "verifySectionWithOrgOssPdfreporterEngineJRSection:", "verifySection", "V", 0x2, NULL, NULL },
    { "verifyBandWithOrgOssPdfreporterEngineJRBand:", "verifyBand", "V", 0x2, NULL, NULL },
    { "verifyElementWithOrgOssPdfreporterEngineJRElement:", "verifyElement", "V", 0x1, NULL, NULL },
    { "verifyStaticTextWithOrgOssPdfreporterEngineJRStaticText:", "verifyStaticText", "V", 0x2, NULL, NULL },
    { "verifyTextFieldWithOrgOssPdfreporterEngineJRTextField:", "verifyTextField", "V", 0x2, NULL, NULL },
    { "verifyAnchorWithOrgOssPdfreporterEngineJRAnchor:", "verifyAnchor", "V", 0x2, NULL, NULL },
    { "verifyHyperlinkWithOrgOssPdfreporterEngineJRHyperlink:", "verifyHyperlink", "V", 0x1, NULL, NULL },
    { "verifyHyperlinkParameterWithOrgOssPdfreporterEngineJRHyperlinkParameter:", "verifyHyperlinkParameter", "V", 0x4, NULL, NULL },
    { "verifyImageWithOrgOssPdfreporterEngineJRImage:", "verifyImage", "V", 0x2, NULL, NULL },
    { "verifySubreportWithOrgOssPdfreporterEngineJRSubreport:", "verifySubreport", "V", 0x2, NULL, NULL },
    { "verifyCrosstabWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:", "verifyCrosstab", "V", 0x2, NULL, NULL },
    { "verifyParametersWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:", "verifyParameters", "V", 0x2, NULL, NULL },
    { "verifyCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:", "verifyCrosstabRowGroup", "V", 0x2, NULL, NULL },
    { "verifyCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:", "verifyCrosstabColumnGroup", "V", 0x2, NULL, NULL },
    { "verifyCrosstabGroupWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:", "verifyCrosstabGroup", "V", 0x2, NULL, NULL },
    { "verifyCrosstabBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:", "verifyCrosstabBucket", "V", 0x2, NULL, NULL },
    { "verifyCrosstabCellsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:", "verifyCrosstabCells", "V", 0x2, NULL, NULL },
    { "getCrosstabCellTextWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroupArray:withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroupArray:withInt:withInt:", "getCrosstabCellText", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "verifyCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:", "verifyCrosstabMeasure", "V", 0x2, NULL, NULL },
    { "verifyExpressionsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:", "verifyExpressions", "V", 0x2, NULL, NULL },
    { "verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents:withNSString:", "verifyCellContents", "V", 0x2, NULL, NULL },
    { "verifyElementDatasetWithOrgOssPdfreporterEngineJRElementDataset:", "verifyElementDataset", "V", 0x1, NULL, NULL },
    { "verifyDatasetRunWithOrgOssPdfreporterEngineJRDatasetRun:", "verifyDatasetRun", "V", 0x1, NULL, NULL },
    { "verifyDatasets", NULL, "V", 0x2, NULL, NULL },
    { "verifyDatasetWithOrgOssPdfreporterEngineDesignJRDesignDataset:", "verifyDataset", "V", 0x2, NULL, NULL },
    { "verifyFrameWithOrgOssPdfreporterEngineJRFrame:", "verifyFrame", "V", 0x2, NULL, NULL },
    { "verifyReportElementWithOrgOssPdfreporterEngineJRElement:", "verifyReportElement", "V", 0x4, NULL, NULL },
    { "allowElementNegativeYWithOrgOssPdfreporterEngineJRElement:", "allowElementNegativeY", "Z", 0x4, NULL, NULL },
    { "verifyProperyExpressionsWithOrgOssPdfreporterEngineJRPropertyExpressionArray:", "verifyProperyExpressions", "V", 0x4, NULL, NULL },
    { "verifyPropertyExpressionWithOrgOssPdfreporterEngineJRPropertyExpression:", "verifyPropertyExpression", "V", 0x4, NULL, NULL },
    { "verifyComponentElementWithOrgOssPdfreporterEngineJRComponentElement:", "verifyComponentElement", "V", 0x4, NULL, NULL },
    { "getCurrentComponentElement", NULL, "Lorg.oss.pdfreporter.engine.JRComponentElement;", 0x1, NULL, NULL },
    { "pushCurrentComponentElementWithOrgOssPdfreporterEngineJRComponentElement:", "pushCurrentComponentElement", "V", 0x4, NULL, NULL },
    { "popCurrentComponentElement", NULL, "V", 0x4, NULL, NULL },
    { "verifyGenericElementWithOrgOssPdfreporterEngineJRGenericElement:", "verifyGenericElement", "V", 0x4, NULL, NULL },
    { "getBreakHeightWithOrgOssPdfreporterEngineJRBand:", "getBreakHeight", "I", 0xa, NULL, NULL },
    { "verifyExpressionWithOrgOssPdfreporterEngineJRExpression:withId:withNSString:", "verifyExpression", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PROPERTY_ALLOW_ELEMENT_OVERLAP", "PROPERTY_ALLOW_ELEMENT_OVERLAP", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_OVERLAP, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_ALLOW_ELEMENT_NEGATIVE_WIDTH", "PROPERTY_ALLOW_ELEMENT_NEGATIVE_WIDTH", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_WIDTH, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y", "PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y, NULL, .constantValue.asLong = 0 },
    { "jasperReportsContext_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.JasperReportsContext;", NULL, NULL, .constantValue.asLong = 0 },
    { "jasperDesign_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.design.JasperDesign;", NULL, NULL, .constantValue.asLong = 0 },
    { "brokenRules_", NULL, 0x2, "Ljava.util.Collection;", NULL, "Ljava/util/Collection<Lorg/oss/pdfreporter/engine/design/JRValidationFault;>;", .constantValue.asLong = 0 },
    { "expressionCollector_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.JRExpressionCollector;", NULL, NULL, .constantValue.asLong = 0 },
    { "currentComponentElementStack_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/oss/pdfreporter/engine/JRComponentElement;>;", .constantValue.asLong = 0 },
    { "allowElementNegativeWidth_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "allowElementNegativeY_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineDesignJRVerifier = { 2, "JRVerifier", "org.oss.pdfreporter.engine.design", NULL, 0x1, 70, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineDesignJRVerifier;
}

@end

void OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineDesignJasperDesign_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign) {
  OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(self, OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance(), jasperDesign, nil);
}

OrgOssPdfreporterEngineDesignJRVerifier *new_OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineDesignJasperDesign_(OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineDesignJRVerifier, initWithOrgOssPdfreporterEngineDesignJasperDesign_, jasperDesign)
}

OrgOssPdfreporterEngineDesignJRVerifier *create_OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineDesignJasperDesign_(OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineDesignJRVerifier, initWithOrgOssPdfreporterEngineDesignJasperDesign_, jasperDesign)
}

void OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector) {
  OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(self, OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance(), jasperDesign, expressionCollector);
}

OrgOssPdfreporterEngineDesignJRVerifier *new_OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineDesignJRVerifier, initWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_, jasperDesign, expressionCollector)
}

OrgOssPdfreporterEngineDesignJRVerifier *create_OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineDesignJRVerifier, initWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_, jasperDesign, expressionCollector)
}

void OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector) {
  NSObject_init(self);
  self->currentComponentElementStack_ = new_JavaUtilLinkedList_init();
  self->jasperReportsContext_ = jasperReportsContext;
  self->jasperDesign_ = jasperDesign;
  self->brokenRules_ = new_JavaUtilArrayList_init();
  if (expressionCollector != nil) {
    self->expressionCollector_ = expressionCollector;
  }
  else {
    self->expressionCollector_ = OrgOssPdfreporterEngineJRExpressionCollector_collectorWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRReport_(jasperReportsContext, jasperDesign);
  }
  self->allowElementNegativeWidth_ = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext))) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperDesign withNSString:OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_WIDTH withBoolean:false];
  self->allowElementNegativeY_ = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext))) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperDesign withNSString:OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y withBoolean:true];
}

OrgOssPdfreporterEngineDesignJRVerifier *new_OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineDesignJRVerifier, initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_, jasperReportsContext, jasperDesign, expressionCollector)
}

OrgOssPdfreporterEngineDesignJRVerifier *create_OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineDesignJRVerifier, initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_, jasperReportsContext, jasperDesign, expressionCollector)
}

void OrgOssPdfreporterEngineDesignJRVerifier_addBrokenRuleWithJavaUtilCollection_withNSString_withId_(id<JavaUtilCollection> brokenRules, NSString *message, id source) {
  OrgOssPdfreporterEngineDesignJRVerifier_initialize();
  OrgOssPdfreporterEngineDesignJRValidationFault *fault = new_OrgOssPdfreporterEngineDesignJRValidationFault_init();
  [fault setMessageWithNSString:message];
  [fault setSourceWithId:source];
  [((id<JavaUtilCollection>) nil_chk(brokenRules)) addWithId:fault];
}

id<JavaUtilCollection> OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector) {
  OrgOssPdfreporterEngineDesignJRVerifier_initialize();
  return OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance(), jasperDesign, expressionCollector);
}

id<JavaUtilCollection> OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector) {
  OrgOssPdfreporterEngineDesignJRVerifier_initialize();
  OrgOssPdfreporterEngineDesignJRVerifier *verifier = new_OrgOssPdfreporterEngineDesignJRVerifier_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(jasperReportsContext, jasperDesign, expressionCollector);
  return [verifier verifyDesign];
}

id<JavaUtilCollection> OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign_(OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign) {
  OrgOssPdfreporterEngineDesignJRVerifier_initialize();
  return OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(jasperDesign, nil);
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignAttributes(OrgOssPdfreporterEngineDesignJRVerifier *self) {
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getName] == nil || ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getName])) trim])) length]) == 0) {
    [self addBrokenRuleWithNSString:@"Report name is missing." withId:self->jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnCount] <= 0) {
    [self addBrokenRuleWithNSString:@"Column count must be greater than zero." withId:self->jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageWidth] < 0) {
    [self addBrokenRuleWithNSString:@"Page width must be positive." withId:self->jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeight] < 0) {
    [self addBrokenRuleWithNSString:@"Page height must be positive." withId:self->jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnWidth] < 0) {
    [self addBrokenRuleWithNSString:@"Column width must be positive." withId:self->jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnSpacing] < 0) {
    [self addBrokenRuleWithNSString:@"Column spacing must be positive." withId:self->jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getLeftMargin] < 0) {
    [self addBrokenRuleWithNSString:@"Left margin must be positive." withId:self->jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getRightMargin] < 0) {
    [self addBrokenRuleWithNSString:@"Right margin must be positive." withId:self->jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getTopMargin] < 0) {
    [self addBrokenRuleWithNSString:@"Top margin must be positive." withId:self->jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getBottomMargin] < 0) {
    [self addBrokenRuleWithNSString:@"Bottom margin must be positive." withId:self->jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getLeftMargin] + [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnCount] * [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnWidth] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnCount] - 1) * [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnSpacing] + [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getRightMargin] > [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageWidth]) {
    [self addBrokenRuleWithNSString:@"The columns and the margins do not fit the page width." withId:self->jasperDesign_];
  }
  OrgOssPdfreporterEngineDesignJRVerifier_verifyBandHeightsWithJavaUtilCollection_withOrgOssPdfreporterEngineJRReport_withInt_withInt_withInt_(self->brokenRules_, self->jasperDesign_, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeight], [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getTopMargin], [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getBottomMargin]);
  [self verifyFormatFactoryClass];
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyBandHeightsWithJavaUtilCollection_withOrgOssPdfreporterEngineJRReport_withInt_withInt_withInt_(id<JavaUtilCollection> brokenRules, id<OrgOssPdfreporterEngineJRReport> report, jint pageHeight, jint topMargin, jint bottomMargin) {
  OrgOssPdfreporterEngineDesignJRVerifier_initialize();
  if (topMargin + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getBackground] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getBackground])) getHeight] : 0) + bottomMargin > pageHeight) {
    OrgOssPdfreporterEngineDesignJRVerifier_addBrokenRuleWithJavaUtilCollection_withNSString_withId_(brokenRules, @"The background section and the margins do not fit the page height.", report);
  }
  if ([report isTitleNewPage]) {
    if (topMargin + OrgOssPdfreporterEngineDesignJRVerifier_getBreakHeightWithOrgOssPdfreporterEngineJRBand_([report getTitle]) + bottomMargin > pageHeight) {
      OrgOssPdfreporterEngineDesignJRVerifier_addBrokenRuleWithJavaUtilCollection_withNSString_withId_(brokenRules, @"The title section and the margins do not fit the page height.", report);
    }
  }
  else {
    if (topMargin + OrgOssPdfreporterEngineDesignJRVerifier_getBreakHeightWithOrgOssPdfreporterEngineJRBand_([report getTitle]) + ([report getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getPageHeader])) getHeight] : 0) + ([report getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getColumnHeader])) getHeight] : 0) + ([report getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getColumnFooter])) getHeight] : 0) + ([report getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getPageFooter])) getHeight] : 0) + bottomMargin > pageHeight) {
      OrgOssPdfreporterEngineDesignJRVerifier_addBrokenRuleWithJavaUtilCollection_withNSString_withId_(brokenRules, @"The title section, the page and column headers and footers and the margins do not fit the page height.", report);
    }
  }
  if (topMargin + ([report getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getPageHeader])) getHeight] : 0) + ([report getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getColumnHeader])) getHeight] : 0) + ([report getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getColumnFooter])) getHeight] : 0) + ([report getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getPageFooter])) getHeight] : 0) + bottomMargin > pageHeight) {
    OrgOssPdfreporterEngineDesignJRVerifier_addBrokenRuleWithJavaUtilCollection_withNSString_withId_(brokenRules, @"The page and column headers and footers and the margins do not fit the page height.", report);
  }
  if (topMargin + ([report getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getPageHeader])) getHeight] : 0) + ([report getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getColumnHeader])) getHeight] : 0) + ([report getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getColumnFooter])) getHeight] : 0) + ([report getLastPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getLastPageFooter])) getHeight] : 0) + bottomMargin > pageHeight) {
    OrgOssPdfreporterEngineDesignJRVerifier_addBrokenRuleWithJavaUtilCollection_withNSString_withId_(brokenRules, @"The page and column headers and footers and the margins do not fit the last page height.", report);
  }
  if (topMargin + OrgOssPdfreporterEngineDesignJRVerifier_getBreakHeightWithOrgOssPdfreporterEngineJRBand_([report getSummary]) + bottomMargin > pageHeight) {
    OrgOssPdfreporterEngineDesignJRVerifier_addBrokenRuleWithJavaUtilCollection_withNSString_withId_(brokenRules, @"The summary section and the margins do not fit the page height.", report);
  }
  id<OrgOssPdfreporterEngineJRSection> detailSection = [report getDetailSection];
  if (detailSection != nil) {
    IOSObjectArray *detailBands = [detailSection getBands];
    if (detailBands != nil && detailBands->size_ > 0) {
      for (jint i = 0; i < detailBands->size_; i++) {
        id<OrgOssPdfreporterEngineJRBand> detailBand = IOSObjectArray_Get(detailBands, i);
        if (topMargin + ([report getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getPageHeader])) getHeight] : 0) + ([report getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getColumnHeader])) getHeight] : 0) + OrgOssPdfreporterEngineDesignJRVerifier_getBreakHeightWithOrgOssPdfreporterEngineJRBand_(detailBand) + ([report getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getColumnFooter])) getHeight] : 0) + ([report getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([report getPageFooter])) getHeight] : 0) + bottomMargin > pageHeight) {
          OrgOssPdfreporterEngineDesignJRVerifier_addBrokenRuleWithJavaUtilCollection_withNSString_withId_(brokenRules, @"The detail section, the page and column headers and footers and the margins do not fit the page height.", report);
        }
      }
    }
  }
  if (topMargin + OrgOssPdfreporterEngineDesignJRVerifier_getBreakHeightWithOrgOssPdfreporterEngineJRBand_([report getNoData]) + bottomMargin > pageHeight) {
    OrgOssPdfreporterEngineDesignJRVerifier_addBrokenRuleWithJavaUtilCollection_withNSString_withId_(brokenRules, @"The noData section and the margins do not fit the page height.", report);
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyQueryWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset) {
  id<OrgOssPdfreporterEngineJRQuery> query = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getQuery];
  if (query != nil) {
    NSString *language = [query getLanguage];
    id<OrgOssPdfreporterEngineQueryQueryExecuterFactory> queryExecuterFactory = nil;
    if (language == nil || ((jint) [language length]) == 0) {
      [self addBrokenRuleWithNSString:@"Query language not set." withId:query];
    }
    else {
      @try {
        queryExecuterFactory = [((OrgOssPdfreporterEngineUtilJRQueryExecuterUtils *) nil_chk(OrgOssPdfreporterEngineUtilJRQueryExecuterUtils_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(self->jasperReportsContext_))) getExecuterFactoryWithNSString:[query getLanguage]];
      }
      @catch (OrgOssPdfreporterEngineJRException *e1) {
        [self addBrokenRuleWithNSString:JreStrcat("$$$", @"Query executer factory for ", language, @" cannot be created.") withId:query];
      }
    }
    IOSObjectArray *chunks = [query getChunks];
    if (chunks != nil && chunks->size_ > 0) {
      id<JavaUtilMap> parametersMap = [dataset getParametersMap];
      for (jint j = 0; j < chunks->size_; j++) {
        id<OrgOssPdfreporterEngineJRQueryChunk> queryChunk = IOSObjectArray_Get(chunks, j);
        switch ([((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(queryChunk)) getType]) {
          case OrgOssPdfreporterEngineJRQueryChunk_TYPE_PARAMETER:
          {
            id<OrgOssPdfreporterEngineJRParameter> parameter = [((id<JavaUtilMap>) nil_chk(parametersMap)) getWithId:[queryChunk getText]];
            if (parameter == nil) {
              [self addBrokenRuleWithNSString:JreStrcat("$$", @"Query parameter not found : ", [queryChunk getText]) withId:query];
            }
            else if (queryExecuterFactory != nil) {
              NSString *parameterType = nil;
              @try {
                parameterType = [parameter getValueClassName];
              }
              @catch (OrgOssPdfreporterEngineJRRuntimeException *e) {
              }
              if (parameterType != nil && ![queryExecuterFactory supportsQueryParameterTypeWithNSString:parameterType]) {
                [self addBrokenRuleWithNSString:JreStrcat("$$$$", @"Parameter type not supported in query : ", [queryChunk getText], @" class ", parameterType) withId:query];
              }
            }
            break;
          }
          case OrgOssPdfreporterEngineJRQueryChunk_TYPE_PARAMETER_CLAUSE:
          {
            if (![((id<JavaUtilMap>) nil_chk(parametersMap)) containsKeyWithId:[queryChunk getText]]) {
              [self addBrokenRuleWithNSString:JreStrcat("$$", @"Query parameter not found : ", [queryChunk getText]) withId:query];
            }
            break;
          }
          case OrgOssPdfreporterEngineJRQueryChunk_TYPE_TEXT:
          default:
          {
          }
        }
      }
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithJavaUtilList_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<JavaUtilList> expressions, id<JavaUtilMap> parametersMap, id<JavaUtilMap> fieldsMap, id<JavaUtilMap> variablesMap) {
  if (expressions != nil && [expressions size] > 0) {
    for (id<JavaUtilIterator> it = [expressions iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterEngineJRExpression> expression = [it next];
      IOSObjectArray *chunks = [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(expression)) getChunks];
      if (chunks != nil && chunks->size_ > 0) {
        for (jint j = 0; j < chunks->size_; j++) {
          id<OrgOssPdfreporterEngineJRExpressionChunk> expressionChunk = IOSObjectArray_Get(chunks, j);
          switch ([((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(expressionChunk)) getType]) {
            case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_VARIABLE:
            {
              if (![((id<JavaUtilMap>) nil_chk(variablesMap)) containsKeyWithId:[expressionChunk getText]]) {
                [self addBrokenRuleWithNSString:JreStrcat("$$", @"Variable not found : ", [expressionChunk getText]) withId:expression];
              }
              break;
            }
            case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_FIELD:
            {
              if (![((id<JavaUtilMap>) nil_chk(fieldsMap)) containsKeyWithId:[expressionChunk getText]]) {
                [self addBrokenRuleWithNSString:JreStrcat("$$", @"Field not found : ", [expressionChunk getText]) withId:expression];
              }
              break;
            }
            case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_PARAMETER:
            {
              if (![((id<JavaUtilMap>) nil_chk(parametersMap)) containsKeyWithId:[expressionChunk getText]]) {
                [self addBrokenRuleWithNSString:JreStrcat("$$", @"Parameter not found : ", [expressionChunk getText]) withId:expression];
              }
              break;
            }
            case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_RESOURCE:
            case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_TEXT:
            default:
            {
            }
          }
        }
      }
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset) {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithJavaUtilList_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(self, [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(self->expressionCollector_)) getExpressionsWithOrgOssPdfreporterEngineJRDataset:dataset], [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getParametersMap], [dataset getFieldsMap], [dataset getVariablesMap]);
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyStyles(OrgOssPdfreporterEngineDesignJRVerifier *self) {
  IOSObjectArray *styles = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getStyles];
  if (styles != nil && styles->size_ > 0) {
    for (jint index = 0; index < styles->size_; index++) {
      id<OrgOssPdfreporterEngineJRStyle> style = IOSObjectArray_Get(styles, index);
      if ([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName] == nil || ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([style getName])) trim])) length]) == 0) {
        [self addBrokenRuleWithNSString:@"Report style name missing." withId:style];
      }
      OrgOssPdfreporterEngineDesignJRVerifier_verifyConditionalStylesWithOrgOssPdfreporterEngineJRStyle_(self, style);
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyConditionalStylesWithOrgOssPdfreporterEngineJRStyle_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRStyle> style) {
  IOSObjectArray *condStyles = [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getConditionalStyles];
  if (condStyles != nil && condStyles->size_ > 0) {
    for (jint index = 0; index < condStyles->size_; index++) {
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyParametersWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset) {
  IOSObjectArray *parameters = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getParameters];
  if (parameters != nil && parameters->size_ > 0) {
    for (jint index = 0; index < parameters->size_; index++) {
      id<OrgOssPdfreporterEngineJRParameter> parameter = IOSObjectArray_Get(parameters, index);
      id errorSource = parameter;
      if ([((id<OrgOssPdfreporterEngineJRParameter>) nil_chk(parameter)) isSystemDefined]) {
        errorSource = self->jasperDesign_;
      }
      if ([parameter getName] == nil || ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([parameter getName])) trim])) length]) == 0) {
        [self addBrokenRuleWithNSString:@"Parameter name missing." withId:errorSource];
      }
      if ([parameter getValueClassName] == nil) {
        [self addBrokenRuleWithNSString:JreStrcat("$$", @"Class not set for parameter : ", [parameter getName]) withId:errorSource];
      }
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset) {
  IOSObjectArray *fields = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getFields];
  if (fields != nil && fields->size_ > 0) {
    for (jint index = 0; index < fields->size_; index++) {
      id<OrgOssPdfreporterEngineJRField> field = IOSObjectArray_Get(fields, index);
      if ([((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getName] == nil || ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([field getName])) trim])) length]) == 0) {
        [self addBrokenRuleWithNSString:@"Field name missing." withId:field];
      }
      @try {
        IOSClass *fieldType = [field getValueClass];
        if (fieldType == nil) {
          [self addBrokenRuleWithNSString:JreStrcat("$$", @"Class not set for field : ", [field getName]) withId:field];
        }
      }
      @catch (OrgOssPdfreporterEngineJRRuntimeException *e) {
        [self addBrokenRuleWithJavaLangException:e withId:field];
      }
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifySortFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset) {
  IOSObjectArray *fields = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getFields];
  IOSObjectArray *variables = [dataset getVariables];
  IOSObjectArray *sortFields = [dataset getSortFields];
  if (sortFields != nil && sortFields->size_ > 0) {
    for (jint index = 0; index < sortFields->size_; index++) {
      id<OrgOssPdfreporterEngineJRSortField> sortField = IOSObjectArray_Get(sortFields, index);
      NSString *sortFieldName = [((id<OrgOssPdfreporterEngineJRSortField>) nil_chk(sortField)) getName];
      if (sortFieldName == nil || ((jint) [((NSString *) nil_chk([sortFieldName trim])) length]) == 0) {
        [self addBrokenRuleWithNSString:@"Sort field name missing." withId:sortField];
      }
      else {
        jboolean isFound = false;
        if ([sortField getType] == JreLoadEnum(OrgOssPdfreporterEngineTypeSortFieldTypeEnum, VARIABLE)) {
          if (variables != nil) {
            jint j = 0;
            while (!isFound && j < variables->size_) {
              isFound = [sortFieldName isEqual:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(IOSObjectArray_Get(variables, j))) getName]];
              j++;
            }
          }
        }
        else {
          if (fields != nil) {
            jint j = 0;
            while (!isFound && j < fields->size_) {
              isFound = [sortFieldName isEqual:[((id<OrgOssPdfreporterEngineJRField>) nil_chk(IOSObjectArray_Get(fields, j))) getName]];
              j++;
            }
          }
        }
        if (!isFound) {
          [self addBrokenRuleWithNSString:JreStrcat("$$$$$", @"Sort ", [((NSString *) nil_chk([((OrgOssPdfreporterEngineTypeSortFieldTypeEnum *) nil_chk([sortField getType])) getName])) lowercaseString], @" '", sortFieldName, @"' not found in dataset.") withId:sortField];
        }
      }
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset) {
  IOSObjectArray *variables = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getVariables];
  if (variables != nil && variables->size_ > 0) {
    jboolean isMainDataset = [dataset isMainDataset];
    for (jint index = 0; index < variables->size_; index++) {
      id<OrgOssPdfreporterEngineJRVariable> variable = IOSObjectArray_Get(variables, index);
      if ([((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName] == nil || ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([variable getName])) trim])) length]) == 0) {
        [self addBrokenRuleWithNSString:@"Variable name missing." withId:variable];
      }
      @try {
        IOSClass *valueClass = [variable getValueClass];
        if (valueClass == nil) {
          [self addBrokenRuleWithNSString:JreStrcat("$$", @"Class not set for variable : ", [variable getName]) withId:variable];
        }
      }
      @catch (OrgOssPdfreporterEngineJRRuntimeException *e) {
        [self addBrokenRuleWithJavaLangException:e withId:variable];
      }
      OrgOssPdfreporterEngineTypeResetTypeEnum *resetType = [variable getResetTypeValue];
      if (resetType == JreLoadEnum(OrgOssPdfreporterEngineTypeResetTypeEnum, GROUP)) {
        if ([variable getResetGroup] == nil) {
          [self addBrokenRuleWithNSString:JreStrcat("$$", @"Reset group missing for variable : ", [variable getName]) withId:variable];
        }
        else {
          id<JavaUtilMap> groupsMap = [dataset getGroupsMap];
          if (![((id<JavaUtilMap>) nil_chk(groupsMap)) containsKeyWithId:[((id<OrgOssPdfreporterEngineJRGroup>) nil_chk([variable getResetGroup])) getName]]) {
            [self addBrokenRuleWithNSString:JreStrcat("$$$$", @"Reset group \"", [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk([variable getResetGroup])) getName], @"\" not found for variable : ", [variable getName]) withId:variable];
          }
        }
      }
      OrgOssPdfreporterEngineTypeIncrementTypeEnum *incrementType = [variable getIncrementTypeValue];
      if (incrementType == JreLoadEnum(OrgOssPdfreporterEngineTypeIncrementTypeEnum, GROUP)) {
        if ([variable getIncrementGroup] == nil) {
          [self addBrokenRuleWithNSString:JreStrcat("$$", @"Increment group missing for variable : ", [variable getName]) withId:variable];
        }
        else {
          id<JavaUtilMap> groupsMap = [dataset getGroupsMap];
          if (![((id<JavaUtilMap>) nil_chk(groupsMap)) containsKeyWithId:[((id<OrgOssPdfreporterEngineJRGroup>) nil_chk([variable getIncrementGroup])) getName]]) {
            [self addBrokenRuleWithNSString:JreStrcat("$$$$", @"Increment group \"", [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk([variable getIncrementGroup])) getName], @"\" not found for variable : ", [variable getName]) withId:variable];
          }
        }
      }
      if (!isMainDataset && ![variable isSystemDefined]) {
        if (resetType == JreLoadEnum(OrgOssPdfreporterEngineTypeResetTypeEnum, COLUMN) || resetType == JreLoadEnum(OrgOssPdfreporterEngineTypeResetTypeEnum, PAGE)) {
          [self addBrokenRuleWithNSString:JreStrcat("$$$$$", @"Variable ", [variable getName], @" of dataset ", [dataset getName], @" cannot have Column or Page reset type.") withId:variable];
        }
        if (incrementType == JreLoadEnum(OrgOssPdfreporterEngineTypeIncrementTypeEnum, COLUMN) || incrementType == JreLoadEnum(OrgOssPdfreporterEngineTypeIncrementTypeEnum, PAGE)) {
          [self addBrokenRuleWithNSString:JreStrcat("$$$$$", @"Variable ", [variable getName], @" of dataset ", [dataset getName], @" cannot have Column or Page increment type.") withId:variable];
        }
      }
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyGroupsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset) {
  IOSObjectArray *groups = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getGroups];
  if (groups != nil && groups->size_ > 0) {
    jboolean isMainDataset = [dataset isMainDataset];
    for (jint index = 0; index < groups->size_; index++) {
      id<OrgOssPdfreporterEngineJRGroup> group = IOSObjectArray_Get(groups, index);
      if ([((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getName] == nil || ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([group getName])) trim])) length]) == 0) {
        [self addBrokenRuleWithNSString:@"Group name missing." withId:group];
      }
      if (isMainDataset) {
        OrgOssPdfreporterEngineDesignJRVerifier_verifyGroupHeaderAndFooterWithOrgOssPdfreporterEngineJRGroup_(self, group);
      }
      else {
        if (([group getGroupHeaderSection] != nil && [((id<OrgOssPdfreporterEngineJRSection>) nil_chk([group getGroupHeaderSection])) getBands] != nil && ((IOSObjectArray *) nil_chk([((id<OrgOssPdfreporterEngineJRSection>) nil_chk([group getGroupHeaderSection])) getBands]))->size_ > 0) || ([group getGroupFooterSection] != nil && [((id<OrgOssPdfreporterEngineJRSection>) nil_chk([group getGroupFooterSection])) getBands] != nil && ((IOSObjectArray *) nil_chk([((id<OrgOssPdfreporterEngineJRSection>) nil_chk([group getGroupFooterSection])) getBands]))->size_ > 0)) {
          [self addBrokenRuleWithNSString:JreStrcat("$$$", @"Group ", [group getName], @" cannot have header or footer sections.") withId:group];
        }
      }
      if (isMainDataset) {
        OrgOssPdfreporterEngineDesignJRVerifier_verifySectionWithOrgOssPdfreporterEngineJRSection_(self, [group getGroupHeaderSection]);
        OrgOssPdfreporterEngineDesignJRVerifier_verifySectionWithOrgOssPdfreporterEngineJRSection_(self, [group getGroupFooterSection]);
      }
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyGroupHeaderAndFooterWithOrgOssPdfreporterEngineJRGroup_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRGroup> group) {
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) isTitleNewPage]) {
    id<OrgOssPdfreporterEngineJRSection> groupHeaderSection = [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupHeaderSection];
    if (groupHeaderSection != nil) {
      IOSObjectArray *groupHeaderBands = [groupHeaderSection getBands];
      if (groupHeaderBands != nil && groupHeaderBands->size_ > 0) {
        for (jint i = 0; i < groupHeaderBands->size_; i++) {
          id<OrgOssPdfreporterEngineJRBand> groupHeaderBand = IOSObjectArray_Get(groupHeaderBands, i);
          if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getTopMargin] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeader])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnHeader])) getHeight] : 0) + OrgOssPdfreporterEngineDesignJRVerifier_getBreakHeightWithOrgOssPdfreporterEngineJRBand_(groupHeaderBand) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnFooter])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageFooter])) getHeight] : 0) + [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getBottomMargin] > [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeight]) {
            [self addBrokenRuleWithNSString:JreStrcat("$$$", @"The '", [group getName], @"' group header section, the page and column headers and footers and the margins do not fit the page height.") withId:groupHeaderBand];
          }
        }
      }
    }
    id<OrgOssPdfreporterEngineJRSection> groupFooterSection = [group getGroupFooterSection];
    if (groupFooterSection != nil) {
      IOSObjectArray *groupFooterBands = [groupFooterSection getBands];
      if (groupFooterBands != nil && groupFooterBands->size_ > 0) {
        for (jint i = 0; i < groupFooterBands->size_; i++) {
          id<OrgOssPdfreporterEngineJRBand> groupFooterBand = IOSObjectArray_Get(groupFooterBands, i);
          if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getTopMargin] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeader])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnHeader])) getHeight] : 0) + OrgOssPdfreporterEngineDesignJRVerifier_getBreakHeightWithOrgOssPdfreporterEngineJRBand_(groupFooterBand) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnFooter])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageFooter])) getHeight] : 0) + [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getBottomMargin] > [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeight]) {
            [self addBrokenRuleWithNSString:JreStrcat("$$$", @"The '", [group getName], @"' group footer section, the page and column headers and footers and the margins do not fit the page height.") withId:groupFooterBand];
          }
        }
      }
    }
  }
  else {
    id<OrgOssPdfreporterEngineJRSection> groupHeaderSection = [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupHeaderSection];
    if (groupHeaderSection != nil) {
      IOSObjectArray *groupHeaderBands = [groupHeaderSection getBands];
      if (groupHeaderBands != nil && groupHeaderBands->size_ > 0) {
        for (jint i = 0; i < groupHeaderBands->size_; i++) {
          id<OrgOssPdfreporterEngineJRBand> groupHeaderBand = IOSObjectArray_Get(groupHeaderBands, i);
          if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getTopMargin] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getTitle] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getTitle])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeader])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnHeader])) getHeight] : 0) + OrgOssPdfreporterEngineDesignJRVerifier_getBreakHeightWithOrgOssPdfreporterEngineJRBand_(groupHeaderBand) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnFooter])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageFooter])) getHeight] : 0) + [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getBottomMargin] > [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeight]) {
            [self addBrokenRuleWithNSString:JreStrcat("$$$", @"The '", [group getName], @"' group header section, the title, the page and column headers and footers and the margins do not fit the first page height.") withId:groupHeaderBand];
          }
        }
      }
    }
    id<OrgOssPdfreporterEngineJRSection> groupFooterSection = [group getGroupFooterSection];
    if (groupFooterSection != nil) {
      IOSObjectArray *groupFooterBands = [groupFooterSection getBands];
      if (groupFooterBands != nil && groupFooterBands->size_ > 0) {
        for (jint i = 0; i < groupFooterBands->size_; i++) {
          id<OrgOssPdfreporterEngineJRBand> groupFooterBand = IOSObjectArray_Get(groupFooterBands, i);
          if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getTopMargin] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getTitle] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getTitle])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeader])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnHeader])) getHeight] : 0) + OrgOssPdfreporterEngineDesignJRVerifier_getBreakHeightWithOrgOssPdfreporterEngineJRBand_(groupFooterBand) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getColumnFooter])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageFooter])) getHeight] : 0) + [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getBottomMargin] > [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getPageHeight]) {
            [self addBrokenRuleWithNSString:JreStrcat("$$$", @"The '", [group getName], @"' group footer section, the title, the page and column headers and footers and the margins do not fit the first page height.") withId:groupFooterBand];
          }
        }
      }
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifySectionWithOrgOssPdfreporterEngineJRSection_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRSection> section) {
  if (section != nil) {
    IOSObjectArray *bands = [section getBands];
    if (bands != nil && bands->size_ > 0) {
      for (jint i = 0; i < bands->size_; i++) {
        OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(self, IOSObjectArray_Get(bands, i));
      }
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyBandWithOrgOssPdfreporterEngineJRBand_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRBand> band) {
  if (band != nil) {
    IOSObjectArray *elements = [band getElements];
    if (elements != nil && elements->size_ > 0) {
      for (jint index = 0; index < elements->size_; index++) {
        id<OrgOssPdfreporterEngineJRElement> element = IOSObjectArray_Get(elements, index);
        if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY] + [element getHeight] > [band getHeight]) {
          [self addBrokenRuleWithNSString:JreStrcat("$I$I$I", @"Warning : Element bottom reaches outside band area : y=", [element getY], @" height=", [element getHeight], @" band-height=", [band getHeight]) withId:element];
        }
        [self verifyElementWithOrgOssPdfreporterEngineJRElement:element];
      }
      [self verifyElementsOverlapWithOrgOssPdfreporterEngineJRElementArray:elements];
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyStaticTextWithOrgOssPdfreporterEngineJRStaticText_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRStaticText> staticText) {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:staticText];
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyTextFieldWithOrgOssPdfreporterEngineJRTextField_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRTextField> textField) {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:textField];
  OrgOssPdfreporterEngineDesignJRVerifier_verifyAnchorWithOrgOssPdfreporterEngineJRAnchor_(self, textField);
  [self verifyHyperlinkWithOrgOssPdfreporterEngineJRHyperlink:textField];
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyAnchorWithOrgOssPdfreporterEngineJRAnchor_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRAnchor> anchor) {
  if (anchor != nil) {
    if ([anchor getBookmarkLevel] != OrgOssPdfreporterEngineJRAnchor_NO_BOOKMARK && [anchor getBookmarkLevel] < 1) {
      [self addBrokenRuleWithNSString:JreStrcat("$I$", @"Bookmark level should be ", OrgOssPdfreporterEngineJRAnchor_NO_BOOKMARK, @" or greater than 0") withId:anchor];
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyImageWithOrgOssPdfreporterEngineJRImage_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRImage> image) {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:image];
  OrgOssPdfreporterEngineDesignJRVerifier_verifyAnchorWithOrgOssPdfreporterEngineJRAnchor_(self, image);
  [self verifyHyperlinkWithOrgOssPdfreporterEngineJRHyperlink:image];
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifySubreportWithOrgOssPdfreporterEngineJRSubreport_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRSubreport> subreport) {
  if (subreport != nil) {
    [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:subreport];
    IOSObjectArray *parameters = [subreport getParameters];
    if (parameters != nil && parameters->size_ > 0) {
      for (jint index = 0; index < parameters->size_; index++) {
        id<OrgOssPdfreporterEngineJRSubreportParameter> parameter = IOSObjectArray_Get(parameters, index);
        if ([((id<OrgOssPdfreporterEngineJRSubreportParameter>) nil_chk(parameter)) getName] == nil || ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([parameter getName])) trim])) length]) == 0) {
          [self addBrokenRuleWithNSString:@"Subreport parameter name missing." withId:parameter];
        }
      }
    }
    if ([subreport getConnectionExpression] != nil && [subreport getDataSourceExpression] != nil) {
      [self addBrokenRuleWithNSString:@"Subreport cannot have both connection expresion and data source expression." withId:subreport];
    }
    IOSObjectArray *returnValues = [subreport getReturnValues];
    if (returnValues != nil && returnValues->size_ > 0) {
      for (jint i = 0; i < returnValues->size_; i++) {
        id<OrgOssPdfreporterEngineJRSubreportReturnValue> returnValue = IOSObjectArray_Get(returnValues, i);
        if ([((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getSubreportVariable] == nil || ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([returnValue getSubreportVariable])) trim])) length]) == 0) {
          [self addBrokenRuleWithNSString:@"Subreport return value variable name missing." withId:returnValue];
        }
        if ([returnValue getToVariable] == nil || ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([returnValue getToVariable])) trim])) length]) == 0) {
          [self addBrokenRuleWithNSString:@"Subreport return value to variable name missing." withId:returnValue];
        }
        if (![((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getVariablesMap])) containsKeyWithId:[returnValue getToVariable]]) {
          [self addBrokenRuleWithNSString:@"Subreport return value to variable not found." withId:returnValue];
        }
      }
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab) {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:crosstab];
  OrgOssPdfreporterEngineDesignJRVerifier_verifyParametersWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(self, crosstab);
  id<OrgOssPdfreporterCrosstabsJRCrosstabDataset> dataset = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getDataset];
  if (dataset == nil) {
    [self addBrokenRuleWithNSString:@"Crosstab dataset missing." withId:crosstab];
  }
  else {
    [self verifyElementDatasetWithOrgOssPdfreporterEngineJRElementDataset:dataset];
  }
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents_withNSString_(self, [crosstab getHeaderCell], @"crosstab cell");
  IOSObjectArray *rowGroups = [crosstab getRowGroups];
  if (rowGroups == nil || rowGroups->size_ == 0) {
    [self addBrokenRuleWithNSString:@"Crosstab should have at least one row group." withId:crosstab];
  }
  else {
    for (jint i = 0; i < rowGroups->size_; i++) {
      OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup_(self, IOSObjectArray_Get(rowGroups, i));
    }
  }
  IOSObjectArray *colGroups = [crosstab getColumnGroups];
  if (colGroups == nil || colGroups->size_ == 0) {
    [self addBrokenRuleWithNSString:@"Crosstab should have at least one column group." withId:crosstab];
  }
  else {
    for (jint i = 0; i < colGroups->size_; i++) {
      OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup_(self, IOSObjectArray_Get(colGroups, i));
    }
  }
  IOSObjectArray *measures = [crosstab getMeasures];
  if (measures == nil || measures->size_ == 0) {
    [self addBrokenRuleWithNSString:@"Crosstab should have at least one measure." withId:crosstab];
  }
  else {
    for (jint i = 0; i < measures->size_; i++) {
      OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure_(self, IOSObjectArray_Get(measures, i));
    }
  }
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabCellsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(self, crosstab);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents_withNSString_(self, [crosstab getWhenNoDataCell], @"when no data cell");
  OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(self, crosstab);
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyParametersWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab) {
  IOSObjectArray *parameters = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getParameters];
  if (parameters != nil) {
    for (jint i = 0; i < parameters->size_; i++) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabParameter> parameter = IOSObjectArray_Get(parameters, i);
      NSString *paramName = [((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName];
      if (paramName == nil || ((jint) [paramName length]) == 0) {
        [self addBrokenRuleWithNSString:@"Missing parameter name for crosstab." withId:parameter];
      }
      @try {
        IOSClass *valueClass = [parameter getValueClass];
        if (valueClass == nil) {
          [self addBrokenRuleWithNSString:JreStrcat("$$C", @"Class not set for crosstab parameter ", paramName, '.') withId:parameter];
        }
      }
      @catch (JavaLangException *e) {
        [self addBrokenRuleWithJavaLangException:e withId:parameter];
      }
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> group) {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabGroupWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_(self, group);
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> group) {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabGroupWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_(self, group);
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabGroupWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterCrosstabsJRCrosstabGroup> group) {
  NSString *groupName = [((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(group)) getName];
  if (groupName == nil || ((jint) [groupName length]) == 0) {
    [self addBrokenRuleWithNSString:@"Crosstab group name missing." withId:group];
  }
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_(self, group);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents_withNSString_(self, [group getHeader], JreStrcat("$$", groupName, @" header"));
  if ([group hasTotal]) {
    OrgOssPdfreporterEngineDesignJRVerifier_verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents_withNSString_(self, [group getTotalHeader], JreStrcat("$$", groupName, @" total header"));
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterCrosstabsJRCrosstabGroup> group) {
  id<OrgOssPdfreporterCrosstabsJRCrosstabBucket> bucket = [((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(group)) getBucket];
  @try {
    IOSClass *valueClass = [((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getValueClass];
    if (valueClass == nil) {
      [self addBrokenRuleWithNSString:JreStrcat("$$", @"Class not set for bucket : ", [group getName]) withId:bucket];
    }
  }
  @catch (OrgOssPdfreporterEngineJRRuntimeException *e) {
    [self addBrokenRuleWithJavaLangException:e withId:bucket];
  }
  id<OrgOssPdfreporterEngineJRExpression> expression = [bucket getExpression];
  if (expression == nil) {
    [self addBrokenRuleWithNSString:JreStrcat("$$C", @"Crosstab bucket expression missing for group ", [group getName], '.') withId:bucket];
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabCellsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab) {
  id<OrgOssPdfreporterCommonsArraysArray2D> cells = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getCells];
  IOSObjectArray *rowGroups = [crosstab getRowGroups];
  IOSObjectArray *columnGroups = [crosstab getColumnGroups];
  id<OrgOssPdfreporterCrosstabsJRCrosstabCell> baseCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(cells)) getWithInt:((IOSObjectArray *) nil_chk(rowGroups))->size_ withInt:((IOSObjectArray *) nil_chk(columnGroups))->size_];
  if (baseCell == nil || [baseCell getWidth] == nil) {
    [self addBrokenRuleWithNSString:@"Crosstab base cell width not specified." withId:crosstab];
  }
  if (baseCell == nil || [baseCell getHeight] == nil) {
    [self addBrokenRuleWithNSString:@"Crosstab base cell height not specified." withId:crosstab];
  }
  for (jint i = rowGroups->size_; i >= 0; --i) {
    for (jint j = columnGroups->size_; j >= 0; --j) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [cells getWithInt:i withInt:j];
      NSString *cellText = OrgOssPdfreporterEngineDesignJRVerifier_getCrosstabCellTextWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroupArray_withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroupArray_withInt_withInt_(self, rowGroups, columnGroups, i, j);
      if (cell != nil) {
        id<OrgOssPdfreporterCrosstabsJRCellContents> contents = [cell getContents];
        if (i < rowGroups->size_) {
          id<OrgOssPdfreporterCrosstabsJRCrosstabCell> colCell = [cells getWithInt:rowGroups->size_ withInt:j];
          if (colCell != nil && [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([colCell getContents])) getWidth] != [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(contents)) getWidth]) {
            [self addBrokenRuleWithNSString:JreStrcat("$$$IC", @"Crosstab ", cellText, @" width should be ", [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([colCell getContents])) getWidth], '.') withId:cell];
          }
        }
        if (j < columnGroups->size_) {
          id<OrgOssPdfreporterCrosstabsJRCrosstabCell> rowCell = [cells getWithInt:i withInt:columnGroups->size_];
          if (rowCell != nil && [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([rowCell getContents])) getHeight] != [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(contents)) getHeight]) {
            [self addBrokenRuleWithNSString:JreStrcat("$$$IC", @"Crosstab ", cellText, @" height should be ", [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([rowCell getContents])) getHeight], '.') withId:cell];
          }
        }
        OrgOssPdfreporterEngineDesignJRVerifier_verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents_withNSString_(self, contents, cellText);
      }
    }
  }
}

NSString *OrgOssPdfreporterEngineDesignJRVerifier_getCrosstabCellTextWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroupArray_withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroupArray_withInt_withInt_(OrgOssPdfreporterEngineDesignJRVerifier *self, IOSObjectArray *rowGroups, IOSObjectArray *columnGroups, jint rowIndex, jint columnIndex) {
  NSString *text;
  if (rowIndex == ((IOSObjectArray *) nil_chk(rowGroups))->size_) {
    if (columnIndex == ((IOSObjectArray *) nil_chk(columnGroups))->size_) {
      text = @"cell";
    }
    else {
      text = JreStrcat("$$", [((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(IOSObjectArray_Get(columnGroups, columnIndex))) getName], @" total cell");
    }
  }
  else {
    if (columnIndex == ((IOSObjectArray *) nil_chk(columnGroups))->size_) {
      text = JreStrcat("$$", [((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(IOSObjectArray_Get(rowGroups, rowIndex))) getName], @" total cell");
    }
    else {
      text = JreStrcat("$C$$", [((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(IOSObjectArray_Get(rowGroups, rowIndex))) getName], ',', [((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(IOSObjectArray_Get(columnGroups, columnIndex))) getName], @" total cell");
    }
  }
  return text;
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> measure) {
  NSString *measureName = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getName];
  if (measureName == nil || ((jint) [((NSString *) nil_chk([measureName trim])) length]) == 0) {
    [self addBrokenRuleWithNSString:@"Measure name missing." withId:measure];
  }
  OrgOssPdfreporterEngineTypeCalculationEnum *calculation = [measure getCalculationValue];
  if (calculation == JreLoadEnum(OrgOssPdfreporterEngineTypeCalculationEnum, SYSTEM)) {
    [self addBrokenRuleWithNSString:@"Crosstab mesures cannot have system calculation" withId:measure];
  }
  id<OrgOssPdfreporterEngineJRExpression> valueExpression = [measure getValueExpression];
  if (valueExpression == nil) {
    [self addBrokenRuleWithNSString:JreStrcat("$$", @"Missing expression for measure ", measureName) withId:measure];
  }
  @try {
    IOSClass *valueClass = [measure getValueClass];
    if (valueClass == nil) {
      [self addBrokenRuleWithNSString:@"Measure value class missing." withId:measure];
    }
    if ([measure getPercentageType] != JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabPercentageEnum, NONE)) {
      IOSClass *percentageCalculatorClass = [measure getPercentageCalculatorClass];
      if (percentageCalculatorClass == nil) {
      }
      else {
      }
    }
  }
  @catch (OrgOssPdfreporterEngineJRRuntimeException *e) {
    [self addBrokenRuleWithJavaLangException:e withId:measure];
  }
  @try {
    (void) [measure getIncrementerFactoryClass];
  }
  @catch (OrgOssPdfreporterEngineJRRuntimeException *e) {
    [self addBrokenRuleWithJavaLangException:e withId:measure];
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab) {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithJavaUtilList_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_(self, [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(self->expressionCollector_)) getExpressionsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab], [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getParametersMap], new_JavaUtilHashMap_init(), [crosstab getVariablesMap]);
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents_withNSString_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterCrosstabsJRCellContents> contents, NSString *cellText) {
  if (contents != nil) {
    IOSObjectArray *elements = [contents getElements];
    if (elements != nil && elements->size_ > 0) {
      jint topPadding = 0;
      jint leftPadding = 0;
      jint bottomPadding = 0;
      jint rightPadding = 0;
      id<OrgOssPdfreporterEngineJRLineBox> box = [contents getLineBox];
      if (box != nil) {
        topPadding = [((JavaLangInteger *) nil_chk([box getTopPadding])) intValue];
        leftPadding = [((JavaLangInteger *) nil_chk([box getLeftPadding])) intValue];
        bottomPadding = [((JavaLangInteger *) nil_chk([box getBottomPadding])) intValue];
        rightPadding = [((JavaLangInteger *) nil_chk([box getRightPadding])) intValue];
      }
      jint cellWidth = [contents getWidth];
      jboolean widthCalculated = cellWidth != OrgOssPdfreporterCrosstabsJRCellContents_NOT_CALCULATED;
      jint avlblWidth = cellWidth - leftPadding - rightPadding;
      jint cellHeight = [contents getHeight];
      jboolean heightCalculated = cellHeight != OrgOssPdfreporterCrosstabsJRCellContents_NOT_CALCULATED;
      jint avlblHeight = cellHeight - topPadding - bottomPadding;
      for (jint i = 0; i < elements->size_; i++) {
        id<OrgOssPdfreporterEngineJRElement> element = IOSObjectArray_Get(elements, i);
        if (widthCalculated && [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getX] + [element getWidth] > avlblWidth) {
          [self addBrokenRuleWithNSString:JreStrcat("$$$I$I$IC", @"Element reaches outside ", cellText, @" width: x=", [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getX], @", width=", [element getWidth], @", available width=", avlblWidth, '.') withId:element];
        }
        if (heightCalculated && [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY] + [element getHeight] > avlblHeight) {
          [self addBrokenRuleWithNSString:JreStrcat("$$$I$I$IC", @"Element reaches outside ", cellText, @" height: y=", [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY], @", height=", [element getHeight], @", available height=", avlblHeight, '.') withId:element];
        }
        if ([OrgOssPdfreporterEngineJRStaticText_class_() isInstance:element]) {
          OrgOssPdfreporterEngineDesignJRVerifier_verifyStaticTextWithOrgOssPdfreporterEngineJRStaticText_(self, (id<OrgOssPdfreporterEngineJRStaticText>) cast_check(element, OrgOssPdfreporterEngineJRStaticText_class_()));
        }
        else if ([OrgOssPdfreporterEngineJRTextField_class_() isInstance:element]) {
          id<OrgOssPdfreporterEngineJRTextField> textField = (id<OrgOssPdfreporterEngineJRTextField>) cast_check(element, OrgOssPdfreporterEngineJRTextField_class_());
          if ([((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(textField)) getEvaluationTimeValue] != JreLoadEnum(OrgOssPdfreporterEngineTypeEvaluationTimeEnum, NOW)) {
            [self addBrokenRuleWithNSString:@"Elements with delayed evaluation time are not supported inside crosstab cells." withId:textField];
          }
          OrgOssPdfreporterEngineDesignJRVerifier_verifyTextFieldWithOrgOssPdfreporterEngineJRTextField_(self, textField);
        }
        else if ([OrgOssPdfreporterEngineJRImage_class_() isInstance:element]) {
          id<OrgOssPdfreporterEngineJRImage> image = (id<OrgOssPdfreporterEngineJRImage>) cast_check(element, OrgOssPdfreporterEngineJRImage_class_());
          if ([((id<OrgOssPdfreporterEngineJRImage>) nil_chk(image)) getEvaluationTimeValue] != JreLoadEnum(OrgOssPdfreporterEngineTypeEvaluationTimeEnum, NOW)) {
            [self addBrokenRuleWithNSString:@"Elements with delayed evaluation time are not supported inside crosstab cells." withId:image];
          }
          OrgOssPdfreporterEngineDesignJRVerifier_verifyImageWithOrgOssPdfreporterEngineJRImage_(self, image);
        }
        else if ([OrgOssPdfreporterEngineJRFrame_class_() isInstance:element]) {
          OrgOssPdfreporterEngineDesignJRVerifier_verifyFrameWithOrgOssPdfreporterEngineJRFrame_(self, (id<OrgOssPdfreporterEngineJRFrame>) cast_check(element, OrgOssPdfreporterEngineJRFrame_class_()));
        }
        else if ([OrgOssPdfreporterEngineJRSubreport_class_() isInstance:element]) {
          [self addBrokenRuleWithNSString:@"Subreports are not allowed inside crosstab cells." withId:element];
        }
        else if ([OrgOssPdfreporterCrosstabsJRCrosstab_class_() isInstance:element]) {
          [self addBrokenRuleWithNSString:@"Crosstabs are not allowed inside crosstab cells." withId:element];
        }
      }
      [self verifyElementsOverlapWithOrgOssPdfreporterEngineJRElementArray:elements];
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyDatasets(OrgOssPdfreporterEngineDesignJRVerifier *self) {
  IOSObjectArray *datasets = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getDatasets];
  if (datasets != nil && datasets->size_ > 0) {
    for (jint i = 0; i < datasets->size_; ++i) {
      OrgOssPdfreporterEngineDesignJRDesignDataset *dataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) cast_chk(IOSObjectArray_Get(datasets, i), [OrgOssPdfreporterEngineDesignJRDesignDataset class]);
      if ([((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getName] == nil || ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([dataset getName])) trim])) length]) == 0) {
        [self addBrokenRuleWithNSString:@"Dataset name is missing." withId:dataset];
      }
      OrgOssPdfreporterEngineDesignJRVerifier_verifyDatasetWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
    }
  }
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyDatasetWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineDesignJRVerifier *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset) {
  OrgOssPdfreporterEngineDesignJRVerifier_verifyExpressionsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyParametersWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyQueryWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
  OrgOssPdfreporterEngineDesignJRVerifier_verifySortFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
  OrgOssPdfreporterEngineDesignJRVerifier_verifyGroupsWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
}

void OrgOssPdfreporterEngineDesignJRVerifier_verifyFrameWithOrgOssPdfreporterEngineJRFrame_(OrgOssPdfreporterEngineDesignJRVerifier *self, id<OrgOssPdfreporterEngineJRFrame> frame) {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:frame];
  IOSObjectArray *elements = [((id<OrgOssPdfreporterEngineJRFrame>) nil_chk(frame)) getElements];
  if (elements != nil && elements->size_ > 0) {
    jint topPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([frame getLineBox])) getTopPadding])) intValue];
    jint leftPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([frame getLineBox])) getLeftPadding])) intValue];
    jint bottomPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([frame getLineBox])) getBottomPadding])) intValue];
    jint rightPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([frame getLineBox])) getRightPadding])) intValue];
    jint avlblWidth = [frame getWidth] - leftPadding - rightPadding;
    jint avlblHeight = [frame getHeight] - topPadding - bottomPadding;
    for (jint i = 0; i < elements->size_; i++) {
      id<OrgOssPdfreporterEngineJRElement> element = IOSObjectArray_Get(elements, i);
      if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getX] + [element getWidth] > avlblWidth) {
        [self addBrokenRuleWithNSString:JreStrcat("$I$I$IC", @"Element reaches outside frame width: x=", [element getX], @", width=", [element getWidth], @", available width=", avlblWidth, '.') withId:element];
      }
      if ([element getY] + [element getHeight] > avlblHeight) {
        [self addBrokenRuleWithNSString:JreStrcat("$I$I$IC", @"Element reaches outside frame height: y=", [element getY], @", height=", [element getHeight], @", available height=", avlblHeight, '.') withId:element];
      }
      [self verifyElementWithOrgOssPdfreporterEngineJRElement:element];
    }
    [self verifyElementsOverlapWithOrgOssPdfreporterEngineJRElementArray:elements];
  }
}

jint OrgOssPdfreporterEngineDesignJRVerifier_getBreakHeightWithOrgOssPdfreporterEngineJRBand_(id<OrgOssPdfreporterEngineJRBand> band) {
  OrgOssPdfreporterEngineDesignJRVerifier_initialize();
  jint breakHeight = 0;
  if (band != nil) {
    breakHeight = [band getHeight];
    IOSObjectArray *elements = [band getElements];
    if (JreLoadEnum(OrgOssPdfreporterEngineTypeSplitTypeEnum, IMMEDIATE) == [band getSplitTypeValue] && elements != nil && elements->size_ > 0) {
      for (jint i = 0; i < elements->size_; i++) {
        id<OrgOssPdfreporterEngineJRElement> element = IOSObjectArray_Get(elements, i);
        jint bottom = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY] + [element getHeight];
        breakHeight = bottom < breakHeight ? bottom : breakHeight;
      }
    }
  }
  return breakHeight;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineDesignJRVerifier)
