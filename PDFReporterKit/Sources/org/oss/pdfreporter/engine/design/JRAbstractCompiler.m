//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/design/JRAbstractCompiler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/Serializable.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Random.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRReport.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/design/JRAbstractCompiler.h"
#include "org/oss/pdfreporter/engine/design/JRCompilationSourceCode.h"
#include "org/oss/pdfreporter/engine/design/JRCompilationUnit.h"
#include "org/oss/pdfreporter/engine/design/JRCompiler.h"
#include "org/oss/pdfreporter/engine/design/JRDesignDataset.h"
#include "org/oss/pdfreporter/engine/design/JRReportCompileData.h"
#include "org/oss/pdfreporter/engine/design/JRSourceCompileTask.h"
#include "org/oss/pdfreporter/engine/design/JRValidationException.h"
#include "org/oss/pdfreporter/engine/design/JRVerifier.h"
#include "org/oss/pdfreporter/engine/design/JasperDesign.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluator.h"
#include "org/oss/pdfreporter/engine/util/JRSaver.h"
#include "org/oss/pdfreporter/engine/util/JRStringUtil.h"

@interface OrgOssPdfreporterEngineDesignJRAbstractCompiler () {
 @public
  jboolean needsSourceFiles_;
}

+ (NSString *)createNameSuffix;

- (void)verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                 withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector;

- (OrgOssPdfreporterEngineDesignJRCompilationUnit *)createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                                                  withOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset
                                                                  withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector
                                                                                                    withJavaIoFile:(JavaIoFile *)saveSourceDir
                                                                                                      withNSString:(NSString *)nameSuffix;

- (OrgOssPdfreporterEngineDesignJRCompilationUnit *)createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                                              withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab
                                                                  withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector
                                                                                                    withJavaIoFile:(JavaIoFile *)saveSourceDir
                                                                                                      withNSString:(NSString *)nameSuffix;

- (JavaIoFile *)getSourceFileWithJavaIoFile:(JavaIoFile *)saveSourceDir
                               withNSString:(NSString *)unitName
withOrgOssPdfreporterEngineDesignJRCompilationSourceCode:(id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode>)sourceCode;

- (void)deleteSourceFilesWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:(IOSObjectArray *)units;

@end

inline JavaUtilLoggingLogger *OrgOssPdfreporterEngineDesignJRAbstractCompiler_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineDesignJRAbstractCompiler, logger, JavaUtilLoggingLogger *)

inline jint OrgOssPdfreporterEngineDesignJRAbstractCompiler_get_NAME_SUFFIX_RANDOM_MAX();
#define OrgOssPdfreporterEngineDesignJRAbstractCompiler_NAME_SUFFIX_RANDOM_MAX 1000000
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterEngineDesignJRAbstractCompiler, NAME_SUFFIX_RANDOM_MAX, jint)

inline JavaUtilRandom *OrgOssPdfreporterEngineDesignJRAbstractCompiler_get_random();
static JavaUtilRandom *OrgOssPdfreporterEngineDesignJRAbstractCompiler_random;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineDesignJRAbstractCompiler, random, JavaUtilRandom *)

__attribute__((unused)) static NSString *OrgOssPdfreporterEngineDesignJRAbstractCompiler_createNameSuffix();

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRAbstractCompiler_verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(OrgOssPdfreporterEngineDesignJRAbstractCompiler *self, OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector);

__attribute__((unused)) static OrgOssPdfreporterEngineDesignJRCompilationUnit *OrgOssPdfreporterEngineDesignJRAbstractCompiler_createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineDesignJRDesignDataset_withOrgOssPdfreporterEngineJRExpressionCollector_withJavaIoFile_withNSString_(OrgOssPdfreporterEngineDesignJRAbstractCompiler *self, OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector, JavaIoFile *saveSourceDir, NSString *nameSuffix);

__attribute__((unused)) static OrgOssPdfreporterEngineDesignJRCompilationUnit *OrgOssPdfreporterEngineDesignJRAbstractCompiler_createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterEngineJRExpressionCollector_withJavaIoFile_withNSString_(OrgOssPdfreporterEngineDesignJRAbstractCompiler *self, OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector, JavaIoFile *saveSourceDir, NSString *nameSuffix);

__attribute__((unused)) static JavaIoFile *OrgOssPdfreporterEngineDesignJRAbstractCompiler_getSourceFileWithJavaIoFile_withNSString_withOrgOssPdfreporterEngineDesignJRCompilationSourceCode_(OrgOssPdfreporterEngineDesignJRAbstractCompiler *self, JavaIoFile *saveSourceDir, NSString *unitName, id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode> sourceCode);

__attribute__((unused)) static void OrgOssPdfreporterEngineDesignJRAbstractCompiler_deleteSourceFilesWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray_(OrgOssPdfreporterEngineDesignJRAbstractCompiler *self, IOSObjectArray *units);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineDesignJRAbstractCompiler)

@implementation OrgOssPdfreporterEngineDesignJRAbstractCompiler

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                        withBoolean:(jboolean)needsSourceFiles {
  OrgOssPdfreporterEngineDesignJRAbstractCompiler_initWithOrgOssPdfreporterEngineJasperReportsContext_withBoolean_(self, jasperReportsContext, needsSourceFiles);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)needsSourceFiles {
  OrgOssPdfreporterEngineDesignJRAbstractCompiler_initWithBoolean_(self, needsSourceFiles);
  return self;
}

+ (NSString *)getUnitNameWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)report
                            withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset {
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJasperReport_withOrgOssPdfreporterEngineJRDataset_(report, dataset);
}

+ (NSString *)getUnitNameWithOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                        withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                                withNSString:(NSString *)nameSuffix {
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJRReport_withOrgOssPdfreporterEngineJRDataset_withNSString_(report, dataset, nameSuffix);
}

+ (NSString *)getUnitNameWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)report
                        withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJasperReport_withOrgOssPdfreporterCrosstabsJRCrosstab_(report, crosstab);
}

+ (NSString *)getUnitNameWithOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                    withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
            withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector
                                                withNSString:(NSString *)nameSuffix {
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJRReport_withOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineJRExpressionCollector_withNSString_(report, crosstab, expressionCollector, nameSuffix);
}

+ (NSString *)getUnitNameWithOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                                                     withInt:(jint)crosstabId
                                                withNSString:(NSString *)nameSuffix {
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJRReport_withInt_withNSString_(report, crosstabId, nameSuffix);
}

- (OrgOssPdfreporterEngineJasperReport *)compileReportWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  [self checkLanguageWithNSString:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign)) getLanguage]];
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger)) finestWithNSString:JreStrcat("$$$", @"Compiler language: ", [jasperDesign getLanguage], @" veryfied.")];
  OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector = OrgOssPdfreporterEngineJRExpressionCollector_collectorWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRReport_(jasperReportsContext_, jasperDesign);
  OrgOssPdfreporterEngineDesignJRAbstractCompiler_verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(self, jasperDesign, expressionCollector);
  [OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger finestWithNSString:JreStrcat("$$$", @"Design report: ", [jasperDesign getName], @" veryfied.")];
  NSString *nameSuffix = OrgOssPdfreporterEngineDesignJRAbstractCompiler_createNameSuffix();
  jboolean isKeepJavaFile = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_))) getBooleanPropertyWithNSString:OrgOssPdfreporterEngineDesignJRCompiler_COMPILER_KEEP_JAVA_FILE];
  JavaIoFile *tempDirFile = nil;
  if (isKeepJavaFile || needsSourceFiles_) {
    NSString *tempDirStr = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_))) getPropertyWithNSString:OrgOssPdfreporterEngineDesignJRCompiler_COMPILER_TEMP_DIR];
    tempDirFile = new_JavaIoFile_initWithNSString_(tempDirStr);
    if (![tempDirFile exists] || ![tempDirFile isDirectory]) {
      @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(JreStrcat("$$", @"Temporary directory not found : ", tempDirStr));
    }
  }
  id<JavaUtilList> datasets = [jasperDesign getDatasetsList];
  id<JavaUtilList> crosstabs = [jasperDesign getCrosstabs];
  IOSObjectArray *units = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(datasets)) size] + [((id<JavaUtilList>) nil_chk(crosstabs)) size] + 1 type:OrgOssPdfreporterEngineDesignJRCompilationUnit_class_()];
  [OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger fineWithNSString:JreStrcat("$I$I$IC", @"Requires: ", units->size_, @" compilation units (Datasets: ", ([datasets size] + 1), @", Crosstabs: ", [crosstabs size], ')')];
  (void) IOSObjectArray_Set(units, 0, OrgOssPdfreporterEngineDesignJRAbstractCompiler_createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineDesignJRDesignDataset_withOrgOssPdfreporterEngineJRExpressionCollector_withJavaIoFile_withNSString_(self, jasperDesign, [jasperDesign getMainDesignDataset], expressionCollector, tempDirFile, nameSuffix));
  [OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger finestWithNSString:JreStrcat("$$", @"Main Dataset generated: ", [((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk(IOSObjectArray_Get(units, 0))) getName])];
  jint sourcesCount = 1;
  for (id<JavaUtilIterator> it = [datasets iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ++sourcesCount) {
    OrgOssPdfreporterEngineDesignJRDesignDataset *dataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) cast_chk([it next], [OrgOssPdfreporterEngineDesignJRDesignDataset class]);
    (void) IOSObjectArray_Set(units, sourcesCount, OrgOssPdfreporterEngineDesignJRAbstractCompiler_createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineDesignJRDesignDataset_withOrgOssPdfreporterEngineJRExpressionCollector_withJavaIoFile_withNSString_(self, jasperDesign, dataset, expressionCollector, tempDirFile, nameSuffix));
    [OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger finestWithNSString:JreStrcat("$$", @"Subdataset generated: ", [((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk(IOSObjectArray_Get(units, sourcesCount))) getName])];
  }
  for (id<JavaUtilIterator> it = [crosstabs iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ++sourcesCount) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) cast_chk([it next], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab class]);
    (void) IOSObjectArray_Set(units, sourcesCount, OrgOssPdfreporterEngineDesignJRAbstractCompiler_createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterEngineJRExpressionCollector_withJavaIoFile_withNSString_(self, jasperDesign, crosstab, expressionCollector, tempDirFile, nameSuffix));
    [OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger finestWithNSString:JreStrcat("$$", @"Crosstab dataset generated: ", [((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk(IOSObjectArray_Get(units, sourcesCount))) getName])];
  }
  NSString *classpath = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_))) getPropertyWithNSString:OrgOssPdfreporterEngineDesignJRCompiler_COMPILER_CLASSPATH];
  @try {
    NSString *compileErrors = [self compileUnitsWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:units withNSString:classpath withJavaIoFile:tempDirFile];
    if (compileErrors != nil) {
      @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(JreStrcat("$$", @"Errors were encountered when compiling report expressions class file:\n", compileErrors));
    }
    OrgOssPdfreporterEngineDesignJRReportCompileData *reportCompileData = new_OrgOssPdfreporterEngineDesignJRReportCompileData_init();
    [reportCompileData setMainDatasetCompileDataWithJavaIoSerializable:[((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk(IOSObjectArray_Get(units, 0))) getCompileData]];
    for (id<JavaUtilListIterator> it = [datasets listIterator]; [((id<JavaUtilListIterator>) nil_chk(it)) hasNext]; ) {
      OrgOssPdfreporterEngineDesignJRDesignDataset *dataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) cast_chk([it next], [OrgOssPdfreporterEngineDesignJRDesignDataset class]);
      [reportCompileData setDatasetCompileDataWithOrgOssPdfreporterEngineJRDataset:dataset withJavaIoSerializable:[((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk(IOSObjectArray_Get(units, [it nextIndex]))) getCompileData]];
    }
    for (id<JavaUtilListIterator> it = [crosstabs listIterator]; [((id<JavaUtilListIterator>) nil_chk(it)) hasNext]; ) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) cast_chk([it next], [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab class]);
      JavaLangInteger *crosstabId = [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(expressionCollector)) getCrosstabIdWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
      [reportCompileData setCrosstabCompileDataWithInt:[((JavaLangInteger *) nil_chk(crosstabId)) intValue] withJavaIoSerializable:[((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk(IOSObjectArray_Get(units, [datasets size] + [it nextIndex]))) getCompileData]];
    }
    OrgOssPdfreporterEngineJasperReport *jasperReport = new_OrgOssPdfreporterEngineJasperReport_initWithOrgOssPdfreporterEngineJRReport_withNSString_withJavaIoSerializable_withOrgOssPdfreporterEngineJRExpressionCollector_withNSString_(jasperDesign, [self getCompilerClass], reportCompileData, expressionCollector, nameSuffix);
    return jasperReport;
  }
  @catch (OrgOssPdfreporterEngineJRException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(@"Error compiling report design.", e);
  }
  @finally {
    if (needsSourceFiles_ && !isKeepJavaFile) {
      OrgOssPdfreporterEngineDesignJRAbstractCompiler_deleteSourceFilesWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray_(self, units);
    }
  }
}

+ (NSString *)createNameSuffix {
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_createNameSuffix();
}

- (NSString *)getCompilerClass {
  return [[self getClass] getName];
}

- (void)verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                 withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector {
  OrgOssPdfreporterEngineDesignJRAbstractCompiler_verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(self, jasperDesign, expressionCollector);
}

- (OrgOssPdfreporterEngineDesignJRCompilationUnit *)createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                                                  withOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset
                                                                  withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector
                                                                                                    withJavaIoFile:(JavaIoFile *)saveSourceDir
                                                                                                      withNSString:(NSString *)nameSuffix {
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineDesignJRDesignDataset_withOrgOssPdfreporterEngineJRExpressionCollector_withJavaIoFile_withNSString_(self, jasperDesign, dataset, expressionCollector, saveSourceDir, nameSuffix);
}

- (OrgOssPdfreporterEngineDesignJRCompilationUnit *)createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                                              withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab
                                                                  withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector
                                                                                                    withJavaIoFile:(JavaIoFile *)saveSourceDir
                                                                                                      withNSString:(NSString *)nameSuffix {
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterEngineJRExpressionCollector_withJavaIoFile_withNSString_(self, jasperDesign, crosstab, expressionCollector, saveSourceDir, nameSuffix);
}

- (JavaIoFile *)getSourceFileWithJavaIoFile:(JavaIoFile *)saveSourceDir
                               withNSString:(NSString *)unitName
withOrgOssPdfreporterEngineDesignJRCompilationSourceCode:(id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode>)sourceCode {
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_getSourceFileWithJavaIoFile_withNSString_withOrgOssPdfreporterEngineDesignJRCompilationSourceCode_(self, saveSourceDir, unitName, sourceCode);
}

- (void)deleteSourceFilesWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:(IOSObjectArray *)units {
  OrgOssPdfreporterEngineDesignJRAbstractCompiler_deleteSourceFilesWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray_(self, units);
}

- (OrgOssPdfreporterEngineFillJREvaluator *)loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport {
  return [self loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterEngineJRDataset:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getMainDataset]];
}

- (OrgOssPdfreporterEngineFillJREvaluator *)loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                            withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset {
  OrgOssPdfreporterEngineDesignJRReportCompileData *reportCompileData = (OrgOssPdfreporterEngineDesignJRReportCompileData *) cast_chk([((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getCompileData], [OrgOssPdfreporterEngineDesignJRReportCompileData class]);
  NSString *unitName = [((OrgOssPdfreporterEngineDesignJRReportCompileData *) nil_chk(reportCompileData)) getUnitNameWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterEngineJRDataset:dataset];
  id<JavaIoSerializable> compileData = [reportCompileData getDatasetCompileDataWithOrgOssPdfreporterEngineJRDataset:dataset];
  return [self loadEvaluatorWithJavaIoSerializable:compileData withNSString:unitName];
}

- (OrgOssPdfreporterEngineFillJREvaluator *)loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                        withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  OrgOssPdfreporterEngineDesignJRReportCompileData *reportCompileData = (OrgOssPdfreporterEngineDesignJRReportCompileData *) cast_chk([((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getCompileData], [OrgOssPdfreporterEngineDesignJRReportCompileData class]);
  NSString *unitName = [((OrgOssPdfreporterEngineDesignJRReportCompileData *) nil_chk(reportCompileData)) getUnitNameWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  id<JavaIoSerializable> compileData = [reportCompileData getCrosstabCompileDataWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  return [self loadEvaluatorWithJavaIoSerializable:compileData withNSString:unitName];
}

- (OrgOssPdfreporterEngineFillJREvaluator *)loadEvaluatorWithJavaIoSerializable:(id<JavaIoSerializable>)compileData
                                                                   withNSString:(NSString *)unitName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)checkLanguageWithNSString:(NSString *)language {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode>)generateSourceCodeWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:(OrgOssPdfreporterEngineDesignJRSourceCompileTask *)sourceTask {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)compileUnitsWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:(IOSObjectArray *)units
                                                                     withNSString:(NSString *)classpath
                                                                   withJavaIoFile:(JavaIoFile *)tempDirFile {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getSourceFileNameWithNSString:(NSString *)unitName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineDesignJRAbstractCompiler class]) {
    OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterEngineDesignJRAbstractCompiler_class_() getName]);
    OrgOssPdfreporterEngineDesignJRAbstractCompiler_random = new_JavaUtilRandom_init();
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineDesignJRAbstractCompiler)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineJasperReportsContext:withBoolean:", "JRAbstractCompiler", NULL, 0x4, NULL, NULL },
    { "initWithBoolean:", "JRAbstractCompiler", NULL, 0x4, NULL, NULL },
    { "getUnitNameWithOrgOssPdfreporterEngineJasperReport:withOrgOssPdfreporterEngineJRDataset:", "getUnitName", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getUnitNameWithOrgOssPdfreporterEngineJRReport:withOrgOssPdfreporterEngineJRDataset:withNSString:", "getUnitName", "Ljava.lang.String;", 0xc, NULL, NULL },
    { "getUnitNameWithOrgOssPdfreporterEngineJasperReport:withOrgOssPdfreporterCrosstabsJRCrosstab:", "getUnitName", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getUnitNameWithOrgOssPdfreporterEngineJRReport:withOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterEngineJRExpressionCollector:withNSString:", "getUnitName", "Ljava.lang.String;", 0xc, NULL, NULL },
    { "getUnitNameWithOrgOssPdfreporterEngineJRReport:withInt:withNSString:", "getUnitName", "Ljava.lang.String;", 0xc, NULL, NULL },
    { "compileReportWithOrgOssPdfreporterEngineDesignJasperDesign:", "compileReport", "Lorg.oss.pdfreporter.engine.JasperReport;", 0x11, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "createNameSuffix", NULL, "Ljava.lang.String;", 0xa, NULL, NULL },
    { "getCompilerClass", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:withOrgOssPdfreporterEngineJRExpressionCollector:", "verifyDesign", "V", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign:withOrgOssPdfreporterEngineDesignJRDesignDataset:withOrgOssPdfreporterEngineJRExpressionCollector:withJavaIoFile:withNSString:", "createCompileUnit", "Lorg.oss.pdfreporter.engine.design.JRCompilationUnit;", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign:withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:withOrgOssPdfreporterEngineJRExpressionCollector:withJavaIoFile:withNSString:", "createCompileUnit", "Lorg.oss.pdfreporter.engine.design.JRCompilationUnit;", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "getSourceFileWithJavaIoFile:withNSString:withOrgOssPdfreporterEngineDesignJRCompilationSourceCode:", "getSourceFile", "Ljava.io.File;", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "deleteSourceFilesWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:", "deleteSourceFiles", "V", 0x2, NULL, NULL },
    { "loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:", "loadEvaluator", "Lorg.oss.pdfreporter.engine.fill.JREvaluator;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:withOrgOssPdfreporterEngineJRDataset:", "loadEvaluator", "Lorg.oss.pdfreporter.engine.fill.JREvaluator;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:withOrgOssPdfreporterCrosstabsJRCrosstab:", "loadEvaluator", "Lorg.oss.pdfreporter.engine.fill.JREvaluator;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "loadEvaluatorWithJavaIoSerializable:withNSString:", "loadEvaluator", "Lorg.oss.pdfreporter.engine.fill.JREvaluator;", 0x404, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "checkLanguageWithNSString:", "checkLanguage", "V", 0x404, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "generateSourceCodeWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:", "generateSourceCode", "Lorg.oss.pdfreporter.engine.design.JRCompilationSourceCode;", 0x404, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "compileUnitsWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:withNSString:withJavaIoFile:", "compileUnits", "Ljava.lang.String;", 0x404, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "getSourceFileNameWithNSString:", "getSourceFileName", "Ljava.lang.String;", 0x404, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger, NULL, .constantValue.asLong = 0 },
    { "NAME_SUFFIX_RANDOM_MAX", "NAME_SUFFIX_RANDOM_MAX", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgOssPdfreporterEngineDesignJRAbstractCompiler_NAME_SUFFIX_RANDOM_MAX },
    { "random", "random", 0x1a, "Ljava.util.Random;", &OrgOssPdfreporterEngineDesignJRAbstractCompiler_random, NULL, .constantValue.asLong = 0 },
    { "jasperReportsContext_", NULL, 0x14, "Lorg.oss.pdfreporter.engine.JasperReportsContext;", NULL, NULL, .constantValue.asLong = 0 },
    { "needsSourceFiles_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineDesignJRAbstractCompiler = { 2, "JRAbstractCompiler", "org.oss.pdfreporter.engine.design", NULL, 0x401, 23, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineDesignJRAbstractCompiler;
}

@end

void OrgOssPdfreporterEngineDesignJRAbstractCompiler_initWithOrgOssPdfreporterEngineJasperReportsContext_withBoolean_(OrgOssPdfreporterEngineDesignJRAbstractCompiler *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, jboolean needsSourceFiles) {
  NSObject_init(self);
  self->jasperReportsContext_ = jasperReportsContext;
  self->needsSourceFiles_ = needsSourceFiles;
}

void OrgOssPdfreporterEngineDesignJRAbstractCompiler_initWithBoolean_(OrgOssPdfreporterEngineDesignJRAbstractCompiler *self, jboolean needsSourceFiles) {
  OrgOssPdfreporterEngineDesignJRAbstractCompiler_initWithOrgOssPdfreporterEngineJasperReportsContext_withBoolean_(self, OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance(), needsSourceFiles);
}

NSString *OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJasperReport_withOrgOssPdfreporterEngineJRDataset_(OrgOssPdfreporterEngineJasperReport *report, id<OrgOssPdfreporterEngineJRDataset> dataset) {
  OrgOssPdfreporterEngineDesignJRAbstractCompiler_initialize();
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJRReport_withOrgOssPdfreporterEngineJRDataset_withNSString_(report, dataset, [((OrgOssPdfreporterEngineJasperReport *) nil_chk(report)) getCompileNameSuffix]);
}

NSString *OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJRReport_withOrgOssPdfreporterEngineJRDataset_withNSString_(id<OrgOssPdfreporterEngineJRReport> report, id<OrgOssPdfreporterEngineJRDataset> dataset, NSString *nameSuffix) {
  OrgOssPdfreporterEngineDesignJRAbstractCompiler_initialize();
  NSString *className_;
  if ([((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) isMainDataset]) {
    className_ = [((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getName];
  }
  else {
    className_ = JreStrcat("$C$", [((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getName], '_', [dataset getName]);
  }
  className_ = JreStrcat("$$", OrgOssPdfreporterEngineUtilJRStringUtil_getJavaIdentifierWithNSString_(className_), nameSuffix);
  return className_;
}

NSString *OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJasperReport_withOrgOssPdfreporterCrosstabsJRCrosstab_(OrgOssPdfreporterEngineJasperReport *report, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab) {
  OrgOssPdfreporterEngineDesignJRAbstractCompiler_initialize();
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJRReport_withInt_withNSString_(report, [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getId], [((OrgOssPdfreporterEngineJasperReport *) nil_chk(report)) getCompileNameSuffix]);
}

NSString *OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJRReport_withOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineJRExpressionCollector_withNSString_(id<OrgOssPdfreporterEngineJRReport> report, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector, NSString *nameSuffix) {
  OrgOssPdfreporterEngineDesignJRAbstractCompiler_initialize();
  JavaLangInteger *crosstabId = [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(expressionCollector)) getCrosstabIdWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  if (crosstabId == nil) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(@"Crosstab ID not found.");
  }
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJRReport_withInt_withNSString_(report, [crosstabId intValue], nameSuffix);
}

NSString *OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJRReport_withInt_withNSString_(id<OrgOssPdfreporterEngineJRReport> report, jint crosstabId, NSString *nameSuffix) {
  OrgOssPdfreporterEngineDesignJRAbstractCompiler_initialize();
  return JreStrcat("$$I$", OrgOssPdfreporterEngineUtilJRStringUtil_getJavaIdentifierWithNSString_([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getName]), @"_CROSSTAB", crosstabId, nameSuffix);
}

NSString *OrgOssPdfreporterEngineDesignJRAbstractCompiler_createNameSuffix() {
  OrgOssPdfreporterEngineDesignJRAbstractCompiler_initialize();
  return JreStrcat("CJCI", '_', JavaLangSystem_currentTimeMillis(), '_', [((JavaUtilRandom *) nil_chk(OrgOssPdfreporterEngineDesignJRAbstractCompiler_random)) nextIntWithInt:OrgOssPdfreporterEngineDesignJRAbstractCompiler_NAME_SUFFIX_RANDOM_MAX]);
}

void OrgOssPdfreporterEngineDesignJRAbstractCompiler_verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(OrgOssPdfreporterEngineDesignJRAbstractCompiler *self, OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector) {
  id<JavaUtilCollection> brokenRules = OrgOssPdfreporterEngineDesignJRVerifier_verifyDesignWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineJRExpressionCollector_(self->jasperReportsContext_, jasperDesign, expressionCollector);
  if (brokenRules != nil && [brokenRules size] > 0) {
    @throw new_OrgOssPdfreporterEngineDesignJRValidationException_initWithJavaUtilCollection_(brokenRules);
  }
}

OrgOssPdfreporterEngineDesignJRCompilationUnit *OrgOssPdfreporterEngineDesignJRAbstractCompiler_createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineDesignJRDesignDataset_withOrgOssPdfreporterEngineJRExpressionCollector_withJavaIoFile_withNSString_(OrgOssPdfreporterEngineDesignJRAbstractCompiler *self, OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector, JavaIoFile *saveSourceDir, NSString *nameSuffix) {
  NSString *unitName = OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJRReport_withOrgOssPdfreporterEngineJRDataset_withNSString_(jasperDesign, dataset, nameSuffix);
  OrgOssPdfreporterEngineDesignJRSourceCompileTask *sourceTask = new_OrgOssPdfreporterEngineDesignJRSourceCompileTask_initWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterEngineDesignJRDesignDataset_withOrgOssPdfreporterEngineJRExpressionCollector_withNSString_(jasperDesign, dataset, expressionCollector, unitName);
  id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode> sourceCode = [self generateSourceCodeWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:sourceTask];
  JavaIoFile *sourceFile = OrgOssPdfreporterEngineDesignJRAbstractCompiler_getSourceFileWithJavaIoFile_withNSString_withOrgOssPdfreporterEngineDesignJRCompilationSourceCode_(self, saveSourceDir, unitName, sourceCode);
  return new_OrgOssPdfreporterEngineDesignJRCompilationUnit_initWithNSString_withOrgOssPdfreporterEngineDesignJRCompilationSourceCode_withJavaIoFile_withJavaUtilList_withOrgOssPdfreporterEngineDesignJRSourceCompileTask_(unitName, sourceCode, sourceFile, [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(expressionCollector)) getExpressionsWithOrgOssPdfreporterEngineJRDataset:dataset], sourceTask);
}

OrgOssPdfreporterEngineDesignJRCompilationUnit *OrgOssPdfreporterEngineDesignJRAbstractCompiler_createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterEngineJRExpressionCollector_withJavaIoFile_withNSString_(OrgOssPdfreporterEngineDesignJRAbstractCompiler *self, OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign, OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab, OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector, JavaIoFile *saveSourceDir, NSString *nameSuffix) {
  NSString *unitName = OrgOssPdfreporterEngineDesignJRAbstractCompiler_getUnitNameWithOrgOssPdfreporterEngineJRReport_withOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineJRExpressionCollector_withNSString_(jasperDesign, crosstab, expressionCollector, nameSuffix);
  OrgOssPdfreporterEngineDesignJRSourceCompileTask *sourceTask = new_OrgOssPdfreporterEngineDesignJRSourceCompileTask_initWithOrgOssPdfreporterEngineDesignJasperDesign_withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_withOrgOssPdfreporterEngineJRExpressionCollector_withNSString_(jasperDesign, crosstab, expressionCollector, unitName);
  id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode> sourceCode = [self generateSourceCodeWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:sourceTask];
  JavaIoFile *sourceFile = OrgOssPdfreporterEngineDesignJRAbstractCompiler_getSourceFileWithJavaIoFile_withNSString_withOrgOssPdfreporterEngineDesignJRCompilationSourceCode_(self, saveSourceDir, unitName, sourceCode);
  return new_OrgOssPdfreporterEngineDesignJRCompilationUnit_initWithNSString_withOrgOssPdfreporterEngineDesignJRCompilationSourceCode_withJavaIoFile_withJavaUtilList_withOrgOssPdfreporterEngineDesignJRSourceCompileTask_(unitName, sourceCode, sourceFile, [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(expressionCollector)) getExpressionsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab], sourceTask);
}

JavaIoFile *OrgOssPdfreporterEngineDesignJRAbstractCompiler_getSourceFileWithJavaIoFile_withNSString_withOrgOssPdfreporterEngineDesignJRCompilationSourceCode_(OrgOssPdfreporterEngineDesignJRAbstractCompiler *self, JavaIoFile *saveSourceDir, NSString *unitName, id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode> sourceCode) {
  JavaIoFile *sourceFile = nil;
  if (saveSourceDir != nil && sourceCode != nil && [sourceCode getCode] != nil) {
    NSString *fileName = [self getSourceFileNameWithNSString:unitName];
    sourceFile = new_JavaIoFile_initWithJavaIoFile_withNSString_(saveSourceDir, fileName);
    OrgOssPdfreporterEngineUtilJRSaver_saveClassSourceWithNSString_withJavaIoFile_([sourceCode getCode], sourceFile);
  }
  return sourceFile;
}

void OrgOssPdfreporterEngineDesignJRAbstractCompiler_deleteSourceFilesWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray_(OrgOssPdfreporterEngineDesignJRAbstractCompiler *self, IOSObjectArray *units) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(units))->size_; i++) {
    [((JavaIoFile *) nil_chk([((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk(IOSObjectArray_Get(units, i))) getSourceFile])) delete__];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineDesignJRAbstractCompiler)
