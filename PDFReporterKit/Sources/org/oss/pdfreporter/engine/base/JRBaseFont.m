//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/base/JRBaseFont.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRAbstractObjectFactory.h"
#include "org/oss/pdfreporter/engine/JRConstants.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRFont.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRStyleContainer.h"
#include "org/oss/pdfreporter/engine/base/JRBaseFont.h"
#include "org/oss/pdfreporter/engine/design/events/JRPropertyChangeSupport.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/engine/util/JRTextAttribute.h"
#include "org/oss/pdfreporter/font/text/TextAttribute.h"

@interface OrgOssPdfreporterEngineBaseJRBaseFont () {
 @public
  OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *eventSupport_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineBaseJRBaseFont, eventSupport_, OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *)

inline jlong OrgOssPdfreporterEngineBaseJRBaseFont_get_serialVersionUID();
#define OrgOssPdfreporterEngineBaseJRBaseFont_serialVersionUID 10200LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterEngineBaseJRBaseFont, serialVersionUID, jlong)

NSString *OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_BOLD = @"bold";
NSString *OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_NAME = @"fontName";
NSString *OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_SIZE = @"fontSize";
NSString *OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_ITALIC = @"italic";
NSString *OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_EMBEDDED = @"pdfEmbedded";
NSString *OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_ENCODING = @"pdfEncoding";
NSString *OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_FONT_NAME = @"pdfFontName";
NSString *OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_REPORT_FONT = @"reportFont";
NSString *OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_STRIKE_THROUGH = @"strikeThrough";
NSString *OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_UNDERLINE = @"underline";

@implementation OrgOssPdfreporterEngineBaseJRBaseFont

+ (NSString *)PROPERTY_BOLD {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_BOLD;
}

+ (NSString *)PROPERTY_FONT_NAME {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_NAME;
}

+ (NSString *)PROPERTY_FONT_SIZE {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_SIZE;
}

+ (NSString *)PROPERTY_ITALIC {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_ITALIC;
}

+ (NSString *)PROPERTY_PDF_EMBEDDED {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_EMBEDDED;
}

+ (NSString *)PROPERTY_PDF_ENCODING {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_ENCODING;
}

+ (NSString *)PROPERTY_PDF_FONT_NAME {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_FONT_NAME;
}

+ (NSString *)PROPERTY_REPORT_FONT {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_REPORT_FONT;
}

+ (NSString *)PROPERTY_STRIKE_THROUGH {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_STRIKE_THROUGH;
}

+ (NSString *)PROPERTY_UNDERLINE {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_UNDERLINE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineBaseJRBaseFont_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  OrgOssPdfreporterEngineBaseJRBaseFont_initWithJavaUtilMap_(self, attributes);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterEngineJRStyleContainer:(id<OrgOssPdfreporterEngineJRStyleContainer>)styleContainer {
  OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_(self, styleContainer);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterEngineJRStyleContainer:(id<OrgOssPdfreporterEngineJRStyleContainer>)styleContainer
                              withOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)font {
  OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_withOrgOssPdfreporterEngineJRFont_(self, styleContainer, font);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterEngineJRStyleContainer:(id<OrgOssPdfreporterEngineJRStyleContainer>)styleContainer
                              withOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)font
             withOrgOssPdfreporterEngineJRAbstractObjectFactory:(OrgOssPdfreporterEngineJRAbstractObjectFactory *)factory {
  OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_withOrgOssPdfreporterEngineJRFont_withOrgOssPdfreporterEngineJRAbstractObjectFactory_(self, styleContainer, font, factory);
  return self;
}

- (id<OrgOssPdfreporterEngineJRDefaultStyleProvider>)getDefaultStyleProvider {
  return styleContainer_ == nil ? nil : [styleContainer_ getDefaultStyleProvider];
}

- (id<OrgOssPdfreporterEngineJRStyle>)getStyle {
  return style_ == nil ? (styleContainer_ == nil ? nil : [styleContainer_ getStyle]) : style_;
}

- (NSString *)getStyleNameReference {
  return styleNameReference_ == nil ? (styleContainer_ == nil ? nil : [styleContainer_ getStyleNameReference]) : styleNameReference_;
}

- (NSString *)getFontName {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getFontNameWithOrgOssPdfreporterEngineJRFont_(self);
}

- (NSString *)getOwnFontName {
  return fontName_;
}

- (void)setFontNameWithNSString:(NSString *)fontName {
  id old = self->fontName_;
  self->fontName_ = fontName;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_NAME withId:old withId:self->fontName_];
}

- (jboolean)isBold {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isBoldWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnBold {
  return isBold_;
}

- (void)setBoldWithBoolean:(jboolean)isBold {
  [self setBoldWithJavaLangBoolean:isBold ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
}

- (void)setBoldWithJavaLangBoolean:(JavaLangBoolean *)isBold {
  id old = self->isBold_;
  self->isBold_ = isBold;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_BOLD withId:old withId:self->isBold_];
}

- (jboolean)isItalic {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isItalicWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnItalic {
  return isItalic_;
}

- (void)setItalicWithBoolean:(jboolean)isItalic {
  [self setItalicWithJavaLangBoolean:isItalic ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
}

- (void)setItalicWithJavaLangBoolean:(JavaLangBoolean *)isItalic {
  id old = self->isItalic_;
  self->isItalic_ = isItalic;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_ITALIC withId:old withId:self->isItalic_];
}

- (jboolean)isUnderline {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isUnderlineWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnUnderline {
  return isUnderline_;
}

- (void)setUnderlineWithBoolean:(jboolean)isUnderline {
  [self setUnderlineWithJavaLangBoolean:isUnderline ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
}

- (void)setUnderlineWithJavaLangBoolean:(JavaLangBoolean *)isUnderline {
  id old = self->isUnderline_;
  self->isUnderline_ = isUnderline;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_UNDERLINE withId:old withId:self->isUnderline_];
}

- (jboolean)isStrikeThrough {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isStrikeThroughWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnStrikeThrough {
  return isStrikeThrough_;
}

- (void)setStrikeThroughWithBoolean:(jboolean)isStrikeThrough {
  [self setStrikeThroughWithJavaLangBoolean:isStrikeThrough ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
}

- (void)setStrikeThroughWithJavaLangBoolean:(JavaLangBoolean *)isStrikeThrough {
  id old = self->isStrikeThrough_;
  self->isStrikeThrough_ = isStrikeThrough;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_STRIKE_THROUGH withId:old withId:self->isStrikeThrough_];
}

- (jint)getFontSize {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getFontSizeWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangInteger *)getOwnFontSize {
  return fontSize_;
}

- (void)setFontSizeWithInt:(jint)fontSize {
  [self setFontSizeWithJavaLangInteger:JavaLangInteger_valueOfWithInt_(fontSize)];
}

- (void)setFontSizeWithJavaLangInteger:(JavaLangInteger *)fontSize {
  id old = self->fontSize_;
  self->fontSize_ = fontSize;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_SIZE withId:old withId:self->fontSize_];
}

- (NSString *)getPdfFontName {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getPdfFontNameWithOrgOssPdfreporterEngineJRFont_(self);
}

- (NSString *)getOwnPdfFontName {
  return pdfFontName_;
}

- (void)setPdfFontNameWithNSString:(NSString *)pdfFontName {
  id old = self->pdfFontName_;
  self->pdfFontName_ = pdfFontName;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_FONT_NAME withId:old withId:self->pdfFontName_];
}

- (NSString *)getPdfEncoding {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getPdfEncodingWithOrgOssPdfreporterEngineJRFont_(self);
}

- (NSString *)getOwnPdfEncoding {
  return pdfEncoding_;
}

- (void)setPdfEncodingWithNSString:(NSString *)pdfEncoding {
  id old = self->pdfEncoding_;
  self->pdfEncoding_ = pdfEncoding;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_ENCODING withId:old withId:self->pdfEncoding_];
}

- (jboolean)isPdfEmbedded {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isPdfEmbeddedWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnPdfEmbedded {
  return isPdfEmbedded_;
}

- (void)setPdfEmbeddedWithBoolean:(jboolean)isPdfEmbedded {
  [self setPdfEmbeddedWithJavaLangBoolean:isPdfEmbedded ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
}

- (void)setPdfEmbeddedWithJavaLangBoolean:(JavaLangBoolean *)isPdfEmbedded {
  id old = self->isPdfEmbedded_;
  self->isPdfEmbedded_ = isPdfEmbedded;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_EMBEDDED withId:old withId:self->isPdfEmbedded_];
}

- (id)clone {
  OrgOssPdfreporterEngineBaseJRBaseFont *clone = nil;
  @try {
    clone = (OrgOssPdfreporterEngineBaseJRBaseFont *) cast_chk([super clone], [OrgOssPdfreporterEngineBaseJRBaseFont class]);
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
  ((OrgOssPdfreporterEngineBaseJRBaseFont *) nil_chk(clone))->eventSupport_ = nil;
  return clone;
}

- (OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *)getEventSupport {
  @synchronized(self) {
    if (eventSupport_ == nil) {
      eventSupport_ = new_OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport_initWithId_(self);
    }
  }
  return eventSupport_;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JRBaseFont", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilMap:", "JRBaseFont", NULL, 0x1, NULL, "(Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;)V" },
    { "initWithOrgOssPdfreporterEngineJRStyleContainer:", "JRBaseFont", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineJRStyleContainer:withOrgOssPdfreporterEngineJRFont:", "JRBaseFont", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineJRStyleContainer:withOrgOssPdfreporterEngineJRFont:withOrgOssPdfreporterEngineJRAbstractObjectFactory:", "JRBaseFont", NULL, 0x1, NULL, NULL },
    { "getDefaultStyleProvider", NULL, "Lorg.oss.pdfreporter.engine.JRDefaultStyleProvider;", 0x1, NULL, NULL },
    { "getStyle", NULL, "Lorg.oss.pdfreporter.engine.JRStyle;", 0x1, NULL, NULL },
    { "getStyleNameReference", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOwnFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setFontNameWithNSString:", "setFontName", "V", 0x1, NULL, NULL },
    { "isBold", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnBold", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setBoldWithBoolean:", "setBold", "V", 0x1, NULL, NULL },
    { "setBoldWithJavaLangBoolean:", "setBold", "V", 0x1, NULL, NULL },
    { "isItalic", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnItalic", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setItalicWithBoolean:", "setItalic", "V", 0x1, NULL, NULL },
    { "setItalicWithJavaLangBoolean:", "setItalic", "V", 0x1, NULL, NULL },
    { "isUnderline", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnUnderline", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setUnderlineWithBoolean:", "setUnderline", "V", 0x1, NULL, NULL },
    { "setUnderlineWithJavaLangBoolean:", "setUnderline", "V", 0x1, NULL, NULL },
    { "isStrikeThrough", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnStrikeThrough", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setStrikeThroughWithBoolean:", "setStrikeThrough", "V", 0x1, NULL, NULL },
    { "setStrikeThroughWithJavaLangBoolean:", "setStrikeThrough", "V", 0x1, NULL, NULL },
    { "getFontSize", NULL, "I", 0x1, NULL, NULL },
    { "getOwnFontSize", NULL, "Ljava.lang.Integer;", 0x1, NULL, NULL },
    { "setFontSizeWithInt:", "setFontSize", "V", 0x1, NULL, NULL },
    { "setFontSizeWithJavaLangInteger:", "setFontSize", "V", 0x1, NULL, NULL },
    { "getPdfFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOwnPdfFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setPdfFontNameWithNSString:", "setPdfFontName", "V", 0x1, NULL, NULL },
    { "getPdfEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOwnPdfEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setPdfEncodingWithNSString:", "setPdfEncoding", "V", 0x1, NULL, NULL },
    { "isPdfEmbedded", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnPdfEmbedded", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setPdfEmbeddedWithBoolean:", "setPdfEmbedded", "V", 0x1, NULL, NULL },
    { "setPdfEmbeddedWithJavaLangBoolean:", "setPdfEmbedded", "V", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getEventSupport", NULL, "Lorg.oss.pdfreporter.engine.design.events.JRPropertyChangeSupport;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgOssPdfreporterEngineBaseJRBaseFont_serialVersionUID },
    { "PROPERTY_BOLD", "PROPERTY_BOLD", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_BOLD, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_FONT_NAME", "PROPERTY_FONT_NAME", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_NAME, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_FONT_SIZE", "PROPERTY_FONT_SIZE", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_SIZE, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_ITALIC", "PROPERTY_ITALIC", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_ITALIC, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_PDF_EMBEDDED", "PROPERTY_PDF_EMBEDDED", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_EMBEDDED, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_PDF_ENCODING", "PROPERTY_PDF_ENCODING", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_ENCODING, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_PDF_FONT_NAME", "PROPERTY_PDF_FONT_NAME", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_FONT_NAME, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_REPORT_FONT", "PROPERTY_REPORT_FONT", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_REPORT_FONT, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_STRIKE_THROUGH", "PROPERTY_STRIKE_THROUGH", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_STRIKE_THROUGH, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_UNDERLINE", "PROPERTY_UNDERLINE", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_UNDERLINE, NULL, .constantValue.asLong = 0 },
    { "styleContainer_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRStyleContainer;", NULL, NULL, .constantValue.asLong = 0 },
    { "style_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRStyle;", NULL, NULL, .constantValue.asLong = 0 },
    { "styleNameReference_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "fontName_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "isBold_", NULL, 0x4, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "isItalic_", NULL, 0x4, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "isUnderline_", NULL, 0x4, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "isStrikeThrough_", NULL, 0x4, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "fontSize_", NULL, 0x4, "Ljava.lang.Integer;", NULL, NULL, .constantValue.asLong = 0 },
    { "pdfFontName_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "pdfEncoding_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "isPdfEmbedded_", NULL, 0x4, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "eventSupport_", NULL, 0x82, "Lorg.oss.pdfreporter.engine.design.events.JRPropertyChangeSupport;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineBaseJRBaseFont = { 2, "JRBaseFont", "org.oss.pdfreporter.engine.base", NULL, 0x1, 43, methods, 24, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineBaseJRBaseFont;
}

@end

void OrgOssPdfreporterEngineBaseJRBaseFont_init(OrgOssPdfreporterEngineBaseJRBaseFont *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineBaseJRBaseFont *new_OrgOssPdfreporterEngineBaseJRBaseFont_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineBaseJRBaseFont, init)
}

OrgOssPdfreporterEngineBaseJRBaseFont *create_OrgOssPdfreporterEngineBaseJRBaseFont_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineBaseJRBaseFont, init)
}

void OrgOssPdfreporterEngineBaseJRBaseFont_initWithJavaUtilMap_(OrgOssPdfreporterEngineBaseJRBaseFont *self, id<JavaUtilMap> attributes) {
  NSObject_init(self);
  NSString *fontNameAttr = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(attributes)) getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, FAMILY)], [NSString class]);
  if (fontNameAttr != nil) {
    [self setFontNameWithNSString:fontNameAttr];
  }
  id bold = [attributes getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, WEIGHT)];
  if (bold != nil) {
    [self setBoldWithBoolean:[((JavaLangFloat *) nil_chk(JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, WEIGHT_BOLD))) isEqual:bold]];
  }
  id italic = [attributes getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, POSTURE)];
  if (italic != nil) {
    [self setItalicWithBoolean:[((JavaLangFloat *) nil_chk(JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, POSTURE_OBLIQUE))) isEqual:italic]];
  }
  JavaLangFloat *sizeAttr = (JavaLangFloat *) cast_chk([attributes getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, SIZE)], [JavaLangFloat class]);
  if (sizeAttr != nil) {
    [self setFontSizeWithInt:[sizeAttr intValue]];
  }
  id underline = [attributes getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, UNDERLINE)];
  if (underline != nil) {
    [self setUnderlineWithBoolean:[((JavaLangInteger *) nil_chk(JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, UNDERLINE_ON))) isEqual:underline]];
  }
  id strikeThrough = [attributes getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, STRIKETHROUGH)];
  if (strikeThrough != nil) {
    [self setStrikeThroughWithBoolean:[((JavaLangBoolean *) nil_chk(JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, STRIKETHROUGH_ON))) isEqual:strikeThrough]];
  }
  NSString *pdfFontNameAttr = (NSString *) cast_chk([attributes getWithId:JreLoadStatic(OrgOssPdfreporterEngineUtilJRTextAttribute, PDF_FONT_NAME)], [NSString class]);
  if (pdfFontNameAttr != nil) {
    [self setPdfFontNameWithNSString:pdfFontNameAttr];
  }
  NSString *pdfEncodingAttr = (NSString *) cast_chk([attributes getWithId:JreLoadStatic(OrgOssPdfreporterEngineUtilJRTextAttribute, PDF_ENCODING)], [NSString class]);
  if (pdfEncodingAttr != nil) {
    [self setPdfEncodingWithNSString:pdfEncodingAttr];
  }
  JavaLangBoolean *isPdfEmbeddedAttr = (JavaLangBoolean *) cast_chk([attributes getWithId:JreLoadStatic(OrgOssPdfreporterEngineUtilJRTextAttribute, IS_PDF_EMBEDDED)], [JavaLangBoolean class]);
  if (isPdfEmbeddedAttr != nil) {
    [self setPdfEmbeddedWithJavaLangBoolean:isPdfEmbeddedAttr];
  }
}

OrgOssPdfreporterEngineBaseJRBaseFont *new_OrgOssPdfreporterEngineBaseJRBaseFont_initWithJavaUtilMap_(id<JavaUtilMap> attributes) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineBaseJRBaseFont, initWithJavaUtilMap_, attributes)
}

OrgOssPdfreporterEngineBaseJRBaseFont *create_OrgOssPdfreporterEngineBaseJRBaseFont_initWithJavaUtilMap_(id<JavaUtilMap> attributes) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineBaseJRBaseFont, initWithJavaUtilMap_, attributes)
}

void OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_(OrgOssPdfreporterEngineBaseJRBaseFont *self, id<OrgOssPdfreporterEngineJRStyleContainer> styleContainer) {
  NSObject_init(self);
  self->styleContainer_ = styleContainer;
}

OrgOssPdfreporterEngineBaseJRBaseFont *new_OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_(id<OrgOssPdfreporterEngineJRStyleContainer> styleContainer) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineBaseJRBaseFont, initWithOrgOssPdfreporterEngineJRStyleContainer_, styleContainer)
}

OrgOssPdfreporterEngineBaseJRBaseFont *create_OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_(id<OrgOssPdfreporterEngineJRStyleContainer> styleContainer) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineBaseJRBaseFont, initWithOrgOssPdfreporterEngineJRStyleContainer_, styleContainer)
}

void OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_withOrgOssPdfreporterEngineJRFont_(OrgOssPdfreporterEngineBaseJRBaseFont *self, id<OrgOssPdfreporterEngineJRStyleContainer> styleContainer, id<OrgOssPdfreporterEngineJRFont> font) {
  OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_(self, styleContainer);
  if (font != nil) {
    self->fontName_ = [font getOwnFontName];
    self->isBold_ = [font isOwnBold];
    self->isItalic_ = [font isOwnItalic];
    self->isUnderline_ = [font isOwnUnderline];
    self->isStrikeThrough_ = [font isOwnStrikeThrough];
    self->fontSize_ = [font getOwnFontSize];
    self->pdfFontName_ = [font getOwnPdfFontName];
    self->pdfEncoding_ = [font getOwnPdfEncoding];
    self->isPdfEmbedded_ = [font isOwnPdfEmbedded];
  }
}

OrgOssPdfreporterEngineBaseJRBaseFont *new_OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_withOrgOssPdfreporterEngineJRFont_(id<OrgOssPdfreporterEngineJRStyleContainer> styleContainer, id<OrgOssPdfreporterEngineJRFont> font) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineBaseJRBaseFont, initWithOrgOssPdfreporterEngineJRStyleContainer_withOrgOssPdfreporterEngineJRFont_, styleContainer, font)
}

OrgOssPdfreporterEngineBaseJRBaseFont *create_OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_withOrgOssPdfreporterEngineJRFont_(id<OrgOssPdfreporterEngineJRStyleContainer> styleContainer, id<OrgOssPdfreporterEngineJRFont> font) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineBaseJRBaseFont, initWithOrgOssPdfreporterEngineJRStyleContainer_withOrgOssPdfreporterEngineJRFont_, styleContainer, font)
}

void OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_withOrgOssPdfreporterEngineJRFont_withOrgOssPdfreporterEngineJRAbstractObjectFactory_(OrgOssPdfreporterEngineBaseJRBaseFont *self, id<OrgOssPdfreporterEngineJRStyleContainer> styleContainer, id<OrgOssPdfreporterEngineJRFont> font, OrgOssPdfreporterEngineJRAbstractObjectFactory *factory) {
  NSObject_init(self);
  [((OrgOssPdfreporterEngineJRAbstractObjectFactory *) nil_chk(factory)) putWithId:font withId:self];
  self->styleContainer_ = styleContainer;
  self->style_ = [factory getStyleWithOrgOssPdfreporterEngineJRStyle:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getStyle]];
  self->styleNameReference_ = [font getStyleNameReference];
  self->fontName_ = [font getOwnFontName];
  self->isBold_ = [font isOwnBold];
  self->isItalic_ = [font isOwnItalic];
  self->isUnderline_ = [font isOwnUnderline];
  self->isStrikeThrough_ = [font isOwnStrikeThrough];
  self->fontSize_ = [font getOwnFontSize];
  self->pdfFontName_ = [font getOwnPdfFontName];
  self->pdfEncoding_ = [font getOwnPdfEncoding];
  self->isPdfEmbedded_ = [font isOwnPdfEmbedded];
}

OrgOssPdfreporterEngineBaseJRBaseFont *new_OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_withOrgOssPdfreporterEngineJRFont_withOrgOssPdfreporterEngineJRAbstractObjectFactory_(id<OrgOssPdfreporterEngineJRStyleContainer> styleContainer, id<OrgOssPdfreporterEngineJRFont> font, OrgOssPdfreporterEngineJRAbstractObjectFactory *factory) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineBaseJRBaseFont, initWithOrgOssPdfreporterEngineJRStyleContainer_withOrgOssPdfreporterEngineJRFont_withOrgOssPdfreporterEngineJRAbstractObjectFactory_, styleContainer, font, factory)
}

OrgOssPdfreporterEngineBaseJRBaseFont *create_OrgOssPdfreporterEngineBaseJRBaseFont_initWithOrgOssPdfreporterEngineJRStyleContainer_withOrgOssPdfreporterEngineJRFont_withOrgOssPdfreporterEngineJRAbstractObjectFactory_(id<OrgOssPdfreporterEngineJRStyleContainer> styleContainer, id<OrgOssPdfreporterEngineJRFont> font, OrgOssPdfreporterEngineJRAbstractObjectFactory *factory) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineBaseJRBaseFont, initWithOrgOssPdfreporterEngineJRStyleContainer_withOrgOssPdfreporterEngineJRFont_withOrgOssPdfreporterEngineJRAbstractObjectFactory_, styleContainer, font, factory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineBaseJRBaseFont)
