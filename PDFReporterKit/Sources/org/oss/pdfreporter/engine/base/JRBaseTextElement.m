//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/base/JRBaseTextElement.java
//

#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "org/oss/pdfreporter/engine/JRConstants.h"
#include "org/oss/pdfreporter/engine/JRFont.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JRTextElement.h"
#include "org/oss/pdfreporter/engine/base/JRBaseElement.h"
#include "org/oss/pdfreporter/engine/base/JRBaseObjectFactory.h"
#include "org/oss/pdfreporter/engine/base/JRBaseStyle.h"
#include "org/oss/pdfreporter/engine/base/JRBaseTextElement.h"
#include "org/oss/pdfreporter/engine/design/events/JRPropertyChangeSupport.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/LineSpacingEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/geometry/IColor.h"

#pragma clang diagnostic ignored "-Wprotocol"

inline jlong OrgOssPdfreporterEngineBaseJRBaseTextElement_get_serialVersionUID();
#define OrgOssPdfreporterEngineBaseJRBaseTextElement_serialVersionUID 10200LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterEngineBaseJRBaseTextElement, serialVersionUID, jlong)

@implementation OrgOssPdfreporterEngineBaseJRBaseTextElement

- (instancetype)initWithOrgOssPdfreporterEngineJRTextElement:(id<OrgOssPdfreporterEngineJRTextElement>)textElement
          withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  OrgOssPdfreporterEngineBaseJRBaseTextElement_initWithOrgOssPdfreporterEngineJRTextElement_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, textElement, factory);
  return self;
}

- (OrgOssPdfreporterEngineTypeHorizontalAlignEnum *)getHorizontalAlignmentValue {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getHorizontalAlignmentValueWithOrgOssPdfreporterEngineJRAlignment_(self);
}

- (OrgOssPdfreporterEngineTypeHorizontalAlignEnum *)getOwnHorizontalAlignmentValue {
  return horizontalAlignmentValue_;
}

- (void)setHorizontalAlignmentWithOrgOssPdfreporterEngineTypeHorizontalAlignEnum:(OrgOssPdfreporterEngineTypeHorizontalAlignEnum *)horizontalAlignmentValue {
  id old = self->horizontalAlignmentValue_;
  self->horizontalAlignmentValue_ = horizontalAlignmentValue;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_HORIZONTAL_ALIGNMENT withId:old withId:self->horizontalAlignmentValue_];
}

- (OrgOssPdfreporterEngineTypeVerticalAlignEnum *)getVerticalAlignmentValue {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getVerticalAlignmentValueWithOrgOssPdfreporterEngineJRAlignment_(self);
}

- (OrgOssPdfreporterEngineTypeVerticalAlignEnum *)getOwnVerticalAlignmentValue {
  return verticalAlignmentValue_;
}

- (void)setVerticalAlignmentWithOrgOssPdfreporterEngineTypeVerticalAlignEnum:(OrgOssPdfreporterEngineTypeVerticalAlignEnum *)verticalAlignmentValue {
  id old = self->verticalAlignmentValue_;
  self->verticalAlignmentValue_ = verticalAlignmentValue;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_VERTICAL_ALIGNMENT withId:old withId:self->verticalAlignmentValue_];
}

- (OrgOssPdfreporterEngineTypeRotationEnum *)getRotationValue {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getRotationValueWithOrgOssPdfreporterEngineJRCommonText_(self);
}

- (OrgOssPdfreporterEngineTypeRotationEnum *)getOwnRotationValue {
  return self->rotationValue_;
}

- (void)setRotationWithOrgOssPdfreporterEngineTypeRotationEnum:(OrgOssPdfreporterEngineTypeRotationEnum *)rotationValue {
  id old = self->rotationValue_;
  self->rotationValue_ = rotationValue;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_ROTATION withId:old withId:self->rotationValue_];
}

- (OrgOssPdfreporterEngineTypeLineSpacingEnum *)getLineSpacingValue {
  return [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([self getParagraph])) getLineSpacing];
}

- (OrgOssPdfreporterEngineTypeLineSpacingEnum *)getOwnLineSpacingValue {
  return [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([self getParagraph])) getOwnLineSpacing];
}

- (void)setLineSpacingWithOrgOssPdfreporterEngineTypeLineSpacingEnum:(OrgOssPdfreporterEngineTypeLineSpacingEnum *)lineSpacing {
  [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([self getParagraph])) setLineSpacingWithOrgOssPdfreporterEngineTypeLineSpacingEnum:lineSpacing];
}

- (NSString *)getMarkup {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getMarkupWithOrgOssPdfreporterEngineJRCommonText_(self);
}

- (NSString *)getOwnMarkup {
  return markup_;
}

- (void)setMarkupWithNSString:(NSString *)markup {
  id old = self->markup_;
  self->markup_ = markup;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_MARKUP withId:old withId:self->markup_];
}

- (id<OrgOssPdfreporterEngineJRLineBox>)getLineBox {
  return lineBox_;
}

- (id<OrgOssPdfreporterEngineJRParagraph>)getParagraph {
  return paragraph_;
}

- (id<OrgOssPdfreporterEngineJRFont>)getFont {
  return self;
}

- (OrgOssPdfreporterEngineTypeModeEnum *)getModeValue {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getModeWithOrgOssPdfreporterEngineJRCommonElement_withOrgOssPdfreporterEngineTypeModeEnum_(self, JreLoadEnum(OrgOssPdfreporterEngineTypeModeEnum, TRANSPARENT));
}

- (NSString *)getFontName {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getFontNameWithOrgOssPdfreporterEngineJRFont_(self);
}

- (NSString *)getOwnFontName {
  return fontName_;
}

- (void)setFontNameWithNSString:(NSString *)fontName {
  id old = self->fontName_;
  self->fontName_ = fontName;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_FONT_NAME withId:old withId:self->fontName_];
}

- (jboolean)isBold {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isBoldWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnBold {
  return isBold_;
}

- (void)setBoldWithBoolean:(jboolean)isBold {
  [self setBoldWithJavaLangBoolean:isBold ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
}

- (void)setBoldWithJavaLangBoolean:(JavaLangBoolean *)isBold {
  id old = self->isBold_;
  self->isBold_ = isBold;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_BOLD withId:old withId:self->isBold_];
}

- (jboolean)isItalic {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isItalicWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnItalic {
  return isItalic_;
}

- (void)setItalicWithBoolean:(jboolean)isItalic {
  [self setItalicWithJavaLangBoolean:isItalic ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
}

- (void)setItalicWithJavaLangBoolean:(JavaLangBoolean *)isItalic {
  id old = self->isItalic_;
  self->isItalic_ = isItalic;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_ITALIC withId:old withId:self->isItalic_];
}

- (jboolean)isUnderline {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isUnderlineWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnUnderline {
  return isUnderline_;
}

- (void)setUnderlineWithBoolean:(jboolean)isUnderline {
  [self setUnderlineWithJavaLangBoolean:isUnderline ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
}

- (void)setUnderlineWithJavaLangBoolean:(JavaLangBoolean *)isUnderline {
  id old = self->isUnderline_;
  self->isUnderline_ = isUnderline;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_UNDERLINE withId:old withId:self->isUnderline_];
}

- (jboolean)isStrikeThrough {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isStrikeThroughWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnStrikeThrough {
  return isStrikeThrough_;
}

- (void)setStrikeThroughWithBoolean:(jboolean)isStrikeThrough {
  [self setStrikeThroughWithJavaLangBoolean:isStrikeThrough ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
}

- (void)setStrikeThroughWithJavaLangBoolean:(JavaLangBoolean *)isStrikeThrough {
  id old = self->isStrikeThrough_;
  self->isStrikeThrough_ = isStrikeThrough;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_STRIKE_THROUGH withId:old withId:self->isStrikeThrough_];
}

- (jint)getFontSize {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getFontSizeWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangInteger *)getOwnFontSize {
  return fontSize_;
}

- (void)setFontSizeWithInt:(jint)fontSize {
  [self setFontSizeWithJavaLangInteger:JavaLangInteger_valueOfWithInt_(fontSize)];
}

- (void)setFontSizeWithJavaLangInteger:(JavaLangInteger *)fontSize {
  id old = self->fontSize_;
  self->fontSize_ = fontSize;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_FONT_SIZE withId:old withId:self->fontSize_];
}

- (NSString *)getPdfFontName {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getPdfFontNameWithOrgOssPdfreporterEngineJRFont_(self);
}

- (NSString *)getOwnPdfFontName {
  return pdfFontName_;
}

- (void)setPdfFontNameWithNSString:(NSString *)pdfFontName {
  id old = self->pdfFontName_;
  self->pdfFontName_ = pdfFontName;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_PDF_FONT_NAME withId:old withId:self->pdfFontName_];
}

- (NSString *)getPdfEncoding {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getPdfEncodingWithOrgOssPdfreporterEngineJRFont_(self);
}

- (NSString *)getOwnPdfEncoding {
  return pdfEncoding_;
}

- (void)setPdfEncodingWithNSString:(NSString *)pdfEncoding {
  id old = self->pdfEncoding_;
  self->pdfEncoding_ = pdfEncoding;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_PDF_ENCODING withId:old withId:self->pdfEncoding_];
}

- (jboolean)isPdfEmbedded {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isPdfEmbeddedWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnPdfEmbedded {
  return isPdfEmbedded_;
}

- (void)setPdfEmbeddedWithBoolean:(jboolean)isPdfEmbedded {
  [self setPdfEmbeddedWithJavaLangBoolean:isPdfEmbedded ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE)];
}

- (void)setPdfEmbeddedWithJavaLangBoolean:(JavaLangBoolean *)isPdfEmbedded {
  id old = self->isPdfEmbedded_;
  self->isPdfEmbedded_ = isPdfEmbedded;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseStyle_PROPERTY_PDF_EMBEDDED withId:old withId:self->isPdfEmbedded_];
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [self getForecolor];
}

- (id)clone {
  OrgOssPdfreporterEngineBaseJRBaseTextElement *clone = (OrgOssPdfreporterEngineBaseJRBaseTextElement *) cast_chk([super clone], [OrgOssPdfreporterEngineBaseJRBaseTextElement class]);
  ((OrgOssPdfreporterEngineBaseJRBaseTextElement *) nil_chk(clone))->lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) cloneWithOrgOssPdfreporterEngineJRBoxContainer:clone];
  clone->paragraph_ = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph_)) cloneWithOrgOssPdfreporterEngineJRParagraphContainer:clone];
  return clone;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineJRTextElement:withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:", "JRBaseTextElement", NULL, 0x4, NULL, NULL },
    { "getHorizontalAlignmentValue", NULL, "Lorg.oss.pdfreporter.engine.type.HorizontalAlignEnum;", 0x1, NULL, NULL },
    { "getOwnHorizontalAlignmentValue", NULL, "Lorg.oss.pdfreporter.engine.type.HorizontalAlignEnum;", 0x1, NULL, NULL },
    { "setHorizontalAlignmentWithOrgOssPdfreporterEngineTypeHorizontalAlignEnum:", "setHorizontalAlignment", "V", 0x1, NULL, NULL },
    { "getVerticalAlignmentValue", NULL, "Lorg.oss.pdfreporter.engine.type.VerticalAlignEnum;", 0x1, NULL, NULL },
    { "getOwnVerticalAlignmentValue", NULL, "Lorg.oss.pdfreporter.engine.type.VerticalAlignEnum;", 0x1, NULL, NULL },
    { "setVerticalAlignmentWithOrgOssPdfreporterEngineTypeVerticalAlignEnum:", "setVerticalAlignment", "V", 0x1, NULL, NULL },
    { "getRotationValue", NULL, "Lorg.oss.pdfreporter.engine.type.RotationEnum;", 0x1, NULL, NULL },
    { "getOwnRotationValue", NULL, "Lorg.oss.pdfreporter.engine.type.RotationEnum;", 0x1, NULL, NULL },
    { "setRotationWithOrgOssPdfreporterEngineTypeRotationEnum:", "setRotation", "V", 0x1, NULL, NULL },
    { "getLineSpacingValue", NULL, "Lorg.oss.pdfreporter.engine.type.LineSpacingEnum;", 0x1, NULL, NULL },
    { "getOwnLineSpacingValue", NULL, "Lorg.oss.pdfreporter.engine.type.LineSpacingEnum;", 0x1, NULL, NULL },
    { "setLineSpacingWithOrgOssPdfreporterEngineTypeLineSpacingEnum:", "setLineSpacing", "V", 0x1, NULL, NULL },
    { "getMarkup", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOwnMarkup", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setMarkupWithNSString:", "setMarkup", "V", 0x1, NULL, NULL },
    { "getLineBox", NULL, "Lorg.oss.pdfreporter.engine.JRLineBox;", 0x1, NULL, NULL },
    { "getParagraph", NULL, "Lorg.oss.pdfreporter.engine.JRParagraph;", 0x1, NULL, NULL },
    { "getFont", NULL, "Lorg.oss.pdfreporter.engine.JRFont;", 0x1, NULL, NULL },
    { "getModeValue", NULL, "Lorg.oss.pdfreporter.engine.type.ModeEnum;", 0x1, NULL, NULL },
    { "getFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOwnFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setFontNameWithNSString:", "setFontName", "V", 0x1, NULL, NULL },
    { "isBold", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnBold", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setBoldWithBoolean:", "setBold", "V", 0x1, NULL, NULL },
    { "setBoldWithJavaLangBoolean:", "setBold", "V", 0x1, NULL, NULL },
    { "isItalic", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnItalic", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setItalicWithBoolean:", "setItalic", "V", 0x1, NULL, NULL },
    { "setItalicWithJavaLangBoolean:", "setItalic", "V", 0x1, NULL, NULL },
    { "isUnderline", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnUnderline", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setUnderlineWithBoolean:", "setUnderline", "V", 0x1, NULL, NULL },
    { "setUnderlineWithJavaLangBoolean:", "setUnderline", "V", 0x1, NULL, NULL },
    { "isStrikeThrough", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnStrikeThrough", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setStrikeThroughWithBoolean:", "setStrikeThrough", "V", 0x1, NULL, NULL },
    { "setStrikeThroughWithJavaLangBoolean:", "setStrikeThrough", "V", 0x1, NULL, NULL },
    { "getFontSize", NULL, "I", 0x1, NULL, NULL },
    { "getOwnFontSize", NULL, "Ljava.lang.Integer;", 0x1, NULL, NULL },
    { "setFontSizeWithInt:", "setFontSize", "V", 0x1, NULL, NULL },
    { "setFontSizeWithJavaLangInteger:", "setFontSize", "V", 0x1, NULL, NULL },
    { "getPdfFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOwnPdfFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setPdfFontNameWithNSString:", "setPdfFontName", "V", 0x1, NULL, NULL },
    { "getPdfEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOwnPdfEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setPdfEncodingWithNSString:", "setPdfEncoding", "V", 0x1, NULL, NULL },
    { "isPdfEmbedded", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnPdfEmbedded", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setPdfEmbeddedWithBoolean:", "setPdfEmbedded", "V", 0x1, NULL, NULL },
    { "setPdfEmbeddedWithJavaLangBoolean:", "setPdfEmbedded", "V", 0x1, NULL, NULL },
    { "getDefaultLineColor", NULL, "Lorg.oss.pdfreporter.geometry.IColor;", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgOssPdfreporterEngineBaseJRBaseTextElement_serialVersionUID },
    { "horizontalAlignmentValue_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.type.HorizontalAlignEnum;", NULL, NULL, .constantValue.asLong = 0 },
    { "verticalAlignmentValue_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.type.VerticalAlignEnum;", NULL, NULL, .constantValue.asLong = 0 },
    { "rotationValue_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.type.RotationEnum;", NULL, NULL, .constantValue.asLong = 0 },
    { "markup_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "lineBox_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRLineBox;", NULL, NULL, .constantValue.asLong = 0 },
    { "paragraph_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRParagraph;", NULL, NULL, .constantValue.asLong = 0 },
    { "fontName_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "isBold_", NULL, 0x4, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "isItalic_", NULL, 0x4, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "isUnderline_", NULL, 0x4, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "isStrikeThrough_", NULL, 0x4, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "fontSize_", NULL, 0x4, "Ljava.lang.Integer;", NULL, NULL, .constantValue.asLong = 0 },
    { "pdfFontName_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "pdfEncoding_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "isPdfEmbedded_", NULL, 0x4, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineBaseJRBaseTextElement = { 2, "JRBaseTextElement", "org.oss.pdfreporter.engine.base", NULL, 0x401, 55, methods, 16, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineBaseJRBaseTextElement;
}

@end

void OrgOssPdfreporterEngineBaseJRBaseTextElement_initWithOrgOssPdfreporterEngineJRTextElement_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(OrgOssPdfreporterEngineBaseJRBaseTextElement *self, id<OrgOssPdfreporterEngineJRTextElement> textElement, OrgOssPdfreporterEngineBaseJRBaseObjectFactory *factory) {
  OrgOssPdfreporterEngineBaseJRBaseElement_initWithOrgOssPdfreporterEngineJRElement_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(self, textElement, factory);
  self->horizontalAlignmentValue_ = [((id<OrgOssPdfreporterEngineJRTextElement>) nil_chk(textElement)) getOwnHorizontalAlignmentValue];
  self->verticalAlignmentValue_ = [textElement getOwnVerticalAlignmentValue];
  self->rotationValue_ = [textElement getOwnRotationValue];
  self->markup_ = [textElement getOwnMarkup];
  self->lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([textElement getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
  self->paragraph_ = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([textElement getParagraph])) cloneWithOrgOssPdfreporterEngineJRParagraphContainer:self];
  self->fontName_ = [textElement getOwnFontName];
  self->isBold_ = [textElement isOwnBold];
  self->isItalic_ = [textElement isOwnItalic];
  self->isUnderline_ = [textElement isOwnUnderline];
  self->isStrikeThrough_ = [textElement isOwnStrikeThrough];
  self->fontSize_ = [textElement getOwnFontSize];
  self->pdfFontName_ = [textElement getOwnPdfFontName];
  self->pdfEncoding_ = [textElement getOwnPdfEncoding];
  self->isPdfEmbedded_ = [textElement isOwnPdfEmbedded];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineBaseJRBaseTextElement)
