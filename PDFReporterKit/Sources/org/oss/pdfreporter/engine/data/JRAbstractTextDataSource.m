//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/data/JRAbstractTextDataSource.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/Date.h"
#include "java/util/TimeZone.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/data/JRAbstractTextDataSource.h"
#include "org/oss/pdfreporter/engine/util/FormatUtils.h"
#include "org/oss/pdfreporter/engine/util/JRDataUtils.h"
#include "org/oss/pdfreporter/text/ParseException.h"
#include "org/oss/pdfreporter/text/bundle/StringLocale.h"
#include "org/oss/pdfreporter/text/format/IDateFormat.h"
#include "org/oss/pdfreporter/text/format/INumberFormat.h"
#include "org/oss/pdfreporter/text/format/LocaleConverter.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgOssPdfreporterEngineDataJRAbstractTextDataSource () {
 @public
  OrgOssPdfreporterTextBundleStringLocale *locale_;
  NSString *datePattern_;
  NSString *numberPattern_;
  JavaUtilTimeZone *timeZone_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineDataJRAbstractTextDataSource, locale_, OrgOssPdfreporterTextBundleStringLocale *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineDataJRAbstractTextDataSource, datePattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineDataJRAbstractTextDataSource, numberPattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineDataJRAbstractTextDataSource, timeZone_, JavaUtilTimeZone *)

@implementation OrgOssPdfreporterEngineDataJRAbstractTextDataSource

- (id)convertStringValueWithNSString:(NSString *)text
                        withIOSClass:(IOSClass *)valueClass {
  id value = nil;
  if ([NSString_class_() isEqual:valueClass]) {
    value = text;
  }
  else if ([NSNumber_class_() isAssignableFrom:valueClass]) {
    value = OrgOssPdfreporterTextFormatLocaleConverter_convertWithNSString_withIOSClass_withOrgOssPdfreporterTextBundleStringLocale_withNSString_([((NSString *) nil_chk(text)) trim], valueClass, locale_, numberPattern_);
  }
  else if ([JavaUtilDate_class_() isAssignableFrom:valueClass]) {
    value = OrgOssPdfreporterTextFormatLocaleConverter_convertWithNSString_withIOSClass_withOrgOssPdfreporterTextBundleStringLocale_withNSString_([((NSString *) nil_chk(text)) trim], valueClass, locale_, datePattern_);
  }
  else if ([JavaLangBoolean_class_() isEqual:valueClass]) {
    value = JavaLangBoolean_valueOfWithNSString_(text);
  }
  return value;
}

- (id)convertNumberWithNSNumber:(NSNumber *)number
                   withIOSClass:(IOSClass *)valueClass {
  NSNumber *value = nil;
  if ([((IOSClass *) nil_chk(valueClass)) isEqual:JavaLangByte_class_()]) {
    value = new_JavaLangByte_initWithByte_([((NSNumber *) nil_chk(number)) charValue]);
  }
  else if ([valueClass isEqual:JavaLangShort_class_()]) {
    value = new_JavaLangShort_initWithShort_([((NSNumber *) nil_chk(number)) shortValue]);
  }
  else if ([valueClass isEqual:JavaLangInteger_class_()]) {
    value = JavaLangInteger_valueOfWithInt_([((NSNumber *) nil_chk(number)) intValue]);
  }
  else if ([valueClass isEqual:JavaLangLong_class_()]) {
    value = new_JavaLangLong_initWithLong_([((NSNumber *) nil_chk(number)) longLongValue]);
  }
  else if ([valueClass isEqual:JavaLangFloat_class_()]) {
    value = new_JavaLangFloat_initWithFloat_([((NSNumber *) nil_chk(number)) floatValue]);
  }
  else if ([valueClass isEqual:JavaLangDouble_class_()]) {
    value = new_JavaLangDouble_initWithDouble_([((NSNumber *) nil_chk(number)) doubleValue]);
  }
  else if ([valueClass isEqual:JavaMathBigInteger_class_()]) {
    value = JavaMathBigInteger_valueOfWithLong_([((NSNumber *) nil_chk(number)) longLongValue]);
  }
  else if ([valueClass isEqual:JavaMathBigDecimal_class_()]) {
    value = new_JavaMathBigDecimal_initWithNSString_(JavaLangDouble_toStringWithDouble_([((NSNumber *) nil_chk(number)) doubleValue]));
  }
  else {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(JreStrcat("$$", @"Unknown number class ", [valueClass getName]));
  }
  return value;
}

- (NSNumber *)getFormattedNumberWithOrgOssPdfreporterTextFormatINumberFormat:(id<OrgOssPdfreporterTextFormatINumberFormat>)numberFormat
                                                                withNSString:(NSString *)fieldValue
                                                                withIOSClass:(IOSClass *)valueClass {
  return OrgOssPdfreporterEngineUtilFormatUtils_getFormattedNumberWithOrgOssPdfreporterTextFormatINumberFormat_withNSString_withIOSClass_(numberFormat, fieldValue, valueClass);
}

- (JavaUtilDate *)getFormattedDateWithOrgOssPdfreporterTextFormatIDateFormat:(id<OrgOssPdfreporterTextFormatIDateFormat>)dateFormat
                                                                withNSString:(NSString *)fieldValue
                                                                withIOSClass:(IOSClass *)valueClass {
  return OrgOssPdfreporterEngineUtilFormatUtils_getFormattedDateWithOrgOssPdfreporterTextFormatIDateFormat_withNSString_withIOSClass_(dateFormat, fieldValue, valueClass);
}

- (void)setTextAttributesWithOrgOssPdfreporterEngineDataJRAbstractTextDataSource:(OrgOssPdfreporterEngineDataJRAbstractTextDataSource *)textDataSource {
  [self setLocaleWithOrgOssPdfreporterTextBundleStringLocale:[((OrgOssPdfreporterEngineDataJRAbstractTextDataSource *) nil_chk(textDataSource)) getLocale]];
  [self setDatePatternWithNSString:[textDataSource getDatePattern]];
  [self setNumberPatternWithNSString:[textDataSource getNumberPattern]];
  [self setTimeZoneWithJavaUtilTimeZone:[textDataSource getTimeZone]];
}

- (OrgOssPdfreporterTextBundleStringLocale *)getLocale {
  return locale_;
}

- (void)setLocaleWithOrgOssPdfreporterTextBundleStringLocale:(OrgOssPdfreporterTextBundleStringLocale *)locale {
  self->locale_ = locale;
}

- (void)setLocaleWithNSString:(NSString *)locale {
  [self setLocaleWithOrgOssPdfreporterTextBundleStringLocale:OrgOssPdfreporterEngineUtilJRDataUtils_getLocaleWithNSString_(locale)];
}

- (NSString *)getDatePattern {
  return datePattern_;
}

- (void)setDatePatternWithNSString:(NSString *)datePattern {
  self->datePattern_ = datePattern;
}

- (NSString *)getNumberPattern {
  return numberPattern_;
}

- (void)setNumberPatternWithNSString:(NSString *)numberPattern {
  self->numberPattern_ = numberPattern;
}

- (JavaUtilTimeZone *)getTimeZone {
  return timeZone_;
}

- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  self->timeZone_ = timeZone;
}

- (void)setTimeZoneWithNSString:(NSString *)timeZoneId {
  [self setTimeZoneWithJavaUtilTimeZone:OrgOssPdfreporterEngineUtilJRDataUtils_getTimeZoneWithNSString_(timeZoneId)];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineDataJRAbstractTextDataSource_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "convertStringValueWithNSString:withIOSClass:", "convertStringValue", "Ljava.lang.Object;", 0x4, NULL, "(Ljava/lang/String;Ljava/lang/Class<*>;)Ljava/lang/Object;" },
    { "convertNumberWithNSNumber:withIOSClass:", "convertNumber", "Ljava.lang.Object;", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", "(Ljava/lang/Number;Ljava/lang/Class<*>;)Ljava/lang/Object;" },
    { "getFormattedNumberWithOrgOssPdfreporterTextFormatINumberFormat:withNSString:withIOSClass:", "getFormattedNumber", "Ljava.lang.Number;", 0x4, "Lorg.oss.pdfreporter.text.ParseException;", "(Lorg/oss/pdfreporter/text/format/INumberFormat;Ljava/lang/String;Ljava/lang/Class<*>;)Ljava/lang/Number;" },
    { "getFormattedDateWithOrgOssPdfreporterTextFormatIDateFormat:withNSString:withIOSClass:", "getFormattedDate", "Ljava.util.Date;", 0x4, "Lorg.oss.pdfreporter.text.ParseException;", "(Lorg/oss/pdfreporter/text/format/IDateFormat;Ljava/lang/String;Ljava/lang/Class<*>;)Ljava/util/Date;" },
    { "setTextAttributesWithOrgOssPdfreporterEngineDataJRAbstractTextDataSource:", "setTextAttributes", "V", 0x1, NULL, NULL },
    { "getLocale", NULL, "Lorg.oss.pdfreporter.text.bundle.StringLocale;", 0x1, NULL, NULL },
    { "setLocaleWithOrgOssPdfreporterTextBundleStringLocale:", "setLocale", "V", 0x1, NULL, NULL },
    { "setLocaleWithNSString:", "setLocale", "V", 0x1, NULL, NULL },
    { "getDatePattern", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setDatePatternWithNSString:", "setDatePattern", "V", 0x1, NULL, NULL },
    { "getNumberPattern", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setNumberPatternWithNSString:", "setNumberPattern", "V", 0x1, NULL, NULL },
    { "getTimeZone", NULL, "Ljava.util.TimeZone;", 0x1, NULL, NULL },
    { "setTimeZoneWithJavaUtilTimeZone:", "setTimeZone", "V", 0x1, NULL, NULL },
    { "setTimeZoneWithNSString:", "setTimeZone", "V", 0x1, NULL, NULL },
    { "init", "JRAbstractTextDataSource", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "locale_", NULL, 0x2, "Lorg.oss.pdfreporter.text.bundle.StringLocale;", NULL, NULL, .constantValue.asLong = 0 },
    { "datePattern_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "numberPattern_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "timeZone_", NULL, 0x2, "Ljava.util.TimeZone;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineDataJRAbstractTextDataSource = { 2, "JRAbstractTextDataSource", "org.oss.pdfreporter.engine.data", NULL, 0x401, 16, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineDataJRAbstractTextDataSource;
}

@end

void OrgOssPdfreporterEngineDataJRAbstractTextDataSource_init(OrgOssPdfreporterEngineDataJRAbstractTextDataSource *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineDataJRAbstractTextDataSource)
