//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRPrintFontFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/xml/JRBaseFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintFontFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintXmlLoader.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@implementation OrgOssPdfreporterEngineXmlJRPrintFontFactory

- (id)createObjectWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  id<OrgOssPdfreporterEngineJRPrintText> element = (id<OrgOssPdfreporterEngineJRPrintText>) cast_check([((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peek], OrgOssPdfreporterEngineJRPrintText_class_());
  OrgOssPdfreporterEngineXmlJRPrintXmlLoader *printXmlLoader = (OrgOssPdfreporterEngineXmlJRPrintXmlLoader *) cast_chk([((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[digester_ getCount] - 1], [OrgOssPdfreporterEngineXmlJRPrintXmlLoader class]);
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = (OrgOssPdfreporterEngineJasperPrint *) cast_chk([((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[digester_ getCount] - 2], [OrgOssPdfreporterEngineJasperPrint class]);
  if ([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) getStyle] == nil && [element getStyleNameReference] == nil) {
    NSString *styleName = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_reportFont];
    if (styleName != nil) {
      id<JavaUtilMap> stylesMap = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint)) getStylesMap];
      if (![((id<JavaUtilMap>) nil_chk(stylesMap)) containsKeyWithId:styleName]) {
        [((OrgOssPdfreporterEngineXmlJRPrintXmlLoader *) nil_chk(printXmlLoader)) addErrorWithJavaLangException:new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(JreStrcat("$$", @"Unknown report style : ", styleName))];
      }
      [element setStyleWithOrgOssPdfreporterEngineJRStyle:[stylesMap getWithId:styleName]];
    }
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_fontName] != nil) {
    [element setFontNameWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_fontName]];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isBold] != nil) {
    [element setBoldWithJavaLangBoolean:JavaLangBoolean_valueOfWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isBold])];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isItalic] != nil) {
    [element setItalicWithJavaLangBoolean:JavaLangBoolean_valueOfWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isItalic])];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isUnderline] != nil) {
    [element setUnderlineWithJavaLangBoolean:JavaLangBoolean_valueOfWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isUnderline])];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isStrikeThrough] != nil) {
    [element setStrikeThroughWithJavaLangBoolean:JavaLangBoolean_valueOfWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isStrikeThrough])];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_size] != nil) {
    [element setFontSizeWithInt:JavaLangInteger_parseIntWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_size])];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_pdfFontName] != nil) {
    [element setPdfFontNameWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_pdfFontName]];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_pdfEncoding] != nil) {
    [element setPdfEncodingWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_pdfEncoding]];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isPdfEmbedded] != nil) {
    [element setPdfEmbeddedWithJavaLangBoolean:JavaLangBoolean_valueOfWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isPdfEmbedded])];
  }
  return element;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineXmlJRPrintFontFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createObjectWithOrgOssPdfreporterXmlParsersIAttributes:", "createObject", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "init", "JRPrintFontFactory", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineXmlJRPrintFontFactory = { 2, "JRPrintFontFactory", "org.oss.pdfreporter.engine.xml", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineXmlJRPrintFontFactory;
}

@end

void OrgOssPdfreporterEngineXmlJRPrintFontFactory_init(OrgOssPdfreporterEngineXmlJRPrintFontFactory *self) {
  OrgOssPdfreporterEngineXmlJRBaseFactory_init(self);
}

OrgOssPdfreporterEngineXmlJRPrintFontFactory *new_OrgOssPdfreporterEngineXmlJRPrintFontFactory_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineXmlJRPrintFontFactory, init)
}

OrgOssPdfreporterEngineXmlJRPrintFontFactory *create_OrgOssPdfreporterEngineXmlJRPrintFontFactory_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineXmlJRPrintFontFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineXmlJRPrintFontFactory)
