//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRAbstractStyleFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "org/oss/pdfreporter/engine/JRCommonText.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JRPen.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/base/JRBoxPen.h"
#include "org/oss/pdfreporter/engine/design/JRDesignStyle.h"
#include "org/oss/pdfreporter/engine/type/FillEnum.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/LineSpacingEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/PenEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/ScaleImageEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/util/JRColorUtil.h"
#include "org/oss/pdfreporter/engine/util/JRPenUtil.h"
#include "org/oss/pdfreporter/engine/xml/JRAbstractStyleFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRBaseFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@implementation OrgOssPdfreporterEngineXmlJRAbstractStyleFactory

- (id)createObjectWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  OrgOssPdfreporterEngineDesignJRDesignStyle *style = new_OrgOssPdfreporterEngineDesignJRDesignStyle_init();
  [style setNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_name]];
  NSString *isDefault = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isDefault];
  if (isDefault != nil && ((jint) [isDefault length]) > 0) {
    [style setDefaultWithBoolean:[((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(isDefault))) booleanValue]];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_style] != nil) {
    [self setParentStyleWithOrgOssPdfreporterEngineDesignJRDesignStyle:style withNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_style]];
  }
  [self setCommonStyleWithOrgOssPdfreporterEngineJRStyle:style withOrgOssPdfreporterXmlParsersIAttributes:atts];
  return style;
}

- (void)setCommonStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style
              withOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  OrgOssPdfreporterEngineTypeModeEnum *mode = OrgOssPdfreporterEngineTypeModeEnum_getByNameWithNSString_([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_mode]);
  if (mode != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setModeWithOrgOssPdfreporterEngineTypeModeEnum:mode];
  }
  NSString *forecolor = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_forecolor];
  [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setForecolorWithOrgOssPdfreporterGeometryIColor:OrgOssPdfreporterEngineUtilJRColorUtil_getColorWithNSString_withOrgOssPdfreporterGeometryIColor_(forecolor, nil)];
  NSString *backcolor = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_backcolor];
  [style setBackcolorWithOrgOssPdfreporterGeometryIColor:OrgOssPdfreporterEngineUtilJRColorUtil_getColorWithNSString_withOrgOssPdfreporterGeometryIColor_(backcolor, nil)];
  OrgOssPdfreporterEngineTypePenEnum *pen = OrgOssPdfreporterEngineTypePenEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_pen]);
  if (pen != nil) {
    OrgOssPdfreporterEngineUtilJRPenUtil_setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnum_withOrgOssPdfreporterEngineJRPen_(pen, [style getLinePen]);
  }
  OrgOssPdfreporterEngineTypeFillEnum *fill = OrgOssPdfreporterEngineTypeFillEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_fill]);
  if (fill != nil) {
    [style setFillWithOrgOssPdfreporterEngineTypeFillEnum:fill];
  }
  NSString *radius = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_radius];
  if (radius != nil && ((jint) [radius length]) > 0) {
    [style setRadiusWithInt:JavaLangInteger_parseIntWithNSString_(radius)];
  }
  OrgOssPdfreporterEngineTypeScaleImageEnum *scaleImage = OrgOssPdfreporterEngineTypeScaleImageEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_scaleImage]);
  if (scaleImage != nil) {
    [style setScaleImageWithOrgOssPdfreporterEngineTypeScaleImageEnum:scaleImage];
  }
  OrgOssPdfreporterEngineTypeHorizontalAlignEnum *horizontalAlignment = OrgOssPdfreporterEngineTypeHorizontalAlignEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_hAlign]);
  if (horizontalAlignment != nil) {
    [style setHorizontalAlignmentWithOrgOssPdfreporterEngineTypeHorizontalAlignEnum:horizontalAlignment];
  }
  OrgOssPdfreporterEngineTypeVerticalAlignEnum *verticalAlignment = OrgOssPdfreporterEngineTypeVerticalAlignEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_vAlign]);
  if (verticalAlignment != nil) {
    [style setVerticalAlignmentWithOrgOssPdfreporterEngineTypeVerticalAlignEnum:verticalAlignment];
  }
  OrgOssPdfreporterEngineTypePenEnum *border = OrgOssPdfreporterEngineTypePenEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_border]);
  if (border != nil) {
    OrgOssPdfreporterEngineUtilJRPenUtil_setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnum_withOrgOssPdfreporterEngineJRPen_(border, [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) getPen]);
  }
  id<OrgOssPdfreporterGeometryIColor> borderColor = OrgOssPdfreporterEngineUtilJRColorUtil_getColorWithNSString_withOrgOssPdfreporterGeometryIColor_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_borderColor], nil);
  if (borderColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) getPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:borderColor];
  }
  NSString *padding = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_padding];
  if (padding != nil && ((jint) [padding length]) > 0) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) setPaddingWithInt:JavaLangInteger_parseIntWithNSString_(padding)];
  }
  border = OrgOssPdfreporterEngineTypePenEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_topBorder]);
  if (border != nil) {
    OrgOssPdfreporterEngineUtilJRPenUtil_setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnum_withOrgOssPdfreporterEngineJRPen_(border, [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) getTopPen]);
  }
  borderColor = OrgOssPdfreporterEngineUtilJRColorUtil_getColorWithNSString_withOrgOssPdfreporterGeometryIColor_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_topBorderColor], JreLoadStatic(OrgOssPdfreporterGeometryIColor, black));
  if (borderColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) getTopPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:borderColor];
  }
  padding = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_topPadding];
  if (padding != nil && ((jint) [padding length]) > 0) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) setTopPaddingWithInt:JavaLangInteger_parseIntWithNSString_(padding)];
  }
  border = OrgOssPdfreporterEngineTypePenEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_leftBorder]);
  if (border != nil) {
    OrgOssPdfreporterEngineUtilJRPenUtil_setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnum_withOrgOssPdfreporterEngineJRPen_(border, [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) getLeftPen]);
  }
  borderColor = OrgOssPdfreporterEngineUtilJRColorUtil_getColorWithNSString_withOrgOssPdfreporterGeometryIColor_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_leftBorderColor], JreLoadStatic(OrgOssPdfreporterGeometryIColor, black));
  if (borderColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) getLeftPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:borderColor];
  }
  padding = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_leftPadding];
  if (padding != nil && ((jint) [padding length]) > 0) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) setLeftPaddingWithInt:JavaLangInteger_parseIntWithNSString_(padding)];
  }
  border = OrgOssPdfreporterEngineTypePenEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_bottomBorder]);
  if (border != nil) {
    OrgOssPdfreporterEngineUtilJRPenUtil_setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnum_withOrgOssPdfreporterEngineJRPen_(border, [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) getBottomPen]);
  }
  borderColor = OrgOssPdfreporterEngineUtilJRColorUtil_getColorWithNSString_withOrgOssPdfreporterGeometryIColor_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_bottomBorderColor], JreLoadStatic(OrgOssPdfreporterGeometryIColor, black));
  if (borderColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) getBottomPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:borderColor];
  }
  padding = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_bottomPadding];
  if (padding != nil && ((jint) [padding length]) > 0) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) setBottomPaddingWithInt:JavaLangInteger_parseIntWithNSString_(padding)];
  }
  border = OrgOssPdfreporterEngineTypePenEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_rightBorder]);
  if (border != nil) {
    OrgOssPdfreporterEngineUtilJRPenUtil_setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnum_withOrgOssPdfreporterEngineJRPen_(border, [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) getRightPen]);
  }
  borderColor = OrgOssPdfreporterEngineUtilJRColorUtil_getColorWithNSString_withOrgOssPdfreporterGeometryIColor_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_rightBorderColor], JreLoadStatic(OrgOssPdfreporterGeometryIColor, black));
  if (borderColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) getRightPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:borderColor];
  }
  padding = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_rightPadding];
  if (padding != nil && ((jint) [padding length]) > 0) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([style getLineBox])) setRightPaddingWithInt:JavaLangInteger_parseIntWithNSString_(padding)];
  }
  OrgOssPdfreporterEngineTypeRotationEnum *rotation = OrgOssPdfreporterEngineTypeRotationEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_rotation]);
  if (rotation != nil) {
    [style setRotationWithOrgOssPdfreporterEngineTypeRotationEnum:rotation];
  }
  OrgOssPdfreporterEngineTypeLineSpacingEnum *lineSpacing = OrgOssPdfreporterEngineTypeLineSpacingEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_lineSpacing]);
  if (lineSpacing != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([style getParagraph])) setLineSpacingWithOrgOssPdfreporterEngineTypeLineSpacingEnum:lineSpacing];
  }
  [style setMarkupWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_markup]];
  NSString *isStyledText = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isStyledText];
  if (isStyledText != nil && ((jint) [isStyledText length]) > 0) {
    [style setMarkupWithNSString:[((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(isStyledText))) booleanValue] ? OrgOssPdfreporterEngineJRCommonText_MARKUP_STYLED_TEXT : OrgOssPdfreporterEngineJRCommonText_MARKUP_NONE];
  }
  [style setPatternWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_pattern]];
  NSString *isBlankWhenNull = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isBlankWhenNull];
  if (isBlankWhenNull != nil && ((jint) [isBlankWhenNull length]) > 0) {
    [style setBlankWhenNullWithJavaLangBoolean:JavaLangBoolean_valueOfWithNSString_(isBlankWhenNull)];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_fontName] != nil) {
    [style setFontNameWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_fontName]];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isBold] != nil) {
    [style setBoldWithJavaLangBoolean:JavaLangBoolean_valueOfWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isBold])];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isItalic] != nil) {
    [style setItalicWithJavaLangBoolean:JavaLangBoolean_valueOfWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isItalic])];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isUnderline] != nil) {
    [style setUnderlineWithJavaLangBoolean:JavaLangBoolean_valueOfWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isUnderline])];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isStrikeThrough] != nil) {
    [style setStrikeThroughWithJavaLangBoolean:JavaLangBoolean_valueOfWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isStrikeThrough])];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_fontSize] != nil) {
    [style setFontSizeWithJavaLangInteger:JavaLangInteger_valueOfWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_fontSize])];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_pdfFontName] != nil) {
    [style setPdfFontNameWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_pdfFontName]];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_pdfEncoding] != nil) {
    [style setPdfEncodingWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_pdfEncoding]];
  }
  if ([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isPdfEmbedded] != nil) {
    [style setPdfEmbeddedWithJavaLangBoolean:JavaLangBoolean_valueOfWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isPdfEmbedded])];
  }
}

- (void)setParentStyleWithOrgOssPdfreporterEngineDesignJRDesignStyle:(OrgOssPdfreporterEngineDesignJRDesignStyle *)currentStyle
                                                        withNSString:(NSString *)parentStyleName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineXmlJRAbstractStyleFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createObjectWithOrgOssPdfreporterXmlParsersIAttributes:", "createObject", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "setCommonStyleWithOrgOssPdfreporterEngineJRStyle:withOrgOssPdfreporterXmlParsersIAttributes:", "setCommonStyle", "V", 0x4, NULL, NULL },
    { "setParentStyleWithOrgOssPdfreporterEngineDesignJRDesignStyle:withNSString:", "setParentStyle", "V", 0x404, NULL, NULL },
    { "init", "JRAbstractStyleFactory", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineXmlJRAbstractStyleFactory = { 2, "JRAbstractStyleFactory", "org.oss.pdfreporter.engine.xml", NULL, 0x401, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineXmlJRAbstractStyleFactory;
}

@end

void OrgOssPdfreporterEngineXmlJRAbstractStyleFactory_init(OrgOssPdfreporterEngineXmlJRAbstractStyleFactory *self) {
  OrgOssPdfreporterEngineXmlJRBaseFactory_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineXmlJRAbstractStyleFactory)
