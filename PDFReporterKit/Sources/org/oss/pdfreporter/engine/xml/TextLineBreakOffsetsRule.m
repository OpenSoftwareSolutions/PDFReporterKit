//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/xml/TextLineBreakOffsetsRule.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Short.h"
#include "java/util/StringTokenizer.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/engine/xml/TextLineBreakOffsetsRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/AbstractRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"

@implementation OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule

- (void)bodyWithNSString:(NSString *)namespace_
            withNSString:(NSString *)name
            withNSString:(NSString *)text {
  if (text != nil) {
    JavaUtilStringTokenizer *tokenizer = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(text, OrgOssPdfreporterEngineXmlJRXmlConstants_LINE_BREAK_OFFSET_SEPARATOR);
    jint tokenCount = [tokenizer countTokens];
    IOSShortArray *offsets;
    if (tokenCount == 0) {
      offsets = JreLoadStatic(OrgOssPdfreporterEngineJRPrintText, ZERO_LINE_BREAK_OFFSETS);
    }
    else {
      offsets = [IOSShortArray newArrayWithLength:tokenCount];
      for (jint i = 0; i < offsets->size_; i++) {
        NSString *token = [tokenizer nextToken];
        *IOSShortArray_GetRef(offsets, i) = JavaLangShort_parseShortWithNSString_(token);
      }
    }
    id<OrgOssPdfreporterEngineJRPrintText> printText = (id<OrgOssPdfreporterEngineJRPrintText>) cast_check([((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk([self getDigester])) peek], OrgOssPdfreporterEngineJRPrintText_class_());
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(printText)) setLineBreakOffsetsWithShortArray:offsets];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "bodyWithNSString:withNSString:withNSString:", "body", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "init", "TextLineBreakOffsetsRule", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule = { 2, "TextLineBreakOffsetsRule", "org.oss.pdfreporter.engine.xml", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule;
}

@end

void OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule_init(OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule *self) {
  OrgOssPdfreporterUsesOrgApacheDigesterAbstractRule_init(self);
}

OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule *new_OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule, init)
}

OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule *create_OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule)
