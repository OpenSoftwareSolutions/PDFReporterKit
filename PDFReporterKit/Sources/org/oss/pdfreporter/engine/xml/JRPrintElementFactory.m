//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRPrintElementFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/base/JRBasePrintElement.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRColorUtil.h"
#include "org/oss/pdfreporter/engine/xml/JRBaseFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintElementFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintXmlLoader.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@implementation OrgOssPdfreporterEngineXmlJRPrintElementFactory

- (id)createObjectWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  OrgOssPdfreporterEngineXmlJRPrintXmlLoader *printXmlLoader = (OrgOssPdfreporterEngineXmlJRPrintXmlLoader *) cast_chk([((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[digester_ getCount] - 1], [OrgOssPdfreporterEngineXmlJRPrintXmlLoader class]);
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = (OrgOssPdfreporterEngineJasperPrint *) cast_chk([((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[digester_ getCount] - 2], [OrgOssPdfreporterEngineJasperPrint class]);
  OrgOssPdfreporterEngineBaseJRBasePrintElement *element = (OrgOssPdfreporterEngineBaseJRBasePrintElement *) cast_chk([((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peek], [OrgOssPdfreporterEngineBaseJRBasePrintElement class]);
  NSString *key = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_key];
  if (key != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setKeyWithNSString:key];
  }
  OrgOssPdfreporterEngineTypeModeEnum *mode = OrgOssPdfreporterEngineTypeModeEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_mode]);
  if (mode != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setModeWithOrgOssPdfreporterEngineTypeModeEnum:mode];
  }
  NSString *uuid = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_uuid];
  if (uuid != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setUUIDWithOrgOssPdfreporterUsesJavaUtilUUID:OrgOssPdfreporterUsesJavaUtilUUID_fromStringWithNSString_(uuid)];
  }
  NSString *x = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_x];
  if (x != nil && ((jint) [x length]) > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setXWithInt:JavaLangInteger_parseIntWithNSString_(x)];
  }
  NSString *y = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_y];
  if (y != nil && ((jint) [y length]) > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setYWithInt:JavaLangInteger_parseIntWithNSString_(y)];
  }
  NSString *width = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_width];
  if (width != nil && ((jint) [width length]) > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setWidthWithInt:JavaLangInteger_parseIntWithNSString_(width)];
  }
  NSString *height = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_height];
  if (height != nil && ((jint) [height length]) > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setHeightWithInt:JavaLangInteger_parseIntWithNSString_(height)];
  }
  NSString *forecolor = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_forecolor];
  if (forecolor != nil && ((jint) [forecolor length]) > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setForecolorWithOrgOssPdfreporterGeometryIColor:OrgOssPdfreporterEngineUtilJRColorUtil_getColorWithNSString_withOrgOssPdfreporterGeometryIColor_(forecolor, nil)];
  }
  NSString *backcolor = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_backcolor];
  if (backcolor != nil && ((jint) [backcolor length]) > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setBackcolorWithOrgOssPdfreporterGeometryIColor:OrgOssPdfreporterEngineUtilJRColorUtil_getColorWithNSString_withOrgOssPdfreporterGeometryIColor_(backcolor, nil)];
  }
  NSString *styleName = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_style];
  if (styleName != nil) {
    id<JavaUtilMap> stylesMap = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint)) getStylesMap];
    if (![((id<JavaUtilMap>) nil_chk(stylesMap)) containsKeyWithId:styleName]) {
      [((OrgOssPdfreporterEngineXmlJRPrintXmlLoader *) nil_chk(printXmlLoader)) addErrorWithJavaLangException:new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(JreStrcat("$$", @"Unknown report style : ", styleName))];
    }
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setStyleWithOrgOssPdfreporterEngineJRStyle:[stylesMap getWithId:styleName]];
  }
  NSString *origin = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_origin];
  if (origin != nil && ((jint) [origin length]) > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setOriginWithOrgOssPdfreporterEngineJROrigin:[((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint)) getOriginsList])) getWithInt:JavaLangInteger_parseIntWithNSString_(origin)]];
  }
  NSString *elementId = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_srcId];
  if (elementId != nil && ((jint) [elementId length]) > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setSourceElementIdWithInt:JavaLangInteger_parseIntWithNSString_(elementId)];
  }
  return element;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineXmlJRPrintElementFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createObjectWithOrgOssPdfreporterXmlParsersIAttributes:", "createObject", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "init", "JRPrintElementFactory", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineXmlJRPrintElementFactory = { 2, "JRPrintElementFactory", "org.oss.pdfreporter.engine.xml", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineXmlJRPrintElementFactory;
}

@end

void OrgOssPdfreporterEngineXmlJRPrintElementFactory_init(OrgOssPdfreporterEngineXmlJRPrintElementFactory *self) {
  OrgOssPdfreporterEngineXmlJRBaseFactory_init(self);
}

OrgOssPdfreporterEngineXmlJRPrintElementFactory *new_OrgOssPdfreporterEngineXmlJRPrintElementFactory_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineXmlJRPrintElementFactory, init)
}

OrgOssPdfreporterEngineXmlJRPrintElementFactory *create_OrgOssPdfreporterEngineXmlJRPrintElementFactory_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineXmlJRPrintElementFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineXmlJRPrintElementFactory)
