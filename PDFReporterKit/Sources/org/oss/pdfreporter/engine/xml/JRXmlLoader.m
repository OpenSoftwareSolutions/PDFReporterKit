//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRXmlLoader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRDatasetRun.h"
#include "org/oss/pdfreporter/engine/JRElementDataset.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/design/JRDesignDataset.h"
#include "org/oss/pdfreporter/engine/design/JRDesignElement.h"
#include "org/oss/pdfreporter/engine/design/JRDesignElementDataset.h"
#include "org/oss/pdfreporter/engine/design/JRDesignImage.h"
#include "org/oss/pdfreporter/engine/design/JRDesignTextField.h"
#include "org/oss/pdfreporter/engine/design/JRDesignVariable.h"
#include "org/oss/pdfreporter/engine/design/JRValidationException.h"
#include "org/oss/pdfreporter/engine/design/JasperDesign.h"
#include "org/oss/pdfreporter/engine/type/IncrementTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/ResetTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRProperties.h"
#include "org/oss/pdfreporter/engine/xml/ElementReprintGroupReference.h"
#include "org/oss/pdfreporter/engine/xml/ImageEvaluationGroupReference.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlDigester.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlDigesterFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlLoader.h"
#include "org/oss/pdfreporter/engine/xml/TextFieldEvaluationGroupReference.h"
#include "org/oss/pdfreporter/engine/xml/XmlGroupReference.h"
#include "org/oss/pdfreporter/engine/xml/XmlLoaderReportContext.h"
#include "org/oss/pdfreporter/extensions/ExtensionsEnvironment.h"
#include "org/oss/pdfreporter/progress/IProgressHandler.h"
#include "org/oss/pdfreporter/progress/ProgressManager.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/xml/parsers/IInputSource.h"
#include "org/oss/pdfreporter/xml/parsers/ParserConfigurationException.h"
#include "org/oss/pdfreporter/xml/parsers/XMLParseException.h"
#include "org/oss/pdfreporter/xml/parsers/factory/IXmlParserFactory.h"

@interface OrgOssPdfreporterEngineXmlJRXmlLoader () {
 @public
  OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign_;
  JavaUtilLinkedList *contextStack_;
  id<JavaUtilMap> groupReferences_;
  id<JavaUtilSet> groupBoundDatasets_;
  id<JavaUtilList> errors_;
  id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester> digester_;
  jboolean ignoreConsistencyProblems_;
}

- (void)assignGroupsToVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset;

- (void)assignGroupReferences;

- (void)assignGroupsToDatasets;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineXmlJRXmlLoader, jasperDesign_, OrgOssPdfreporterEngineDesignJasperDesign *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineXmlJRXmlLoader, contextStack_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineXmlJRXmlLoader, groupReferences_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineXmlJRXmlLoader, groupBoundDatasets_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineXmlJRXmlLoader, errors_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineXmlJRXmlLoader, digester_, id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)

__attribute__((unused)) static void OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupsToVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineXmlJRXmlLoader *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset);

__attribute__((unused)) static void OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupReferences(OrgOssPdfreporterEngineXmlJRXmlLoader *self);

__attribute__((unused)) static void OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupsToDatasets(OrgOssPdfreporterEngineXmlJRXmlLoader *self);

@implementation OrgOssPdfreporterEngineXmlJRXmlLoader

- (instancetype)initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:(id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)digester {
  OrgOssPdfreporterEngineXmlJRXmlLoader_initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_(self, digester);
  return self;
}

- (void)setJasperDesignWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  self->jasperDesign_ = jasperDesign;
}

- (void)addGroupReferenceWithOrgOssPdfreporterEngineXmlXmlGroupReference:(id<OrgOssPdfreporterEngineXmlXmlGroupReference>)reference {
  OrgOssPdfreporterEngineXmlXmlLoaderReportContext *reportContext = [self getReportContext];
  (void) [((id<JavaUtilMap>) nil_chk(groupReferences_)) putWithId:reference withId:reportContext];
}

- (void)addGroupReprintedElementWithOrgOssPdfreporterEngineDesignJRDesignElement:(OrgOssPdfreporterEngineDesignJRDesignElement *)element {
  [self addGroupReferenceWithOrgOssPdfreporterEngineXmlXmlGroupReference:new_OrgOssPdfreporterEngineXmlElementReprintGroupReference_initWithOrgOssPdfreporterEngineDesignJRDesignElement_(element)];
}

- (void)addGroupEvaluatedImageWithOrgOssPdfreporterEngineDesignJRDesignImage:(OrgOssPdfreporterEngineDesignJRDesignImage *)image {
  [self addGroupReferenceWithOrgOssPdfreporterEngineXmlXmlGroupReference:new_OrgOssPdfreporterEngineXmlImageEvaluationGroupReference_initWithOrgOssPdfreporterEngineDesignJRDesignImage_(image)];
}

- (void)addGroupEvaluatedTextFieldWithOrgOssPdfreporterEngineDesignJRDesignTextField:(OrgOssPdfreporterEngineDesignJRDesignTextField *)textField {
  [self addGroupReferenceWithOrgOssPdfreporterEngineXmlXmlGroupReference:new_OrgOssPdfreporterEngineXmlTextFieldEvaluationGroupReference_initWithOrgOssPdfreporterEngineDesignJRDesignTextField_(textField)];
}

- (id<JavaUtilSet>)getGroupBoundDatasets {
  return groupBoundDatasets_;
}

+ (OrgOssPdfreporterEngineDesignJasperDesign *)load__WithNSString:(NSString *)sourceFileName {
  return OrgOssPdfreporterEngineXmlJRXmlLoader_load__WithNSString_(sourceFileName);
}

+ (OrgOssPdfreporterEngineDesignJasperDesign *)load__WithJavaIoFile:(JavaIoFile *)file {
  return OrgOssPdfreporterEngineXmlJRXmlLoader_load__WithJavaIoFile_(file);
}

+ (OrgOssPdfreporterEngineDesignJasperDesign *)load__WithJavaIoInputStream:(JavaIoInputStream *)is {
  return OrgOssPdfreporterEngineXmlJRXmlLoader_load__WithJavaIoInputStream_(is);
}

- (OrgOssPdfreporterEngineDesignJasperDesign *)loadXMLWithJavaIoInputStream:(JavaIoInputStream *)is {
  return [self loadXMLWithOrgOssPdfreporterXmlParsersIInputSource:[((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk(OrgOssPdfreporterRegistryIRegistry_getIXmlParserFactory())) newInputSourceWithJavaIoInputStream:is]];
}

- (OrgOssPdfreporterEngineDesignJasperDesign *)loadXMLWithOrgOssPdfreporterXmlParsersIInputSource:(id<OrgOssPdfreporterXmlParsersIInputSource>)is {
  @try {
    [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) pushWithId:self];
    (void) [digester_ parseWithOrgOssPdfreporterXmlParsersIInputSource:is];
  }
  @catch (OrgOssPdfreporterXmlParsersXMLParseException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(@"Error loading jrxml from IInputSource.", e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSException_(e);
  }
  @catch (OrgOssPdfreporterXmlParsersParserConfigurationException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSException_(e);
  }
  @finally {
    [digester_ clear];
  }
  if ([((id<JavaUtilList>) nil_chk(errors_)) size] > 0) {
    JavaLangException *e = [errors_ getWithInt:0];
    if ([e isKindOfClass:[OrgOssPdfreporterEngineJRException class]]) {
      @throw (OrgOssPdfreporterEngineJRException *) cast_chk(e, [OrgOssPdfreporterEngineJRException class]);
    }
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSException_(e);
  }
  OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupsToVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getMainDesignDataset]);
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getDatasetsList])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineDesignJRDesignDataset *dataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) cast_chk([it next], [OrgOssPdfreporterEngineDesignJRDesignDataset class]);
    OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupsToVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
  }
  OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupReferences(self);
  OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupsToDatasets(self);
  return self->jasperDesign_;
}

- (void)assignGroupsToVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupsToVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset_(self, dataset);
}

- (void)assignGroupReferences {
  OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupReferences(self);
}

- (id<OrgOssPdfreporterEngineJRGroup>)resolveGroupWithNSString:(NSString *)groupName
          withOrgOssPdfreporterEngineXmlXmlLoaderReportContext:(OrgOssPdfreporterEngineXmlXmlLoaderReportContext *)context {
  id<OrgOssPdfreporterEngineJRGroup> group;
  if (context == nil) {
    id<JavaUtilMap> groupsMap = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getGroupsMap];
    group = [((id<JavaUtilMap>) nil_chk(groupsMap)) getWithId:groupName];
  }
  else {
    NSString *datasetName = [context getSubdatesetName];
    OrgOssPdfreporterEngineDesignJRDesignDataset *dataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) cast_chk([((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getDatasetMap])) getWithId:datasetName], [OrgOssPdfreporterEngineDesignJRDesignDataset class]);
    if (dataset == nil) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(JreStrcat("$$C", @"Could not find subdataset of name \"", datasetName, '"'));
    }
    group = [((id<JavaUtilMap>) nil_chk([dataset getGroupsMap])) getWithId:groupName];
  }
  return group;
}

- (void)assignGroupsToDatasets {
  OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupsToDatasets(self);
}

- (void)addErrorWithJavaLangException:(JavaLangException *)e {
  if (!ignoreConsistencyProblems_) {
    [((id<JavaUtilList>) nil_chk(self->errors_)) addWithId:e];
  }
}

- (jboolean)isIgnoreConsistencyProblems {
  return ignoreConsistencyProblems_;
}

- (void)setIgnoreConsistencyProblemsWithBoolean:(jboolean)ignoreConsistencyProblems {
  self->ignoreConsistencyProblems_ = ignoreConsistencyProblems;
}

- (void)pushReportContextWithOrgOssPdfreporterEngineXmlXmlLoaderReportContext:(OrgOssPdfreporterEngineXmlXmlLoaderReportContext *)context {
  [((JavaUtilLinkedList *) nil_chk(contextStack_)) addFirstWithId:context];
}

- (OrgOssPdfreporterEngineXmlXmlLoaderReportContext *)popReportContext {
  return [((JavaUtilLinkedList *) nil_chk(contextStack_)) removeFirst];
}

- (OrgOssPdfreporterEngineXmlXmlLoaderReportContext *)getReportContext {
  return [((JavaUtilLinkedList *) nil_chk(contextStack_)) isEmpty] ? nil : [contextStack_ getFirst];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:", "JRXmlLoader", NULL, 0x1, NULL, NULL },
    { "setJasperDesignWithOrgOssPdfreporterEngineDesignJasperDesign:", "setJasperDesign", "V", 0x1, NULL, NULL },
    { "addGroupReferenceWithOrgOssPdfreporterEngineXmlXmlGroupReference:", "addGroupReference", "V", 0x1, NULL, NULL },
    { "addGroupReprintedElementWithOrgOssPdfreporterEngineDesignJRDesignElement:", "addGroupReprintedElement", "V", 0x1, NULL, NULL },
    { "addGroupEvaluatedImageWithOrgOssPdfreporterEngineDesignJRDesignImage:", "addGroupEvaluatedImage", "V", 0x1, NULL, NULL },
    { "addGroupEvaluatedTextFieldWithOrgOssPdfreporterEngineDesignJRDesignTextField:", "addGroupEvaluatedTextField", "V", 0x1, NULL, NULL },
    { "getGroupBoundDatasets", NULL, "Ljava.util.Set;", 0x1, NULL, "()Ljava/util/Set<Lorg/oss/pdfreporter/engine/JRElementDataset;>;" },
    { "load__WithNSString:", "load", "Lorg.oss.pdfreporter.engine.design.JasperDesign;", 0x9, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "load__WithJavaIoFile:", "load", "Lorg.oss.pdfreporter.engine.design.JasperDesign;", 0x9, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "load__WithJavaIoInputStream:", "load", "Lorg.oss.pdfreporter.engine.design.JasperDesign;", 0x9, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "loadXMLWithJavaIoInputStream:", "loadXML", "Lorg.oss.pdfreporter.engine.design.JasperDesign;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "loadXMLWithOrgOssPdfreporterXmlParsersIInputSource:", "loadXML", "Lorg.oss.pdfreporter.engine.design.JasperDesign;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "assignGroupsToVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset:", "assignGroupsToVariables", "V", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "assignGroupReferences", NULL, "V", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "resolveGroupWithNSString:withOrgOssPdfreporterEngineXmlXmlLoaderReportContext:", "resolveGroup", "Lorg.oss.pdfreporter.engine.JRGroup;", 0x4, NULL, NULL },
    { "assignGroupsToDatasets", NULL, "V", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "addErrorWithJavaLangException:", "addError", "V", 0x1, NULL, NULL },
    { "isIgnoreConsistencyProblems", NULL, "Z", 0x1, NULL, NULL },
    { "setIgnoreConsistencyProblemsWithBoolean:", "setIgnoreConsistencyProblems", "V", 0x1, NULL, NULL },
    { "pushReportContextWithOrgOssPdfreporterEngineXmlXmlLoaderReportContext:", "pushReportContext", "V", 0x1, NULL, NULL },
    { "popReportContext", NULL, "Lorg.oss.pdfreporter.engine.xml.XmlLoaderReportContext;", 0x1, NULL, NULL },
    { "getReportContext", NULL, "Lorg.oss.pdfreporter.engine.xml.XmlLoaderReportContext;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "jasperDesign_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.design.JasperDesign;", NULL, NULL, .constantValue.asLong = 0 },
    { "contextStack_", NULL, 0x12, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/oss/pdfreporter/engine/xml/XmlLoaderReportContext;>;", .constantValue.asLong = 0 },
    { "groupReferences_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/oss/pdfreporter/engine/xml/XmlGroupReference;Lorg/oss/pdfreporter/engine/xml/XmlLoaderReportContext;>;", .constantValue.asLong = 0 },
    { "groupBoundDatasets_", NULL, 0x12, "Ljava.util.Set;", NULL, "Ljava/util/Set<Lorg/oss/pdfreporter/engine/JRElementDataset;>;", .constantValue.asLong = 0 },
    { "errors_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Exception;>;", .constantValue.asLong = 0 },
    { "digester_", NULL, 0x12, "Lorg.oss.pdfreporter.uses.org.apache.digester.IDigester;", NULL, NULL, .constantValue.asLong = 0 },
    { "ignoreConsistencyProblems_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineXmlJRXmlLoader = { 2, "JRXmlLoader", "org.oss.pdfreporter.engine.xml", NULL, 0x1, 22, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineXmlJRXmlLoader;
}

@end

void OrgOssPdfreporterEngineXmlJRXmlLoader_initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_(OrgOssPdfreporterEngineXmlJRXmlLoader *self, id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester> digester) {
  NSObject_init(self);
  self->contextStack_ = new_JavaUtilLinkedList_init();
  self->groupReferences_ = new_JavaUtilHashMap_init();
  self->groupBoundDatasets_ = new_JavaUtilHashSet_init();
  self->errors_ = new_JavaUtilArrayList_init();
  self->digester_ = digester;
}

OrgOssPdfreporterEngineXmlJRXmlLoader *new_OrgOssPdfreporterEngineXmlJRXmlLoader_initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_(id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester> digester) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineXmlJRXmlLoader, initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_, digester)
}

OrgOssPdfreporterEngineXmlJRXmlLoader *create_OrgOssPdfreporterEngineXmlJRXmlLoader_initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_(id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester> digester) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineXmlJRXmlLoader, initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_, digester)
}

OrgOssPdfreporterEngineDesignJasperDesign *OrgOssPdfreporterEngineXmlJRXmlLoader_load__WithNSString_(NSString *sourceFileName) {
  OrgOssPdfreporterEngineXmlJRXmlLoader_initialize();
  return OrgOssPdfreporterEngineXmlJRXmlLoader_load__WithJavaIoFile_(new_JavaIoFile_initWithNSString_(sourceFileName));
}

OrgOssPdfreporterEngineDesignJasperDesign *OrgOssPdfreporterEngineXmlJRXmlLoader_load__WithJavaIoFile_(JavaIoFile *file) {
  OrgOssPdfreporterEngineXmlJRXmlLoader_initialize();
  OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign = nil;
  JavaIoFileInputStream *fis = nil;
  @try {
    fis = new_JavaIoFileInputStream_initWithJavaIoFile_(file);
    jasperDesign = OrgOssPdfreporterEngineXmlJRXmlLoader_load__WithJavaIoInputStream_(fis);
  }
  @catch (JavaIoIOException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSException_(e);
  }
  @finally {
    if (fis != nil) {
      @try {
        [fis close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  return jasperDesign;
}

OrgOssPdfreporterEngineDesignJasperDesign *OrgOssPdfreporterEngineXmlJRXmlLoader_load__WithJavaIoInputStream_(JavaIoInputStream *is) {
  OrgOssPdfreporterEngineXmlJRXmlLoader_initialize();
  OrgOssPdfreporterEngineUtilJRProperties_reload();
  OrgOssPdfreporterExtensionsExtensionsEnvironment_reset();
  OrgOssPdfreporterProgressProgressManager *pm = new_OrgOssPdfreporterProgressProgressManager_initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_(JreLoadEnum(OrgOssPdfreporterProgressIProgressHandler_ProgressState, LOADING));
  OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign = nil;
  OrgOssPdfreporterEngineXmlJRXmlLoader *xmlLoader = nil;
  @try {
    xmlLoader = new_OrgOssPdfreporterEngineXmlJRXmlLoader_initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester_(OrgOssPdfreporterEngineXmlJRXmlDigesterFactory_createDigester());
  }
  @catch (OrgOssPdfreporterXmlParsersXMLParseException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSException_(e);
  }
  jasperDesign = [((OrgOssPdfreporterEngineXmlJRXmlLoader *) nil_chk(xmlLoader)) loadXMLWithJavaIoInputStream:is];
  [pm done];
  return jasperDesign;
}

void OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupsToVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset_(OrgOssPdfreporterEngineXmlJRXmlLoader *self, OrgOssPdfreporterEngineDesignJRDesignDataset *dataset) {
  IOSObjectArray *variables = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getVariables];
  if (variables != nil && variables->size_ > 0) {
    id<JavaUtilMap> groupsMap = [dataset getGroupsMap];
    for (jint i = 0; i < variables->size_; i++) {
      OrgOssPdfreporterEngineDesignJRDesignVariable *variable = (OrgOssPdfreporterEngineDesignJRDesignVariable *) cast_chk(IOSObjectArray_Get(variables, i), [OrgOssPdfreporterEngineDesignJRDesignVariable class]);
      if ([((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) getResetTypeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeResetTypeEnum, GROUP)) {
        NSString *groupName = nil;
        id<OrgOssPdfreporterEngineJRGroup> group = [variable getResetGroup];
        if (group != nil) {
          groupName = [group getName];
          group = [((id<JavaUtilMap>) nil_chk(groupsMap)) getWithId:groupName];
        }
        if (!self->ignoreConsistencyProblems_ && group == nil) {
          @throw new_OrgOssPdfreporterEngineDesignJRValidationException_initWithNSString_withId_(JreStrcat("$$$$", @"Unknown reset group '", groupName, @"' for variable : ", [variable getName]), variable);
        }
        [variable setResetGroupWithOrgOssPdfreporterEngineJRGroup:group];
      }
      else {
        [variable setResetGroupWithOrgOssPdfreporterEngineJRGroup:nil];
      }
      if ([variable getIncrementTypeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeIncrementTypeEnum, GROUP)) {
        NSString *groupName = nil;
        id<OrgOssPdfreporterEngineJRGroup> group = [variable getIncrementGroup];
        if (group != nil) {
          groupName = [group getName];
          group = [((id<JavaUtilMap>) nil_chk(groupsMap)) getWithId:groupName];
        }
        if (!self->ignoreConsistencyProblems_ && group == nil) {
          @throw new_OrgOssPdfreporterEngineDesignJRValidationException_initWithNSString_withId_(JreStrcat("$$$$", @"Unknown increment group '", groupName, @"' for variable : ", [variable getName]), variable);
        }
        [variable setIncrementGroupWithOrgOssPdfreporterEngineJRGroup:group];
      }
      else {
        [variable setIncrementGroupWithOrgOssPdfreporterEngineJRGroup:nil];
      }
    }
  }
}

void OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupReferences(OrgOssPdfreporterEngineXmlJRXmlLoader *self) {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(self->groupReferences_)) entrySet])) {
    id<OrgOssPdfreporterEngineXmlXmlGroupReference> reference = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    OrgOssPdfreporterEngineXmlXmlLoaderReportContext *context = [entry_ getValue];
    NSString *groupName = nil;
    id<OrgOssPdfreporterEngineJRGroup> group = [((id<OrgOssPdfreporterEngineXmlXmlGroupReference>) nil_chk(reference)) getGroupReference];
    if (group != nil) {
      groupName = [group getName];
      group = [self resolveGroupWithNSString:groupName withOrgOssPdfreporterEngineXmlXmlLoaderReportContext:context];
    }
    if (!self->ignoreConsistencyProblems_ && group == nil) {
      [reference groupNotFoundWithNSString:groupName];
    }
    else {
      [reference assignGroupWithOrgOssPdfreporterEngineJRGroup:group];
    }
  }
}

void OrgOssPdfreporterEngineXmlJRXmlLoader_assignGroupsToDatasets(OrgOssPdfreporterEngineXmlJRXmlLoader *self) {
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(self->groupBoundDatasets_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineDesignJRDesignElementDataset *dataset = (OrgOssPdfreporterEngineDesignJRDesignElementDataset *) cast_chk([it next], [OrgOssPdfreporterEngineDesignJRDesignElementDataset class]);
    id<OrgOssPdfreporterEngineJRDatasetRun> datasetRun = [((OrgOssPdfreporterEngineDesignJRDesignElementDataset *) nil_chk(dataset)) getDatasetRun];
    id<JavaUtilMap> groupsMap;
    if (datasetRun == nil) {
      groupsMap = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getGroupsMap];
    }
    else {
      id<JavaUtilMap> datasetMap = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(self->jasperDesign_)) getDatasetMap];
      NSString *datasetName = [datasetRun getDatasetName];
      OrgOssPdfreporterEngineDesignJRDesignDataset *subDataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) cast_chk([((id<JavaUtilMap>) nil_chk(datasetMap)) getWithId:datasetName], [OrgOssPdfreporterEngineDesignJRDesignDataset class]);
      if (subDataset == nil) {
        @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(JreStrcat("$$$", @"Unknown sub dataset '", datasetName, @"' for chart dataset."));
      }
      groupsMap = [subDataset getGroupsMap];
    }
    if ([dataset getIncrementTypeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeIncrementTypeEnum, GROUP)) {
      NSString *groupName = nil;
      id<OrgOssPdfreporterEngineJRGroup> group = [dataset getIncrementGroup];
      if (group != nil) {
        groupName = [group getName];
        group = [((id<JavaUtilMap>) nil_chk(groupsMap)) getWithId:[group getName]];
      }
      if (!self->ignoreConsistencyProblems_ && group == nil) {
        @throw new_OrgOssPdfreporterEngineDesignJRValidationException_initWithNSString_withId_(JreStrcat("$$$", @"Unknown increment group '", groupName, @"' for chart dataset."), dataset);
      }
      [dataset setIncrementGroupWithOrgOssPdfreporterEngineJRGroup:group];
    }
    else {
      [dataset setIncrementGroupWithOrgOssPdfreporterEngineJRGroup:nil];
    }
    if ([dataset getResetTypeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeResetTypeEnum, GROUP)) {
      NSString *groupName = nil;
      id<OrgOssPdfreporterEngineJRGroup> group = [dataset getResetGroup];
      if (group != nil) {
        groupName = [group getName];
        group = [((id<JavaUtilMap>) nil_chk(groupsMap)) getWithId:[group getName]];
      }
      if (!self->ignoreConsistencyProblems_ && group == nil) {
        @throw new_OrgOssPdfreporterEngineDesignJRValidationException_initWithNSString_withId_(JreStrcat("$$$", @"Unknown reset group '", groupName, @"' for chart dataset."), dataset);
      }
      [dataset setResetGroupWithOrgOssPdfreporterEngineJRGroup:group];
    }
    else {
      [dataset setResetGroupWithOrgOssPdfreporterEngineJRGroup:nil];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineXmlJRXmlLoader)
