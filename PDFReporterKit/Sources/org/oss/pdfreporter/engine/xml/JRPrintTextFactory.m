//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRPrintTextFactory.java
//

#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "org/oss/pdfreporter/engine/JRCommonText.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/base/JRBasePrintText.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/LineSpacingEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/xml/JRBaseFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintTextFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@implementation OrgOssPdfreporterEngineXmlJRPrintTextFactory

- (id)createObjectWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = (OrgOssPdfreporterEngineJasperPrint *) cast_chk([((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[digester_ getCount] - 2], [OrgOssPdfreporterEngineJasperPrint class]);
  OrgOssPdfreporterEngineBaseJRBasePrintText *text = new_OrgOssPdfreporterEngineBaseJRBasePrintText_initWithOrgOssPdfreporterEngineJRDefaultStyleProvider_([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint)) getDefaultStyleProvider]);
  OrgOssPdfreporterEngineTypeHorizontalAlignEnum *horizontalAlignment = OrgOssPdfreporterEngineTypeHorizontalAlignEnum_getByNameWithNSString_([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_textAlignment]);
  if (horizontalAlignment != nil) {
    [text setHorizontalAlignmentWithOrgOssPdfreporterEngineTypeHorizontalAlignEnum:horizontalAlignment];
  }
  OrgOssPdfreporterEngineTypeVerticalAlignEnum *verticalAlignment = OrgOssPdfreporterEngineTypeVerticalAlignEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_verticalAlignment]);
  if (verticalAlignment != nil) {
    [text setVerticalAlignmentWithOrgOssPdfreporterEngineTypeVerticalAlignEnum:verticalAlignment];
  }
  OrgOssPdfreporterEngineTypeRotationEnum *rotation = OrgOssPdfreporterEngineTypeRotationEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_rotation]);
  if (rotation != nil) {
    [text setRotationWithOrgOssPdfreporterEngineTypeRotationEnum:rotation];
  }
  OrgOssPdfreporterEngineTypeRunDirectionEnum *runDirection = OrgOssPdfreporterEngineTypeRunDirectionEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_runDirection]);
  if (runDirection != nil) {
    [text setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnum:runDirection];
  }
  NSString *textHeight = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_textHeight];
  if (textHeight != nil && ((jint) [textHeight length]) > 0) {
    [text setTextHeightWithFloat:JavaLangFloat_parseFloatWithNSString_(textHeight)];
  }
  OrgOssPdfreporterEngineTypeLineSpacingEnum *lineSpacing = OrgOssPdfreporterEngineTypeLineSpacingEnum_getByNameWithNSString_([atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_lineSpacing]);
  if (lineSpacing != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([text getParagraph])) setLineSpacingWithOrgOssPdfreporterEngineTypeLineSpacingEnum:lineSpacing];
  }
  [text setMarkupWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_markup]];
  NSString *isStyledText = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_isStyledText];
  if (isStyledText != nil && ((jint) [isStyledText length]) > 0) {
    [text setMarkupWithNSString:[((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(isStyledText))) booleanValue] ? OrgOssPdfreporterEngineJRCommonText_MARKUP_STYLED_TEXT : OrgOssPdfreporterEngineJRCommonText_MARKUP_NONE];
  }
  NSString *lineSpacingFactor = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_lineSpacingFactor];
  if (lineSpacingFactor != nil && ((jint) [lineSpacingFactor length]) > 0) {
    [text setLineSpacingFactorWithFloat:JavaLangFloat_parseFloatWithNSString_(lineSpacingFactor)];
  }
  NSString *leadingOffset = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_leadingOffset];
  if (leadingOffset != nil && ((jint) [leadingOffset length]) > 0) {
    [text setLeadingOffsetWithFloat:JavaLangFloat_parseFloatWithNSString_(leadingOffset)];
  }
  [text setLinkTypeWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_hyperlinkType]];
  [text setLinkTargetWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_hyperlinkTarget]];
  [text setAnchorNameWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_anchorName]];
  [text setHyperlinkReferenceWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_hyperlinkReference]];
  [text setHyperlinkAnchorWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_hyperlinkAnchor]];
  NSString *hyperlinkPage = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_hyperlinkPage];
  if (hyperlinkPage != nil) {
    [text setHyperlinkPageWithJavaLangInteger:JavaLangInteger_valueOfWithNSString_(hyperlinkPage)];
  }
  [text setHyperlinkTooltipWithNSString:[atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_hyperlinkTooltip]];
  NSString *bookmarkLevelAttr = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_bookmarkLevel];
  if (bookmarkLevelAttr != nil) {
    [text setBookmarkLevelWithInt:JavaLangInteger_parseIntWithNSString_(bookmarkLevelAttr)];
  }
  NSString *valueClass = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_valueClass];
  if (valueClass != nil) {
    [text setValueClassNameWithNSString:valueClass];
  }
  NSString *pattern = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_pattern];
  if (pattern != nil) {
    [text setPatternWithNSString:pattern];
  }
  NSString *formatFactoryClass = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_formatFactoryClass];
  if (formatFactoryClass != nil) {
    [text setFormatFactoryClassWithNSString:formatFactoryClass];
  }
  NSString *locale = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_locale];
  if (locale != nil) {
    [text setLocaleCodeWithNSString:locale];
  }
  NSString *timezone = [atts getValueWithNSString:OrgOssPdfreporterEngineXmlJRXmlConstants_ATTRIBUTE_timezone];
  if (timezone != nil) {
    [text setTimeZoneIdWithNSString:timezone];
  }
  return text;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineXmlJRPrintTextFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createObjectWithOrgOssPdfreporterXmlParsersIAttributes:", "createObject", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "init", "JRPrintTextFactory", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineXmlJRPrintTextFactory = { 2, "JRPrintTextFactory", "org.oss.pdfreporter.engine.xml", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineXmlJRPrintTextFactory;
}

@end

void OrgOssPdfreporterEngineXmlJRPrintTextFactory_init(OrgOssPdfreporterEngineXmlJRPrintTextFactory *self) {
  OrgOssPdfreporterEngineXmlJRBaseFactory_init(self);
}

OrgOssPdfreporterEngineXmlJRPrintTextFactory *new_OrgOssPdfreporterEngineXmlJRPrintTextFactory_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineXmlJRPrintTextFactory, init)
}

OrgOssPdfreporterEngineXmlJRPrintTextFactory *create_OrgOssPdfreporterEngineXmlJRPrintTextFactory_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineXmlJRPrintTextFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineXmlJRPrintTextFactory)
