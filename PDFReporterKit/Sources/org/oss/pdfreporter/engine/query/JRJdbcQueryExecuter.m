//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/query/JRJdbcQueryExecuter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Array.h"
#include "java/math/BigDecimal.h"
#include "java/util/Calendar.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/TimeZone.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRDataSource.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRResultSetDataSource.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRValueParameter.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/query/JRAbstractQueryExecuter.h"
#include "org/oss/pdfreporter/engine/query/JRJdbcQueryExecuter.h"
#include "org/oss/pdfreporter/engine/query/JRJdbcQueryExecuterFactory.h"
#include "org/oss/pdfreporter/sql/IConnection.h"
#include "org/oss/pdfreporter/sql/IDate.h"
#include "org/oss/pdfreporter/sql/IPreparedStatement.h"
#include "org/oss/pdfreporter/sql/IResultSet.h"
#include "org/oss/pdfreporter/sql/ITime.h"
#include "org/oss/pdfreporter/sql/ITimestamp.h"
#include "org/oss/pdfreporter/sql/SQLException.h"
#include "org/oss/pdfreporter/sql/SqlType.h"

@interface OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter () {
 @public
  jboolean isCachedRowSet_;
  JavaUtilTimeZone *timeZone_;
  jboolean timeZoneOverride_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter, timeZone_, JavaUtilTimeZone *)

inline JavaUtilLoggingLogger *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter, logger, JavaUtilLoggingLogger *)

@interface OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1 : NSObject < OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterVisitor > {
 @public
  OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *this$0_;
  jint paramIdx_;
}

- (void)visitWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter:(OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *)queryParameter;

- (void)visitWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter:(OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter *)valuedQueryParameter;

- (instancetype)initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter:(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1)

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1, this$0_, OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *)

__attribute__((unused)) static void OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1_initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1 *self, OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *outer$);

__attribute__((unused)) static OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1 *new_OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1_initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1 *create_OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1_initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter)

NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CANONICAL_LANGUAGE = @"SQL";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_IN = @"IN";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_NOTIN = @"NOTIN";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_EQUAL = @"EQUAL";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_NOTEQUAL = @"NOTEQUAL";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_LESS = @"LESS";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_GREATER = @"GREATER";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_LESS_OR_EQUAL = @"LESS]";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_GREATER_OR_EQUAL = @"[GREATER";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN = @"BETWEEN";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_CLOSED = @"[BETWEEN]";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_LEFT_CLOSED = @"[BETWEEN";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_RIGHT_CLOSED = @"BETWEEN]";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_FORWARD_ONLY = @"forwardOnly";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_SCROLL_INSENSITIVE = @"scrollInsensitive";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_SCROLL_SENSITIVE = @"scrollSensitive";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CONCUR_READ_ONLY = @"readOnly";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CONCUR_UPDATABLE = @"updatable";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_HOLD_CURSORS_OVER_COMMIT = @"hold";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLOSE_CURSORS_AT_COMMIT = @"close";
NSString *OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CACHED_ROWSET_CLASS = @"com.sun.rowset.CachedRowSetImpl";

@implementation OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter

+ (NSString *)CANONICAL_LANGUAGE {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CANONICAL_LANGUAGE;
}

+ (NSString *)CLAUSE_ID_IN {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_IN;
}

+ (NSString *)CLAUSE_ID_NOTIN {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_NOTIN;
}

+ (NSString *)CLAUSE_ID_EQUAL {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_EQUAL;
}

+ (NSString *)CLAUSE_ID_NOTEQUAL {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_NOTEQUAL;
}

+ (NSString *)CLAUSE_ID_LESS {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_LESS;
}

+ (NSString *)CLAUSE_ID_GREATER {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_GREATER;
}

+ (NSString *)CLAUSE_ID_LESS_OR_EQUAL {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_LESS_OR_EQUAL;
}

+ (NSString *)CLAUSE_ID_GREATER_OR_EQUAL {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_GREATER_OR_EQUAL;
}

+ (NSString *)CLAUSE_ID_BETWEEN {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN;
}

+ (NSString *)CLAUSE_ID_BETWEEN_CLOSED {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_CLOSED;
}

+ (NSString *)CLAUSE_ID_BETWEEN_LEFT_CLOSED {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_LEFT_CLOSED;
}

+ (NSString *)CLAUSE_ID_BETWEEN_RIGHT_CLOSED {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_RIGHT_CLOSED;
}

+ (NSString *)TYPE_FORWARD_ONLY {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_FORWARD_ONLY;
}

+ (NSString *)TYPE_SCROLL_INSENSITIVE {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_SCROLL_INSENSITIVE;
}

+ (NSString *)TYPE_SCROLL_SENSITIVE {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_SCROLL_SENSITIVE;
}

+ (NSString *)CONCUR_READ_ONLY {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CONCUR_READ_ONLY;
}

+ (NSString *)CONCUR_UPDATABLE {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CONCUR_UPDATABLE;
}

+ (NSString *)HOLD_CURSORS_OVER_COMMIT {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_HOLD_CURSORS_OVER_COMMIT;
}

+ (NSString *)CLOSE_CURSORS_AT_COMMIT {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLOSE_CURSORS_AT_COMMIT;
}

+ (NSString *)CACHED_ROWSET_CLASS {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CACHED_ROWSET_CLASS;
}

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                               withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                                    withJavaUtilMap:(id<JavaUtilMap>)parameters {
  OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(self, jasperReportsContext, dataset, parameters);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                         withJavaUtilMap:(id<JavaUtilMap>)parameters {
  OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(self, dataset, parameters);
  return self;
}

- (void)registerFunctions {
}

- (NSString *)getCanonicalQueryLanguage {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CANONICAL_LANGUAGE;
}

- (void)setTimeZone {
  NSString *timezoneId = (NSString *) cast_chk([self getParameterValueWithNSString:OrgOssPdfreporterEngineQueryJRJdbcQueryExecuterFactory_PROPERTY_TIME_ZONE withBoolean:true], [NSString class]);
  if (timezoneId != nil) {
    timeZoneOverride_ = true;
  }
  else {
    timezoneId = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:dataset_ withNSString:OrgOssPdfreporterEngineQueryJRJdbcQueryExecuterFactory_PROPERTY_TIME_ZONE];
  }
  timeZone_ = timezoneId == nil || ((jint) [timezoneId length]) == 0 ? nil : JavaUtilTimeZone_getTimeZoneWithNSString_(timezoneId);
}

- (NSString *)getParameterReplacementWithNSString:(NSString *)parameterName {
  return @"?";
}

- (id<OrgOssPdfreporterEngineJRDataSource>)createDatasource {
  OrgOssPdfreporterEngineJRResultSetDataSource *dataSource = nil;
  [self createStatement];
  if (statement_ != nil) {
    @try {
      resultSet_ = [statement_ executeQuery];
      dataSource = new_OrgOssPdfreporterEngineJRResultSetDataSource_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterSqlIResultSet_([self getJasperReportsContext], resultSet_);
      [dataSource setTimeZoneWithJavaUtilTimeZone:timeZone_ withBoolean:timeZoneOverride_];
    }
    @catch (OrgOssPdfreporterSqlSQLException *e) {
      @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(JreStrcat("$$", @"Error executing SQL statement for : ", [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset_)) getName]), e);
    }
  }
  return dataSource;
}

- (void)createStatement {
  NSString *queryString = [self getQueryString];
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
    [OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger fineWithNSString:JreStrcat("$$", @"SQL query string: ", queryString)];
  }
  if (connection_ != nil && queryString != nil && ((jint) [((NSString *) nil_chk([queryString trim])) length]) > 0) {
    @try {
      statement_ = [connection_ prepareStatementWithNSString:queryString];
      [self visitQueryParametersWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterVisitor:new_OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1_initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_(self)];
    }
    @catch (OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_VisitExceptionWrapper *e) {
      @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(JreStrcat("$$$", @"Error preparing statement for executing the report query : \n\n", queryString, @"\n\n"), [((OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_VisitExceptionWrapper *) nil_chk(e)) getCause]);
    }
    @catch (OrgOssPdfreporterSqlSQLException *e) {
      @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(JreStrcat("$$$", @"Error preparing statement for executing the report query : \n\n", queryString, @"\n\n"), e);
    }
  }
}

- (id<OrgOssPdfreporterSqlIResultSet>)getResultSet {
  return resultSet_;
}

- (void)setStatementParameterWithInt:(jint)parameterIndex
                        withNSString:(NSString *)parameterName {
  id<OrgOssPdfreporterEngineJRValueParameter> parameter = [self getValueParameterWithNSString:parameterName];
  IOSClass *clazz = [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk(parameter)) getValueClass];
  id parameterValue = [parameter getValue];
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
    [OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger fineWithNSString:JreStrcat("$I$$$$$@", @"Parameter #", parameterIndex, @" (", parameterName, @" of type ", [((IOSClass *) nil_chk(clazz)) getName], @"): ", parameterValue)];
  }
  [self setStatementParameterWithInt:parameterIndex withIOSClass:clazz withId:parameterValue];
}

- (jint)setStatementMultiParametersWithInt:(jint)parameterIndex
                              withNSString:(NSString *)parameterName
                               withBoolean:(jboolean)ignoreNulls {
  id<OrgOssPdfreporterEngineJRValueParameter> parameter = [self getValueParameterWithNSString:parameterName];
  id paramValue = [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk(parameter)) getValue];
  jint count;
  jint index = 0;
  if ([[nil_chk(paramValue) getClass] isArray]) {
    jint arrayCount = JavaLangReflectArray_getLengthWithId_(paramValue);
    for (count = 0; count < arrayCount; ++count) {
      id value = JavaLangReflectArray_getWithId_withInt_(paramValue, count);
      if (!ignoreNulls || value != nil) {
        [self setStatementMultiParameterWithInt:parameterIndex + index withNSString:parameterName withInt:count withId:value withOrgOssPdfreporterEngineJRPropertiesHolder:parameter];
        ++index;
      }
    }
  }
  else if ([JavaUtilCollection_class_() isInstance:paramValue]) {
    id<JavaUtilCollection> values = (id<JavaUtilCollection>) cast_check(paramValue, JavaUtilCollection_class_());
    count = 0;
    for (id<JavaUtilIterator> it = [values iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ++count) {
      id value = [it next];
      if (!ignoreNulls || value != nil) {
        [self setStatementMultiParameterWithInt:parameterIndex + index withNSString:parameterName withInt:count withId:value withOrgOssPdfreporterEngineJRPropertiesHolder:parameter];
        ++index;
      }
    }
  }
  else {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(@"Multi parameter value is not array nor collection.");
  }
  return index;
}

- (void)setStatementMultiParameterWithInt:(jint)parameterIndex
                             withNSString:(NSString *)parameterName
                                  withInt:(jint)valueIndex
                                   withId:(id)value
withOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)properties {
  if (value == nil) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(@"Multi parameters cannot contain null values.");
  }
  IOSClass *type = [value getClass];
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
    [OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger fineWithNSString:JreStrcat("$I$$CI$$$@", @"Parameter #", parameterIndex, @" (", parameterName, '[', valueIndex, @"] of type ", [type getName], @"): ", value)];
  }
  [self setStatementParameterWithInt:parameterIndex withIOSClass:type withId:value];
}

- (void)setStatementParameterWithInt:(jint)parameterIndex
                        withIOSClass:(IOSClass *)parameterType
                              withId:(id)parameterValue {
  if ([JavaLangBoolean_class_() isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, CHAR)];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setBooleanWithInt:parameterIndex withBoolean:[((JavaLangBoolean *) cast_chk(parameterValue, [JavaLangBoolean class])) booleanValue]];
    }
  }
  else if ([JavaLangByte_class_() isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, TINYINT)];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setByteWithInt:parameterIndex withByte:[((JavaLangByte *) cast_chk(parameterValue, [JavaLangByte class])) charValue]];
    }
  }
  else if ([JavaLangDouble_class_() isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, DOUBLE)];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setDoubleWithInt:parameterIndex withDouble:[((JavaLangDouble *) cast_chk(parameterValue, [JavaLangDouble class])) doubleValue]];
    }
  }
  else if ([JavaLangFloat_class_() isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, FLOAT)];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setFloatWithInt:parameterIndex withFloat:[((JavaLangFloat *) cast_chk(parameterValue, [JavaLangFloat class])) floatValue]];
    }
  }
  else if ([JavaLangInteger_class_() isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, INTEGER)];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setIntWithInt:parameterIndex withInt:[((JavaLangInteger *) cast_chk(parameterValue, [JavaLangInteger class])) intValue]];
    }
  }
  else if ([JavaLangLong_class_() isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, BIGINT)];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setLongWithInt:parameterIndex withLong:[((JavaLangLong *) cast_chk(parameterValue, [JavaLangLong class])) longLongValue]];
    }
  }
  else if ([JavaLangShort_class_() isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, SMALLINT)];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setShortWithInt:parameterIndex withShort:[((JavaLangShort *) cast_chk(parameterValue, [JavaLangShort class])) shortValue]];
    }
  }
  else if ([JavaMathBigDecimal_class_() isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, DECIMAL)];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setDecimalWithInt:parameterIndex withJavaMathBigDecimal:(JavaMathBigDecimal *) cast_chk(parameterValue, [JavaMathBigDecimal class])];
    }
  }
  else if ([NSString_class_() isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, VARCHAR)];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setStringWithInt:parameterIndex withNSString:[parameterValue description]];
    }
  }
  else if ([OrgOssPdfreporterSqlITimestamp_class_() isAssignableFrom:parameterType]) {
    [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, TIMESTAMP)];
  }
  else if ([OrgOssPdfreporterSqlITime_class_() isAssignableFrom:parameterType]) {
    [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, TIME)];
  }
  else if ([OrgOssPdfreporterSqlIDate_class_() isAssignableFrom:parameterType]) {
    [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, DATE)];
  }
  else {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlType:JreLoadEnum(OrgOssPdfreporterSqlSqlType, OBJECT)];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setStringWithInt:parameterIndex withNSString:[parameterValue description]];
    }
  }
}

- (JavaUtilCalendar *)getParameterCalendarWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)properties {
  JavaUtilTimeZone *tz;
  if (timeZoneOverride_) {
    tz = timeZone_;
  }
  else {
    if ([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(properties)) hasProperties] && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([properties getPropertiesMap])) containsPropertyWithNSString:OrgOssPdfreporterEngineQueryJRJdbcQueryExecuterFactory_PROPERTY_TIME_ZONE]) {
      NSString *timezoneId = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:properties withNSString:OrgOssPdfreporterEngineQueryJRJdbcQueryExecuterFactory_PROPERTY_TIME_ZONE];
      tz = (timezoneId == nil || ((jint) [timezoneId length]) == 0) ? nil : JavaUtilTimeZone_getTimeZoneWithNSString_(timezoneId);
    }
    else {
      tz = timeZone_;
    }
  }
  JavaUtilCalendar *cal = tz == nil ? nil : JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_(tz);
  return cal;
}

- (void)close {
  @synchronized(self) {
    if (resultSet_ != nil) {
      @try {
        [resultSet_ close];
      }
      @catch (JavaIoIOException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Error while closing result set." withNSException:e];
      }
      @finally {
        resultSet_ = nil;
      }
    }
    if (statement_ != nil) {
      @try {
        [statement_ close];
      }
      @catch (JavaIoIOException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Error while closing statement." withNSException:e];
      }
      @finally {
        statement_ = nil;
      }
    }
  }
}

- (jboolean)cancelQuery {
  @synchronized(self) {
    if (statement_ != nil) {
      @try {
        [statement_ cancel];
        return true;
      }
      @catch (JavaLangException *e) {
        @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(@"Error cancelling SQL statement", e);
      }
    }
    return false;
  }
}

+ (IOSObjectArray *)__annotations_initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_ {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter class]) {
    OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineJasperReportsContext:withOrgOssPdfreporterEngineJRDataset:withJavaUtilMap:", "JRJdbcQueryExecuter", NULL, 0x1, NULL, "(Lorg/oss/pdfreporter/engine/JasperReportsContext;Lorg/oss/pdfreporter/engine/JRDataset;Ljava/util/Map<Ljava/lang/String;+Lorg/oss/pdfreporter/engine/JRValueParameter;>;)V" },
    { "initWithOrgOssPdfreporterEngineJRDataset:withJavaUtilMap:", "JRJdbcQueryExecuter", NULL, 0x1, NULL, "(Lorg/oss/pdfreporter/engine/JRDataset;Ljava/util/Map<Ljava/lang/String;+Lorg/oss/pdfreporter/engine/JRValueParameter;>;)V" },
    { "registerFunctions", NULL, "V", 0x4, NULL, NULL },
    { "getCanonicalQueryLanguage", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "setTimeZone", NULL, "V", 0x4, NULL, NULL },
    { "getParameterReplacementWithNSString:", "getParameterReplacement", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "createDatasource", NULL, "Lorg.oss.pdfreporter.engine.JRDataSource;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "createStatement", NULL, "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "getResultSet", NULL, "Lorg.oss.pdfreporter.sql.IResultSet;", 0x1, NULL, NULL },
    { "setStatementParameterWithInt:withNSString:", "setStatementParameter", "V", 0x4, "Lorg.oss.pdfreporter.sql.SQLException;", NULL },
    { "setStatementMultiParametersWithInt:withNSString:withBoolean:", "setStatementMultiParameters", "I", 0x4, "Lorg.oss.pdfreporter.sql.SQLException;", NULL },
    { "setStatementMultiParameterWithInt:withNSString:withInt:withId:withOrgOssPdfreporterEngineJRPropertiesHolder:", "setStatementMultiParameter", "V", 0x4, "Lorg.oss.pdfreporter.sql.SQLException;", NULL },
    { "setStatementParameterWithInt:withIOSClass:withId:", "setStatementParameter", "V", 0x4, "Lorg.oss.pdfreporter.sql.SQLException;", "(ILjava/lang/Class<*>;Ljava/lang/Object;)V" },
    { "getParameterCalendarWithOrgOssPdfreporterEngineJRPropertiesHolder:", "getParameterCalendar", "Ljava.util.Calendar;", 0x4, NULL, NULL },
    { "close", NULL, "V", 0x21, NULL, NULL },
    { "cancelQuery", NULL, "Z", 0x21, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger, NULL, .constantValue.asLong = 0 },
    { "CANONICAL_LANGUAGE", "CANONICAL_LANGUAGE", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CANONICAL_LANGUAGE, NULL, .constantValue.asLong = 0 },
    { "CLAUSE_ID_IN", "CLAUSE_ID_IN", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_IN, NULL, .constantValue.asLong = 0 },
    { "CLAUSE_ID_NOTIN", "CLAUSE_ID_NOTIN", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_NOTIN, NULL, .constantValue.asLong = 0 },
    { "CLAUSE_ID_EQUAL", "CLAUSE_ID_EQUAL", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_EQUAL, NULL, .constantValue.asLong = 0 },
    { "CLAUSE_ID_NOTEQUAL", "CLAUSE_ID_NOTEQUAL", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_NOTEQUAL, NULL, .constantValue.asLong = 0 },
    { "CLAUSE_ID_LESS", "CLAUSE_ID_LESS", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_LESS, NULL, .constantValue.asLong = 0 },
    { "CLAUSE_ID_GREATER", "CLAUSE_ID_GREATER", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_GREATER, NULL, .constantValue.asLong = 0 },
    { "CLAUSE_ID_LESS_OR_EQUAL", "CLAUSE_ID_LESS_OR_EQUAL", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_LESS_OR_EQUAL, NULL, .constantValue.asLong = 0 },
    { "CLAUSE_ID_GREATER_OR_EQUAL", "CLAUSE_ID_GREATER_OR_EQUAL", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_GREATER_OR_EQUAL, NULL, .constantValue.asLong = 0 },
    { "CLAUSE_ID_BETWEEN", "CLAUSE_ID_BETWEEN", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN, NULL, .constantValue.asLong = 0 },
    { "CLAUSE_ID_BETWEEN_CLOSED", "CLAUSE_ID_BETWEEN_CLOSED", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_CLOSED, NULL, .constantValue.asLong = 0 },
    { "CLAUSE_ID_BETWEEN_LEFT_CLOSED", "CLAUSE_ID_BETWEEN_LEFT_CLOSED", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_LEFT_CLOSED, NULL, .constantValue.asLong = 0 },
    { "CLAUSE_ID_BETWEEN_RIGHT_CLOSED", "CLAUSE_ID_BETWEEN_RIGHT_CLOSED", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_RIGHT_CLOSED, NULL, .constantValue.asLong = 0 },
    { "TYPE_FORWARD_ONLY", "TYPE_FORWARD_ONLY", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_FORWARD_ONLY, NULL, .constantValue.asLong = 0 },
    { "TYPE_SCROLL_INSENSITIVE", "TYPE_SCROLL_INSENSITIVE", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_SCROLL_INSENSITIVE, NULL, .constantValue.asLong = 0 },
    { "TYPE_SCROLL_SENSITIVE", "TYPE_SCROLL_SENSITIVE", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_SCROLL_SENSITIVE, NULL, .constantValue.asLong = 0 },
    { "CONCUR_READ_ONLY", "CONCUR_READ_ONLY", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CONCUR_READ_ONLY, NULL, .constantValue.asLong = 0 },
    { "CONCUR_UPDATABLE", "CONCUR_UPDATABLE", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CONCUR_UPDATABLE, NULL, .constantValue.asLong = 0 },
    { "HOLD_CURSORS_OVER_COMMIT", "HOLD_CURSORS_OVER_COMMIT", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_HOLD_CURSORS_OVER_COMMIT, NULL, .constantValue.asLong = 0 },
    { "CLOSE_CURSORS_AT_COMMIT", "CLOSE_CURSORS_AT_COMMIT", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLOSE_CURSORS_AT_COMMIT, NULL, .constantValue.asLong = 0 },
    { "CACHED_ROWSET_CLASS", "CACHED_ROWSET_CLASS", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CACHED_ROWSET_CLASS, NULL, .constantValue.asLong = 0 },
    { "connection_", NULL, 0x4, "Lorg.oss.pdfreporter.sql.IConnection;", NULL, NULL, .constantValue.asLong = 0 },
    { "statement_", NULL, 0x4, "Lorg.oss.pdfreporter.sql.IPreparedStatement;", NULL, NULL, .constantValue.asLong = 0 },
    { "resultSet_", NULL, 0x4, "Lorg.oss.pdfreporter.sql.IResultSet;", NULL, NULL, .constantValue.asLong = 0 },
    { "isCachedRowSet_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "timeZone_", NULL, 0x2, "Ljava.util.TimeZone;", NULL, NULL, .constantValue.asLong = 0 },
    { "timeZoneOverride_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter = { 2, "JRJdbcQueryExecuter", "org.oss.pdfreporter.engine.query", NULL, 0x1, 16, methods, 28, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter;
}

@end

void OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterEngineJRDataset> dataset, id<JavaUtilMap> parameters) {
  OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(self, jasperReportsContext, dataset, parameters);
  self->connection_ = (id<OrgOssPdfreporterSqlIConnection>) cast_check([self getParameterValueWithNSString:OrgOssPdfreporterEngineJRParameter_REPORT_CONNECTION], OrgOssPdfreporterSqlIConnection_class_());
  if (self->connection_ == nil) {
    if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING)]) {
      [OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger warningWithNSString:@"The supplied java.sql.Connection object is null."];
    }
  }
  self->isCachedRowSet_ = [self getBooleanParameterOrPropertyWithNSString:OrgOssPdfreporterEngineQueryJRJdbcQueryExecuterFactory_PROPERTY_CACHED_ROWSET withBoolean:false];
  [self setTimeZone];
  [self registerFunctions];
  [self parseQuery];
}

OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *new_OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterEngineJRDataset> dataset, id<JavaUtilMap> parameters) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter, initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_, jasperReportsContext, dataset, parameters)
}

OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *create_OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterEngineJRDataset> dataset, id<JavaUtilMap> parameters) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter, initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_, jasperReportsContext, dataset, parameters)
}

void OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *self, id<OrgOssPdfreporterEngineJRDataset> dataset, id<JavaUtilMap> parameters) {
  OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(self, OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance(), dataset, parameters);
}

OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *new_OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(id<OrgOssPdfreporterEngineJRDataset> dataset, id<JavaUtilMap> parameters) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter, initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_, dataset, parameters)
}

OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *create_OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(id<OrgOssPdfreporterEngineJRDataset> dataset, id<JavaUtilMap> parameters) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter, initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_, dataset, parameters)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter)

@implementation OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1

- (void)visitWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter:(OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *)queryParameter {
  @try {
    if ([((OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *) nil_chk(queryParameter)) isMulti]) {
      paramIdx_ += [this$0_ setStatementMultiParametersWithInt:paramIdx_ withNSString:[queryParameter getName] withBoolean:[queryParameter isIgnoreNulls]];
    }
    else {
      [this$0_ setStatementParameterWithInt:paramIdx_ withNSString:[queryParameter getName]];
      ++paramIdx_;
    }
  }
  @catch (OrgOssPdfreporterSqlSQLException *e) {
    @throw new_OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_VisitExceptionWrapper_initWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_withJavaLangException_(this$0_, e);
  }
}

- (void)visitWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter:(OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter *)valuedQueryParameter {
  IOSClass *type = [((OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter *) nil_chk(valuedQueryParameter)) getType];
  id value = [valuedQueryParameter getValue];
  if (type == nil) {
    type = value == nil ? NSObject_class_() : [value getClass];
  }
  if ([((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter, logger))) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
    [JreLoadStatic(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter, logger) fineWithNSString:JreStrcat("$I$$$@", @"Parameter #", paramIdx_, @" (of type ", [type getName], @"): ", value)];
  }
  @try {
    [this$0_ setStatementParameterWithInt:paramIdx_ withIOSClass:type withId:value];
    ++paramIdx_;
  }
  @catch (OrgOssPdfreporterSqlSQLException *e) {
    @throw new_OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_VisitExceptionWrapper_initWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_withJavaLangException_(this$0_, e);
  }
}

- (instancetype)initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter:(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *)outer$ {
  OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1_initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "visitWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter:", "visit", "V", 0x1, NULL, NULL },
    { "visitWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter:", "visit", "V", 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.oss.pdfreporter.engine.query.JRJdbcQueryExecuter;", NULL, NULL, .constantValue.asLong = 0 },
    { "paramIdx_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter", "createStatement" };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1 = { 2, "", "org.oss.pdfreporter.engine.query", "JRJdbcQueryExecuter", 0x8008, 3, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1;
}

@end

void OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1_initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1 *self, OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->paramIdx_ = 1;
}

OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1 *new_OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1_initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *outer$) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1, initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_, outer$)
}

OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1 *create_OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1_initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *outer$) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1, initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1)
