//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/query/coresql/transformer/ClauseTokensQueryChunk.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/oss/pdfreporter/engine/JRQueryChunk.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/query/coresql/transformer/ClauseTokensQueryChunk.h"
#include "org/oss/pdfreporter/engine/util/JRQueryParser.h"

@interface OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk () {
 @public
  IOSObjectArray *tokens_;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)tokens;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk, tokens_, IOSObjectArray *)

__attribute__((unused)) static void OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk_initWithNSStringArray_(OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk *self, IOSObjectArray *tokens);

__attribute__((unused)) static OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk *new_OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk_initWithNSStringArray_(IOSObjectArray *tokens) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk *create_OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk_initWithNSStringArray_(IOSObjectArray *tokens);

@implementation OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk

- (instancetype)initWithNSStringArray:(IOSObjectArray *)tokens {
  OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk_initWithNSStringArray_(self, tokens);
  return self;
}

+ (OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk *)inClauseWithNSString:(NSString *)a
                                                                                  withNSString:(NSString *)b {
  return OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk_inClauseWithNSString_withNSString_(a, b);
}

- (jbyte)getType {
  return OrgOssPdfreporterEngineJRQueryChunk_TYPE_CLAUSE_TOKENS;
}

- (NSString *)getText {
  return [((OrgOssPdfreporterEngineUtilJRQueryParser *) nil_chk(OrgOssPdfreporterEngineUtilJRQueryParser_instance())) asClauseTextWithNSStringArray:[self getTokens]];
}

- (IOSObjectArray *)getTokens {
  return tokens_;
}

- (id)clone {
  @try {
    return [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSStringArray:", "ClauseTokensQueryChunk", NULL, 0x2, NULL, NULL },
    { "inClauseWithNSString:withNSString:", "inClause", "Lorg.oss.pdfreporter.engine.query.coresql.transformer.ClauseTokensQueryChunk;", 0x8, NULL, NULL },
    { "getType", NULL, "B", 0x1, NULL, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTokens", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "tokens_", NULL, 0x12, "[Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk = { 2, "ClauseTokensQueryChunk", "org.oss.pdfreporter.engine.query.coresql.transformer", NULL, 0x0, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk;
}

@end

void OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk_initWithNSStringArray_(OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk *self, IOSObjectArray *tokens) {
  NSObject_init(self);
  self->tokens_ = tokens;
}

OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk *new_OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk_initWithNSStringArray_(IOSObjectArray *tokens) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk, initWithNSStringArray_, tokens)
}

OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk *create_OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk_initWithNSStringArray_(IOSObjectArray *tokens) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk, initWithNSStringArray_, tokens)
}

OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk *OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk_inClauseWithNSString_withNSString_(NSString *a, NSString *b) {
  OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk_initialize();
  return new_OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk_initWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"IN", a, b } count:3 type:NSString_class_()]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk)
