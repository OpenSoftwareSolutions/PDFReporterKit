//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/query/coresql/transformer/CoreSqlQueryTransformer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRQuery.h"
#include "org/oss/pdfreporter/engine/JRQueryChunk.h"
#include "org/oss/pdfreporter/engine/query/coresql/model/CoreDto.h"
#include "org/oss/pdfreporter/engine/query/coresql/model/CoreIdentifierType.h"
#include "org/oss/pdfreporter/engine/query/coresql/model/CoreModels.h"
#include "org/oss/pdfreporter/engine/query/coresql/transformer/ClauseTokensQueryChunk.h"
#include "org/oss/pdfreporter/engine/query/coresql/transformer/CoreSqlQueryTransformer.h"
#include "org/oss/pdfreporter/engine/query/coresql/transformer/SqlQuery.h"
#include "org/oss/pdfreporter/engine/query/coresql/transformer/TextQueryChunk.h"

@interface OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer () {
 @public
  id<OrgOssPdfreporterEngineJRQuery> query_;
  id<OrgOssPdfreporterEngineQueryCoresqlModelCoreModels> models_;
  id<JavaUtilList> dtos_;
  id<JavaUtilMap> aliasMapping_;
  id<OrgOssPdfreporterEngineJRQuery> jdbcQuery_;
}

- (NSString *)transformFromClauseWithNSString:(NSString *)text;

- (NSString *)stripQueryClauseWithNSString:(NSString *)text;

- (void)logChunkWithNSString:(NSString *)name
withOrgOssPdfreporterEngineJRQueryChunk:(id<OrgOssPdfreporterEngineJRQueryChunk>)chunk;

- (jboolean)hasMoreChunksWithInt:(jint)i;

- (void)findDtoAliasNames;

- (NSString *)stripDtosClauseWithNSString:(NSString *)text;

- (void)resolveDtos;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, query_, id<OrgOssPdfreporterEngineJRQuery>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, models_, id<OrgOssPdfreporterEngineQueryCoresqlModelCoreModels>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, dtos_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, aliasMapping_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, jdbcQuery_, id<OrgOssPdfreporterEngineJRQuery>)

inline JavaUtilLoggingLogger *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, logger, JavaUtilLoggingLogger *)

inline NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_get_RTRIM();
static NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_RTRIM = @"\\s+$";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, RTRIM, NSString *)

inline NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_get_WHITE_SPACES();
static NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_WHITE_SPACES = @"\\s";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, WHITE_SPACES, NSString *)

inline jint OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_get_FIRST_CHUNK_INDEX();
#define OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_FIRST_CHUNK_INDEX 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, FIRST_CHUNK_INDEX, jint)

inline NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_get_QUERY();
static NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_QUERY = @"query = ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, QUERY, NSString *)

inline NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_get_SELECT();
static NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_SELECT = @"select";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, SELECT, NSString *)

inline NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_get_FROM();
static NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_FROM = @"from";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, FROM, NSString *)

inline NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_get_DTOS();
static NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_DTOS = @"& dtos = ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, DTOS, NSString *)

__attribute__((unused)) static NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_transformFromClauseWithNSString_(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self, NSString *text);

__attribute__((unused)) static NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_stripQueryClauseWithNSString_(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self, NSString *text);

__attribute__((unused)) static void OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logChunkWithNSString_withOrgOssPdfreporterEngineJRQueryChunk_(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self, NSString *name, id<OrgOssPdfreporterEngineJRQueryChunk> chunk);

__attribute__((unused)) static jboolean OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_hasMoreChunksWithInt_(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self, jint i);

__attribute__((unused)) static void OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_findDtoAliasNames(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self);

__attribute__((unused)) static NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_stripDtosClauseWithNSString_(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self, NSString *text);

__attribute__((unused)) static void OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_resolveDtos(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer)

@implementation OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer

- (instancetype)initWithOrgOssPdfreporterEngineJRQuery:(id<OrgOssPdfreporterEngineJRQuery>)query
withOrgOssPdfreporterEngineQueryCoresqlModelCoreModels:(id<OrgOssPdfreporterEngineQueryCoresqlModelCoreModels>)models {
  OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_initWithOrgOssPdfreporterEngineJRQuery_withOrgOssPdfreporterEngineQueryCoresqlModelCoreModels_(self, query, models);
  return self;
}

- (id<JavaUtilMap>)getAliasMapping {
  (void) [self toJdbcQuery];
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(aliasMapping_);
}

- (id<OrgOssPdfreporterEngineJRQuery>)toJdbcQuery {
  @synchronized(self) {
    if (jdbcQuery_ == nil) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logger)) fineWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"Transform CoreSQL query: %s", [IOSObjectArray newArrayWithObjects:(id[]){ [((NSString *) nil_chk([((id<OrgOssPdfreporterEngineJRQuery>) nil_chk(query_)) getText])) replaceAll:OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_WHITE_SPACES withReplacement:@" "] } count:1 type:NSObject_class_()])];
      OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_resolveDtos(self);
      OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_findDtoAliasNames(self);
      id<JavaUtilList> chunks = new_JavaUtilArrayList_init();
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk([query_ getChunks]))->size_; i++) {
        id<OrgOssPdfreporterEngineJRQueryChunk> chunk = IOSObjectArray_Get(nil_chk([query_ getChunks]), i);
        OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logChunkWithNSString_withOrgOssPdfreporterEngineJRQueryChunk_(self, @"source", chunk);
        if ([((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(chunk)) getType] == OrgOssPdfreporterEngineJRQueryChunk_TYPE_TEXT) {
          NSString *text = [((NSString *) nil_chk([chunk getText])) replaceAll:OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_WHITE_SPACES withReplacement:@" "];
          if (i == OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_FIRST_CHUNK_INDEX) {
            text = OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_stripQueryClauseWithNSString_(self, text);
            text = OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_transformFromClauseWithNSString_(self, text);
          }
          text = OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_stripDtosClauseWithNSString_(self, text);
          if (![((NSString *) nil_chk(text)) isEmpty]) {
            for (id<OrgOssPdfreporterEngineQueryCoresqlModelCoreDto> __strong dto in nil_chk(dtos_)) {
              text = [((NSString *) nil_chk(text)) replace:JreStrcat("C$C", ' ', [((id<OrgOssPdfreporterEngineQueryCoresqlModelCoreDto>) nil_chk(dto)) getModelName], ' ') withSequence:JreStrcat("C$C", ' ', [dto getTableName], ' ')];
              text = [dto replaceComplexTypeNameWithNSString:text];
            }
            jboolean chunkAdded = false;
            for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(aliasMapping_)) entrySet])) {
              NSString *aliasName = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
              for (id<OrgOssPdfreporterEngineQueryCoresqlModelCoreIdentifierType> __strong type in nil_chk([((id<OrgOssPdfreporterEngineQueryCoresqlModelCoreDto>) nil_chk([entry_ getValue])) getIdentifierTypes])) {
                NSString *inClause = JreStrcat("$$C$", @"in ", aliasName, '.', [((id<OrgOssPdfreporterEngineQueryCoresqlModelCoreIdentifierType>) nil_chk(type)) getFieldName]);
                if ([((NSString *) nil_chk(text)) contains:inClause]) {
                  text = [text replace:inClause withSequence:JreStrcat("$$", @"in ", [type getSelectInClauseWithNSString:aliasName])];
                }
              }
              jint pos = [text lastIndexOfString:JreStrcat("$C", aliasName, '.')];
              if (pos >= 0 && [((NSString *) nil_chk([text trim])) hasSuffix:@" in"] && OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_hasMoreChunksWithInt_(self, i)) {
                if (((IOSObjectArray *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([text substring:pos])) trim])) split:@" "]))->size_ > 2) {
                  continue;
                }
                NSString *prependerClause = [text substring:0 endIndex:pos];
                text = [text substring:pos];
                id<OrgOssPdfreporterEngineJRQueryChunk> nextChunk = IOSObjectArray_Get(nil_chk([query_ getChunks]), i + 1);
                OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logChunkWithNSString_withOrgOssPdfreporterEngineJRQueryChunk_(self, @"source", nextChunk);
                jint end = [((NSString *) nil_chk(text)) indexOfString:@" in"];
                id<OrgOssPdfreporterEngineJRQueryChunk> prependerChunk = new_OrgOssPdfreporterEngineQueryCoresqlTransformerTextQueryChunk_initWithNSString_(prependerClause);
                OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logChunkWithNSString_withOrgOssPdfreporterEngineJRQueryChunk_(self, @"target", prependerChunk);
                [chunks addWithId:prependerChunk];
                id<OrgOssPdfreporterEngineJRQueryChunk> clauseChunk = OrgOssPdfreporterEngineQueryCoresqlTransformerClauseTokensQueryChunk_inClauseWithNSString_withNSString_([text substring:0 endIndex:end], [((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(nextChunk)) getText]);
                OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logChunkWithNSString_withOrgOssPdfreporterEngineJRQueryChunk_(self, @"target", clauseChunk);
                [chunks addWithId:clauseChunk];
                chunkAdded = true;
                i++;
              }
            }
            if (!chunkAdded) {
              id<OrgOssPdfreporterEngineJRQueryChunk> singleTokenChunk = new_OrgOssPdfreporterEngineQueryCoresqlTransformerTextQueryChunk_initWithNSString_(text);
              OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logChunkWithNSString_withOrgOssPdfreporterEngineJRQueryChunk_(self, @"target", singleTokenChunk);
              [chunks addWithId:singleTokenChunk];
            }
          }
        }
        else {
          OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logChunkWithNSString_withOrgOssPdfreporterEngineJRQueryChunk_(self, @"target", chunk);
          [chunks addWithId:chunk];
        }
      }
      jdbcQuery_ = new_OrgOssPdfreporterEngineQueryCoresqlTransformerSqlQuery_initWithOrgOssPdfreporterEngineJRQueryChunkArray_([chunks toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:OrgOssPdfreporterEngineJRQueryChunk_class_()]]);
      [OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logger fineWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"To SQL query: %s", [IOSObjectArray newArrayWithObjects:(id[]){ [jdbcQuery_ getText] } count:1 type:NSObject_class_()])];
    }
    return jdbcQuery_;
  }
}

- (NSString *)transformFromClauseWithNSString:(NSString *)text {
  return OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_transformFromClauseWithNSString_(self, text);
}

- (NSString *)stripQueryClauseWithNSString:(NSString *)text {
  return OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_stripQueryClauseWithNSString_(self, text);
}

- (void)logChunkWithNSString:(NSString *)name
withOrgOssPdfreporterEngineJRQueryChunk:(id<OrgOssPdfreporterEngineJRQueryChunk>)chunk {
  OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logChunkWithNSString_withOrgOssPdfreporterEngineJRQueryChunk_(self, name, chunk);
}

- (jboolean)hasMoreChunksWithInt:(jint)i {
  return OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_hasMoreChunksWithInt_(self, i);
}

- (void)findDtoAliasNames {
  OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_findDtoAliasNames(self);
}

- (NSString *)stripDtosClauseWithNSString:(NSString *)text {
  return OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_stripDtosClauseWithNSString_(self, text);
}

- (void)resolveDtos {
  OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_resolveDtos(self);
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer class]) {
    OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineJRQuery:withOrgOssPdfreporterEngineQueryCoresqlModelCoreModels:", "CoreSqlQueryTransformer", NULL, 0x1, NULL, NULL },
    { "getAliasMapping", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/query/coresql/model/CoreDto;>;" },
    { "toJdbcQuery", NULL, "Lorg.oss.pdfreporter.engine.JRQuery;", 0x21, NULL, NULL },
    { "transformFromClauseWithNSString:", "transformFromClause", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "stripQueryClauseWithNSString:", "stripQueryClause", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "logChunkWithNSString:withOrgOssPdfreporterEngineJRQueryChunk:", "logChunk", "V", 0x2, NULL, NULL },
    { "hasMoreChunksWithInt:", "hasMoreChunks", "Z", 0x2, NULL, NULL },
    { "findDtoAliasNames", NULL, "V", 0x2, NULL, NULL },
    { "stripDtosClauseWithNSString:", "stripDtosClause", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "resolveDtos", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logger, NULL, .constantValue.asLong = 0 },
    { "RTRIM", "RTRIM", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_RTRIM, NULL, .constantValue.asLong = 0 },
    { "WHITE_SPACES", "WHITE_SPACES", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_WHITE_SPACES, NULL, .constantValue.asLong = 0 },
    { "FIRST_CHUNK_INDEX", "FIRST_CHUNK_INDEX", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_FIRST_CHUNK_INDEX },
    { "QUERY", "QUERY", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_QUERY, NULL, .constantValue.asLong = 0 },
    { "SELECT", "SELECT", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_SELECT, NULL, .constantValue.asLong = 0 },
    { "FROM", "FROM", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_FROM, NULL, .constantValue.asLong = 0 },
    { "DTOS", "DTOS", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_DTOS, NULL, .constantValue.asLong = 0 },
    { "query_", NULL, 0x12, "Lorg.oss.pdfreporter.engine.JRQuery;", NULL, NULL, .constantValue.asLong = 0 },
    { "models_", NULL, 0x12, "Lorg.oss.pdfreporter.engine.query.coresql.model.CoreModels;", NULL, NULL, .constantValue.asLong = 0 },
    { "dtos_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/engine/query/coresql/model/CoreDto;>;", .constantValue.asLong = 0 },
    { "aliasMapping_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/query/coresql/model/CoreDto;>;", .constantValue.asLong = 0 },
    { "jdbcQuery_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.JRQuery;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer = { 2, "CoreSqlQueryTransformer", "org.oss.pdfreporter.engine.query.coresql.transformer", NULL, 0x1, 10, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer;
}

@end

void OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_initWithOrgOssPdfreporterEngineJRQuery_withOrgOssPdfreporterEngineQueryCoresqlModelCoreModels_(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self, id<OrgOssPdfreporterEngineJRQuery> query, id<OrgOssPdfreporterEngineQueryCoresqlModelCoreModels> models) {
  NSObject_init(self);
  self->jdbcQuery_ = nil;
  self->query_ = query;
  self->models_ = models;
  self->dtos_ = new_JavaUtilArrayList_init();
  self->aliasMapping_ = new_JavaUtilHashMap_init();
}

OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *new_OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_initWithOrgOssPdfreporterEngineJRQuery_withOrgOssPdfreporterEngineQueryCoresqlModelCoreModels_(id<OrgOssPdfreporterEngineJRQuery> query, id<OrgOssPdfreporterEngineQueryCoresqlModelCoreModels> models) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, initWithOrgOssPdfreporterEngineJRQuery_withOrgOssPdfreporterEngineQueryCoresqlModelCoreModels_, query, models)
}

OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *create_OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_initWithOrgOssPdfreporterEngineJRQuery_withOrgOssPdfreporterEngineQueryCoresqlModelCoreModels_(id<OrgOssPdfreporterEngineJRQuery> query, id<OrgOssPdfreporterEngineQueryCoresqlModelCoreModels> models) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer, initWithOrgOssPdfreporterEngineJRQuery_withOrgOssPdfreporterEngineQueryCoresqlModelCoreModels_, query, models)
}

NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_transformFromClauseWithNSString_(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self, NSString *text) {
  if ([((NSString *) nil_chk([((NSString *) nil_chk(text)) lowercaseString])) hasPrefix:JreStrcat("$C", OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_SELECT, ' ')]) {
    text = [text substring:((jint) [((NSString *) nil_chk(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_SELECT)) length]) + 1];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(@"Missing SELECT clause in query chunk %s", [IOSObjectArray newArrayWithObjects:(id[]){ text } count:1 type:NSObject_class_()]));
  }
  jint pos = [((NSString *) nil_chk([((NSString *) nil_chk(text)) lowercaseString])) indexOfString:JreStrcat("C$C", ' ', OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_FROM, ' ')];
  NSString *fromClauseAppender = pos >= 0 ? [text substring:pos] : @"";
  text = pos >= 0 ? [text substring:0 endIndex:pos] : text;
  JavaLangStringBuffer *fromClause = new_JavaLangStringBuffer_initWithNSString_(@"SELECT ");
  JavaUtilStringTokenizer *t = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(text, @",");
  while ([t hasMoreTokens]) {
    NSString *fromClauseToken = [((NSString *) nil_chk([t nextToken])) trim];
    (void) [fromClause appendWithNSString:fromClauseToken];
    if ([((id<JavaUtilMap>) nil_chk(self->aliasMapping_)) containsKeyWithId:fromClauseToken]) {
      (void) [fromClause appendWithNSString:@".*"];
      id<OrgOssPdfreporterEngineQueryCoresqlModelCoreDto> model = [self->aliasMapping_ getWithId:fromClauseToken];
      for (NSString * __strong aliasAccessedName in nil_chk([((id<OrgOssPdfreporterEngineQueryCoresqlModelCoreDto>) nil_chk(model)) getAliasNameAccessedFields])) {
        (void) [fromClause appendWithNSString:@", "];
        (void) [fromClause appendWithNSString:JreStrcat("$C$", fromClauseToken, '.', aliasAccessedName)];
        (void) [fromClause appendWithNSString:JreStrcat("$$C$", @" as ", fromClauseToken, '_', aliasAccessedName)];
      }
    }
    if ([t hasMoreTokens]) {
      (void) [fromClause appendWithNSString:@", "];
    }
  }
  (void) [fromClause appendWithNSString:fromClauseAppender];
  text = [fromClause description];
  return text;
}

NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_stripQueryClauseWithNSString_(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self, NSString *text) {
  if ([((NSString *) nil_chk(text)) hasPrefix:OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_QUERY]) {
    text = [text substring:((jint) [((NSString *) nil_chk(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_QUERY)) length])];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(@"Missing query = clause in query chunk %s", [IOSObjectArray newArrayWithObjects:(id[]){ text } count:1 type:NSObject_class_()]));
  }
  return text;
}

void OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logChunkWithNSString_withOrgOssPdfreporterEngineJRQueryChunk_(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self, NSString *name, id<OrgOssPdfreporterEngineJRQueryChunk> chunk) {
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_logger)) finestWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"%s: '%s' type: %s", [IOSObjectArray newArrayWithObjects:(id[]){ name, [((NSString *) nil_chk([((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(chunk)) getText])) replaceAll:OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_WHITE_SPACES withReplacement:@" "], JavaLangByte_valueOfWithByte_([chunk getType]) } count:3 type:NSObject_class_()])];
}

jboolean OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_hasMoreChunksWithInt_(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self, jint i) {
  return ((IOSObjectArray *) nil_chk([((id<OrgOssPdfreporterEngineJRQuery>) nil_chk(self->query_)) getChunks]))->size_ - i > 1;
}

void OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_findDtoAliasNames(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((id<OrgOssPdfreporterEngineJRQuery>) nil_chk(self->query_)) getChunks]))->size_; i++) {
    id<OrgOssPdfreporterEngineJRQueryChunk> chunk = IOSObjectArray_Get(nil_chk([self->query_ getChunks]), i);
    if ([((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(chunk)) getType] == OrgOssPdfreporterEngineJRQueryChunk_TYPE_TEXT) {
      NSString *text = OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_stripDtosClauseWithNSString_(self, [((NSString *) nil_chk([chunk getText])) replaceAll:OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_WHITE_SPACES withReplacement:@" "]);
      for (id<OrgOssPdfreporterEngineQueryCoresqlModelCoreDto> __strong dto in nil_chk(self->dtos_)) {
        jint pos = [((NSString *) nil_chk(text)) indexOfString:[((id<OrgOssPdfreporterEngineQueryCoresqlModelCoreDto>) nil_chk(dto)) getModelName]];
        if (pos > 0) {
          JavaUtilStringTokenizer *t = new_JavaUtilStringTokenizer_initWithNSString_withNSString_([text substring:pos + ((jint) [((NSString *) nil_chk([dto getModelName])) length])], @", ");
          if ([t hasMoreTokens]) {
            (void) [((id<JavaUtilMap>) nil_chk(self->aliasMapping_)) putWithId:[t nextToken] withId:dto];
          }
        }
      }
    }
  }
}

NSString *OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_stripDtosClauseWithNSString_(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self, NSString *text) {
  jint pos = [((NSString *) nil_chk(text)) indexOfString:OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_DTOS];
  if (pos > 0) {
    return [((NSString *) nil_chk([text substring:0 endIndex:pos])) replaceAll:OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_RTRIM withReplacement:@""];
  }
  return text;
}

void OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_resolveDtos(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer *self) {
  NSString *text = [((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(IOSObjectArray_Get(nil_chk([((id<OrgOssPdfreporterEngineJRQuery>) nil_chk(self->query_)) getChunks]), ((IOSObjectArray *) nil_chk([self->query_ getChunks]))->size_ - 1))) getText];
  jint pos = [((NSString *) nil_chk(text)) indexOfString:OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_DTOS];
  if (pos >= 0) {
    {
      IOSObjectArray *a__ = [((NSString *) nil_chk([text substring:pos + ((jint) [((NSString *) nil_chk(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer_DTOS)) length])])) split:@";"];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *dtoName = *b__++;
        id<OrgOssPdfreporterEngineQueryCoresqlModelCoreDto> dto = [((id<OrgOssPdfreporterEngineQueryCoresqlModelCoreModels>) nil_chk(self->models_)) getModelByNameWithNSString:[((NSString *) nil_chk(dtoName)) trim]];
        if (dto != nil) {
          [((id<JavaUtilList>) nil_chk(self->dtos_)) addWithId:dto];
        }
        else {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(@"Unknown Model %s", [IOSObjectArray newArrayWithObjects:(id[]){ dtoName } count:1 type:NSObject_class_()]));
        }
      }
    }
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(@"Missing & dtos clause in query chunk %s", [IOSObjectArray newArrayWithObjects:(id[]){ text } count:1 type:NSObject_class_()]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineQueryCoresqlTransformerCoreSqlQueryTransformer)
