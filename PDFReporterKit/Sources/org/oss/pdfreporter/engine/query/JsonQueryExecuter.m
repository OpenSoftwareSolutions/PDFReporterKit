//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/query/JsonQueryExecuter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/TimeZone.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRDataSource.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/query/JRAbstractQueryExecuter.h"
#include "org/oss/pdfreporter/engine/query/JsonQueryExecuter.h"
#include "org/oss/pdfreporter/engine/query/JsonQueryExecuterFactory.h"
#include "org/oss/pdfreporter/json/IJsonDataSource.h"
#include "org/oss/pdfreporter/json/factory/IJsonDataSourceFactory.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"

@interface OrgOssPdfreporterEngineQueryJsonQueryExecuter () {
 @public
  id<OrgOssPdfreporterJsonIJsonDataSource> datasource_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineQueryJsonQueryExecuter, datasource_, id<OrgOssPdfreporterJsonIJsonDataSource>)

inline JavaUtilLoggingLogger *OrgOssPdfreporterEngineQueryJsonQueryExecuter_get_log();
static JavaUtilLoggingLogger *OrgOssPdfreporterEngineQueryJsonQueryExecuter_log;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineQueryJsonQueryExecuter, log, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineQueryJsonQueryExecuter)

NSString *OrgOssPdfreporterEngineQueryJsonQueryExecuter_CANONICAL_LANGUAGE = @"JSON";

@implementation OrgOssPdfreporterEngineQueryJsonQueryExecuter

+ (NSString *)CANONICAL_LANGUAGE {
  return OrgOssPdfreporterEngineQueryJsonQueryExecuter_CANONICAL_LANGUAGE;
}

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                               withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                                    withJavaUtilMap:(id<JavaUtilMap>)parametersMap {
  OrgOssPdfreporterEngineQueryJsonQueryExecuter_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(self, jasperReportsContext, dataset, parametersMap);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                         withJavaUtilMap:(id<JavaUtilMap>)parametersMap {
  OrgOssPdfreporterEngineQueryJsonQueryExecuter_initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(self, dataset, parametersMap);
  return self;
}

- (NSString *)getCanonicalQueryLanguage {
  return OrgOssPdfreporterEngineQueryJsonQueryExecuter_CANONICAL_LANGUAGE;
}

- (NSString *)getParameterReplacementWithNSString:(NSString *)parameterName {
  return NSString_valueOf_([self getParameterValueWithNSString:parameterName]);
}

- (id<OrgOssPdfreporterEngineJRDataSource>)createDatasource {
  id<OrgOssPdfreporterJsonFactoryIJsonDataSourceFactory> jsonDataSourceFactory = OrgOssPdfreporterRegistryApiRegistry_getJsonDataSourceFactory();
  JavaIoInputStream *jsonInputStream = (JavaIoInputStream *) cast_chk([self getParameterValueWithNSString:OrgOssPdfreporterEngineQueryJsonQueryExecuterFactory_JSON_INPUT_STREAM], [JavaIoInputStream class]);
  if (jsonInputStream != nil) {
    datasource_ = [((id<OrgOssPdfreporterJsonFactoryIJsonDataSourceFactory>) nil_chk(jsonDataSourceFactory)) newJsonDataSourceWithJavaIoInputStream:jsonInputStream withNSString:[self getQueryString]];
  }
  else {
    NSString *jsonSource = [self getStringParameterOrPropertyWithNSString:OrgOssPdfreporterEngineQueryJsonQueryExecuterFactory_JSON_SOURCE];
    if (jsonSource != nil) {
      datasource_ = [((id<OrgOssPdfreporterJsonFactoryIJsonDataSourceFactory>) nil_chk(jsonDataSourceFactory)) newJsonDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext] withNSString:jsonSource withNSString:[self getQueryString]];
    }
    else {
      if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJsonQueryExecuter_log)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING)]) {
        [OrgOssPdfreporterEngineQueryJsonQueryExecuter_log warningWithNSString:@"No JSON source was provided."];
      }
    }
  }
  if (datasource_ != nil) {
    NSString *dateFormatPattern = [self getStringParameterOrPropertyWithNSString:OrgOssPdfreporterEngineQueryJsonQueryExecuterFactory_JSON_DATE_PATTERN];
    if (dateFormatPattern != nil) {
      [((id<OrgOssPdfreporterJsonIJsonDataSource>) nil_chk(datasource_)) setDatePatternWithNSString:dateFormatPattern];
    }
    NSString *numberFormatPattern = [self getStringParameterOrPropertyWithNSString:OrgOssPdfreporterEngineQueryJsonQueryExecuterFactory_JSON_NUMBER_PATTERN];
    if (numberFormatPattern != nil) {
      [((id<OrgOssPdfreporterJsonIJsonDataSource>) nil_chk(datasource_)) setNumberPatternWithNSString:numberFormatPattern];
    }
    JavaUtilLocale *jsonLocale = (JavaUtilLocale *) cast_chk([self getParameterValueWithNSString:OrgOssPdfreporterEngineQueryJsonQueryExecuterFactory_JSON_LOCALE withBoolean:true], [JavaUtilLocale class]);
    if (jsonLocale != nil) {
      [((id<OrgOssPdfreporterJsonIJsonDataSource>) nil_chk(datasource_)) setLocaleWithJavaUtilLocale:jsonLocale];
    }
    else {
      NSString *jsonLocaleCode = [self getStringParameterOrPropertyWithNSString:OrgOssPdfreporterEngineQueryJsonQueryExecuterFactory_JSON_LOCALE_CODE];
      if (jsonLocaleCode != nil) {
        [((id<OrgOssPdfreporterJsonIJsonDataSource>) nil_chk(datasource_)) setLocaleWithNSString:jsonLocaleCode];
      }
    }
    JavaUtilTimeZone *jsonTimezone = (JavaUtilTimeZone *) cast_chk([self getParameterValueWithNSString:OrgOssPdfreporterEngineQueryJsonQueryExecuterFactory_JSON_TIME_ZONE withBoolean:true], [JavaUtilTimeZone class]);
    if (jsonTimezone != nil) {
      [((id<OrgOssPdfreporterJsonIJsonDataSource>) nil_chk(datasource_)) setTimeZoneWithJavaUtilTimeZone:jsonTimezone];
    }
    else {
      NSString *jsonTimezoneId = [self getStringParameterOrPropertyWithNSString:OrgOssPdfreporterEngineQueryJsonQueryExecuterFactory_JSON_TIMEZONE_ID];
      if (jsonTimezoneId != nil) {
        [((id<OrgOssPdfreporterJsonIJsonDataSource>) nil_chk(datasource_)) setTimeZoneWithNSString:jsonTimezoneId];
      }
    }
  }
  return datasource_;
}

- (void)close {
  if (datasource_ != nil) {
    @try {
      [datasource_ close];
    }
    @catch (JavaIoIOException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJsonQueryExecuter_log)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Error while closing datasource." withNSException:e];
    }
    @finally {
      datasource_ = nil;
    }
  }
}

- (jboolean)cancelQuery {
  return false;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineQueryJsonQueryExecuter class]) {
    OrgOssPdfreporterEngineQueryJsonQueryExecuter_log = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterEngineQueryJsonQueryExecuter_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineQueryJsonQueryExecuter)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineJasperReportsContext:withOrgOssPdfreporterEngineJRDataset:withJavaUtilMap:", "JsonQueryExecuter", NULL, 0x1, NULL, "(Lorg/oss/pdfreporter/engine/JasperReportsContext;Lorg/oss/pdfreporter/engine/JRDataset;Ljava/util/Map<Ljava/lang/String;+Lorg/oss/pdfreporter/engine/JRValueParameter;>;)V" },
    { "initWithOrgOssPdfreporterEngineJRDataset:withJavaUtilMap:", "JsonQueryExecuter", NULL, 0x1, NULL, "(Lorg/oss/pdfreporter/engine/JRDataset;Ljava/util/Map<Ljava/lang/String;+Lorg/oss/pdfreporter/engine/JRValueParameter;>;)V" },
    { "getCanonicalQueryLanguage", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getParameterReplacementWithNSString:", "getParameterReplacement", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "createDatasource", NULL, "Lorg.oss.pdfreporter.engine.JRDataSource;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "cancelQuery", NULL, "Z", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "log", "log", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterEngineQueryJsonQueryExecuter_log, NULL, .constantValue.asLong = 0 },
    { "CANONICAL_LANGUAGE", "CANONICAL_LANGUAGE", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJsonQueryExecuter_CANONICAL_LANGUAGE, NULL, .constantValue.asLong = 0 },
    { "datasource_", NULL, 0x2, "Lorg.oss.pdfreporter.json.IJsonDataSource;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineQueryJsonQueryExecuter = { 2, "JsonQueryExecuter", "org.oss.pdfreporter.engine.query", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineQueryJsonQueryExecuter;
}

@end

void OrgOssPdfreporterEngineQueryJsonQueryExecuter_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(OrgOssPdfreporterEngineQueryJsonQueryExecuter *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterEngineJRDataset> dataset, id<JavaUtilMap> parametersMap) {
  OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(self, jasperReportsContext, dataset, parametersMap);
  [self parseQuery];
}

OrgOssPdfreporterEngineQueryJsonQueryExecuter *new_OrgOssPdfreporterEngineQueryJsonQueryExecuter_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterEngineJRDataset> dataset, id<JavaUtilMap> parametersMap) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineQueryJsonQueryExecuter, initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_, jasperReportsContext, dataset, parametersMap)
}

OrgOssPdfreporterEngineQueryJsonQueryExecuter *create_OrgOssPdfreporterEngineQueryJsonQueryExecuter_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterEngineJRDataset> dataset, id<JavaUtilMap> parametersMap) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineQueryJsonQueryExecuter, initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_, jasperReportsContext, dataset, parametersMap)
}

void OrgOssPdfreporterEngineQueryJsonQueryExecuter_initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(OrgOssPdfreporterEngineQueryJsonQueryExecuter *self, id<OrgOssPdfreporterEngineJRDataset> dataset, id<JavaUtilMap> parametersMap) {
  OrgOssPdfreporterEngineQueryJsonQueryExecuter_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(self, OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance(), dataset, parametersMap);
}

OrgOssPdfreporterEngineQueryJsonQueryExecuter *new_OrgOssPdfreporterEngineQueryJsonQueryExecuter_initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(id<OrgOssPdfreporterEngineJRDataset> dataset, id<JavaUtilMap> parametersMap) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineQueryJsonQueryExecuter, initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_, dataset, parametersMap)
}

OrgOssPdfreporterEngineQueryJsonQueryExecuter *create_OrgOssPdfreporterEngineQueryJsonQueryExecuter_initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_(id<OrgOssPdfreporterEngineJRDataset> dataset, id<JavaUtilMap> parametersMap) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineQueryJsonQueryExecuter, initWithOrgOssPdfreporterEngineJRDataset_withJavaUtilMap_, dataset, parametersMap)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineQueryJsonQueryExecuter)
