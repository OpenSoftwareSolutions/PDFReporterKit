//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/query/ParameterTypeSelectorClauseFunction.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRValueParameter.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/query/JRClauseFunction.h"
#include "org/oss/pdfreporter/engine/query/JRClauseTokens.h"
#include "org/oss/pdfreporter/engine/query/JRQueryClauseContext.h"
#include "org/oss/pdfreporter/engine/query/ParameterTypeSelectorClauseFunction.h"
#include "org/oss/pdfreporter/engine/query/ParameterTypesClauseFunction.h"
#include "org/oss/pdfreporter/engine/query/ParameterTypesClauseFunctionBundle.h"
#include "org/oss/pdfreporter/engine/util/Pair.h"

@interface OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction () {
 @public
  IOSIntArray *parameterPositions_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction, parameterPositions_, IOSIntArray *)

inline NSString *OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_get_CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE();
static NSString *OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE = @"net.sf.jasperreports.engine.query.ParameterTypeSelectorClauseFunction.cache";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction, CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE, NSString *)

@interface OrgOssPdfreporterEngineQueryTypesCandidateComparator ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgOssPdfreporterEngineQueryTypesCandidateComparator_init(OrgOssPdfreporterEngineQueryTypesCandidateComparator *self);

__attribute__((unused)) static OrgOssPdfreporterEngineQueryTypesCandidateComparator *new_OrgOssPdfreporterEngineQueryTypesCandidateComparator_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterEngineQueryTypesCandidateComparator *create_OrgOssPdfreporterEngineQueryTypesCandidateComparator_init();

@implementation OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction

- (instancetype)initWithIntArray:(IOSIntArray *)parameterPositions {
  OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_initWithIntArray_(self, parameterPositions);
  return self;
}

- (void)applyWithOrgOssPdfreporterEngineQueryJRClauseTokens:(OrgOssPdfreporterEngineQueryJRClauseTokens *)clauseTokens
       withOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext {
  id<JavaUtilList> parameterTypes = new_JavaUtilArrayList_initWithInt_(((IOSIntArray *) nil_chk(parameterPositions_))->size_);
  {
    IOSIntArray *a__ = parameterPositions_;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint position = *b__++;
      IOSClass *parameterType = [self determineParameterTypeWithOrgOssPdfreporterEngineQueryJRClauseTokens:clauseTokens withOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext withInt:position];
      [parameterTypes addWithId:parameterType];
    }
  }
  id<OrgOssPdfreporterEngineQueryJRClauseFunction> function = [self getForParameterTypesWithOrgOssPdfreporterEngineQueryJRClauseTokens:clauseTokens withOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext withJavaUtilList:parameterTypes];
  if (function == nil) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(JreStrcat("$$$@", @"No clause function implementation found for clause ", [((OrgOssPdfreporterEngineQueryJRClauseTokens *) nil_chk(clauseTokens)) getClauseId], @" and parameter types ", parameterTypes));
  }
  [function applyWithOrgOssPdfreporterEngineQueryJRClauseTokens:clauseTokens withOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext];
}

- (IOSClass *)determineParameterTypeWithOrgOssPdfreporterEngineQueryJRClauseTokens:(OrgOssPdfreporterEngineQueryJRClauseTokens *)clauseTokens
                              withOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext
                                                                           withInt:(jint)parameterPosition {
  NSString *parameterName = [((OrgOssPdfreporterEngineQueryJRClauseTokens *) nil_chk(clauseTokens)) getTokenWithInt:parameterPosition];
  if (parameterName == nil) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(JreStrcat("$I$$$", @"Required token at position ", parameterPosition, @" for query clause ", [clauseTokens getClauseId], @" not found"));
  }
  id<OrgOssPdfreporterEngineJRValueParameter> parameter = [((id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>) nil_chk(queryContext)) getValueParameterWithNSString:parameterName];
  IOSClass *parameterType;
  id parameterValue = [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk(parameter)) getValue];
  if (parameterValue == nil) {
    parameterType = [parameter getValueClass];
  }
  else {
    parameterType = [parameterValue getClass];
  }
  return parameterType;
}

- (id<OrgOssPdfreporterEngineQueryJRClauseFunction>)getForParameterTypesWithOrgOssPdfreporterEngineQueryJRClauseTokens:(OrgOssPdfreporterEngineQueryJRClauseTokens *)clauseTokens
                                                                  withOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext
                                                                                                      withJavaUtilList:(id<JavaUtilList>)parameterTypes {
  id<JavaUtilMap> cache = [self getCacheWithOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext];
  id typesKey = [self parameterTypesFunctionCacheKeyWithOrgOssPdfreporterEngineQueryJRClauseTokens:clauseTokens withOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext withJavaUtilList:parameterTypes];
  id<OrgOssPdfreporterEngineQueryJRClauseFunction> function = [((id<JavaUtilMap>) nil_chk(cache)) getWithId:typesKey];
  if (function == nil) {
    function = [self selectForParameterTypesWithOrgOssPdfreporterEngineQueryJRClauseTokens:clauseTokens withOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext withJavaUtilList:parameterTypes];
    (void) [cache putWithId:typesKey withId:function];
  }
  else {
  }
  return function;
}

- (id<JavaUtilMap>)getCacheWithOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext {
  id<JavaUtilMap> cache = (id<JavaUtilMap>) cast_check([((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk([((id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>) nil_chk(queryContext)) getJasperReportsContext])) getValueWithNSString:OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE], JavaUtilMap_class_());
  if (cache == nil) {
    cache = new_JavaUtilHashMap_init();
    [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk([queryContext getJasperReportsContext])) setValueWithNSString:OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE withId:cache];
  }
  return cache;
}

- (id)parameterTypesFunctionCacheKeyWithOrgOssPdfreporterEngineQueryJRClauseTokens:(OrgOssPdfreporterEngineQueryJRClauseTokens *)clauseTokens
                              withOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext
                                                                  withJavaUtilList:(id<JavaUtilList>)parameterTypes {
  id typesKey;
  jint size = [((id<JavaUtilList>) nil_chk(parameterTypes)) size];
  if (size == 1) {
    typesKey = [parameterTypes getWithInt:0];
  }
  else if (size == 2) {
    typesKey = new_OrgOssPdfreporterEngineUtilPair_initWithId_withId_([parameterTypes getWithInt:0], [parameterTypes getWithInt:1]);
  }
  else {
    typesKey = parameterTypes;
  }
  OrgOssPdfreporterEngineUtilPair *clauseKey = new_OrgOssPdfreporterEngineUtilPair_initWithId_withId_([((id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>) nil_chk(queryContext)) getCanonicalQueryLanguage], [((OrgOssPdfreporterEngineQueryJRClauseTokens *) nil_chk(clauseTokens)) getClauseId]);
  return new_OrgOssPdfreporterEngineUtilPair_initWithId_withId_(clauseKey, typesKey);
}

- (id<OrgOssPdfreporterEngineQueryJRClauseFunction>)selectForParameterTypesWithOrgOssPdfreporterEngineQueryJRClauseTokens:(OrgOssPdfreporterEngineQueryJRClauseTokens *)clauseTokens
                                                                     withOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext
                                                                                                         withJavaUtilList:(id<JavaUtilList>)parameterTypes {
  NSString *queryLanguage = [((id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>) nil_chk(queryContext)) getCanonicalQueryLanguage];
  NSString *clauseId = [((OrgOssPdfreporterEngineQueryJRClauseTokens *) nil_chk(clauseTokens)) getClauseId];
  id<JavaUtilList> functionsBundles = [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk([queryContext getJasperReportsContext])) getExtensionsWithIOSClass:OrgOssPdfreporterEngineQueryParameterTypesClauseFunctionBundle_class_()];
  id<JavaUtilList> candidateFunctions = new_JavaUtilArrayList_init();
  for (id<OrgOssPdfreporterEngineQueryParameterTypesClauseFunctionBundle> __strong functionsBundle in nil_chk(functionsBundles)) {
    id<JavaUtilCollection> functions = [((id<OrgOssPdfreporterEngineQueryParameterTypesClauseFunctionBundle>) nil_chk(functionsBundle)) getTypeFunctionsWithNSString:queryLanguage withNSString:clauseId];
    if (functions != nil) {
      for (id<OrgOssPdfreporterEngineQueryParameterTypesClauseFunction> __strong typesFunction in functions) {
        id<JavaUtilList> supportedTypes = [self findSupportedTypesWithOrgOssPdfreporterEngineQueryParameterTypesClauseFunction:typesFunction withJavaUtilList:parameterTypes];
        if (supportedTypes != nil) {
          id<OrgOssPdfreporterEngineQueryJRClauseFunction> function = [((id<OrgOssPdfreporterEngineQueryParameterTypesClauseFunction>) nil_chk(typesFunction)) getFunction];
          OrgOssPdfreporterEngineUtilPair *candidate = new_OrgOssPdfreporterEngineUtilPair_initWithId_withId_(supportedTypes, function);
          [candidateFunctions addWithId:candidate];
        }
      }
    }
  }
  return [self selectFromCandidatesWithJavaUtilList:candidateFunctions];
}

- (id<OrgOssPdfreporterEngineQueryJRClauseFunction>)selectFromCandidatesWithJavaUtilList:(id<JavaUtilList>)candidateFunctions {
  if ([((id<JavaUtilList>) nil_chk(candidateFunctions)) isEmpty]) {
    return nil;
  }
  if ([candidateFunctions size] == 1) {
    return [((OrgOssPdfreporterEngineUtilPair *) nil_chk([candidateFunctions getWithInt:0])) second];
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(candidateFunctions, JreLoadStatic(OrgOssPdfreporterEngineQueryTypesCandidateComparator, INSTANCE));
  id<OrgOssPdfreporterEngineQueryJRClauseFunction> function = [((OrgOssPdfreporterEngineUtilPair *) nil_chk([candidateFunctions getWithInt:0])) second];
  return function;
}

- (id<JavaUtilList>)findSupportedTypesWithOrgOssPdfreporterEngineQueryParameterTypesClauseFunction:(id<OrgOssPdfreporterEngineQueryParameterTypesClauseFunction>)typesFunction
                                                                                  withJavaUtilList:(id<JavaUtilList>)parameterTypes {
  id<JavaUtilCollection> functionTypes = [((id<OrgOssPdfreporterEngineQueryParameterTypesClauseFunction>) nil_chk(typesFunction)) getSupportedTypes];
  id<JavaUtilList> supportedTypes = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(parameterTypes)) size]);
  for (IOSClass * __strong paramType in parameterTypes) {
    IOSClass *supportedType = [self findSupportedTypeWithJavaUtilCollection:functionTypes withIOSClass:paramType];
    if (supportedType == nil) {
      break;
    }
    else {
      [supportedTypes addWithId:supportedType];
    }
  }
  if ([supportedTypes size] == [parameterTypes size]) {
    return supportedTypes;
  }
  return nil;
}

- (IOSClass *)findSupportedTypeWithJavaUtilCollection:(id<JavaUtilCollection>)supportedTypes
                                         withIOSClass:(IOSClass *)parameterType {
  for (IOSClass * __strong supportedType in nil_chk(supportedTypes)) {
    if ([((IOSClass *) nil_chk(supportedType)) isAssignableFrom:parameterType]) {
      return supportedType;
    }
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIntArray:", "ParameterTypeSelectorClauseFunction", NULL, 0x81, NULL, NULL },
    { "applyWithOrgOssPdfreporterEngineQueryJRClauseTokens:withOrgOssPdfreporterEngineQueryJRQueryClauseContext:", "apply", "V", 0x1, NULL, NULL },
    { "determineParameterTypeWithOrgOssPdfreporterEngineQueryJRClauseTokens:withOrgOssPdfreporterEngineQueryJRQueryClauseContext:withInt:", "determineParameterType", "Ljava.lang.Class;", 0x4, NULL, "(Lorg/oss/pdfreporter/engine/query/JRClauseTokens;Lorg/oss/pdfreporter/engine/query/JRQueryClauseContext;I)Ljava/lang/Class<*>;" },
    { "getForParameterTypesWithOrgOssPdfreporterEngineQueryJRClauseTokens:withOrgOssPdfreporterEngineQueryJRQueryClauseContext:withJavaUtilList:", "getForParameterTypes", "Lorg.oss.pdfreporter.engine.query.JRClauseFunction;", 0x4, NULL, "(Lorg/oss/pdfreporter/engine/query/JRClauseTokens;Lorg/oss/pdfreporter/engine/query/JRQueryClauseContext;Ljava/util/List<Ljava/lang/Class<*>;>;)Lorg/oss/pdfreporter/engine/query/JRClauseFunction;" },
    { "getCacheWithOrgOssPdfreporterEngineQueryJRQueryClauseContext:", "getCache", "Ljava.util.Map;", 0x4, NULL, "(Lorg/oss/pdfreporter/engine/query/JRQueryClauseContext;)Ljava/util/Map<Ljava/lang/Object;Lorg/oss/pdfreporter/engine/query/JRClauseFunction;>;" },
    { "parameterTypesFunctionCacheKeyWithOrgOssPdfreporterEngineQueryJRClauseTokens:withOrgOssPdfreporterEngineQueryJRQueryClauseContext:withJavaUtilList:", "parameterTypesFunctionCacheKey", "Ljava.lang.Object;", 0x4, NULL, "(Lorg/oss/pdfreporter/engine/query/JRClauseTokens;Lorg/oss/pdfreporter/engine/query/JRQueryClauseContext;Ljava/util/List<Ljava/lang/Class<*>;>;)Ljava/lang/Object;" },
    { "selectForParameterTypesWithOrgOssPdfreporterEngineQueryJRClauseTokens:withOrgOssPdfreporterEngineQueryJRQueryClauseContext:withJavaUtilList:", "selectForParameterTypes", "Lorg.oss.pdfreporter.engine.query.JRClauseFunction;", 0x4, NULL, "(Lorg/oss/pdfreporter/engine/query/JRClauseTokens;Lorg/oss/pdfreporter/engine/query/JRQueryClauseContext;Ljava/util/List<Ljava/lang/Class<*>;>;)Lorg/oss/pdfreporter/engine/query/JRClauseFunction;" },
    { "selectFromCandidatesWithJavaUtilList:", "selectFromCandidates", "Lorg.oss.pdfreporter.engine.query.JRClauseFunction;", 0x4, NULL, "(Ljava/util/List<Lorg/oss/pdfreporter/engine/util/Pair<Ljava/util/List<Ljava/lang/Class<*>;>;Lorg/oss/pdfreporter/engine/query/JRClauseFunction;>;>;)Lorg/oss/pdfreporter/engine/query/JRClauseFunction;" },
    { "findSupportedTypesWithOrgOssPdfreporterEngineQueryParameterTypesClauseFunction:withJavaUtilList:", "findSupportedTypes", "Ljava.util.List;", 0x4, NULL, "(Lorg/oss/pdfreporter/engine/query/ParameterTypesClauseFunction;Ljava/util/List<Ljava/lang/Class<*>;>;)Ljava/util/List<Ljava/lang/Class<*>;>;" },
    { "findSupportedTypeWithJavaUtilCollection:withIOSClass:", "findSupportedType", "Ljava.lang.Class;", 0x4, NULL, "(Ljava/util/Collection<Ljava/lang/Class<*>;>;Ljava/lang/Class<*>;)Ljava/lang/Class<*>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE", "CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE, NULL, .constantValue.asLong = 0 },
    { "parameterPositions_", NULL, 0x12, "[I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction = { 2, "ParameterTypeSelectorClauseFunction", "org.oss.pdfreporter.engine.query", NULL, 0x1, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction;
}

@end

void OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_initWithIntArray_(OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction *self, IOSIntArray *parameterPositions) {
  NSObject_init(self);
  self->parameterPositions_ = parameterPositions;
}

OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction *new_OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_initWithIntArray_(IOSIntArray *parameterPositions) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction, initWithIntArray_, parameterPositions)
}

OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction *create_OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_initWithIntArray_(IOSIntArray *parameterPositions) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction, initWithIntArray_, parameterPositions)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineQueryTypesCandidateComparator)

OrgOssPdfreporterEngineQueryTypesCandidateComparator *OrgOssPdfreporterEngineQueryTypesCandidateComparator_INSTANCE;

@implementation OrgOssPdfreporterEngineQueryTypesCandidateComparator

+ (OrgOssPdfreporterEngineQueryTypesCandidateComparator *)INSTANCE {
  return OrgOssPdfreporterEngineQueryTypesCandidateComparator_INSTANCE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineQueryTypesCandidateComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(OrgOssPdfreporterEngineUtilPair *)o1
               withId:(OrgOssPdfreporterEngineUtilPair *)o2 {
  id<JavaUtilList> types1 = [((OrgOssPdfreporterEngineUtilPair *) nil_chk(o1)) first];
  id<JavaUtilList> types2 = [((OrgOssPdfreporterEngineUtilPair *) nil_chk(o2)) first];
  if ([((id<JavaUtilList>) nil_chk(types1)) size] != [((id<JavaUtilList>) nil_chk(types2)) size]) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(JreStrcat("$I$I", @"Candidate types sizes do not match: ", [types1 size], @" vs ", [types2 size]));
  }
  jint order = 0;
  for (id<JavaUtilIterator> it1 = [types1 iterator], it2 = [types2 iterator]; [((id<JavaUtilIterator>) nil_chk(it1)) hasNext] && [((id<JavaUtilIterator>) nil_chk(it2)) hasNext]; ) {
    IOSClass *type1 = [it1 next];
    IOSClass *type2 = [((id<JavaUtilIterator>) nil_chk(it2)) next];
    jint typesOrder = [self compareTypesWithIOSClass:type1 withIOSClass:type2];
    if (typesOrder != 0) {
      order = typesOrder;
      break;
    }
  }
  return order;
}

- (jint)compareTypesWithIOSClass:(IOSClass *)type1
                    withIOSClass:(IOSClass *)type2 {
  if ([((IOSClass *) nil_chk(type1)) isEqual:type2]) {
    return 0;
  }
  if ([type1 isAssignableFrom:type2]) {
    return 1;
  }
  if ([((IOSClass *) nil_chk(type2)) isAssignableFrom:type1]) {
    return -1;
  }
  return [((NSString *) nil_chk([type1 getName])) compareToWithId:[type2 getName]];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineQueryTypesCandidateComparator class]) {
    OrgOssPdfreporterEngineQueryTypesCandidateComparator_INSTANCE = new_OrgOssPdfreporterEngineQueryTypesCandidateComparator_init();
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineQueryTypesCandidateComparator)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TypesCandidateComparator", NULL, 0x2, NULL, NULL },
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, "(Lorg/oss/pdfreporter/engine/util/Pair<Ljava/util/List<Ljava/lang/Class<*>;>;Lorg/oss/pdfreporter/engine/query/JRClauseFunction;>;Lorg/oss/pdfreporter/engine/util/Pair<Ljava/util/List<Ljava/lang/Class<*>;>;Lorg/oss/pdfreporter/engine/query/JRClauseFunction;>;)I" },
    { "compareTypesWithIOSClass:withIOSClass:", "compareTypes", "I", 0x4, NULL, "(Ljava/lang/Class<*>;Ljava/lang/Class<*>;)I" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "INSTANCE", 0x1c, "Lorg.oss.pdfreporter.engine.query.TypesCandidateComparator;", &OrgOssPdfreporterEngineQueryTypesCandidateComparator_INSTANCE, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineQueryTypesCandidateComparator = { 2, "TypesCandidateComparator", "org.oss.pdfreporter.engine.query", NULL, 0x10, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lorg/oss/pdfreporter/engine/util/Pair<Ljava/util/List<Ljava/lang/Class<*>;>;Lorg/oss/pdfreporter/engine/query/JRClauseFunction;>;>;" };
  return &_OrgOssPdfreporterEngineQueryTypesCandidateComparator;
}

@end

void OrgOssPdfreporterEngineQueryTypesCandidateComparator_init(OrgOssPdfreporterEngineQueryTypesCandidateComparator *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineQueryTypesCandidateComparator *new_OrgOssPdfreporterEngineQueryTypesCandidateComparator_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineQueryTypesCandidateComparator, init)
}

OrgOssPdfreporterEngineQueryTypesCandidateComparator *create_OrgOssPdfreporterEngineQueryTypesCandidateComparator_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineQueryTypesCandidateComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineQueryTypesCandidateComparator)
