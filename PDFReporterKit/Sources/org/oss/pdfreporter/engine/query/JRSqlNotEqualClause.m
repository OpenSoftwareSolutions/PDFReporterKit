//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/query/JRSqlNotEqualClause.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuffer.h"
#include "org/oss/pdfreporter/engine/JRValueParameter.h"
#include "org/oss/pdfreporter/engine/query/JRQueryClauseContext.h"
#include "org/oss/pdfreporter/engine/query/JRSqlAbstractEqualClause.h"
#include "org/oss/pdfreporter/engine/query/JRSqlNotEqualClause.h"

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineQueryJRSqlNotEqualClause)

NSString *OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_OPERATOR_NOT_EQUAL = @"<>";
NSString *OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_OPERATOR_IS_NOT_NULL = @"IS NOT NULL";
OrgOssPdfreporterEngineQueryJRSqlNotEqualClause *OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_singleton;

@implementation OrgOssPdfreporterEngineQueryJRSqlNotEqualClause

+ (NSString *)OPERATOR_NOT_EQUAL {
  return OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_OPERATOR_NOT_EQUAL;
}

+ (NSString *)OPERATOR_IS_NOT_NULL {
  return OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_OPERATOR_IS_NOT_NULL;
}

+ (OrgOssPdfreporterEngineQueryJRSqlNotEqualClause *)singleton {
  return OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_singleton;
}

+ (OrgOssPdfreporterEngineQueryJRSqlNotEqualClause *)instance {
  return OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_instance();
}

- (void)handleEqualOperatorWithJavaLangStringBuffer:(JavaLangStringBuffer *)sbuffer
                                       withNSString:(NSString *)param
withOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext {
  id paramValue = [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk([((id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>) nil_chk(queryContext)) getValueParameterWithNSString:param])) getValue];
  if (paramValue == nil) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_OPERATOR_IS_NOT_NULL];
  }
  else {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_OPERATOR_NOT_EQUAL];
    [self finalizeClauseWithJavaLangStringBuffer:sbuffer withNSString:param withOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineQueryJRSqlNotEqualClause class]) {
    OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_singleton = new_OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_init();
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineQueryJRSqlNotEqualClause)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "instance", NULL, "Lorg.oss.pdfreporter.engine.query.JRSqlNotEqualClause;", 0x9, NULL, NULL },
    { "handleEqualOperatorWithJavaLangStringBuffer:withNSString:withOrgOssPdfreporterEngineQueryJRQueryClauseContext:", "handleEqualOperator", "V", 0x4, NULL, NULL },
    { "init", "JRSqlNotEqualClause", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "OPERATOR_NOT_EQUAL", "OPERATOR_NOT_EQUAL", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_OPERATOR_NOT_EQUAL, NULL, .constantValue.asLong = 0 },
    { "OPERATOR_IS_NOT_NULL", "OPERATOR_IS_NOT_NULL", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_OPERATOR_IS_NOT_NULL, NULL, .constantValue.asLong = 0 },
    { "singleton", "singleton", 0x1c, "Lorg.oss.pdfreporter.engine.query.JRSqlNotEqualClause;", &OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_singleton, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineQueryJRSqlNotEqualClause = { 2, "JRSqlNotEqualClause", "org.oss.pdfreporter.engine.query", NULL, 0x1, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineQueryJRSqlNotEqualClause;
}

@end

OrgOssPdfreporterEngineQueryJRSqlNotEqualClause *OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_instance() {
  OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_initialize();
  return OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_singleton;
}

void OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_init(OrgOssPdfreporterEngineQueryJRSqlNotEqualClause *self) {
  OrgOssPdfreporterEngineQueryJRSqlAbstractEqualClause_init(self);
}

OrgOssPdfreporterEngineQueryJRSqlNotEqualClause *new_OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineQueryJRSqlNotEqualClause, init)
}

OrgOssPdfreporterEngineQueryJRSqlNotEqualClause *create_OrgOssPdfreporterEngineQueryJRSqlNotEqualClause_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineQueryJRSqlNotEqualClause, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineQueryJRSqlNotEqualClause)
