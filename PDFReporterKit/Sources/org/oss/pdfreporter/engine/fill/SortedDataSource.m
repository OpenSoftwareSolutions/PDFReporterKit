//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fill/SortedDataSource.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRField.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/fill/SortedDataSource.h"

@interface OrgOssPdfreporterEngineFillSortedDataSource () {
 @public
  id<JavaUtilList> records_;
  IOSObjectArray *recordIndexes_;
  id<JavaUtilMap> columnNamesMap_;
  jint currentIndex_;
  OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *currentRecord_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillSortedDataSource, records_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillSortedDataSource, recordIndexes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillSortedDataSource, columnNamesMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillSortedDataSource, currentRecord_, OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *)

@interface OrgOssPdfreporterEngineFillSortedDataSource_SortRecord () {
 @public
  IOSObjectArray *values_;
  jint recordIndex_;
  jboolean filtered_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillSortedDataSource_SortRecord, values_, IOSObjectArray *)

@implementation OrgOssPdfreporterEngineFillSortedDataSource

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)records
            withJavaLangIntegerArray:(IOSObjectArray *)recordIndexes
                   withNSStringArray:(IOSObjectArray *)columnNames {
  OrgOssPdfreporterEngineFillSortedDataSource_initWithJavaUtilList_withJavaLangIntegerArray_withNSStringArray_(self, records, recordIndexes, columnNames);
  return self;
}

- (jboolean)next {
  if (currentIndex_ >= ((IOSObjectArray *) nil_chk(recordIndexes_))->size_) {
    return false;
  }
  jint recordIndex = [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(recordIndexes_, currentIndex_))) intValue];
  currentRecord_ = [((id<JavaUtilList>) nil_chk(records_)) getWithInt:recordIndex];
  ++currentIndex_;
  return true;
}

- (void)setRecordFilteredIndexWithInt:(jint)index {
  [((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk(currentRecord_)) markFiltered];
  [((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk(currentRecord_)) setRecordIndexWithInt:index];
}

- (id)getFieldValueWithOrgOssPdfreporterEngineJRField:(id<OrgOssPdfreporterEngineJRField>)jrField {
  JavaLangInteger *fieldIndex = [((id<JavaUtilMap>) nil_chk(columnNamesMap_)) getWithId:[((id<OrgOssPdfreporterEngineJRField>) nil_chk(jrField)) getName]];
  if (fieldIndex == nil) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(JreStrcat("$$$", @"Field \"", [jrField getName], @"\" not found in data source."));
  }
  return [((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk(currentRecord_)) fieldValueWithInt:[fieldIndex intValue]];
}

- (void)moveFirst {
  currentIndex_ = 0;
}

- (jint)getRecordIndex {
  return [((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk(currentRecord_)) getRecordIndex];
}

- (id<JavaUtilList>)getRecords {
  return records_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:withJavaLangIntegerArray:withNSStringArray:", "SortedDataSource", NULL, 0x1, NULL, "(Ljava/util/List<Lorg/oss/pdfreporter/engine/fill/SortedDataSource$SortRecord;>;[Ljava/lang/Integer;[Ljava/lang/String;)V" },
    { "next", NULL, "Z", 0x1, NULL, NULL },
    { "setRecordFilteredIndexWithInt:", "setRecordFilteredIndex", "V", 0x1, NULL, NULL },
    { "getFieldValueWithOrgOssPdfreporterEngineJRField:", "getFieldValue", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "moveFirst", NULL, "V", 0x1, NULL, NULL },
    { "getRecordIndex", NULL, "I", 0x1, NULL, NULL },
    { "getRecords", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/engine/fill/SortedDataSource$SortRecord;>;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "records_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/engine/fill/SortedDataSource$SortRecord;>;", .constantValue.asLong = 0 },
    { "recordIndexes_", NULL, 0x12, "[Ljava.lang.Integer;", NULL, NULL, .constantValue.asLong = 0 },
    { "columnNamesMap_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
    { "currentIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "currentRecord_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.fill.SortedDataSource$SortRecord;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.engine.fill.SortedDataSource$SortRecord;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillSortedDataSource = { 2, "SortedDataSource", "org.oss.pdfreporter.engine.fill", NULL, 0x1, 7, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillSortedDataSource;
}

@end

void OrgOssPdfreporterEngineFillSortedDataSource_initWithJavaUtilList_withJavaLangIntegerArray_withNSStringArray_(OrgOssPdfreporterEngineFillSortedDataSource *self, id<JavaUtilList> records, IOSObjectArray *recordIndexes, IOSObjectArray *columnNames) {
  NSObject_init(self);
  self->columnNamesMap_ = new_JavaUtilHashMap_init();
  if ([((id<JavaUtilList>) nil_chk(records)) size] != ((IOSObjectArray *) nil_chk(recordIndexes))->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Record count ", [records size], @" doesn't match index count ", recordIndexes->size_));
  }
  self->records_ = records;
  self->recordIndexes_ = recordIndexes;
  if (columnNames != nil) {
    for (jint i = 0; i < columnNames->size_; i++) {
      (void) [self->columnNamesMap_ putWithId:IOSObjectArray_Get(columnNames, i) withId:JavaLangInteger_valueOfWithInt_(i)];
    }
  }
  self->currentIndex_ = 0;
}

OrgOssPdfreporterEngineFillSortedDataSource *new_OrgOssPdfreporterEngineFillSortedDataSource_initWithJavaUtilList_withJavaLangIntegerArray_withNSStringArray_(id<JavaUtilList> records, IOSObjectArray *recordIndexes, IOSObjectArray *columnNames) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillSortedDataSource, initWithJavaUtilList_withJavaLangIntegerArray_withNSStringArray_, records, recordIndexes, columnNames)
}

OrgOssPdfreporterEngineFillSortedDataSource *create_OrgOssPdfreporterEngineFillSortedDataSource_initWithJavaUtilList_withJavaLangIntegerArray_withNSStringArray_(id<JavaUtilList> records, IOSObjectArray *recordIndexes, IOSObjectArray *columnNames) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillSortedDataSource, initWithJavaUtilList_withJavaLangIntegerArray_withNSStringArray_, records, recordIndexes, columnNames)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillSortedDataSource)

@implementation OrgOssPdfreporterEngineFillSortedDataSource_SortRecord

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)values
                              withInt:(jint)recordIndex {
  OrgOssPdfreporterEngineFillSortedDataSource_SortRecord_initWithNSObjectArray_withInt_(self, values, recordIndex);
  return self;
}

- (void)markFiltered {
  filtered_ = true;
}

- (id)fieldValueWithInt:(jint)fieldIdx {
  return IOSObjectArray_Get(nil_chk(values_), fieldIdx);
}

- (IOSObjectArray *)getValues {
  return values_;
}

- (void)setRecordIndexWithInt:(jint)recordIndex {
  self->recordIndex_ = recordIndex;
}

- (jint)getRecordIndex {
  return recordIndex_;
}

- (jboolean)isFiltered {
  return filtered_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSObjectArray:withInt:", "SortRecord", NULL, 0x1, NULL, NULL },
    { "markFiltered", NULL, "V", 0x4, NULL, NULL },
    { "fieldValueWithInt:", "fieldValue", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "getValues", NULL, "[Ljava.lang.Object;", 0x1, NULL, NULL },
    { "setRecordIndexWithInt:", "setRecordIndex", "V", 0x4, NULL, NULL },
    { "getRecordIndex", NULL, "I", 0x1, NULL, NULL },
    { "isFiltered", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "values_", NULL, 0x12, "[Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "recordIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "filtered_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillSortedDataSource_SortRecord = { 2, "SortRecord", "org.oss.pdfreporter.engine.fill", "SortedDataSource", 0x9, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillSortedDataSource_SortRecord;
}

@end

void OrgOssPdfreporterEngineFillSortedDataSource_SortRecord_initWithNSObjectArray_withInt_(OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *self, IOSObjectArray *values, jint recordIndex) {
  NSObject_init(self);
  self->values_ = values;
  self->recordIndex_ = recordIndex;
  self->filtered_ = false;
}

OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *new_OrgOssPdfreporterEngineFillSortedDataSource_SortRecord_initWithNSObjectArray_withInt_(IOSObjectArray *values, jint recordIndex) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillSortedDataSource_SortRecord, initWithNSObjectArray_withInt_, values, recordIndex)
}

OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *create_OrgOssPdfreporterEngineFillSortedDataSource_SortRecord_initWithNSObjectArray_withInt_(IOSObjectArray *values, jint recordIndex) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillSortedDataSource_SortRecord, initWithNSObjectArray_withInt_, values, recordIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillSortedDataSource_SortRecord)
