//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillTextField.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/Date.h"
#include "java/util/TimeZone.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintHyperlinkParameters.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRTextField.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRFillHyperlinkHelper.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillTextElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillTextField.h"
#include "org/oss/pdfreporter/engine/fill/JRRecordedValuesPrintText.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplatePrintText.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateText.h"
#include "org/oss/pdfreporter/engine/fill/SimpleTextFormat.h"
#include "org/oss/pdfreporter/engine/fill/TextFormat.h"
#include "org/oss/pdfreporter/engine/type/EvaluationTimeEnum.h"
#include "org/oss/pdfreporter/engine/type/HyperlinkTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/PositionTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/util/JRDataUtils.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/text/bundle/StringLocale.h"
#include "org/oss/pdfreporter/text/format/IFormat.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@interface OrgOssPdfreporterEngineFillJRFillTextField () {
 @public
  id<OrgOssPdfreporterEngineJRGroup> evaluationGroup_;
  id value_;
  id<OrgOssPdfreporterEngineFillTextFormat> textFormat_;
  NSString *pattern_;
  NSString *anchorName_;
  NSString *hyperlinkReference_;
  NSString *hyperlinkAnchor_;
  JavaLangInteger *hyperlinkPage_;
  NSString *hyperlinkTooltip_;
  OrgOssPdfreporterEngineJRPrintHyperlinkParameters *hyperlinkParameters_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextField, evaluationGroup_, id<OrgOssPdfreporterEngineJRGroup>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextField, value_, id)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextField, textFormat_, id<OrgOssPdfreporterEngineFillTextFormat>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextField, pattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextField, anchorName_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextField, hyperlinkReference_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextField, hyperlinkAnchor_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextField, hyperlinkPage_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextField, hyperlinkTooltip_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextField, hyperlinkParameters_, OrgOssPdfreporterEngineJRPrintHyperlinkParameters *)

inline JavaUtilLoggingLogger *OrgOssPdfreporterEngineFillJRFillTextField_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterEngineFillJRFillTextField_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFillJRFillTextField, logger, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineFillJRFillTextField)

@implementation OrgOssPdfreporterEngineFillJRFillTextField

- (instancetype)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                         withOrgOssPdfreporterEngineJRTextField:(id<OrgOssPdfreporterEngineJRTextField>)textField
             withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillTextField_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRTextField_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, filler, textField, factory);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterEngineFillJRFillTextField:(OrgOssPdfreporterEngineFillJRFillTextField *)textField
                 withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillTextField_initWithOrgOssPdfreporterEngineFillJRFillTextField_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(self, textField, factory);
  return self;
}

- (jboolean)isStretchWithOverflow {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) isStretchWithOverflow];
}

- (void)setStretchWithOverflowWithBoolean:(jboolean)isStretchWithOverflow {
}

- (OrgOssPdfreporterEngineTypeEvaluationTimeEnum *)getEvaluationTimeValue {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getEvaluationTimeValue];
}

- (id<OrgOssPdfreporterEngineFillTextFormat>)getTextFormat {
  return textFormat_;
}

- (NSString *)getPattern {
  if ([self getPatternExpression] == nil) {
    return OrgOssPdfreporterEngineUtilJRStyleResolver_getPatternWithOrgOssPdfreporterEngineJRTextField_(self);
  }
  return pattern_;
}

- (NSString *)getOwnPattern {
  return providerStyle_ == nil || [providerStyle_ getOwnPattern] == nil ? [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(self->parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getOwnPattern] : [providerStyle_ getOwnPattern];
}

- (void)setPatternWithNSString:(NSString *)pattern {
}

- (jboolean)isBlankWhenNull {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isBlankWhenNullWithOrgOssPdfreporterEngineJRTextField_(self);
}

- (JavaLangBoolean *)isOwnBlankWhenNull {
  return providerStyle_ == nil || [providerStyle_ isOwnBlankWhenNull] == nil ? [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(self->parent_, OrgOssPdfreporterEngineJRTextField_class_())))) isOwnBlankWhenNull] : [providerStyle_ isOwnBlankWhenNull];
}

- (void)setBlankWhenNullWithBoolean:(jboolean)isBlank {
}

- (void)setBlankWhenNullWithJavaLangBoolean:(JavaLangBoolean *)isBlank {
}

- (jbyte)getHyperlinkType {
  return [((OrgOssPdfreporterEngineTypeHyperlinkTypeEnum *) nil_chk([self getHyperlinkTypeValue])) getValue];
}

- (OrgOssPdfreporterEngineTypeHyperlinkTypeEnum *)getHyperlinkTypeValue {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getHyperlinkTypeValue];
}

- (jbyte)getHyperlinkTarget {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getHyperlinkTarget];
}

- (NSString *)getLinkTarget {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getLinkTarget];
}

- (id<OrgOssPdfreporterEngineJRGroup>)getEvaluationGroup {
  return evaluationGroup_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getPatternExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getPatternExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getAnchorNameExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getAnchorNameExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getHyperlinkReferenceExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getHyperlinkReferenceExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getHyperlinkAnchorExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getHyperlinkAnchorExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getHyperlinkPageExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getHyperlinkPageExpression];
}

- (id)getValue {
  return value_;
}

- (NSString *)getAnchorName {
  return anchorName_;
}

- (NSString *)getHyperlinkReference {
  return hyperlinkReference_;
}

- (NSString *)getHyperlinkAnchor {
  return hyperlinkAnchor_;
}

- (JavaLangInteger *)getHyperlinkPage {
  return hyperlinkPage_;
}

- (NSString *)getHyperlinkTooltip {
  return hyperlinkTooltip_;
}

- (OrgOssPdfreporterEngineFillJRTemplateText *)getJRTemplateText {
  return (OrgOssPdfreporterEngineFillJRTemplateText *) cast_chk([self getElementTemplate], [OrgOssPdfreporterEngineFillJRTemplateText class]);
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)createElementTemplate {
  OrgOssPdfreporterEngineFillJRTemplateText *template_ = new_OrgOssPdfreporterEngineFillJRTemplateText_initWithOrgOssPdfreporterEngineJROrigin_withOrgOssPdfreporterEngineJRDefaultStyleProvider_withOrgOssPdfreporterEngineJRTextField_([self getElementOrigin], [((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) getDefaultStyleProvider], self);
  return template_;
}

- (void)evaluateTextFormatWithOrgOssPdfreporterTextFormatIFormat:(id<OrgOssPdfreporterTextFormatIFormat>)format
                                                          withId:(id)value
                                            withJavaUtilTimeZone:(JavaUtilTimeZone *)ownTimeZone {
  if (value != nil) {
    if (!([value isKindOfClass:[NSString class]])) {
      OrgOssPdfreporterEngineFillSimpleTextFormat *simpleTextFormat = new_OrgOssPdfreporterEngineFillSimpleTextFormat_init();
      [simpleTextFormat setValueClassNameWithNSString:[[value getClass] getName]];
      NSString *pattern = [self getTemplatePatternWithOrgOssPdfreporterTextFormatIFormat:format withId:value];
      if (pattern != nil) {
        [simpleTextFormat setPatternWithNSString:pattern];
      }
      if (![((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) hasMasterFormatFactory]) {
        [simpleTextFormat setFormatFactoryClassWithNSString:[[((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getFormatFactory])) getClass] getName]];
      }
      if (![((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) hasMasterLocale]) {
        [simpleTextFormat setLocaleCodeWithNSString:OrgOssPdfreporterEngineUtilJRDataUtils_getLocaleCodeWithOrgOssPdfreporterTextBundleStringLocale_([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getLocale])];
      }
      if ([value isKindOfClass:[JavaUtilDate class]]) {
        JavaUtilTimeZone *formatTimeZone = ownTimeZone == nil ? [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getTimeZone] : ownTimeZone;
        if (![formatTimeZone isEqual:[((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_))->fillContext_)) getMasterTimeZone]]) {
          [simpleTextFormat setTimeZoneIdWithNSString:OrgOssPdfreporterEngineUtilJRDataUtils_getTimeZoneIdWithJavaUtilTimeZone_(formatTimeZone)];
        }
      }
      textFormat_ = simpleTextFormat;
    }
  }
}

- (JavaUtilTimeZone *)toFormatTimeZoneWithNSString:(NSString *)timezoneId {
  if (timezoneId == nil || [timezoneId isEmpty]) {
    return nil;
  }
  if ([timezoneId isEqual:OrgOssPdfreporterEngineJRTextField_FORMAT_TIMEZONE_SYSTEM]) {
    return JavaUtilTimeZone_getDefault();
  }
  return JavaUtilTimeZone_getTimeZoneWithNSString_(timezoneId);
}

- (void)evaluateWithByte:(jbyte)evaluation {
  [self initDelayedEvaluations];
  [self reset];
  [self evaluatePrintWhenExpressionWithByte:evaluation];
  if ([self isPrintWhenExpressionNull] || [self isPrintWhenTrue]) {
    if ([self isEvaluateNow]) {
      [self evaluateTextWithByte:evaluation];
    }
  }
}

- (void)evaluateTextWithByte:(jbyte)evaluation {
  [self evaluatePropertiesWithByte:evaluation];
  [self evaluateStyleWithByte:evaluation];
  value_ = [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getExpression] withByte:evaluation];
  NSString *strValue = nil;
  pattern_ = (NSString *) cast_chk([self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getPatternExpression] withByte:evaluation], [NSString class]);
  if (value_ == nil) {
    if ([self isBlankWhenNull]) {
      strValue = @"";
    }
    else {
      strValue = nil;
    }
  }
  else {
    JavaUtilTimeZone *ownTimeZone = nil;
    if ([value_ isKindOfClass:[JavaUtilDate class]]) {
      NSString *ownTimezoneId = [self hasProperties] ? [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([self getPropertiesMap])) getPropertyWithNSString:OrgOssPdfreporterEngineJRTextField_PROPERTY_FORMAT_TIMEZONE] : nil;
      ownTimeZone = [self toFormatTimeZoneWithNSString:ownTimezoneId];
    }
    id<OrgOssPdfreporterTextFormatIFormat> format = [self getFormatWithId:value_ withJavaUtilTimeZone:ownTimeZone];
    [self evaluateTextFormatWithOrgOssPdfreporterTextFormatIFormat:format withId:value_ withJavaUtilTimeZone:ownTimeZone];
    if (format == nil) {
      strValue = [nil_chk(value_) description];
    }
    else {
      strValue = [format formatWithId:value_];
    }
  }
  NSString *oldRawText = [self getRawText];
  NSString *newRawText = [self processMarkupTextWithNSString:NSString_valueOf_(strValue)];
  [self setRawTextWithNSString:newRawText];
  [self resetTextChunk];
  [self setValueRepeatingWithBoolean:(oldRawText == nil && newRawText == nil) || (oldRawText != nil && [oldRawText isEqual:newRawText])];
  anchorName_ = (NSString *) cast_chk([self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getAnchorNameExpression] withByte:evaluation], [NSString class]);
  hyperlinkReference_ = (NSString *) cast_chk([self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkReferenceExpression] withByte:evaluation], [NSString class]);
  hyperlinkAnchor_ = (NSString *) cast_chk([self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkAnchorExpression] withByte:evaluation], [NSString class]);
  hyperlinkPage_ = (JavaLangInteger *) cast_chk([self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkPageExpression] withByte:evaluation], [JavaLangInteger class]);
  hyperlinkTooltip_ = (NSString *) cast_chk([self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkTooltipExpression] withByte:evaluation], [NSString class]);
  hyperlinkParameters_ = OrgOssPdfreporterEngineFillJRFillHyperlinkHelper_evaluateHyperlinkParametersWithOrgOssPdfreporterEngineJRHyperlink_withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator_withByte_(self, expressionEvaluator_, evaluation);
}

- (jboolean)prepareWithInt:(jint)availableHeight
               withBoolean:(jboolean)isOverflow {
  jboolean willOverflow = false;
  [super prepareWithInt:availableHeight withBoolean:isOverflow];
  if (![self isToPrint]) {
    return willOverflow;
  }
  jboolean isToPrint = true;
  jboolean isReprinted = false;
  if ([self isEvaluateNow]) {
    if (isOverflow) {
      if ([self getPositionTypeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypePositionTypeEnum, FIX_RELATIVE_TO_BOTTOM)) {
        [self resetTextChunk];
      }
      if ([self getTextEnd] >= ((jint) [((NSString *) nil_chk([self getText])) length]) || ![self isStretchWithOverflow] || ![((OrgOssPdfreporterEngineTypeRotationEnum *) nil_chk([self getRotationValue])) isEqual:JreLoadEnum(OrgOssPdfreporterEngineTypeRotationEnum, NONE)]) {
        if ([self isAlreadyPrinted]) {
          if ([self isPrintWhenDetailOverflows]) {
            [self resetTextChunk];
            isReprinted = true;
          }
          else {
            isToPrint = false;
          }
        }
      }
      if (isToPrint && [self isPrintWhenExpressionNull] && ![self isPrintRepeatedValues] && [self isValueRepeating]) {
        isToPrint = false;
      }
    }
    else {
      if ([self isPrintWhenExpressionNull] && ![self isPrintRepeatedValues] && [self isValueRepeating]) {
        if ((![self isPrintInFirstWholeBand] || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isFirstWholeOnPageColumn]) && ([self getPrintWhenGroupChanges] == nil || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isNewGroupWithOrgOssPdfreporterEngineJRGroup:[self getPrintWhenGroupChanges]])) {
          isToPrint = false;
        }
      }
    }
    if (isToPrint) {
      if (availableHeight >= [self getRelativeY] + [self getHeight]) {
        if ([self getTextEnd] < ((jint) [((NSString *) nil_chk([self getText])) length]) || [self getTextEnd] == 0) {
          if ([self isStretchWithOverflow] && [((OrgOssPdfreporterEngineTypeRotationEnum *) nil_chk([self getRotationValue])) isEqual:JreLoadEnum(OrgOssPdfreporterEngineTypeRotationEnum, NONE)]) {
            [self chopTextElementWithInt:availableHeight - [self getRelativeY] - [self getHeight]];
            if ([self getTextEnd] < ((jint) [((NSString *) nil_chk([self getText])) length])) {
              willOverflow = true;
            }
          }
          else {
            [self chopTextElementWithInt:0];
          }
        }
        else {
          isToPrint = false;
        }
      }
      else {
        isToPrint = false;
        willOverflow = true;
      }
    }
    if (isToPrint && [self isRemoveLineWhenBlank] && ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([self getText])) substring:[self getTextStart] endIndex:[self getTextEnd]])) trim])) length]) == 0) {
      isToPrint = false;
    }
  }
  else {
    if (isOverflow && [self isAlreadyPrinted]) {
      if ([self isPrintWhenDetailOverflows]) {
        isReprinted = true;
      }
      else {
        isToPrint = false;
      }
    }
    if (isToPrint && availableHeight < [self getRelativeY] + [self getHeight]) {
      isToPrint = false;
      willOverflow = true;
    }
  }
  [self setToPrintWithBoolean:isToPrint];
  [self setReprintedWithBoolean:isReprinted];
  return willOverflow;
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)fill {
  OrgOssPdfreporterEngineTypeEvaluationTimeEnum *evaluationTime = [self getEvaluationTimeValue];
  OrgOssPdfreporterEngineFillJRTemplatePrintText *text;
  OrgOssPdfreporterEngineFillJRRecordedValuesPrintText *recordedValuesText;
  if ([self isEvaluateAuto]) {
    text = recordedValuesText = new_OrgOssPdfreporterEngineFillJRRecordedValuesPrintText_initWithOrgOssPdfreporterEngineFillJRTemplateText_withInt_([self getJRTemplateText], elementId_);
  }
  else {
    text = new_OrgOssPdfreporterEngineFillJRTemplatePrintText_initWithOrgOssPdfreporterEngineFillJRTemplateText_withInt_([self getJRTemplateText], elementId_);
    recordedValuesText = nil;
  }
  [text setUUIDWithOrgOssPdfreporterUsesJavaUtilUUID:[self getUUID]];
  [text setXWithInt:[self getX]];
  [text setYWithInt:[self getRelativeY]];
  [text setWidthWithInt:[self getWidth]];
  [text setHeightWithInt:[self getPrintElementHeight]];
  [text setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnum:[self getRunDirectionValue]];
  if ([self isEvaluateNow]) {
    [self copy__WithOrgOssPdfreporterEngineJRPrintText:text];
  }
  else if ([self isEvaluateAuto]) {
    [self initDelayedEvaluationPrintWithOrgOssPdfreporterEngineFillJRRecordedValuesPrintElement:recordedValuesText];
  }
  else {
    [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) addBoundElementWithOrgOssPdfreporterEngineFillJRFillElement:self withOrgOssPdfreporterEngineJRPrintElement:text withOrgOssPdfreporterEngineTypeEvaluationTimeEnum:evaluationTime withOrgOssPdfreporterEngineJRGroup:[self getEvaluationGroup] withOrgOssPdfreporterEngineFillJRFillBand:band_];
  }
  return text;
}

- (void)copy__WithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text {
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setLineSpacingFactorWithFloat:[self getLineSpacingFactor]];
  [text setLeadingOffsetWithFloat:[self getLeadingOffset]];
  [text setTextHeightWithFloat:[self getTextHeight]];
  [text setValueWithId:[self getValue]];
  [self setPrintTextWithOrgOssPdfreporterEngineJRPrintText:text];
  [text setTextFormatWithOrgOssPdfreporterEngineFillTextFormat:[self getTextFormat]];
  [text setAnchorNameWithNSString:[self getAnchorName]];
  [text setHyperlinkReferenceWithNSString:[self getHyperlinkReference]];
  [text setHyperlinkAnchorWithNSString:[self getHyperlinkAnchor]];
  [text setHyperlinkPageWithJavaLangInteger:[self getHyperlinkPage]];
  [text setHyperlinkTooltipWithNSString:[self getHyperlinkTooltip]];
  [text setBookmarkLevelWithInt:[self getBookmarkLevel]];
  [text setHyperlinkParametersWithOrgOssPdfreporterEngineJRPrintHyperlinkParameters:hyperlinkParameters_];
  [self transferPropertiesWithOrgOssPdfreporterEngineJRPrintElement:text];
}

- (id<OrgOssPdfreporterTextFormatIFormat>)getFormatWithId:(id)value
                                     withJavaUtilTimeZone:(JavaUtilTimeZone *)ownTimeZone {
  id<OrgOssPdfreporterTextFormatIFormat> format = nil;
  if ([value isKindOfClass:[JavaUtilDate class]]) {
    format = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getDateFormatWithNSString:[self getPattern] withJavaUtilTimeZone:ownTimeZone];
  }
  else if ([value isKindOfClass:[NSNumber class]]) {
    format = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getNumberFormatWithNSString:[self getPattern]];
  }
  return format;
}

- (NSString *)getTemplatePatternWithOrgOssPdfreporterTextFormatIFormat:(id<OrgOssPdfreporterTextFormatIFormat>)format
                                                                withId:(id)value {
  NSString *pattern = nil;
  NSString *originalPattern = [self getPattern];
  if (pattern == nil) {
    pattern = originalPattern;
  }
  return pattern;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRTextField:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitTextFieldWithOrgOssPdfreporterEngineJRTextField:self];
}

- (void)resolveElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withByte:(jbyte)evaluation {
  [self evaluateTextWithByte:evaluation];
  [self chopTextElementWithInt:0];
  [self copy__WithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>) cast_check(element, OrgOssPdfreporterEngineJRPrintText_class_())];
}

- (jint)getBookmarkLevel {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getBookmarkLevel];
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  return new_OrgOssPdfreporterEngineFillJRFillTextField_initWithOrgOssPdfreporterEngineFillJRFillTextField_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(self, factory);
}

- (void)collectDelayedEvaluations {
  [super collectDelayedEvaluations];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getPatternExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getAnchorNameExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkReferenceExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkAnchorExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkPageExpression]];
}

- (IOSObjectArray *)getHyperlinkParameters {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getHyperlinkParameters];
}

- (NSString *)getLinkType {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getLinkType];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getHyperlinkTooltipExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(((id<OrgOssPdfreporterEngineJRTextField>) cast_check(parent_, OrgOssPdfreporterEngineJRTextField_class_())))) getHyperlinkTooltipExpression];
}

- (jboolean)canOverflow {
  return [self isStretchWithOverflow] && [((OrgOssPdfreporterEngineTypeRotationEnum *) nil_chk([self getRotationValue])) isEqual:JreLoadEnum(OrgOssPdfreporterEngineTypeRotationEnum, NONE)] && [self isEvaluateNow] && [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) isBandOverFlowAllowed];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillJRFillTextField class]) {
    OrgOssPdfreporterEngineFillJRFillTextField_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterEngineFillJRFillTextField_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineFillJRFillTextField)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineFillJRBaseFiller:withOrgOssPdfreporterEngineJRTextField:withOrgOssPdfreporterEngineFillJRFillObjectFactory:", "JRFillTextField", NULL, 0x4, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineFillJRFillTextField:withOrgOssPdfreporterEngineFillJRFillCloneFactory:", "JRFillTextField", NULL, 0x4, NULL, NULL },
    { "isStretchWithOverflow", NULL, "Z", 0x1, NULL, NULL },
    { "setStretchWithOverflowWithBoolean:", "setStretchWithOverflow", "V", 0x1, NULL, NULL },
    { "getEvaluationTimeValue", NULL, "Lorg.oss.pdfreporter.engine.type.EvaluationTimeEnum;", 0x1, NULL, NULL },
    { "getTextFormat", NULL, "Lorg.oss.pdfreporter.engine.fill.TextFormat;", 0x4, NULL, NULL },
    { "getPattern", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOwnPattern", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setPatternWithNSString:", "setPattern", "V", 0x1, NULL, NULL },
    { "isBlankWhenNull", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnBlankWhenNull", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setBlankWhenNullWithBoolean:", "setBlankWhenNull", "V", 0x1, NULL, NULL },
    { "setBlankWhenNullWithJavaLangBoolean:", "setBlankWhenNull", "V", 0x1, NULL, NULL },
    { "getHyperlinkType", NULL, "B", 0x1, NULL, NULL },
    { "getHyperlinkTypeValue", NULL, "Lorg.oss.pdfreporter.engine.type.HyperlinkTypeEnum;", 0x1, NULL, NULL },
    { "getHyperlinkTarget", NULL, "B", 0x1, NULL, NULL },
    { "getLinkTarget", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getEvaluationGroup", NULL, "Lorg.oss.pdfreporter.engine.JRGroup;", 0x1, NULL, NULL },
    { "getExpression", NULL, "Lorg.oss.pdfreporter.engine.JRExpression;", 0x1, NULL, NULL },
    { "getPatternExpression", NULL, "Lorg.oss.pdfreporter.engine.JRExpression;", 0x1, NULL, NULL },
    { "getAnchorNameExpression", NULL, "Lorg.oss.pdfreporter.engine.JRExpression;", 0x1, NULL, NULL },
    { "getHyperlinkReferenceExpression", NULL, "Lorg.oss.pdfreporter.engine.JRExpression;", 0x1, NULL, NULL },
    { "getHyperlinkAnchorExpression", NULL, "Lorg.oss.pdfreporter.engine.JRExpression;", 0x1, NULL, NULL },
    { "getHyperlinkPageExpression", NULL, "Lorg.oss.pdfreporter.engine.JRExpression;", 0x1, NULL, NULL },
    { "getValue", NULL, "Ljava.lang.Object;", 0x4, NULL, NULL },
    { "getAnchorName", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getHyperlinkReference", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getHyperlinkAnchor", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getHyperlinkPage", NULL, "Ljava.lang.Integer;", 0x4, NULL, NULL },
    { "getHyperlinkTooltip", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getJRTemplateText", NULL, "Lorg.oss.pdfreporter.engine.fill.JRTemplateText;", 0x4, NULL, NULL },
    { "createElementTemplate", NULL, "Lorg.oss.pdfreporter.engine.fill.JRTemplateElement;", 0x4, NULL, NULL },
    { "evaluateTextFormatWithOrgOssPdfreporterTextFormatIFormat:withId:withJavaUtilTimeZone:", "evaluateTextFormat", "V", 0x4, NULL, NULL },
    { "toFormatTimeZoneWithNSString:", "toFormatTimeZone", "Ljava.util.TimeZone;", 0x4, NULL, NULL },
    { "evaluateWithByte:", "evaluate", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "evaluateTextWithByte:", "evaluateText", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "prepareWithInt:withBoolean:", "prepare", "Z", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "fill", NULL, "Lorg.oss.pdfreporter.engine.JRPrintElement;", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "copy__WithOrgOssPdfreporterEngineJRPrintText:", "copy", "V", 0x4, NULL, NULL },
    { "getFormatWithId:withJavaUtilTimeZone:", "getFormat", "Lorg.oss.pdfreporter.text.format.IFormat;", 0x4, NULL, NULL },
    { "getTemplatePatternWithOrgOssPdfreporterTextFormatIFormat:withId:", "getTemplatePattern", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:", "collectExpressions", "V", 0x1, NULL, NULL },
    { "visitWithOrgOssPdfreporterEngineJRVisitor:", "visit", "V", 0x1, NULL, NULL },
    { "resolveElementWithOrgOssPdfreporterEngineJRPrintElement:withByte:", "resolveElement", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "getBookmarkLevel", NULL, "I", 0x1, NULL, NULL },
    { "createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:", "createClone", "Lorg.oss.pdfreporter.engine.fill.JRFillCloneable;", 0x1, NULL, NULL },
    { "collectDelayedEvaluations", NULL, "V", 0x4, NULL, NULL },
    { "getHyperlinkParameters", NULL, "[Lorg.oss.pdfreporter.engine.JRHyperlinkParameter;", 0x1, NULL, NULL },
    { "getLinkType", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getHyperlinkTooltipExpression", NULL, "Lorg.oss.pdfreporter.engine.JRExpression;", 0x1, NULL, NULL },
    { "canOverflow", NULL, "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterEngineFillJRFillTextField_logger, NULL, .constantValue.asLong = 0 },
    { "evaluationGroup_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.JRGroup;", NULL, NULL, .constantValue.asLong = 0 },
    { "value_", NULL, 0x2, "Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "textFormat_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.fill.TextFormat;", NULL, NULL, .constantValue.asLong = 0 },
    { "pattern_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "anchorName_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "hyperlinkReference_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "hyperlinkAnchor_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "hyperlinkPage_", NULL, 0x2, "Ljava.lang.Integer;", NULL, NULL, .constantValue.asLong = 0 },
    { "hyperlinkTooltip_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "hyperlinkParameters_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.JRPrintHyperlinkParameters;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillJRFillTextField = { 2, "JRFillTextField", "org.oss.pdfreporter.engine.fill", NULL, 0x1, 51, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillJRFillTextField;
}

@end

void OrgOssPdfreporterEngineFillJRFillTextField_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRTextField_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRFillTextField *self, OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterEngineJRTextField> textField, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  OrgOssPdfreporterEngineFillJRFillTextElement_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRTextElement_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, filler, textField, factory);
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRFillTextField_logger)) finestWithNSString:JreStrcat("$I", @"Expression: ", [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk([self getExpression])) getId])];
  self->evaluationGroup_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getGroupWithOrgOssPdfreporterEngineJRGroup:[((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(textField)) getEvaluationGroup]];
}

OrgOssPdfreporterEngineFillJRFillTextField *new_OrgOssPdfreporterEngineFillJRFillTextField_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRTextField_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterEngineJRTextField> textField, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillJRFillTextField, initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRTextField_withOrgOssPdfreporterEngineFillJRFillObjectFactory_, filler, textField, factory)
}

OrgOssPdfreporterEngineFillJRFillTextField *create_OrgOssPdfreporterEngineFillJRFillTextField_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRTextField_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterEngineJRTextField> textField, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillJRFillTextField, initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRTextField_withOrgOssPdfreporterEngineFillJRFillObjectFactory_, filler, textField, factory)
}

void OrgOssPdfreporterEngineFillJRFillTextField_initWithOrgOssPdfreporterEngineFillJRFillTextField_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(OrgOssPdfreporterEngineFillJRFillTextField *self, OrgOssPdfreporterEngineFillJRFillTextField *textField, OrgOssPdfreporterEngineFillJRFillCloneFactory *factory) {
  OrgOssPdfreporterEngineFillJRFillTextElement_initWithOrgOssPdfreporterEngineFillJRFillTextElement_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(self, textField, factory);
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRFillTextField_logger)) finestWithNSString:JreStrcat("$I", @"Expression: ", [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk([self getExpression])) getId])];
  self->evaluationGroup_ = ((OrgOssPdfreporterEngineFillJRFillTextField *) nil_chk(textField))->evaluationGroup_;
}

OrgOssPdfreporterEngineFillJRFillTextField *new_OrgOssPdfreporterEngineFillJRFillTextField_initWithOrgOssPdfreporterEngineFillJRFillTextField_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(OrgOssPdfreporterEngineFillJRFillTextField *textField, OrgOssPdfreporterEngineFillJRFillCloneFactory *factory) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillJRFillTextField, initWithOrgOssPdfreporterEngineFillJRFillTextField_withOrgOssPdfreporterEngineFillJRFillCloneFactory_, textField, factory)
}

OrgOssPdfreporterEngineFillJRFillTextField *create_OrgOssPdfreporterEngineFillJRFillTextField_initWithOrgOssPdfreporterEngineFillJRFillTextField_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(OrgOssPdfreporterEngineFillJRFillTextField *textField, OrgOssPdfreporterEngineFillJRFillCloneFactory *factory) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillJRFillTextField, initWithOrgOssPdfreporterEngineFillJRFillTextField_withOrgOssPdfreporterEngineFillJRFillCloneFactory_, textField, factory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillJRFillTextField)
