//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillStaticText.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRStaticText.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillStaticText.h"
#include "org/oss/pdfreporter/engine/fill/JRFillTextElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplatePrintText.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateText.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@implementation OrgOssPdfreporterEngineFillJRFillStaticText

- (instancetype)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                        withOrgOssPdfreporterEngineJRStaticText:(id<OrgOssPdfreporterEngineJRStaticText>)staticText
             withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillStaticText_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRStaticText_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, filler, staticText, factory);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterEngineFillJRFillStaticText:(OrgOssPdfreporterEngineFillJRFillStaticText *)staticText
                  withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillStaticText_initWithOrgOssPdfreporterEngineFillJRFillStaticText_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(self, staticText, factory);
  return self;
}

- (void)setTextWithNSString:(NSString *)text {
}

- (OrgOssPdfreporterEngineFillJRTemplateText *)getJRTemplateText {
  return (OrgOssPdfreporterEngineFillJRTemplateText *) cast_chk([self getElementTemplate], [OrgOssPdfreporterEngineFillJRTemplateText class]);
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)createElementTemplate {
  return new_OrgOssPdfreporterEngineFillJRTemplateText_initWithOrgOssPdfreporterEngineJROrigin_withOrgOssPdfreporterEngineJRDefaultStyleProvider_withOrgOssPdfreporterEngineJRStaticText_([self getElementOrigin], [((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) getDefaultStyleProvider], self);
}

- (void)evaluateWithByte:(jbyte)evaluation {
  [self reset];
  [self evaluatePrintWhenExpressionWithByte:evaluation];
  [self evaluatePropertiesWithByte:evaluation];
  [self evaluateStyleWithByte:evaluation];
  [self resetTextChunk];
  [self setValueRepeatingWithBoolean:true];
}

- (jboolean)prepareWithInt:(jint)availableHeight
               withBoolean:(jboolean)isOverflow {
  jboolean willOverflow = false;
  [super prepareWithInt:availableHeight withBoolean:isOverflow];
  if (![self isToPrint]) {
    return willOverflow;
  }
  jboolean isToPrint = true;
  jboolean isReprinted = false;
  if (isOverflow && [self isAlreadyPrinted] && ![self isPrintWhenDetailOverflows]) {
    isToPrint = false;
  }
  if (isToPrint && [self isPrintWhenExpressionNull] && ![self isPrintRepeatedValues]) {
    if ((![self isPrintInFirstWholeBand] || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isFirstWholeOnPageColumn]) && ([self getPrintWhenGroupChanges] == nil || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isNewGroupWithOrgOssPdfreporterEngineJRGroup:[self getPrintWhenGroupChanges]]) && (!isOverflow || ![self isPrintWhenDetailOverflows])) {
      isToPrint = false;
    }
  }
  if (isToPrint && availableHeight < [self getRelativeY] + [self getHeight]) {
    isToPrint = false;
    willOverflow = true;
  }
  if (isToPrint && isOverflow && ([self isPrintWhenDetailOverflows] && ([self isAlreadyPrinted] || (![self isAlreadyPrinted] && ![self isPrintRepeatedValues])))) {
    isReprinted = true;
  }
  [self resetTextChunk];
  if (isToPrint) {
    [self chopTextElementWithInt:0];
  }
  [self setToPrintWithBoolean:isToPrint];
  [self setReprintedWithBoolean:isReprinted];
  return willOverflow;
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)fill {
  OrgOssPdfreporterEngineFillJRTemplatePrintText *text = new_OrgOssPdfreporterEngineFillJRTemplatePrintText_initWithOrgOssPdfreporterEngineFillJRTemplateText_withInt_([self getJRTemplateText], elementId_);
  [text setUUIDWithOrgOssPdfreporterUsesJavaUtilUUID:[self getUUID]];
  [text setXWithInt:[self getX]];
  [text setYWithInt:[self getRelativeY]];
  [text setWidthWithInt:[self getWidth]];
  [text setHeightWithInt:[self getPrintElementHeight]];
  [text setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnum:[self getRunDirectionValue]];
  [text setLineSpacingFactorWithFloat:[self getLineSpacingFactor]];
  [text setLeadingOffsetWithFloat:[self getLeadingOffset]];
  [text setTextHeightWithFloat:[self getTextHeight]];
  [self transferPropertiesWithOrgOssPdfreporterEngineJRPrintElement:text];
  [self setPrintTextWithOrgOssPdfreporterEngineJRPrintText:text];
  return text;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRStaticText:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitStaticTextWithOrgOssPdfreporterEngineJRStaticText:self];
}

- (void)resolveElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withByte:(jbyte)evaluation {
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  return new_OrgOssPdfreporterEngineFillJRFillStaticText_initWithOrgOssPdfreporterEngineFillJRFillStaticText_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(self, factory);
}

- (jboolean)canOverflow {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineFillJRBaseFiller:withOrgOssPdfreporterEngineJRStaticText:withOrgOssPdfreporterEngineFillJRFillObjectFactory:", "JRFillStaticText", NULL, 0x4, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineFillJRFillStaticText:withOrgOssPdfreporterEngineFillJRFillCloneFactory:", "JRFillStaticText", NULL, 0x4, NULL, NULL },
    { "setTextWithNSString:", "setText", "V", 0x1, NULL, NULL },
    { "getJRTemplateText", NULL, "Lorg.oss.pdfreporter.engine.fill.JRTemplateText;", 0x4, NULL, NULL },
    { "createElementTemplate", NULL, "Lorg.oss.pdfreporter.engine.fill.JRTemplateElement;", 0x4, NULL, NULL },
    { "evaluateWithByte:", "evaluate", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "prepareWithInt:withBoolean:", "prepare", "Z", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "fill", NULL, "Lorg.oss.pdfreporter.engine.JRPrintElement;", 0x4, NULL, NULL },
    { "collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:", "collectExpressions", "V", 0x1, NULL, NULL },
    { "visitWithOrgOssPdfreporterEngineJRVisitor:", "visit", "V", 0x1, NULL, NULL },
    { "resolveElementWithOrgOssPdfreporterEngineJRPrintElement:withByte:", "resolveElement", "V", 0x4, NULL, NULL },
    { "createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:", "createClone", "Lorg.oss.pdfreporter.engine.fill.JRFillCloneable;", 0x1, NULL, NULL },
    { "canOverflow", NULL, "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillJRFillStaticText = { 2, "JRFillStaticText", "org.oss.pdfreporter.engine.fill", NULL, 0x1, 13, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillJRFillStaticText;
}

@end

void OrgOssPdfreporterEngineFillJRFillStaticText_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRStaticText_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRFillStaticText *self, OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterEngineJRStaticText> staticText, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  OrgOssPdfreporterEngineFillJRFillTextElement_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRTextElement_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, filler, staticText, factory);
  NSString *text = [self processMarkupTextWithNSString:[((id<OrgOssPdfreporterEngineJRStaticText>) nil_chk(staticText)) getText]];
  if (text == nil) {
    text = @"";
  }
  [self setRawTextWithNSString:text];
}

OrgOssPdfreporterEngineFillJRFillStaticText *new_OrgOssPdfreporterEngineFillJRFillStaticText_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRStaticText_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterEngineJRStaticText> staticText, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillJRFillStaticText, initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRStaticText_withOrgOssPdfreporterEngineFillJRFillObjectFactory_, filler, staticText, factory)
}

OrgOssPdfreporterEngineFillJRFillStaticText *create_OrgOssPdfreporterEngineFillJRFillStaticText_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRStaticText_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterEngineJRStaticText> staticText, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillJRFillStaticText, initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRStaticText_withOrgOssPdfreporterEngineFillJRFillObjectFactory_, filler, staticText, factory)
}

void OrgOssPdfreporterEngineFillJRFillStaticText_initWithOrgOssPdfreporterEngineFillJRFillStaticText_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(OrgOssPdfreporterEngineFillJRFillStaticText *self, OrgOssPdfreporterEngineFillJRFillStaticText *staticText, OrgOssPdfreporterEngineFillJRFillCloneFactory *factory) {
  OrgOssPdfreporterEngineFillJRFillTextElement_initWithOrgOssPdfreporterEngineFillJRFillTextElement_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(self, staticText, factory);
  NSString *text = [self processMarkupTextWithNSString:[((OrgOssPdfreporterEngineFillJRFillStaticText *) nil_chk(staticText)) getText]];
  if (text == nil) {
    text = @"";
  }
  [self setRawTextWithNSString:text];
}

OrgOssPdfreporterEngineFillJRFillStaticText *new_OrgOssPdfreporterEngineFillJRFillStaticText_initWithOrgOssPdfreporterEngineFillJRFillStaticText_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(OrgOssPdfreporterEngineFillJRFillStaticText *staticText, OrgOssPdfreporterEngineFillJRFillCloneFactory *factory) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillJRFillStaticText, initWithOrgOssPdfreporterEngineFillJRFillStaticText_withOrgOssPdfreporterEngineFillJRFillCloneFactory_, staticText, factory)
}

OrgOssPdfreporterEngineFillJRFillStaticText *create_OrgOssPdfreporterEngineFillJRFillStaticText_initWithOrgOssPdfreporterEngineFillJRFillStaticText_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(OrgOssPdfreporterEngineFillJRFillStaticText *staticText, OrgOssPdfreporterEngineFillJRFillCloneFactory *factory) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillJRFillStaticText, initWithOrgOssPdfreporterEngineFillJRFillStaticText_withOrgOssPdfreporterEngineFillJRFillCloneFactory_, staticText, factory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillJRFillStaticText)
