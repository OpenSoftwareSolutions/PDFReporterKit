//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fill/TextMeasurer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Short.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/StringTokenizer.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRCommonText.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRTextElement.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/TabStop.h"
#include "org/oss/pdfreporter/engine/fill/ComplexTextLineWrapper.h"
#include "org/oss/pdfreporter/engine/fill/JRMeasuredText.h"
#include "org/oss/pdfreporter/engine/fill/LineHeightCalculator.h"
#include "org/oss/pdfreporter/engine/fill/TextLine.h"
#include "org/oss/pdfreporter/engine/fill/TextLineWrapper.h"
#include "org/oss/pdfreporter/engine/fill/TextMeasurer.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/util/DelegatePropertiesHolder.h"
#include "org/oss/pdfreporter/engine/util/JRStringUtil.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/engine/util/ParagraphUtil.h"

@interface OrgOssPdfreporterEngineFillTextMeasurer () {
 @public
  id<OrgOssPdfreporterEngineJRPropertiesHolder> propertiesHolder_;
  OrgOssPdfreporterEngineFillComplexTextLineWrapper *complextLineWrapper_;
  jint height_;
  jint topPadding_;
  jint bottomPadding_;
  id<OrgOssPdfreporterEngineJRParagraph> jrParagraph_;
  jfloat formatWidth_;
  jboolean canOverflow_;
  jboolean ignoreMissingFont_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillTextMeasurer, propertiesHolder_, id<OrgOssPdfreporterEngineJRPropertiesHolder>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillTextMeasurer, complextLineWrapper_, OrgOssPdfreporterEngineFillComplexTextLineWrapper *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillTextMeasurer, jrParagraph_, id<OrgOssPdfreporterEngineJRParagraph>)

inline JavaUtilLoggingLogger *OrgOssPdfreporterEngineFillTextMeasurer_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterEngineFillTextMeasurer_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFillTextMeasurer, logger, JavaUtilLoggingLogger *)

@interface OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState () {
 @public
  jboolean saveLineBreakOffsets_;
}

@end

@interface OrgOssPdfreporterEngineFillTextMeasurer_Context () {
 @public
  OrgOssPdfreporterEngineFillTextMeasurer *this$0_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillTextMeasurer_Context, this$0_, OrgOssPdfreporterEngineFillTextMeasurer *)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineFillTextMeasurer)

NSString *OrgOssPdfreporterEngineFillTextMeasurer_PROPERTY_MEASURE_SIMPLE_TEXTS = @"net.sf.jasperreports.measure.simple.text";

@implementation OrgOssPdfreporterEngineFillTextMeasurer

+ (NSString *)PROPERTY_MEASURE_SIMPLE_TEXTS {
  return OrgOssPdfreporterEngineFillTextMeasurer_PROPERTY_MEASURE_SIMPLE_TEXTS;
}

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                            withOrgOssPdfreporterEngineJRCommonText:(id<OrgOssPdfreporterEngineJRCommonText>)textElement {
  OrgOssPdfreporterEngineFillTextMeasurer_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRCommonText_(self, jasperReportsContext, textElement);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterEngineJRCommonText:(id<OrgOssPdfreporterEngineJRCommonText>)textElement {
  OrgOssPdfreporterEngineFillTextMeasurer_initWithOrgOssPdfreporterEngineJRCommonText_(self, textElement);
  return self;
}

- (void)initialize__WithOrgOssPdfreporterEngineUtilJRStyledText:(OrgOssPdfreporterEngineUtilJRStyledText *)styledText
                                                        withInt:(jint)remainingTextStart
                                                        withInt:(jint)availableStretchHeight
                                                    withBoolean:(jboolean)canOverflow {
  width_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getWidth];
  height_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getHeight];
  topPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getLineBox])) getTopPadding])) intValue];
  leftPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getLineBox])) getLeftPadding])) intValue];
  bottomPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getLineBox])) getBottomPadding])) intValue];
  rightPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getLineBox])) getRightPadding])) intValue];
  jrParagraph_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getParagraph];
  switch ([[((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getRotationValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_LEFT:
    {
      width_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getHeight];
      height_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getWidth];
      jint tmpPadding = topPadding_;
      topPadding_ = leftPadding_;
      leftPadding_ = bottomPadding_;
      bottomPadding_ = rightPadding_;
      rightPadding_ = tmpPadding;
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_RIGHT:
    {
      width_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getHeight];
      height_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getWidth];
      jint tmpPadding = topPadding_;
      topPadding_ = rightPadding_;
      rightPadding_ = bottomPadding_;
      bottomPadding_ = leftPadding_;
      leftPadding_ = tmpPadding;
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_UPSIDE_DOWN:
    {
      jint tmpPadding = topPadding_;
      topPadding_ = bottomPadding_;
      bottomPadding_ = tmpPadding;
      tmpPadding = leftPadding_;
      leftPadding_ = rightPadding_;
      rightPadding_ = tmpPadding;
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_NONE:
    default:
    {
    }
  }
  formatWidth_ = width_ - leftPadding_ - rightPadding_;
  formatWidth_ = formatWidth_ < 0 ? 0 : formatWidth_;
  maxHeight_ = height_ + availableStretchHeight - topPadding_ - bottomPadding_;
  maxHeight_ = maxHeight_ < 0 ? 0 : maxHeight_;
  self->canOverflow_ = canOverflow;
  ignoreMissingFont_ = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_))) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder_ withNSString:OrgOssPdfreporterEngineUtilJRStyledText_PROPERTY_AWT_IGNORE_MISSING_FONT withBoolean:false];
  jboolean saveLineBreakOffsets = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext_))) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder_ withNSString:OrgOssPdfreporterEngineJRTextElement_PROPERTY_SAVE_LINE_BREAKS withBoolean:false];
  measuredState_ = new_OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState_initWithBoolean_(saveLineBreakOffsets);
  measuredState_->lastOffset_ = remainingTextStart;
  prevMeasuredState_ = nil;
}

- (id<OrgOssPdfreporterEngineFillJRMeasuredText>)measureWithOrgOssPdfreporterEngineUtilJRStyledText:(OrgOssPdfreporterEngineUtilJRStyledText *)styledText
                                                                                            withInt:(jint)remainingTextStart
                                                                                            withInt:(jint)availableStretchHeight
                                                                                        withBoolean:(jboolean)canOverflow {
  [self initialize__WithOrgOssPdfreporterEngineUtilJRStyledText:styledText withInt:remainingTextStart withInt:availableStretchHeight withBoolean:canOverflow];
  id<OrgOssPdfreporterEngineFillTextLineWrapper> lineWrapper = complextLineWrapper_;
  [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) startWithOrgOssPdfreporterEngineUtilJRStyledText:styledText];
  jint tokenPosition = remainingTextStart;
  jint lastParagraphStart = remainingTextStart;
  NSString *lastParagraphText = nil;
  NSString *remainingText = [((NSString *) nil_chk([((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getText])) substring:remainingTextStart];
  JavaUtilStringTokenizer *tkzer = new_JavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(remainingText, @"\n", true);
  jboolean rendered = true;
  while ([tkzer hasMoreTokens] && rendered) {
    NSString *token = [tkzer nextToken];
    if ([@"\n" isEqual:token]) {
      rendered = [self renderParagraphWithOrgOssPdfreporterEngineFillTextLineWrapper:lineWrapper withInt:lastParagraphStart withNSString:lastParagraphText];
      lastParagraphStart = tokenPosition + ([tkzer hasMoreTokens] || tokenPosition == 0 ? 1 : 0);
      lastParagraphText = nil;
    }
    else {
      lastParagraphStart = tokenPosition;
      lastParagraphText = token;
    }
    tokenPosition += ((jint) [((NSString *) nil_chk(token)) length]);
  }
  if (rendered && lastParagraphStart < remainingTextStart + ((jint) [((NSString *) nil_chk(remainingText)) length])) {
    [self renderParagraphWithOrgOssPdfreporterEngineFillTextLineWrapper:lineWrapper withInt:lastParagraphStart withNSString:lastParagraphText];
  }
  return measuredState_;
}

- (jboolean)hasParagraphIndents {
  JavaLangInteger *firstLineIndent = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(jrParagraph_)) getFirstLineIndent];
  if (firstLineIndent != nil && [firstLineIndent intValue] > 0) {
    return true;
  }
  JavaLangInteger *leftIndent = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(jrParagraph_)) getLeftIndent];
  if (leftIndent != nil && [leftIndent intValue] > 0) {
    return true;
  }
  JavaLangInteger *rightIndent = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(jrParagraph_)) getRightIndent];
  return rightIndent != nil && [rightIndent intValue] > 0;
}

- (jboolean)renderParagraphWithOrgOssPdfreporterEngineFillTextLineWrapper:(id<OrgOssPdfreporterEngineFillTextLineWrapper>)lineWrapper
                                                                  withInt:(jint)lastParagraphStart
                                                             withNSString:(NSString *)lastParagraphText {
  if (lastParagraphText == nil) {
    [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) startEmptyParagraphWithInt:lastParagraphStart];
  }
  else {
    [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) startParagraphWithInt:lastParagraphStart withInt:lastParagraphStart + ((jint) [lastParagraphText length]) withBoolean:false];
  }
  id<JavaUtilList> tabIndexes = OrgOssPdfreporterEngineUtilJRStringUtil_getTabIndexesWithNSString_(lastParagraphText);
  IOSIntArray *currentTabHolder = [IOSIntArray newArrayWithInts:(jint[]){ 0 } count:1];
  IOSObjectArray *nextTabStopHolder = [IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:OrgOssPdfreporterEngineTabStop_class_()];
  IOSBooleanArray *requireNextWordHolder = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ false } count:1];
  ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_))->paragraphStartLine_ = measuredState_->lines_;
  measuredState_->textOffset_ = lastParagraphStart;
  jboolean rendered = true;
  jboolean renderedLine = false;
  while ([lineWrapper paragraphPosition] < [lineWrapper paragraphEnd] && rendered) {
    rendered = [self renderNextLineWithOrgOssPdfreporterEngineFillTextLineWrapper:lineWrapper withJavaUtilList:tabIndexes withIntArray:currentTabHolder withOrgOssPdfreporterEngineTabStopArray:nextTabStopHolder withBooleanArray:requireNextWordHolder];
    renderedLine = (renderedLine || rendered);
  }
  if (!rendered && prevMeasuredState_ != nil && !canOverflow_) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillTextMeasurer_logger)) warningWithNSString:@"Truncating last line with overflow is not yet handled correctly."];
  }
  return rendered;
}

- (jboolean)renderNextLineWithOrgOssPdfreporterEngineFillTextLineWrapper:(id<OrgOssPdfreporterEngineFillTextLineWrapper>)lineWrapper
                                                        withJavaUtilList:(id<JavaUtilList>)tabIndexes
                                                            withIntArray:(IOSIntArray *)currentTabHolder
                                 withOrgOssPdfreporterEngineTabStopArray:(IOSObjectArray *)nextTabStopHolder
                                                        withBooleanArray:(IOSBooleanArray *)requireNextWordHolder {
  jboolean lineComplete = false;
  jint lineStartPosition = [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphPosition];
  jfloat maxAscent = 0;
  jfloat maxDescent = 0;
  jfloat maxLeading = 0;
  jint characterCount = 0;
  jboolean isLeftToRight = true;
  id<JavaUtilList> segments = new_JavaUtilArrayList_initWithInt_(1);
  OrgOssPdfreporterEngineFillTabSegment *oldSegment = nil;
  OrgOssPdfreporterEngineFillTabSegment *crtSegment = nil;
  while (!lineComplete) {
    jint tabIndexOrEndIndex = (tabIndexes == nil || IOSIntArray_Get(nil_chk(currentTabHolder), 0) >= [tabIndexes size] ? [lineWrapper paragraphEnd] : [((JavaLangInteger *) nil_chk([tabIndexes getWithInt:IOSIntArray_Get(nil_chk(currentTabHolder), 0)])) intValue] + 1);
    jfloat startX = ([lineWrapper paragraphPosition] == 0 ? [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getParagraph])) getFirstLineIndent])) intValue] : 0) + leftPadding_;
    jfloat endX = width_ - [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getParagraph])) getRightIndent])) intValue] - rightPadding_;
    endX = endX < startX ? startX : endX;
    jint startIndex = [lineWrapper paragraphPosition];
    jfloat rightX = 0;
    if ([segments size] == 0) {
      rightX = startX;
    }
    else {
      rightX = ((OrgOssPdfreporterEngineFillTabSegment *) nil_chk(oldSegment))->rightX_;
      (void) IOSObjectArray_Set(nil_chk(nextTabStopHolder), 0, OrgOssPdfreporterEngineUtilParagraphUtil_getNextTabStopWithOrgOssPdfreporterEngineJRParagraph_withFloat_withFloat_(jrParagraph_, endX, rightX));
    }
    jfloat availableWidth = endX - [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getParagraph])) getLeftIndent])) intValue] - OrgOssPdfreporterEngineUtilParagraphUtil_getSegmentOffsetWithOrgOssPdfreporterEngineTabStop_withFloat_(IOSObjectArray_Get(nil_chk(nextTabStopHolder), 0), rightX);
    id<OrgOssPdfreporterEngineFillTextLine> textLine = [lineWrapper nextLineWithFloat:availableWidth withInt:tabIndexOrEndIndex withBoolean:IOSBooleanArray_Get(nil_chk(requireNextWordHolder), 0)];
    if (textLine != nil) {
      maxAscent = JavaLangMath_maxWithFloat_withFloat_(maxAscent, [textLine getAscent]);
      maxDescent = JavaLangMath_maxWithFloat_withFloat_(maxDescent, [textLine getDescent]);
      maxLeading = JavaLangMath_maxWithFloat_withFloat_(maxLeading, [textLine getLeading]);
      characterCount += [textLine getCharacterCount];
      isLeftToRight = (isLeftToRight && [textLine isLeftToRight]);
      crtSegment = new_OrgOssPdfreporterEngineFillTabSegment_init();
      crtSegment->textLine_ = textLine;
      jfloat leftX = OrgOssPdfreporterEngineUtilParagraphUtil_getLeftXWithOrgOssPdfreporterEngineTabStop_withFloat_(IOSObjectArray_Get(nextTabStopHolder, 0), [textLine getAdvance]);
      if (rightX > leftX) {
        crtSegment->leftX_ = rightX;
        crtSegment->rightX_ = rightX + [textLine getAdvance];
      }
      else {
        crtSegment->leftX_ = leftX;
        crtSegment->rightX_ = OrgOssPdfreporterEngineUtilParagraphUtil_getRightXWithOrgOssPdfreporterEngineTabStop_withFloat_(IOSObjectArray_Get(nextTabStopHolder, 0), [textLine getAdvance]);
      }
      [segments addWithId:crtSegment];
    }
    *IOSBooleanArray_GetRef(requireNextWordHolder, 0) = true;
    if ([lineWrapper paragraphPosition] == tabIndexOrEndIndex) {
      *IOSIntArray_GetRef(nil_chk(currentTabHolder), 0) = IOSIntArray_Get(currentTabHolder, 0) + 1;
    }
    if ([lineWrapper paragraphPosition] == [lineWrapper paragraphEnd]) {
      lineComplete = true;
      (void) IOSObjectArray_Set(nextTabStopHolder, 0, nil);
    }
    else {
      if ([lineWrapper paragraphPosition] == tabIndexOrEndIndex) {
        if (((OrgOssPdfreporterEngineFillTabSegment *) nil_chk(crtSegment))->rightX_ >= [((OrgOssPdfreporterEngineTabStop *) nil_chk(OrgOssPdfreporterEngineUtilParagraphUtil_getLastTabStopWithOrgOssPdfreporterEngineJRParagraph_withFloat_(jrParagraph_, endX))) getPosition]) {
          lineComplete = true;
          (void) IOSObjectArray_Set(nextTabStopHolder, 0, OrgOssPdfreporterEngineUtilParagraphUtil_getFirstTabStopWithOrgOssPdfreporterEngineJRParagraph_withFloat_(jrParagraph_, endX));
        }
      }
      else {
        lineComplete = true;
        if (textLine == nil) {
          if ([((OrgOssPdfreporterEngineTabStop *) nil_chk(IOSObjectArray_Get(nextTabStopHolder, 0))) getPosition] == [((OrgOssPdfreporterEngineTabStop *) nil_chk(OrgOssPdfreporterEngineUtilParagraphUtil_getFirstTabStopWithOrgOssPdfreporterEngineJRParagraph_withFloat_(jrParagraph_, endX))) getPosition]) {
            (void) IOSObjectArray_Set(nextTabStopHolder, 0, nil);
            *IOSBooleanArray_GetRef(requireNextWordHolder, 0) = false;
            id<OrgOssPdfreporterEngineFillTextLine> baseLine = [lineWrapper baseTextLineWithInt:startIndex];
            maxAscent = [((id<OrgOssPdfreporterEngineFillTextLine>) nil_chk(baseLine)) getAscent];
            maxDescent = [baseLine getDescent];
            maxLeading = [baseLine getLeading];
          }
          else {
            (void) IOSObjectArray_Set(nextTabStopHolder, 0, OrgOssPdfreporterEngineUtilParagraphUtil_getFirstTabStopWithOrgOssPdfreporterEngineJRParagraph_withFloat_(jrParagraph_, endX));
          }
        }
        else {
          (void) IOSObjectArray_Set(nextTabStopHolder, 0, nil);
          *IOSBooleanArray_GetRef(requireNextWordHolder, 0) = false;
        }
      }
    }
    oldSegment = crtSegment;
  }
  jfloat lineHeight = OrgOssPdfreporterEngineFillLineHeightCalculator_getLineHeightWithBoolean_withOrgOssPdfreporterEngineJRParagraph_withFloat_withFloat_(((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_))->lines_ == 0, jrParagraph_, maxLeading, maxAscent);
  if (((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_))->lines_ == 0) {
    JrePlusAssignFloatF(&lineHeight, [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(jrParagraph_)) getSpacingBefore])) intValue]);
  }
  jfloat newTextHeight = ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_))->textHeight_ + lineHeight;
  jboolean fits = newTextHeight + maxDescent <= maxHeight_;
  if (fits) {
    prevMeasuredState_ = [measuredState_ cloneState];
    ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_))->isLeftToRight_ = isLeftToRight;
    measuredState_->textHeight_ = newTextHeight;
    measuredState_->lines_++;
    if ((tabIndexes == nil || [tabIndexes size] == 0) && ![self hasParagraphIndents]) {
      ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_))->fontSizeSum_ += [lineWrapper maxFontSizeWithInt:lineStartPosition withInt:lineStartPosition + characterCount];
      if (((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_))->lines_ == 1) {
        measuredState_->firstLineLeading_ = measuredState_->textHeight_;
        measuredState_->firstLineMaxFontSize_ = measuredState_->fontSizeSum_;
      }
    }
    JrePlusAssignFloatF(&((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_))->textHeight_, maxDescent);
    measuredState_->textOffset_ += [lineWrapper paragraphPosition] - lineStartPosition;
    if ([lineWrapper paragraphPosition] < [lineWrapper paragraphEnd]) {
      [((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)) addLineBreak];
    }
  }
  return fits;
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getTextPropertiesHolder {
  return propertiesHolder_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillTextMeasurer class]) {
    OrgOssPdfreporterEngineFillTextMeasurer_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterEngineFillTextMeasurer_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineFillTextMeasurer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineJasperReportsContext:withOrgOssPdfreporterEngineJRCommonText:", "TextMeasurer", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineJRCommonText:", "TextMeasurer", NULL, 0x1, NULL, NULL },
    { "initialize__WithOrgOssPdfreporterEngineUtilJRStyledText:withInt:withInt:withBoolean:", "initialize", "V", 0x4, NULL, NULL },
    { "measureWithOrgOssPdfreporterEngineUtilJRStyledText:withInt:withInt:withBoolean:", "measure", "Lorg.oss.pdfreporter.engine.fill.JRMeasuredText;", 0x1, NULL, NULL },
    { "hasParagraphIndents", NULL, "Z", 0x4, NULL, NULL },
    { "renderParagraphWithOrgOssPdfreporterEngineFillTextLineWrapper:withInt:withNSString:", "renderParagraph", "Z", 0x4, NULL, NULL },
    { "renderNextLineWithOrgOssPdfreporterEngineFillTextLineWrapper:withJavaUtilList:withIntArray:withOrgOssPdfreporterEngineTabStopArray:withBooleanArray:", "renderNextLine", "Z", 0x4, NULL, "(Lorg/oss/pdfreporter/engine/fill/TextLineWrapper;Ljava/util/List<Ljava/lang/Integer;>;[I[Lorg/oss/pdfreporter/engine/TabStop;[Z)Z" },
    { "getTextPropertiesHolder", NULL, "Lorg.oss.pdfreporter.engine.JRPropertiesHolder;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterEngineFillTextMeasurer_logger, NULL, .constantValue.asLong = 0 },
    { "PROPERTY_MEASURE_SIMPLE_TEXTS", "PROPERTY_MEASURE_SIMPLE_TEXTS", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineFillTextMeasurer_PROPERTY_MEASURE_SIMPLE_TEXTS, NULL, .constantValue.asLong = 0 },
    { "jasperReportsContext_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JasperReportsContext;", NULL, NULL, .constantValue.asLong = 0 },
    { "textElement_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRCommonText;", NULL, NULL, .constantValue.asLong = 0 },
    { "propertiesHolder_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.JRPropertiesHolder;", NULL, NULL, .constantValue.asLong = 0 },
    { "complextLineWrapper_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.fill.ComplexTextLineWrapper;", NULL, NULL, .constantValue.asLong = 0 },
    { "width_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "height_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "topPadding_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "leftPadding_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "bottomPadding_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "rightPadding_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "jrParagraph_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.JRParagraph;", NULL, NULL, .constantValue.asLong = 0 },
    { "formatWidth_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "maxHeight_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "canOverflow_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "ignoreMissingFont_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "measuredState_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.fill.TextMeasurer$TextMeasuredState;", NULL, NULL, .constantValue.asLong = 0 },
    { "prevMeasuredState_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.fill.TextMeasurer$TextMeasuredState;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.engine.fill.TextMeasurer$TextMeasuredState;", "Lorg.oss.pdfreporter.engine.fill.TextMeasurer$Context;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillTextMeasurer = { 2, "TextMeasurer", "org.oss.pdfreporter.engine.fill", NULL, 0x1, 8, methods, 19, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillTextMeasurer;
}

@end

void OrgOssPdfreporterEngineFillTextMeasurer_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRCommonText_(OrgOssPdfreporterEngineFillTextMeasurer *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterEngineJRCommonText> textElement) {
  NSObject_init(self);
  self->jasperReportsContext_ = jasperReportsContext;
  self->textElement_ = textElement;
  self->propertiesHolder_ = [OrgOssPdfreporterEngineJRPropertiesHolder_class_() isInstance:textElement] ? (id<OrgOssPdfreporterEngineJRPropertiesHolder>) cast_check(textElement, OrgOssPdfreporterEngineJRPropertiesHolder_class_()) : nil;
  if ([OrgOssPdfreporterEngineJRPropertiesHolder_class_() isInstance:[((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement)) getDefaultStyleProvider]]) {
    self->propertiesHolder_ = new_OrgOssPdfreporterEngineUtilDelegatePropertiesHolder_initWithOrgOssPdfreporterEngineJRPropertiesHolder_withOrgOssPdfreporterEngineJRPropertiesHolder_(self->propertiesHolder_, (id<OrgOssPdfreporterEngineJRPropertiesHolder>) cast_check([textElement getDefaultStyleProvider], OrgOssPdfreporterEngineJRPropertiesHolder_class_()));
  }
  OrgOssPdfreporterEngineFillTextMeasurer_Context *measureContext = new_OrgOssPdfreporterEngineFillTextMeasurer_Context_initWithOrgOssPdfreporterEngineFillTextMeasurer_(self);
  self->complextLineWrapper_ = new_OrgOssPdfreporterEngineFillComplexTextLineWrapper_init();
  [self->complextLineWrapper_ init__WithOrgOssPdfreporterEngineFillTextMeasureContext:measureContext];
}

OrgOssPdfreporterEngineFillTextMeasurer *new_OrgOssPdfreporterEngineFillTextMeasurer_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRCommonText_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterEngineJRCommonText> textElement) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillTextMeasurer, initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRCommonText_, jasperReportsContext, textElement)
}

OrgOssPdfreporterEngineFillTextMeasurer *create_OrgOssPdfreporterEngineFillTextMeasurer_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRCommonText_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterEngineJRCommonText> textElement) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillTextMeasurer, initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRCommonText_, jasperReportsContext, textElement)
}

void OrgOssPdfreporterEngineFillTextMeasurer_initWithOrgOssPdfreporterEngineJRCommonText_(OrgOssPdfreporterEngineFillTextMeasurer *self, id<OrgOssPdfreporterEngineJRCommonText> textElement) {
  OrgOssPdfreporterEngineFillTextMeasurer_initWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRCommonText_(self, OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance(), textElement);
}

OrgOssPdfreporterEngineFillTextMeasurer *new_OrgOssPdfreporterEngineFillTextMeasurer_initWithOrgOssPdfreporterEngineJRCommonText_(id<OrgOssPdfreporterEngineJRCommonText> textElement) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillTextMeasurer, initWithOrgOssPdfreporterEngineJRCommonText_, textElement)
}

OrgOssPdfreporterEngineFillTextMeasurer *create_OrgOssPdfreporterEngineFillTextMeasurer_initWithOrgOssPdfreporterEngineJRCommonText_(id<OrgOssPdfreporterEngineJRCommonText> textElement) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillTextMeasurer, initWithOrgOssPdfreporterEngineJRCommonText_, textElement)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillTextMeasurer)

@implementation OrgOssPdfreporterEngineFillTabSegment

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineFillTabSegment_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TabSegment", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "textLine_", NULL, 0x1, "Lorg.oss.pdfreporter.engine.fill.TextLine;", NULL, NULL, .constantValue.asLong = 0 },
    { "leftX_", NULL, 0x1, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "rightX_", NULL, 0x1, "F", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillTabSegment = { 2, "TabSegment", "org.oss.pdfreporter.engine.fill", NULL, 0x0, 1, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillTabSegment;
}

@end

void OrgOssPdfreporterEngineFillTabSegment_init(OrgOssPdfreporterEngineFillTabSegment *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineFillTabSegment *new_OrgOssPdfreporterEngineFillTabSegment_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillTabSegment, init)
}

OrgOssPdfreporterEngineFillTabSegment *create_OrgOssPdfreporterEngineFillTabSegment_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillTabSegment, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillTabSegment)

@implementation OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState

- (instancetype)initWithBoolean:(jboolean)saveLineBreakOffsets {
  OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState_initWithBoolean_(self, saveLineBreakOffsets);
  return self;
}

- (jboolean)isLeftToRight {
  return isLeftToRight_;
}

- (jint)getTextOffset {
  return textOffset_;
}

- (jfloat)getTextHeight {
  return textHeight_;
}

- (jfloat)getLineSpacingFactor {
  if (lines_ > 0 && fontSizeSum_ > 0) {
    return textHeight_ / fontSizeSum_;
  }
  return 0;
}

- (jfloat)getLeadingOffset {
  return firstLineLeading_ - firstLineMaxFontSize_ * [self getLineSpacingFactor];
}

- (NSString *)getTextSuffix {
  return textSuffix_;
}

- (OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *)cloneState {
  @try {
    OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *clone = (OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) cast_chk([super clone], [OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState class]);
    if (lineBreakOffsets_ != nil) {
      ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(clone))->lineBreakOffsets_ = (JavaUtilArrayList *) cast_chk([lineBreakOffsets_ clone], [JavaUtilArrayList class]);
    }
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
}

- (void)addLineBreak {
  if (saveLineBreakOffsets_) {
    if (lineBreakOffsets_ == nil) {
      lineBreakOffsets_ = new_JavaUtilArrayList_init();
    }
    jint breakOffset = textOffset_ - lastOffset_;
    [lineBreakOffsets_ addWithId:JavaLangInteger_valueOfWithInt_(breakOffset)];
    lastOffset_ = textOffset_;
  }
}

- (IOSShortArray *)getLineBreakOffsets {
  if (!saveLineBreakOffsets_) {
    return nil;
  }
  jint exclude = lastOffset_ == textOffset_ ? 1 : 0;
  if (lineBreakOffsets_ == nil || [lineBreakOffsets_ size] <= exclude) {
    return JreLoadStatic(OrgOssPdfreporterEngineJRPrintText, ZERO_LINE_BREAK_OFFSETS);
  }
  IOSShortArray *offsets = [IOSShortArray newArrayWithLength:[lineBreakOffsets_ size] - exclude];
  jboolean overflow = false;
  for (jint i = 0; i < offsets->size_; i++) {
    jint offset = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(lineBreakOffsets_)) getWithInt:i])) intValue];
    if (offset > JavaLangShort_MAX_VALUE) {
      overflow = true;
      break;
    }
    *IOSShortArray_GetRef(offsets, i) = (jshort) offset;
  }
  if (overflow) {
    return nil;
  }
  return offsets;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:", "TextMeasuredState", NULL, 0x1, NULL, NULL },
    { "isLeftToRight", NULL, "Z", 0x1, NULL, NULL },
    { "getTextOffset", NULL, "I", 0x1, NULL, NULL },
    { "getTextHeight", NULL, "F", 0x1, NULL, NULL },
    { "getLineSpacingFactor", NULL, "F", 0x1, NULL, NULL },
    { "getLeadingOffset", NULL, "F", 0x1, NULL, NULL },
    { "getTextSuffix", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "cloneState", NULL, "Lorg.oss.pdfreporter.engine.fill.TextMeasurer$TextMeasuredState;", 0x1, NULL, NULL },
    { "addLineBreak", NULL, "V", 0x4, NULL, NULL },
    { "getLineBreakOffsets", NULL, "[S", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "saveLineBreakOffsets_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "textOffset_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lines_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "fontSizeSum_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "firstLineMaxFontSize_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "paragraphStartLine_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "textHeight_", NULL, 0x4, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "firstLineLeading_", NULL, 0x4, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "isLeftToRight_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "textSuffix_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "lastOffset_", NULL, 0x4, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lineBreakOffsets_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState = { 2, "TextMeasuredState", "org.oss.pdfreporter.engine.fill", "TextMeasurer", 0xc, 10, methods, 12, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState;
}

@end

void OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState_initWithBoolean_(OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *self, jboolean saveLineBreakOffsets) {
  NSObject_init(self);
  self->isLeftToRight_ = true;
  self->saveLineBreakOffsets_ = saveLineBreakOffsets;
}

OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *new_OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState_initWithBoolean_(jboolean saveLineBreakOffsets) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState, initWithBoolean_, saveLineBreakOffsets)
}

OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *create_OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState_initWithBoolean_(jboolean saveLineBreakOffsets) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState, initWithBoolean_, saveLineBreakOffsets)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState)

@implementation OrgOssPdfreporterEngineFillTextMeasurer_Context

- (id<OrgOssPdfreporterEngineJasperReportsContext>)getJasperReportsContext {
  return this$0_->jasperReportsContext_;
}

- (id<OrgOssPdfreporterEngineJRCommonText>)getElement {
  return this$0_->textElement_;
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getPropertiesHolder {
  return this$0_->propertiesHolder_;
}

- (jboolean)isIgnoreMissingFont {
  return this$0_->ignoreMissingFont_;
}

- (instancetype)initWithOrgOssPdfreporterEngineFillTextMeasurer:(OrgOssPdfreporterEngineFillTextMeasurer *)outer$ {
  OrgOssPdfreporterEngineFillTextMeasurer_Context_initWithOrgOssPdfreporterEngineFillTextMeasurer_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getJasperReportsContext", NULL, "Lorg.oss.pdfreporter.engine.JasperReportsContext;", 0x1, NULL, NULL },
    { "getElement", NULL, "Lorg.oss.pdfreporter.engine.JRCommonText;", 0x1, NULL, NULL },
    { "getPropertiesHolder", NULL, "Lorg.oss.pdfreporter.engine.JRPropertiesHolder;", 0x1, NULL, NULL },
    { "isIgnoreMissingFont", NULL, "Z", 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineFillTextMeasurer:", "Context", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.oss.pdfreporter.engine.fill.TextMeasurer;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillTextMeasurer_Context = { 2, "Context", "org.oss.pdfreporter.engine.fill", "TextMeasurer", 0x0, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillTextMeasurer_Context;
}

@end

void OrgOssPdfreporterEngineFillTextMeasurer_Context_initWithOrgOssPdfreporterEngineFillTextMeasurer_(OrgOssPdfreporterEngineFillTextMeasurer_Context *self, OrgOssPdfreporterEngineFillTextMeasurer *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

OrgOssPdfreporterEngineFillTextMeasurer_Context *new_OrgOssPdfreporterEngineFillTextMeasurer_Context_initWithOrgOssPdfreporterEngineFillTextMeasurer_(OrgOssPdfreporterEngineFillTextMeasurer *outer$) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillTextMeasurer_Context, initWithOrgOssPdfreporterEngineFillTextMeasurer_, outer$)
}

OrgOssPdfreporterEngineFillTextMeasurer_Context *create_OrgOssPdfreporterEngineFillTextMeasurer_Context_initWithOrgOssPdfreporterEngineFillTextMeasurer_(OrgOssPdfreporterEngineFillTextMeasurer *outer$) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillTextMeasurer_Context, initWithOrgOssPdfreporterEngineFillTextMeasurer_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillTextMeasurer_Context)
