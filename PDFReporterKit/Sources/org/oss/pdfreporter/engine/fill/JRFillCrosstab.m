//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillCrosstab.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/ResourceBundle.h"
#include "java/util/Set.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/commons/arrays/Array2D.h"
#include "org/oss/pdfreporter/commons/arrays/Array2DImpl.h"
#include "org/oss/pdfreporter/crosstabs/JRCellContents.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabBucket.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRCrosstabExpressionEvaluator.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabGroup.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabObjectFactory.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRPercentageCalculator.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/CrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/HeaderCell.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/MeasureDefinition.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabColumnPositionEnum.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabPercentageEnum.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabRowPositionEnum.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabTotalPositionEnum.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRElementDataset.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionChunk.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintFrame.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/JasperCompileManager.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fill/IJRFillParameter.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRCalculator.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRExpressionEvalException.h"
#include "org/oss/pdfreporter/engine/fill/JRExtendedIncrementerFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCellContents.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCrosstab.h"
#include "org/oss/pdfreporter/engine/fill/JRFillDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSubreport.h"
#include "org/oss/pdfreporter/engine/fill/JRFillVariable.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateFrame.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplatePrintFrame.h"
#include "org/oss/pdfreporter/engine/fill/JRYXComparator.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/type/SortOrderEnum.h"
#include "org/oss/pdfreporter/engine/type/WhenResourceMissingTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/jfree/Dataset.h"

@interface OrgOssPdfreporterEngineFillJRFillCrosstab () {
 @public
  jboolean percentage_;
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *crosstabFiller_;
  jint overflowStartPage_;
  id<JavaUtilList> printFrames_;
}

- (jboolean)isIgnoreWidthWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                            withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab;

- (void)copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory OBJC_METHOD_FAMILY_NONE;

- (void)copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
   withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory OBJC_METHOD_FAMILY_NONE;

- (void)copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory OBJC_METHOD_FAMILY_NONE;

- (void)copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
            withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory OBJC_METHOD_FAMILY_NONE;

- (void)copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory OBJC_METHOD_FAMILY_NONE;

- (void)copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
           withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory OBJC_METHOD_FAMILY_NONE;

- (OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *)createServiceWithByte:(jbyte)evaluation;

- (OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *)createServiceBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>)group
                                                                                                                       withByte:(jbyte)evaluation;

- (OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *)createServiceMeasureWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *)measure;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab, crosstabFiller_, OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab, printFrames_, id<JavaUtilList>)

inline JavaUtilLoggingLogger *OrgOssPdfreporterEngineFillJRFillCrosstab_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterEngineFillJRFillCrosstab_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFillJRFillCrosstab, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static jboolean OrgOssPdfreporterEngineFillJRFillCrosstab_isIgnoreWidthWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterCrosstabsJRCrosstab_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *factory);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *factory);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *factory);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *factory);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory);

__attribute__((unused)) static OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceWithByte_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, jbyte evaluation);

__attribute__((unused)) static OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_withByte_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstabGroup> group, jbyte evaluation);

__attribute__((unused)) static OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceMeasureWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *measure);

@interface OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset () {
 @public
  OrgOssPdfreporterEngineFillJRFillCrosstab *this$0_;
  IOSObjectArray *bucketValues_;
  IOSObjectArray *measureValues_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset, this$0_, OrgOssPdfreporterEngineFillJRFillCrosstab *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset, bucketValues_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset, measureValues_, IOSObjectArray *)

@interface OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller () {
 @public
  OrgOssPdfreporterEngineFillJRFillCrosstab *this$0_;
  jint yOffset_;
  jint yChunkOffset_;
  jboolean willOverflow_;
  IOSIntArray *rowHeadersXOffsets_;
  IOSBooleanArray *columnBreakable_;
  IOSBooleanArray *rowBreakable_;
  IOSIntArray *columnCount_;
  IOSIntArray *rowCount_;
  IOSIntArray *columnXOffsets_;
  jboolean noDataCellPrinted_;
  jint startRowIndex_;
  jint startColumnIndex_;
  jint lastColumnIndex_;
  id<JavaUtilList> columnHeaders_;
  id<JavaUtilList> printRows_;
  IOSObjectArray *spanHeaders_;
  IOSIntArray *spanHeadersStart_;
  id<JavaUtilList> rowYs_;
  jint rowIdx_;
  id<JavaUtilList> preparedRow_;
  jint preparedRowHeight_;
  jboolean printRowHeaders_;
  jboolean printColumnHeaders_;
  OrgOssPdfreporterEngineFillJRFillVariable *rowCountVar_;
  OrgOssPdfreporterEngineFillJRFillVariable *colCountVar_;
}

- (IOSIntArray *)computeCountsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headersData;

- (void)setCountVarsWithInt:(jint)rowIdx
                    withInt:(jint)colIdx;

- (OrgOssPdfreporterEngineFillJRFillCellContents *)fillHeaderWithInt:(jint)availableHeight;

- (OrgOssPdfreporterEngineFillJRFillCellContents *)prepareColumnHeaderWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:(OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *)cell
                                                                                                                      withInt:(jint)columnIdx
                                                                                                                      withInt:(jint)xOffset
                                                                                                                      withInt:(jint)availableHeight;

- (jint)stretchColumnHeadersRowWithOrgOssPdfreporterEngineFillJRFillCellContentsArray:(IOSObjectArray *)headers;

- (id<JavaUtilList>)fillColumnHeadersWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2:(IOSObjectArray *)columnHeaderRows;

- (void)releaseColumnHeaderCellsWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2:(IOSObjectArray *)columnHeaderRows;

- (void)initPreparedRow OBJC_METHOD_FAMILY_NONE;

- (void)removeFilledRowsWithInt:(jint)rowsToRemove;

- (void)releasePreparedRow;

- (void)fillRow;

- (void)prepareRowWithInt:(jint)xOffset
                  withInt:(jint)availableHeight;

- (jboolean)prepareDataCellWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *)data
                                                                             withInt:(jint)column
                                                                             withInt:(jint)availableHeight
                                                                             withInt:(jint)xOffset;

- (jboolean)prepareRowHeaderWithInt:(jint)rowGroup
withOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:(OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *)cell
                            withInt:(jint)vSpan
                            withInt:(jint)availableHeight;

- (void)removeExceedingSpanHeaders;

- (void)setBackSpanHeaders;

- (void)fillContinuingRowHeadersWithInt:(jint)xOffset
                                withInt:(jint)availableHeight;

- (void)fillContinuingHeadersWithInt:(jint)lastRowHeight;

- (void)refillLastRowWithInt:(jint)xOffset
                     withInt:(jint)availableHeight;

- (jboolean)prepareContinuingRowHeaderWithInt:(jint)rowGroup
                                      withInt:(jint)availableHeight;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, this$0_, OrgOssPdfreporterEngineFillJRFillCrosstab *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, rowHeadersXOffsets_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, columnBreakable_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, rowBreakable_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, columnCount_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, rowCount_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, columnXOffsets_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, columnHeaders_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, printRows_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, spanHeaders_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, spanHeadersStart_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, rowYs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, preparedRow_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, rowCountVar_, OrgOssPdfreporterEngineFillJRFillVariable *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, colCountVar_, OrgOssPdfreporterEngineFillJRFillVariable *)

__attribute__((unused)) static IOSIntArray *OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_computeCountsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, IOSObjectArray *headersData);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setCountVarsWithInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint rowIdx, jint colIdx);

__attribute__((unused)) static OrgOssPdfreporterEngineFillJRFillCellContents *OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillHeaderWithInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint availableHeight);

__attribute__((unused)) static OrgOssPdfreporterEngineFillJRFillCellContents *OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareColumnHeaderWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell_withInt_withInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *cell, jint columnIdx, jint xOffset, jint availableHeight);

__attribute__((unused)) static jint OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_stretchColumnHeadersRowWithOrgOssPdfreporterEngineFillJRFillCellContentsArray_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, IOSObjectArray *headers);

__attribute__((unused)) static id<JavaUtilList> OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillColumnHeadersWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, IOSObjectArray *columnHeaderRows);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_releaseColumnHeaderCellsWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, IOSObjectArray *columnHeaderRows);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_initPreparedRow(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_removeFilledRowsWithInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint rowsToRemove);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_releasePreparedRow(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillRow(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareRowWithInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint xOffset, jint availableHeight);

__attribute__((unused)) static jboolean OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareDataCellWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell_withInt_withInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *data, jint column, jint availableHeight, jint xOffset);

__attribute__((unused)) static jboolean OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareRowHeaderWithInt_withOrgOssPdfreporterCrosstabsFillCalculationHeaderCell_withInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint rowGroup, OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *cell, jint vSpan, jint availableHeight);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_removeExceedingSpanHeaders(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setBackSpanHeaders(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillContinuingRowHeadersWithInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint xOffset, jint availableHeight);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillContinuingHeadersWithInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint lastRowHeight);

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_refillLastRowWithInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint xOffset, jint availableHeight);

__attribute__((unused)) static jboolean OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareContinuingRowHeaderWithInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint rowGroup, jint availableHeight);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineFillJRFillCrosstab)

@implementation OrgOssPdfreporterEngineFillJRFillCrosstab

- (instancetype)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                       withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
             withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillCrosstab_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, filler, crosstab, factory);
  return self;
}

- (jboolean)isIgnoreWidthWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                            withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_isIgnoreWidthWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterCrosstabsJRCrosstab_(self, filler, crosstab);
}

- (OrgOssPdfreporterEngineTypeModeEnum *)getModeValue {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getModeWithOrgOssPdfreporterEngineJRCommonElement_withOrgOssPdfreporterEngineTypeModeEnum_(self, JreLoadEnum(OrgOssPdfreporterEngineTypeModeEnum, TRANSPARENT));
}

- (void)copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillCrosstab_copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(self, crosstab, factory);
}

- (void)copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
   withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillCrosstab_copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(self, crosstab, factory);
}

- (void)copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillCrosstab_copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(self, crosstab, factory);
}

- (void)copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
            withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillCrosstab_copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, crosstab, factory);
}

- (void)copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillCrosstab_copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(self, crosstab, factory);
}

- (void)copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
           withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillCrosstab_copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, crosstab, factory);
}

- (OrgOssPdfreporterEngineFillJRBaseFiller *)getFiller {
  return filler_;
}

- (void)loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport {
  @try {
    OrgOssPdfreporterEngineFillJREvaluator *evaluator = [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk(OrgOssPdfreporterEngineJasperCompileManager_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext]))) getEvaluatorWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterCrosstabsJRCrosstab:parentCrosstab_];
    crosstabEvaluator_ = new_OrgOssPdfreporterCrosstabsFillJRCrosstabExpressionEvaluator_initWithOrgOssPdfreporterEngineFillJREvaluator_(evaluator);
  }
  @catch (OrgOssPdfreporterEngineJRException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_withNSException_(@"Could not load evaluator for crosstab.", e);
  }
}

- (OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *)createServiceWithByte:(jbyte)evaluation {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceWithByte_(self, evaluation);
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *)createServiceBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>)group
                                                                                                                       withByte:(jbyte)evaluation {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_withByte_(self, group, evaluation);
}

- (OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *)createServiceMeasureWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *)measure {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceMeasureWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure_(self, measure);
}

- (id)evaluateMeasuresExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *)measureValues {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(measures_))->size_; i++) {
    id value = [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk(IOSObjectArray_Get(nil_chk(measureValues), i))) getValue];
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(IOSObjectArray_Get(nil_chk(measures_), i))) getFillVariable])) setValueWithId:value];
  }
  return [((OrgOssPdfreporterCrosstabsFillJRCrosstabExpressionEvaluator *) nil_chk(crosstabEvaluator_)) evaluateWithOrgOssPdfreporterEngineJRExpression:expression withByte:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
}

- (void)reset {
  [super reset];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(variables_))->size_; i++) {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(IOSObjectArray_Get(variables_, i))) setValueWithId:nil];
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(IOSObjectArray_Get(nil_chk(variables_), i))) setInitializedWithBoolean:true];
  }
  printFrames_ = nil;
}

- (void)evaluateWithByte:(jbyte)evaluation {
  [self reset];
  [self evaluatePrintWhenExpressionWithByte:evaluation];
  if ([self isPrintWhenExpressionNull] || [self isPrintWhenTrue]) {
    [self evaluatePropertiesWithByte:evaluation];
    [self evaluateStyleWithByte:evaluation];
    [((OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *) nil_chk(dataset_)) evaluateDatasetRunWithByte:evaluation];
    [self initEvaluatorWithByte:evaluation];
    [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) processData];
    [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) createCrosstab];
    hasData_ = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) hasData];
    if (hasData_) {
      columnHeadersData_ = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) getColumnHeaders];
      rowHeadersData_ = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) getRowHeaders];
      cellData_ = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) getCrosstabCells];
      if (percentage_) {
        grandTotals_ = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) getGrandTotals];
      }
      [((OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *) nil_chk(crosstabFiller_)) initCrosstab];
    }
    overflowStartPage_ = 0;
    ignoreWidth_ = OrgOssPdfreporterEngineFillJRFillCrosstab_isIgnoreWidthWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterCrosstabsJRCrosstab_(self, filler_, parentCrosstab_);
  }
}

- (void)initEvaluatorWithByte:(jbyte)evaluation {
  id<JavaUtilMap> parameterValues = OrgOssPdfreporterEngineFillJRFillSubreport_getParameterValuesWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRExpression_withOrgOssPdfreporterEngineJRDatasetParameterArray_withByte_withBoolean_withBoolean_withBoolean_(filler_, [self getParametersMapExpression], [self getParameters], evaluation, true, false, false);
  JavaUtilResourceBundle *resBdl = (JavaUtilResourceBundle *) cast_chk([((id<JavaUtilMap>) nil_chk(parameterValues)) getWithId:OrgOssPdfreporterEngineJRParameter_REPORT_RESOURCE_BUNDLE], [JavaUtilResourceBundle class]);
  if (resBdl == nil) {
    id<OrgOssPdfreporterEngineFillIJRFillParameter> resourceBundleParam = [((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getParametersMap])) getWithId:OrgOssPdfreporterEngineJRParameter_REPORT_RESOURCE_BUNDLE];
    (void) [parameterValues putWithId:OrgOssPdfreporterEngineJRParameter_REPORT_RESOURCE_BUNDLE withId:[((id<OrgOssPdfreporterEngineFillIJRFillParameter>) nil_chk(resourceBundleParam)) getValue]];
  }
  (void) [parameterValues putWithId:OrgOssPdfreporterEngineJRParameter_REPORT_PARAMETERS_MAP withId:parameterValues];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(parameters_))->size_; i++) {
    id value = [parameterValues getWithId:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabParameter *) nil_chk(IOSObjectArray_Get(parameters_, i))) getName]];
    [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabParameter *) nil_chk(IOSObjectArray_Get(nil_chk(parameters_), i))) setValueWithId:value];
  }
  [((OrgOssPdfreporterCrosstabsFillJRCrosstabExpressionEvaluator *) nil_chk(crosstabEvaluator_)) init__WithJavaUtilMap:parametersMap_ withJavaUtilMap:variablesMap_ withOrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnum:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getWhenResourceMissingType]];
}

- (void)initBucketingService {
  if (bucketingService_ == nil) {
    @try {
      bucketingService_ = OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceWithByte_(self, OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT);
    }
    @catch (OrgOssPdfreporterEngineJRException *e) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_withNSException_(@"Could not create bucketing service", e);
    }
  }
  else {
    [bucketingService_ clear];
  }
}

- (jboolean)prepareWithInt:(jint)availableHeight
               withBoolean:(jboolean)isOverflow {
  [super prepareWithInt:availableHeight withBoolean:isOverflow];
  if (![self isToPrint]) {
    return false;
  }
  if (availableHeight < [self getRelativeY] + [self getHeight]) {
    [self setToPrintWithBoolean:false];
    return true;
  }
  if (isOverflow && [((OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *) nil_chk(crosstabFiller_)) ended] && [self isAlreadyPrinted]) {
    if ([self isPrintWhenDetailOverflows]) {
      [self rewind];
      [self setReprintedWithBoolean:true];
    }
    else {
      [self setStretchHeightWithInt:[self getHeight]];
      [self setToPrintWithBoolean:false];
      return false;
    }
  }
  if (isOverflow && [self isPrintWhenDetailOverflows]) {
    [self setReprintedWithBoolean:true];
  }
  printFrames_ = new_JavaUtilArrayList_init();
  [((OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *) nil_chk(crosstabFiller_)) fillWithInt:availableHeight - [self getRelativeY]];
  if (![((id<JavaUtilList>) nil_chk(printFrames_)) isEmpty]) {
    overflowStartPage_ = 0;
  }
  else {
    jint pageCount = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getCurrentPageCount];
    if (overflowStartPage_ == 0) {
      overflowStartPage_ = pageCount;
    }
    else if (pageCount >= overflowStartPage_ + 2) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(@"Crosstab has not printed anything on 3 consecutive pages, likely infinite loop");
    }
  }
  jboolean willOverflow = [((OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *) nil_chk(crosstabFiller_)) willOverflow];
  if (willOverflow) {
    [self setStretchHeightWithInt:availableHeight - [self getRelativeY]];
  }
  else if (![((id<JavaUtilList>) nil_chk(printFrames_)) isEmpty]) {
    OrgOssPdfreporterEngineFillJRTemplatePrintFrame *lastFrame = [((id<JavaUtilList>) nil_chk(printFrames_)) getWithInt:[printFrames_ size] - 1];
    jint usedHeight = [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(lastFrame)) getY] + [lastFrame getHeight];
    [self setStretchHeightWithInt:usedHeight];
  }
  return willOverflow;
}

- (void)addCrosstabChunkWithJavaUtilList:(id<JavaUtilList>)elements
                                 withInt:(jint)yOffset {
  OrgOssPdfreporterEngineFillJRTemplatePrintFrame *printFrame = new_OrgOssPdfreporterEngineFillJRTemplatePrintFrame_initWithOrgOssPdfreporterEngineFillJRTemplateFrame_withInt_([self getTemplateFrame], elementId_);
  [printFrame setXWithInt:0];
  [printFrame setYWithInt:yOffset];
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(elements, new_OrgOssPdfreporterEngineFillJRYXComparator_init());
  jint xLimit = JavaLangInteger_MIN_VALUE;
  jint yLimit = JavaLangInteger_MIN_VALUE;
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(elements)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineJRPrintElement> element = [it next];
    if ([((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [element getWidth] > xLimit) {
      xLimit = [element getX] + [element getWidth];
    }
    if ([element getY] + [element getHeight] > yLimit) {
      yLimit = [element getY] + [element getHeight];
    }
  }
  id<OrgOssPdfreporterEngineJRLineBox> lineBox = [self getLineBox];
  jint width = xLimit + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox)) getLeftPadding])) intValue] + [((JavaLangInteger *) nil_chk([lineBox getRightPadding])) intValue];
  [printFrame setWidthWithInt:width];
  if ([self getRunDirectionValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeRunDirectionEnum, RTL)) {
    [printFrame setXWithInt:[self getWidth] - width];
  }
  jint height = yLimit + [((JavaLangInteger *) nil_chk([lineBox getTopPadding])) intValue] + [((JavaLangInteger *) nil_chk([lineBox getBottomPadding])) intValue];
  [printFrame setHeightWithInt:height];
  if ([self getRunDirectionValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeRunDirectionEnum, RTL)) {
    [self mirrorPrintElementsWithJavaUtilList:elements withInt:xLimit];
  }
  [printFrame addElementsWithJavaUtilCollection:elements];
  [((id<JavaUtilList>) nil_chk(printFrames_)) addWithId:printFrame];
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)fill {
  return nil;
}

- (OrgOssPdfreporterEngineFillJRTemplateFrame *)getTemplateFrame {
  return (OrgOssPdfreporterEngineFillJRTemplateFrame *) cast_chk([self getElementTemplate], [OrgOssPdfreporterEngineFillJRTemplateFrame class]);
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)createElementTemplate {
  OrgOssPdfreporterEngineFillJRTemplateFrame *template_ = new_OrgOssPdfreporterEngineFillJRTemplateFrame_initWithOrgOssPdfreporterEngineJROrigin_withOrgOssPdfreporterEngineJRDefaultStyleProvider_([self getElementOrigin], [((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) getDefaultStyleProvider]);
  [template_ setElementWithOrgOssPdfreporterEngineJRElement:self];
  [template_ copyBoxWithOrgOssPdfreporterEngineJRLineBox:[self getLineBox]];
  return template_;
}

- (void)rewind {
  [((OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *) nil_chk(crosstabFiller_)) initCrosstab];
  overflowStartPage_ = 0;
}

- (id<JavaUtilList>)getPrintElements {
  return printFrames_;
}

- (void)mirrorPrintElementsWithJavaUtilList:(id<JavaUtilList>)printElements
                                    withInt:(jint)width {
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(printElements)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineJRPrintElement> element = [it next];
    jint mirrorX = width - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] - [element getWidth];
    [element setXWithInt:mirrorX];
  }
}

- (void)resolveElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withByte:(jbyte)evaluation {
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterCrosstabsJRCrosstab:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitCrosstabWithOrgOssPdfreporterCrosstabsJRCrosstab:self];
}

- (jint)getId {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getId];
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabDataset>)getDataset {
  return dataset_;
}

- (IOSObjectArray *)getRowGroups {
  return rowGroups_;
}

- (IOSObjectArray *)getColumnGroups {
  return columnGroups_;
}

- (IOSObjectArray *)getMeasures {
  return measures_;
}

- (jint)getColumnBreakOffset {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getColumnBreakOffset];
}

- (jboolean)isRepeatColumnHeaders {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) isRepeatColumnHeaders];
}

- (jboolean)isRepeatRowHeaders {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) isRepeatRowHeaders];
}

- (id<OrgOssPdfreporterCommonsArraysArray2D>)getCells {
  return crossCells_;
}

- (id<OrgOssPdfreporterCrosstabsJRCellContents>)getWhenNoDataCell {
  return whenNoDataCell_;
}

- (IOSObjectArray *)getParameters {
  return parameters_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getParametersMapExpression {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getParametersMapExpression];
}

- (id<OrgOssPdfreporterEngineJRElement>)getElementByKeyWithNSString:(NSString *)elementKey {
  return OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_getElementByKeyWithOrgOssPdfreporterCrosstabsJRCrosstab_withNSString_(self, elementKey);
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  return nil;
}

- (id<OrgOssPdfreporterCrosstabsJRCellContents>)getHeaderCell {
  return headerCell_;
}

- (IOSObjectArray *)getVariables {
  return variables_;
}

- (OrgOssPdfreporterEngineTypeRunDirectionEnum *)getRunDirectionValue {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getRunDirectionValue];
}

- (void)setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnum:(OrgOssPdfreporterEngineTypeRunDirectionEnum *)runDirection {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (OrgOssPdfreporterEngineJROrigin *)getOrigin {
  return [self getElementOrigin];
}

- (JavaLangBoolean *)getIgnoreWidth {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getIgnoreWidth];
}

- (void)setIgnoreWidthWithJavaLangBoolean:(JavaLangBoolean *)ignoreWidth {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setIgnoreWidthWithBoolean:(jboolean)ignoreWidth {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getDefaultLineColor];
}

- (id<OrgOssPdfreporterEngineJRLineBox>)getLineBox {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getLineBox];
}

- (id<OrgOssPdfreporterEngineJasperReportsContext>)getJasperReportsContext {
  return [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext];
}

- (id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>)getExpressionEvaluator {
  return expressionEvaluator_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillJRFillCrosstab class]) {
    OrgOssPdfreporterEngineFillJRFillCrosstab_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterEngineFillJRFillCrosstab_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineFillJRFillCrosstab)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineFillJRBaseFiller:withOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterEngineFillJRFillObjectFactory:", "JRFillCrosstab", NULL, 0x1, NULL, NULL },
    { "isIgnoreWidthWithOrgOssPdfreporterEngineFillJRBaseFiller:withOrgOssPdfreporterCrosstabsJRCrosstab:", "isIgnoreWidth", "Z", 0x2, NULL, NULL },
    { "getModeValue", NULL, "Lorg.oss.pdfreporter.engine.type.ModeEnum;", 0x1, NULL, NULL },
    { "copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:", "copyRowGroups", "V", 0x2, NULL, NULL },
    { "copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:", "copyColumnGroups", "V", 0x2, NULL, NULL },
    { "copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:", "copyMeasures", "V", 0x2, NULL, NULL },
    { "copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterEngineFillJRFillObjectFactory:", "copyParameters", "V", 0x2, NULL, NULL },
    { "copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:", "copyCells", "V", 0x2, NULL, NULL },
    { "copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab:withOrgOssPdfreporterEngineFillJRFillObjectFactory:", "copyVariables", "V", 0x2, NULL, NULL },
    { "getFiller", NULL, "Lorg.oss.pdfreporter.engine.fill.JRBaseFiller;", 0x1, NULL, NULL },
    { "loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:", "loadEvaluator", "V", 0x4, NULL, NULL },
    { "createServiceWithByte:", "createService", "Lorg.oss.pdfreporter.crosstabs.fill.calculation.CrosstabBucketingService;", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "createServiceBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:withByte:", "createServiceBucket", "Lorg.oss.pdfreporter.crosstabs.fill.calculation.BucketDefinition;", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "createServiceMeasureWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure:", "createServiceMeasure", "Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition;", 0x2, NULL, NULL },
    { "evaluateMeasuresExpressionWithOrgOssPdfreporterEngineJRExpression:withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:", "evaluateMeasuresExpression", "Ljava.lang.Object;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "reset", NULL, "V", 0x4, NULL, NULL },
    { "evaluateWithByte:", "evaluate", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "initEvaluatorWithByte:", "initEvaluator", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "initBucketingService", NULL, "V", 0x4, NULL, NULL },
    { "prepareWithInt:withBoolean:", "prepare", "Z", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "addCrosstabChunkWithJavaUtilList:withInt:", "addCrosstabChunk", "V", 0x4, NULL, "(Ljava/util/List<Lorg/oss/pdfreporter/engine/JRPrintElement;>;I)V" },
    { "fill", NULL, "Lorg.oss.pdfreporter.engine.JRPrintElement;", 0x4, NULL, NULL },
    { "getTemplateFrame", NULL, "Lorg.oss.pdfreporter.engine.fill.JRTemplateFrame;", 0x4, NULL, NULL },
    { "createElementTemplate", NULL, "Lorg.oss.pdfreporter.engine.fill.JRTemplateElement;", 0x4, NULL, NULL },
    { "rewind", NULL, "V", 0x4, NULL, NULL },
    { "getPrintElements", NULL, "Ljava.util.List;", 0x4, NULL, "()Ljava/util/List<+Lorg/oss/pdfreporter/engine/JRPrintElement;>;" },
    { "mirrorPrintElementsWithJavaUtilList:withInt:", "mirrorPrintElements", "V", 0x4, NULL, "(Ljava/util/List<Lorg/oss/pdfreporter/engine/JRPrintElement;>;I)V" },
    { "resolveElementWithOrgOssPdfreporterEngineJRPrintElement:withByte:", "resolveElement", "V", 0x4, NULL, NULL },
    { "collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:", "collectExpressions", "V", 0x1, NULL, NULL },
    { "visitWithOrgOssPdfreporterEngineJRVisitor:", "visit", "V", 0x1, NULL, NULL },
    { "getId", NULL, "I", 0x1, NULL, NULL },
    { "getDataset", NULL, "Lorg.oss.pdfreporter.crosstabs.JRCrosstabDataset;", 0x1, NULL, NULL },
    { "getRowGroups", NULL, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabRowGroup;", 0x1, NULL, NULL },
    { "getColumnGroups", NULL, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabColumnGroup;", 0x1, NULL, NULL },
    { "getMeasures", NULL, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabMeasure;", 0x1, NULL, NULL },
    { "getColumnBreakOffset", NULL, "I", 0x1, NULL, NULL },
    { "isRepeatColumnHeaders", NULL, "Z", 0x1, NULL, NULL },
    { "isRepeatRowHeaders", NULL, "Z", 0x1, NULL, NULL },
    { "getCells", NULL, "Lorg.oss.pdfreporter.commons.arrays.Array2D;", 0x1, NULL, "()Lorg/oss/pdfreporter/commons/arrays/Array2D<+Lorg/oss/pdfreporter/crosstabs/JRCrosstabCell;>;" },
    { "getWhenNoDataCell", NULL, "Lorg.oss.pdfreporter.crosstabs.JRCellContents;", 0x1, NULL, NULL },
    { "getParameters", NULL, "[Lorg.oss.pdfreporter.crosstabs.JRCrosstabParameter;", 0x1, NULL, NULL },
    { "getParametersMapExpression", NULL, "Lorg.oss.pdfreporter.engine.JRExpression;", 0x1, NULL, NULL },
    { "getElementByKeyWithNSString:", "getElementByKey", "Lorg.oss.pdfreporter.engine.JRElement;", 0x1, NULL, NULL },
    { "createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:", "createClone", "Lorg.oss.pdfreporter.engine.fill.JRFillCloneable;", 0x1, NULL, NULL },
    { "getHeaderCell", NULL, "Lorg.oss.pdfreporter.crosstabs.JRCellContents;", 0x1, NULL, NULL },
    { "getVariables", NULL, "[Lorg.oss.pdfreporter.engine.JRVariable;", 0x1, NULL, NULL },
    { "getRunDirectionValue", NULL, "Lorg.oss.pdfreporter.engine.type.RunDirectionEnum;", 0x1, NULL, NULL },
    { "setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnum:", "setRunDirection", "V", 0x1, NULL, NULL },
    { "getOrigin", NULL, "Lorg.oss.pdfreporter.engine.JROrigin;", 0x1, NULL, NULL },
    { "getIgnoreWidth", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setIgnoreWidthWithJavaLangBoolean:", "setIgnoreWidth", "V", 0x1, NULL, NULL },
    { "setIgnoreWidthWithBoolean:", "setIgnoreWidth", "V", 0x1, NULL, NULL },
    { "getDefaultLineColor", NULL, "Lorg.oss.pdfreporter.geometry.IColor;", 0x1, NULL, NULL },
    { "getLineBox", NULL, "Lorg.oss.pdfreporter.engine.JRLineBox;", 0x1, NULL, NULL },
    { "getJasperReportsContext", NULL, "Lorg.oss.pdfreporter.engine.JasperReportsContext;", 0x1, NULL, NULL },
    { "getExpressionEvaluator", NULL, "Lorg.oss.pdfreporter.engine.fill.JRFillExpressionEvaluator;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterEngineFillJRFillCrosstab_logger, NULL, .constantValue.asLong = 0 },
    { "parentCrosstab_", NULL, 0x14, "Lorg.oss.pdfreporter.crosstabs.JRCrosstab;", NULL, NULL, .constantValue.asLong = 0 },
    { "dataset_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.fill.JRFillCrosstab$JRFillCrosstabDataset;", NULL, NULL, .constantValue.asLong = 0 },
    { "rowGroups_", NULL, 0x4, "[Lorg.oss.pdfreporter.crosstabs.fill.JRFillCrosstabRowGroup;", NULL, NULL, .constantValue.asLong = 0 },
    { "rowGroupsMap_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
    { "columnGroups_", NULL, 0x4, "[Lorg.oss.pdfreporter.crosstabs.fill.JRFillCrosstabColumnGroup;", NULL, NULL, .constantValue.asLong = 0 },
    { "columnGroupsMap_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
    { "measures_", NULL, 0x4, "[Lorg.oss.pdfreporter.crosstabs.fill.JRFillCrosstabMeasure;", NULL, NULL, .constantValue.asLong = 0 },
    { "bucketingService_", NULL, 0x4, "Lorg.oss.pdfreporter.crosstabs.fill.calculation.CrosstabBucketingService;", NULL, NULL, .constantValue.asLong = 0 },
    { "variables_", NULL, 0x4, "[Lorg.oss.pdfreporter.engine.fill.JRFillVariable;", NULL, NULL, .constantValue.asLong = 0 },
    { "variablesMap_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/fill/JRFillVariable;>;", .constantValue.asLong = 0 },
    { "totalVariables_", NULL, 0x4, "[[[Lorg.oss.pdfreporter.engine.fill.JRFillVariable;", NULL, NULL, .constantValue.asLong = 0 },
    { "retrieveTotal_", NULL, 0x4, "[[Z", NULL, NULL, .constantValue.asLong = 0 },
    { "parameters_", NULL, 0x4, "[Lorg.oss.pdfreporter.crosstabs.fill.JRFillCrosstabParameter;", NULL, NULL, .constantValue.asLong = 0 },
    { "parametersMap_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/fill/IJRFillParameter;>;", .constantValue.asLong = 0 },
    { "ignoreWidth_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "crosstabEvaluator_", NULL, 0x4, "Lorg.oss.pdfreporter.crosstabs.fill.JRCrosstabExpressionEvaluator;", NULL, NULL, .constantValue.asLong = 0 },
    { "crossCells_", NULL, 0x4, "Lorg.oss.pdfreporter.commons.arrays.Array2D;", NULL, "Lorg/oss/pdfreporter/commons/arrays/Array2D<+Lorg/oss/pdfreporter/crosstabs/fill/JRFillCrosstabCell;>;", .constantValue.asLong = 0 },
    { "headerCell_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.fill.JRFillCellContents;", NULL, NULL, .constantValue.asLong = 0 },
    { "whenNoDataCell_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.fill.JRFillCellContents;", NULL, NULL, .constantValue.asLong = 0 },
    { "hasData_", NULL, 0x4, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "columnHeadersData_", NULL, 0x4, "[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.HeaderCell;", NULL, NULL, .constantValue.asLong = 0 },
    { "rowHeadersData_", NULL, 0x4, "[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.HeaderCell;", NULL, NULL, .constantValue.asLong = 0 },
    { "cellData_", NULL, 0x4, "[[Lorg.oss.pdfreporter.crosstabs.fill.calculation.CrosstabCell;", NULL, NULL, .constantValue.asLong = 0 },
    { "grandTotals_", NULL, 0x4, "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.MeasureDefinition$MeasureValue;", NULL, NULL, .constantValue.asLong = 0 },
    { "percentage_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "crosstabFiller_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.fill.JRFillCrosstab$CrosstabFiller;", NULL, NULL, .constantValue.asLong = 0 },
    { "overflowStartPage_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "printFrames_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/engine/fill/JRTemplatePrintFrame;>;", .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.engine.fill.JRFillCrosstab$JRFillCrosstabDataset;", "Lorg.oss.pdfreporter.engine.fill.JRFillCrosstab$CrosstabFiller;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillJRFillCrosstab = { 2, "JRFillCrosstab", "org.oss.pdfreporter.engine.fill", NULL, 0x1, 56, methods, 29, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillJRFillCrosstab;
}

@end

void OrgOssPdfreporterEngineFillJRFillCrosstab_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  OrgOssPdfreporterEngineFillJRFillElement_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRElement_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, filler, crosstab, factory);
  self->parentCrosstab_ = crosstab;
  [self loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getJasperReport]];
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *crosstabFactory = new_OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_initWithOrgOssPdfreporterEngineFillJRFillObjectFactory_withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator_(factory, self->crosstabEvaluator_);
  [crosstabFactory setParentOriginProviderWithOrgOssPdfreporterEngineFillJROriginProvider:self];
  self->headerCell_ = [crosstabFactory getCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getHeaderCell] withNSString:OrgOssPdfreporterCrosstabsJRCellContents_TYPE_CROSSTAB_HEADER];
  OrgOssPdfreporterEngineFillJRFillCrosstab_copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(self, crosstab, crosstabFactory);
  OrgOssPdfreporterEngineFillJRFillCrosstab_copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(self, crosstab, crosstabFactory);
  OrgOssPdfreporterEngineFillJRFillCrosstab_copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(self, crosstab, crosstabFactory);
  OrgOssPdfreporterEngineFillJRFillCrosstab_copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(self, crosstab, crosstabFactory);
  self->whenNoDataCell_ = [crosstabFactory getCellWithOrgOssPdfreporterCrosstabsJRCellContents:[crosstab getWhenNoDataCell] withNSString:OrgOssPdfreporterCrosstabsJRCellContents_TYPE_NO_DATA_CELL];
  self->dataset_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getCrosstabDatasetWithOrgOssPdfreporterCrosstabsJRCrosstabDataset:[crosstab getDataset] withOrgOssPdfreporterEngineFillJRFillCrosstab:self];
  [((OrgOssPdfreporterCrosstabsFillJRCrosstabExpressionEvaluator *) nil_chk(self->crosstabEvaluator_)) setFillDatasetWithOrgOssPdfreporterEngineFillJRFillDataset:[((OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *) nil_chk(self->dataset_)) getFillDataset]];
  OrgOssPdfreporterEngineFillJRFillCrosstab_copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, crosstab, factory);
  OrgOssPdfreporterEngineFillJRFillCrosstab_copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, crosstab, crosstabFactory);
  self->crosstabFiller_ = new_OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_initWithOrgOssPdfreporterEngineFillJRFillCrosstab_(self);
}

OrgOssPdfreporterEngineFillJRFillCrosstab *new_OrgOssPdfreporterEngineFillJRFillCrosstab_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillJRFillCrosstab, initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_, filler, crosstab, factory)
}

OrgOssPdfreporterEngineFillJRFillCrosstab *create_OrgOssPdfreporterEngineFillJRFillCrosstab_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillJRFillCrosstab, initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_, filler, crosstab, factory)
}

jboolean OrgOssPdfreporterEngineFillJRFillCrosstab_isIgnoreWidthWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterCrosstabsJRCrosstab_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab) {
  JavaLangBoolean *crosstabIgnoreWidth = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getIgnoreWidth];
  if (crosstabIgnoreWidth != nil) {
    return [crosstabIgnoreWidth booleanValue];
  }
  NSString *reportProperty = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((OrgOssPdfreporterEngineJasperReport *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler))->jasperReport_)) getPropertiesMap])) getPropertyWithNSString:OrgOssPdfreporterCrosstabsJRCrosstab_PROPERTY_IGNORE_WIDTH];
  if (reportProperty != nil) {
    return OrgOssPdfreporterEngineJRPropertiesUtil_asBooleanWithNSString_(reportProperty);
  }
  JavaLangBoolean *ignorePaginationParam = (JavaLangBoolean *) cast_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk([filler getMasterFiller])) getParameterValueWithNSString:OrgOssPdfreporterEngineJRParameter_IS_IGNORE_PAGINATION], [JavaLangBoolean class]);
  if (ignorePaginationParam != nil && [ignorePaginationParam booleanValue]) {
    return [ignorePaginationParam booleanValue];
  }
  return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([filler getPropertiesUtil])) getBooleanPropertyWithNSString:OrgOssPdfreporterCrosstabsJRCrosstab_PROPERTY_IGNORE_WIDTH];
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *factory) {
  IOSObjectArray *groups = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getRowGroups];
  self->rowGroups_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(groups))->size_ type:OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup_class_()];
  self->rowGroupsMap_ = new_JavaUtilHashMap_init();
  for (jint i = 0; i < groups->size_; ++i) {
    OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *group = [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(factory)) getCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:IOSObjectArray_Get(groups, i)];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getFillHeader])) setVerticalPositionTypeWithOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum:[((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(IOSObjectArray_Get(groups, i))) getPositionValue]];
    (void) IOSObjectArray_Set(nil_chk(self->rowGroups_), i, group);
    (void) [((id<JavaUtilMap>) nil_chk(self->rowGroupsMap_)) putWithId:[group getName] withId:JavaLangInteger_valueOfWithInt_(i)];
  }
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *factory) {
  IOSObjectArray *groups = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getColumnGroups];
  self->columnGroups_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(groups))->size_ type:OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup_class_()];
  self->columnGroupsMap_ = new_JavaUtilHashMap_init();
  for (jint i = 0; i < groups->size_; ++i) {
    OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *group = [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(factory)) getCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:IOSObjectArray_Get(groups, i)];
    (void) IOSObjectArray_Set(nil_chk(self->columnGroups_), i, group);
    (void) [((id<JavaUtilMap>) nil_chk(self->columnGroupsMap_)) putWithId:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk(group)) getName] withId:JavaLangInteger_valueOfWithInt_(i)];
  }
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *factory) {
  IOSObjectArray *crossMeasures = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getMeasures];
  self->measures_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(crossMeasures))->size_ type:OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure_class_()];
  for (jint i = 0; i < crossMeasures->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(self->measures_), i, [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(factory)) getCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:IOSObjectArray_Get(crossMeasures, i)]);
  }
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  IOSObjectArray *crossParams = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getParameters];
  self->parameters_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(crossParams))->size_ type:OrgOssPdfreporterCrosstabsFillJRFillCrosstabParameter_class_()];
  self->parametersMap_ = new_JavaUtilHashMap_init();
  for (jint i = 0; i < crossParams->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(self->parameters_), i, [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getCrosstabParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:IOSObjectArray_Get(crossParams, i)]);
    (void) [((id<JavaUtilMap>) nil_chk(self->parametersMap_)) putWithId:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabParameter *) nil_chk(IOSObjectArray_Get(nil_chk(self->parameters_), i))) getName] withId:IOSObjectArray_Get(nil_chk(self->parameters_), i)];
  }
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *factory) {
  id<OrgOssPdfreporterCommonsArraysArray2D> crosstabCells = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getCells];
  self->crossCells_ = new_OrgOssPdfreporterCommonsArraysArray2DImpl_initWithInt_withInt_(((IOSObjectArray *) nil_chk(self->rowGroups_))->size_ + 1, ((IOSObjectArray *) nil_chk(self->columnGroups_))->size_ + 1);
  for (jint i = 0; i <= ((IOSObjectArray *) nil_chk(self->rowGroups_))->size_; ++i) {
    for (jint j = 0; j <= ((IOSObjectArray *) nil_chk(self->columnGroups_))->size_; ++j) {
      if ([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crosstabCells)) getWithInt:i withInt:j] != nil) {
        [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(self->crossCells_)) setWithInt:i withInt:j withId:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(factory)) getCrosstabCellWithOrgOssPdfreporterCrosstabsJRCrosstabCell:[crosstabCells getWithInt:i withInt:j]]];
      }
    }
  }
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstab> crosstab, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  IOSObjectArray *vars = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getVariables];
  self->variables_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(vars))->size_ type:OrgOssPdfreporterEngineFillJRFillVariable_class_()];
  self->variablesMap_ = new_JavaUtilHashMap_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->variables_))->size_; i++) {
    (void) IOSObjectArray_Set(self->variables_, i, [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getVariableWithOrgOssPdfreporterEngineJRVariable:IOSObjectArray_Get(vars, i)]);
    (void) [((id<JavaUtilMap>) nil_chk(self->variablesMap_)) putWithId:[((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(IOSObjectArray_Get(nil_chk(self->variables_), i))) getName] withId:IOSObjectArray_Get(nil_chk(self->variables_), i)];
  }
  id<JavaUtilMap> totalVarPos = new_JavaUtilHashMap_init();
  self->totalVariables_ = [IOSObjectArray newArrayWithDimensions:3 lengths:(jint[]){ ((IOSObjectArray *) nil_chk(self->rowGroups_))->size_ + 1, ((IOSObjectArray *) nil_chk(self->columnGroups_))->size_ + 1, ((IOSObjectArray *) nil_chk(self->measures_))->size_ } type:OrgOssPdfreporterEngineFillJRFillVariable_class_()];
  for (jint row = 0; row <= ((IOSObjectArray *) nil_chk(self->rowGroups_))->size_; ++row) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = row == self->rowGroups_->size_ ? nil : IOSObjectArray_Get(self->rowGroups_, row);
    for (jint col = 0; col <= ((IOSObjectArray *) nil_chk(self->columnGroups_))->size_; ++col) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = col == self->columnGroups_->size_ ? nil : IOSObjectArray_Get(self->columnGroups_, col);
      if (row < ((IOSObjectArray *) nil_chk(self->rowGroups_))->size_ || col < self->columnGroups_->size_) {
        for (jint m = 0; m < ((IOSObjectArray *) nil_chk(self->measures_))->size_; m++) {
          NSString *totalVariableName = OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure_withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup_withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup_(IOSObjectArray_Get(self->measures_, m), rowGroup, colGroup);
          (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->totalVariables_), row)), col)), m, [((id<JavaUtilMap>) nil_chk(self->variablesMap_)) getWithId:totalVariableName]);
          (void) [totalVarPos putWithId:totalVariableName withId:[IOSIntArray newArrayWithInts:(jint[]){ row, col } count:2]];
        }
      }
    }
  }
  id<JavaUtilSet> measureVars = new_JavaUtilHashSet_init();
  {
    IOSObjectArray *a__ = self->measures_;
    OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *measure = *b__++;
      [measureVars addWithId:[((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(measure)) getFillVariable])) getName]];
    }
  }
  self->retrieveTotal_ = [IOSBooleanArray newArrayWithDimensions:2 lengths:(jint[]){ ((IOSObjectArray *) nil_chk(self->rowGroups_))->size_ + 1, ((IOSObjectArray *) nil_chk(self->columnGroups_))->size_ + 1 }];
  OrgOssPdfreporterEngineJRExpressionCollector *collector = OrgOssPdfreporterEngineJRExpressionCollector_collectorWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterEngineJRReport_withOrgOssPdfreporterCrosstabsJRCrosstab_([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(self->filler_)) getJasperReportsContext], [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(self->filler_)) getJasperReport], crosstab);
  id<JavaUtilList> expressions = [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) getExpressionsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(expressions)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id<OrgOssPdfreporterEngineJRExpression> expression = [iter next];
    id expressionContext = [collector getExpressionContextWithOrgOssPdfreporterEngineJRExpression:expression];
    jboolean groupHeaderExpression = [OrgOssPdfreporterCrosstabsJRCrosstabGroup_class_() isInstance:expressionContext];
    IOSObjectArray *chunks = [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(expression)) getChunks];
    if (chunks != nil) {
      for (jint i = 0; i < chunks->size_; i++) {
        id<OrgOssPdfreporterEngineJRExpressionChunk> chunk = IOSObjectArray_Get(chunks, i);
        if ([((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getType] == OrgOssPdfreporterEngineJRExpressionChunk_TYPE_VARIABLE) {
          NSString *varName = [chunk getText];
          IOSIntArray *pos = [totalVarPos getWithId:varName];
          if (pos != nil) {
            *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->retrieveTotal_), IOSIntArray_Get(pos, 0))), IOSIntArray_Get(pos, 1)) = true;
          }
          if (groupHeaderExpression && (pos != nil || [measureVars containsWithId:varName])) {
            *IOSBooleanArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->retrieveTotal_), 0)), 0) = true;
          }
        }
      }
    }
  }
}

OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceWithByte_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, jbyte evaluation) {
  jboolean hasOrderByExpression = false;
  id<JavaUtilList> rowBuckets = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(self->rowGroups_))->size_);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->rowGroups_))->size_; ++i) {
    OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *group = IOSObjectArray_Get(self->rowGroups_, i);
    [rowBuckets addWithId:OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_withByte_(self, group, evaluation)];
    hasOrderByExpression |= ([((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getBucket])) getOrderByExpression] != nil);
  }
  id<JavaUtilList> colBuckets = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(self->columnGroups_))->size_);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->columnGroups_))->size_; ++i) {
    OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *group = IOSObjectArray_Get(self->columnGroups_, i);
    [colBuckets addWithId:OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_withByte_(self, group, evaluation)];
    hasOrderByExpression |= ([((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk(group)) getBucket])) getOrderByExpression] != nil);
  }
  self->percentage_ = false;
  id<JavaUtilList> measureList = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(self->measures_))->size_);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->measures_))->size_; ++i) {
    [measureList addWithId:OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceMeasureWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure_(self, IOSObjectArray_Get(self->measures_, i))];
    self->percentage_ |= ([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(IOSObjectArray_Get(nil_chk(self->measures_), i))) getPercentageType] == JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabPercentageEnum, GRAND_TOTAL));
  }
  if (self->percentage_ || hasOrderByExpression) {
    [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([rowBuckets getWithInt:0])) setComputeTotal];
    [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([colBuckets getWithInt:0])) setComputeTotal];
  }
  return new_OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext_withJavaUtilList_withJavaUtilList_withJavaUtilList_withBoolean_withBooleanArray2_(self, rowBuckets, colBuckets, measureList, [((OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *) nil_chk(self->dataset_)) isDataPreSorted], self->retrieveTotal_);
}

OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup_withByte_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, id<OrgOssPdfreporterCrosstabsJRCrosstabGroup> group, jbyte evaluation) {
  id<OrgOssPdfreporterCrosstabsJRCrosstabBucket> bucket = [((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(group)) getBucket];
  id<JavaUtilComparator> comparator = nil;
  id<OrgOssPdfreporterEngineJRExpression> comparatorExpression = [((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getComparatorExpression];
  if (comparatorExpression != nil) {
    comparator = (id<JavaUtilComparator>) cast_check([self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:comparatorExpression withByte:evaluation], JavaUtilComparator_class_());
  }
  return new_OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_initWithIOSClass_withOrgOssPdfreporterEngineJRExpression_withJavaUtilComparator_withOrgOssPdfreporterEngineTypeSortOrderEnum_withOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnum_([bucket getValueClass], [bucket getOrderByExpression], comparator, [bucket getOrderValue], [group getTotalPositionValue]);
}

OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *OrgOssPdfreporterEngineFillJRFillCrosstab_createServiceMeasureWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure_(OrgOssPdfreporterEngineFillJRFillCrosstab *self, OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *measure) {
  return new_OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_initWithIOSClass_withOrgOssPdfreporterEngineTypeCalculationEnum_withOrgOssPdfreporterEngineFillJRExtendedIncrementerFactory_([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(measure)) getValueClass], [measure getCalculationValue], [measure getIncrementerFactory]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillJRFillCrosstab)

@implementation OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset

- (instancetype)initWithOrgOssPdfreporterEngineFillJRFillCrosstab:(OrgOssPdfreporterEngineFillJRFillCrosstab *)outer$
                  withOrgOssPdfreporterCrosstabsJRCrosstabDataset:(id<OrgOssPdfreporterCrosstabsJRCrosstabDataset>)dataset
               withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset_initWithOrgOssPdfreporterEngineFillJRFillCrosstab_withOrgOssPdfreporterCrosstabsJRCrosstabDataset_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, outer$, dataset, factory);
  return self;
}

- (void)customInitialize {
  [this$0_ initBucketingService];
}

- (void)customEvaluateWithOrgOssPdfreporterEngineFillJRCalculator:(OrgOssPdfreporterEngineFillJRCalculator *)calculator {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(this$0_->rowGroups_))->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(bucketValues_), i, [((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(calculator)) evaluateWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(IOSObjectArray_Get(this$0_->rowGroups_, i))) getBucket])) getExpression]]);
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(this$0_->columnGroups_))->size_; ++i) {
    (void) IOSObjectArray_Set(nil_chk(bucketValues_), i + ((IOSObjectArray *) nil_chk(this$0_->rowGroups_))->size_, [((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(calculator)) evaluateWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk(IOSObjectArray_Get(this$0_->columnGroups_, i))) getBucket])) getExpression]]);
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(this$0_->measures_))->size_; i++) {
    (void) IOSObjectArray_Set(nil_chk(measureValues_), i, [((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(calculator)) evaluateWithOrgOssPdfreporterEngineJRExpression:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(IOSObjectArray_Get(this$0_->measures_, i))) getValueExpression]]);
  }
}

- (void)customIncrement {
  @try {
    [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(this$0_->bucketingService_)) addDataWithNSObjectArray:bucketValues_ withNSObjectArray:measureValues_];
  }
  @catch (OrgOssPdfreporterEngineJRException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_withNSException_(@"Error incrementing crosstab dataset", e);
  }
}

- (id<OrgOssPdfreporterJfreeDataset>)getCustomDataset {
  return nil;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
}

- (jboolean)isDataPreSorted {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstabDataset>) nil_chk(((id<OrgOssPdfreporterCrosstabsJRCrosstabDataset>) cast_check(parent_, OrgOssPdfreporterCrosstabsJRCrosstabDataset_class_())))) isDataPreSorted];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineFillJRFillCrosstab:withOrgOssPdfreporterCrosstabsJRCrosstabDataset:withOrgOssPdfreporterEngineFillJRFillObjectFactory:", "JRFillCrosstabDataset", NULL, 0x1, NULL, NULL },
    { "customInitialize", NULL, "V", 0x4, NULL, NULL },
    { "customEvaluateWithOrgOssPdfreporterEngineFillJRCalculator:", "customEvaluate", "V", 0x4, "Lorg.oss.pdfreporter.engine.fill.JRExpressionEvalException;", NULL },
    { "customIncrement", NULL, "V", 0x4, NULL, NULL },
    { "getCustomDataset", NULL, "Lorg.oss.pdfreporter.jfree.Dataset;", 0x4, NULL, NULL },
    { "collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:", "collectExpressions", "V", 0x1, NULL, NULL },
    { "isDataPreSorted", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.oss.pdfreporter.engine.fill.JRFillCrosstab;", NULL, NULL, .constantValue.asLong = 0 },
    { "bucketValues_", NULL, 0x2, "[Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
    { "measureValues_", NULL, 0x2, "[Ljava.lang.Object;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset = { 2, "JRFillCrosstabDataset", "org.oss.pdfreporter.engine.fill", "JRFillCrosstab", 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset;
}

@end

void OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset_initWithOrgOssPdfreporterEngineFillJRFillCrosstab_withOrgOssPdfreporterCrosstabsJRCrosstabDataset_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *self, OrgOssPdfreporterEngineFillJRFillCrosstab *outer$, id<OrgOssPdfreporterCrosstabsJRCrosstabDataset> dataset, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  self->this$0_ = outer$;
  OrgOssPdfreporterEngineFillJRFillElementDataset_initWithOrgOssPdfreporterEngineJRElementDataset_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, dataset, factory);
  self->bucketValues_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(outer$->rowGroups_))->size_ + ((IOSObjectArray *) nil_chk(outer$->columnGroups_))->size_ type:NSObject_class_()];
  self->measureValues_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(outer$->measures_))->size_ type:NSObject_class_()];
}

OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *new_OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset_initWithOrgOssPdfreporterEngineFillJRFillCrosstab_withOrgOssPdfreporterCrosstabsJRCrosstabDataset_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *outer$, id<OrgOssPdfreporterCrosstabsJRCrosstabDataset> dataset, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset, initWithOrgOssPdfreporterEngineFillJRFillCrosstab_withOrgOssPdfreporterCrosstabsJRCrosstabDataset_withOrgOssPdfreporterEngineFillJRFillObjectFactory_, outer$, dataset, factory)
}

OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *create_OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset_initWithOrgOssPdfreporterEngineFillJRFillCrosstab_withOrgOssPdfreporterCrosstabsJRCrosstabDataset_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRFillCrosstab *outer$, id<OrgOssPdfreporterCrosstabsJRCrosstabDataset> dataset, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset, initWithOrgOssPdfreporterEngineFillJRFillCrosstab_withOrgOssPdfreporterCrosstabsJRCrosstabDataset_withOrgOssPdfreporterEngineFillJRFillObjectFactory_, outer$, dataset, factory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset)

@implementation OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller

- (instancetype)initWithOrgOssPdfreporterEngineFillJRFillCrosstab:(OrgOssPdfreporterEngineFillJRFillCrosstab *)outer$ {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_initWithOrgOssPdfreporterEngineFillJRFillCrosstab_(self, outer$);
  return self;
}

- (void)initCrosstab {
  columnXOffsets_ = [self computeOffsetsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_->columnHeadersData_ withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_->columnGroups_ withBoolean:true];
  columnBreakable_ = [self computeBreakableHeadersWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_->columnHeadersData_ withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_->columnGroups_ withIntArray:columnXOffsets_ withBoolean:true withBoolean:true];
  columnCount_ = OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_computeCountsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2_(self, this$0_->columnHeadersData_);
  IOSIntArray *rowYOffsets = [self computeOffsetsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_->rowHeadersData_ withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_->rowGroups_ withBoolean:false];
  rowBreakable_ = [self computeBreakableHeadersWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_->rowHeadersData_ withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_->rowGroups_ withIntArray:rowYOffsets withBoolean:false withBoolean:false];
  rowCount_ = OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_computeCountsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2_(self, this$0_->rowHeadersData_);
  spanHeaders_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(this$0_->rowGroups_))->size_ - 1 type:OrgOssPdfreporterCrosstabsFillCalculationHeaderCell_class_()];
  spanHeadersStart_ = [IOSIntArray newArrayWithLength:this$0_->rowGroups_->size_ - 1];
  startRowIndex_ = 0;
  startColumnIndex_ = 0;
  lastColumnIndex_ = 0;
  noDataCellPrinted_ = false;
}

- (void)setRowHeadersXOffsets {
  rowHeadersXOffsets_ = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(this$0_->rowGroups_))->size_ + 1];
  *IOSIntArray_GetRef(rowHeadersXOffsets_, 0) = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(this$0_->rowGroups_))->size_; i++) {
    *IOSIntArray_GetRef(nil_chk(rowHeadersXOffsets_), i + 1) = IOSIntArray_Get(rowHeadersXOffsets_, i) + [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(IOSObjectArray_Get(this$0_->rowGroups_, i))) getWidth];
  }
}

- (IOSIntArray *)computeOffsetsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headersData
                                  withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:(IOSObjectArray *)groups
                                                                                 withBoolean:(jboolean)width {
  IOSIntArray *offsets = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(headersData), 0)))->size_ + 1];
  *IOSIntArray_GetRef(offsets, 0) = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(headersData, 0)))->size_; i++) {
    jint size = 0;
    for (jint j = ((IOSObjectArray *) nil_chk(groups))->size_ - 1; j >= 0; --j) {
      if (IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(headersData, j)), i) != nil) {
        OrgOssPdfreporterEngineFillJRFillCellContents *cell = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(headersData, j)), i))) isTotal] ? [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabGroup *) nil_chk(IOSObjectArray_Get(groups, j))) getFillTotalHeader] : [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabGroup *) nil_chk(IOSObjectArray_Get(groups, j))) getFillHeader];
        size = cell == nil ? 0 : (width ? [cell getWidth] : [cell getHeight]);
        break;
      }
    }
    *IOSIntArray_GetRef(offsets, i + 1) = IOSIntArray_Get(offsets, i) + size;
  }
  return offsets;
}

- (IOSBooleanArray *)computeBreakableHeadersWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headersData
                                               withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:(IOSObjectArray *)groups
                                                                                             withIntArray:(IOSIntArray *)offsets
                                                                                              withBoolean:(jboolean)width
                                                                                              withBoolean:(jboolean)startHeaders {
  IOSBooleanArray *breakable = [IOSBooleanArray newArrayWithLength:((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(headersData), 0)))->size_];
  for (jint i = 0; i < breakable->size_; i++) {
    *IOSBooleanArray_GetRef(breakable, i) = true;
  }
  for (jint j = 0; j < ((IOSObjectArray *) nil_chk(groups))->size_; ++j) {
    OrgOssPdfreporterEngineFillJRFillCellContents *fillHeader = [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabGroup *) nil_chk(IOSObjectArray_Get(groups, j))) getFillHeader];
    if (fillHeader != nil) {
      jint size = width ? [fillHeader getWidth] : [fillHeader getHeight];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(headersData, 0)))->size_; i++) {
        OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *header = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(headersData, j)), i);
        if (header != nil && ![header isTotal] && [header getLevelSpan] > 1) {
          jint span = [header getLevelSpan];
          if (startHeaders) {
            for (jint k = i + 1; k < i + span && IOSIntArray_Get(nil_chk(offsets), k) - IOSIntArray_Get(offsets, i) < size; ++k) {
              *IOSBooleanArray_GetRef(breakable, k) = false;
            }
          }
          for (jint k = i + span - 1; k > i && IOSIntArray_Get(nil_chk(offsets), i + span) - IOSIntArray_Get(offsets, k) < size; --k) {
            *IOSBooleanArray_GetRef(breakable, k) = false;
          }
        }
      }
    }
  }
  return breakable;
}

- (IOSIntArray *)computeCountsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headersData {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_computeCountsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2_(self, headersData);
}

- (void)fillWithInt:(jint)availableHeight {
  [((id<JavaUtilList>) nil_chk(printRows_)) clear];
  yOffset_ = 0;
  yChunkOffset_ = 0;
  willOverflow_ = false;
  [self fillVerticalCrosstabWithInt:availableHeight];
}

- (jboolean)willOverflow {
  return willOverflow_;
}

- (jboolean)ended {
  return this$0_->hasData_ ? (startRowIndex_ >= ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->rowHeadersData_), 0)))->size_ && startColumnIndex_ >= ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->columnHeadersData_), 0)))->size_) : noDataCellPrinted_;
}

- (void)fillVerticalCrosstabWithInt:(jint)availableHeight {
  id<OrgOssPdfreporterEngineJRLineBox> lineBox = [this$0_ getLineBox];
  jint padding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox)) getTopPadding])) intValue] + [((JavaLangInteger *) nil_chk([lineBox getBottomPadding])) intValue];
  jint contentsHeight = availableHeight - padding;
  if (contentsHeight < 0) {
    willOverflow_ = true;
    return;
  }
  if (!this$0_->hasData_) {
    [self fillNoDataCellWithInt:contentsHeight];
    if (![((id<JavaUtilList>) nil_chk(printRows_)) isEmpty]) {
      [self addFilledRows];
    }
    return;
  }
  printRowHeaders_ = (startColumnIndex_ == 0 || [this$0_ isRepeatRowHeaders]);
  jint rowHeadersXOffset = printRowHeaders_ ? IOSIntArray_Get(nil_chk(rowHeadersXOffsets_), ((IOSObjectArray *) nil_chk(this$0_->rowGroups_))->size_) : 0;
  if (startColumnIndex_ == lastColumnIndex_) {
    jint availableWidth = [this$0_ getWidth] - [((JavaLangInteger *) nil_chk([lineBox getLeftPadding])) intValue] - [((JavaLangInteger *) nil_chk([lineBox getRightPadding])) intValue];
    columnHeaders_ = [self getGroupHeadersWithInt:availableWidth - rowHeadersXOffset withIntArray:columnXOffsets_ withBooleanArray:columnBreakable_ withInt:startColumnIndex_ withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_->columnHeadersData_ withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_->columnGroups_];
    lastColumnIndex_ = startColumnIndex_ + [((id<JavaUtilList>) nil_chk(columnHeaders_)) size];
    if (startColumnIndex_ == lastColumnIndex_) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(@"Not enough space to render the crosstab.");
    }
  }
  printColumnHeaders_ = (startRowIndex_ == 0 || [this$0_ isRepeatColumnHeaders]);
  id<JavaUtilList> columnHeaderRows = nil;
  if (printColumnHeaders_) {
    columnHeaderRows = [self fillColumnHeadersWithInt:rowHeadersXOffset withInt:contentsHeight - yOffset_];
    if (willOverflow_) {
      return;
    }
  }
  jint lastRowIndex = [self fillRowsWithInt:rowHeadersXOffset withInt:contentsHeight - yOffset_];
  if (lastRowIndex == startRowIndex_) {
    willOverflow_ = true;
    return;
  }
  if (columnHeaderRows != nil) {
    [((id<JavaUtilList>) nil_chk(printRows_)) addAllWithJavaUtilCollection:columnHeaderRows];
  }
  if (![((id<JavaUtilList>) nil_chk(printRows_)) isEmpty]) {
    [self addFilledRows];
  }
  if (lastRowIndex >= ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->rowHeadersData_), 0)))->size_) {
    startColumnIndex_ = lastColumnIndex_;
    if (startColumnIndex_ < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->columnHeadersData_), 0)))->size_) {
      startRowIndex_ = lastRowIndex = 0;
      jint yAdvance = yOffset_ + [this$0_ getColumnBreakOffset] + padding;
      yChunkOffset_ += yAdvance;
      jint remainingHeight = availableHeight - yAdvance;
      yOffset_ = 0;
      [self fillVerticalCrosstabWithInt:remainingHeight];
      return;
    }
  }
  jboolean fillEnded = lastRowIndex >= ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(this$0_->rowHeadersData_, 0)))->size_ && lastColumnIndex_ >= ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->columnHeadersData_), 0)))->size_;
  if (fillEnded) {
    [this$0_ setStretchHeightWithInt:yOffset_];
  }
  else {
    [this$0_ setStretchHeightWithInt:availableHeight];
  }
  startRowIndex_ = lastRowIndex;
  willOverflow_ = !fillEnded;
}

- (void)addFilledRows {
  id<JavaUtilList> prints = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(printRows_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilList> rowPrints = [it next];
    [prints addAllWithJavaUtilCollection:rowPrints];
  }
  [this$0_ addCrosstabChunkWithJavaUtilList:prints withInt:yChunkOffset_];
  [((id<JavaUtilList>) nil_chk(printRows_)) clear];
}

- (id<JavaUtilList>)getGroupHeadersWithInt:(jint)available
                              withIntArray:(IOSIntArray *)offsets
                          withBooleanArray:(IOSBooleanArray *)breakable
                                   withInt:(jint)firstIndex
withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headersData
withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:(IOSObjectArray *)groups {
  id<JavaUtilList> headers = new_JavaUtilArrayList_init();
  jint maxOffset = available + IOSIntArray_Get(nil_chk(offsets), firstIndex);
  jint lastIndex;
  for (lastIndex = firstIndex; lastIndex < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(headersData), 0)))->size_ && (this$0_->ignoreWidth_ || IOSIntArray_Get(offsets, lastIndex + 1) <= maxOffset); ++lastIndex) {
    IOSObjectArray *groupHeaders = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(groups))->size_ type:OrgOssPdfreporterCrosstabsFillCalculationHeaderCell_class_()];
    for (jint j = 0; j < groups->size_; ++j) {
      (void) IOSObjectArray_Set(groupHeaders, j, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(headersData, j)), lastIndex));
    }
    [headers addWithId:groupHeaders];
  }
  if (lastIndex < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(headersData, 0)))->size_) {
    while (lastIndex > firstIndex && !IOSBooleanArray_Get(nil_chk(breakable), lastIndex)) {
      --lastIndex;
      (void) [headers removeWithInt:[headers size] - 1];
    }
  }
  if (lastIndex > firstIndex) {
    if (firstIndex > 0) {
      IOSObjectArray *firstHeaders = [headers getWithInt:0];
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(groups))->size_; ++j) {
        OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *header = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(headersData, j)), firstIndex);
        if (header == nil) {
          jint spanIndex = [self getSpanIndexWithInt:firstIndex withInt:j withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:headersData];
          if (spanIndex >= 0) {
            OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *spanCell = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(headersData, j)), spanIndex);
            jint headerEndIdx = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(spanCell)) getLevelSpan] + spanIndex;
            if (headerEndIdx > lastIndex) {
              headerEndIdx = lastIndex;
            }
            (void) IOSObjectArray_Set(nil_chk(firstHeaders), j, OrgOssPdfreporterCrosstabsFillCalculationHeaderCell_createLevelSpanCopyWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell_withInt_(spanCell, headerEndIdx - firstIndex));
          }
        }
      }
    }
    if (lastIndex < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(headersData, 0)))->size_) {
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(groups))->size_; ++j) {
        OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *header = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(headersData, j)), lastIndex);
        if (header == nil) {
          jint spanIndex = [self getSpanIndexWithInt:lastIndex withInt:j withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:headersData];
          if (spanIndex >= firstIndex) {
            OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *spanCell = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(headersData, j)), spanIndex);
            IOSObjectArray *headerCells = [headers getWithInt:spanIndex - firstIndex];
            (void) IOSObjectArray_Set(nil_chk(headerCells), j, OrgOssPdfreporterCrosstabsFillCalculationHeaderCell_createLevelSpanCopyWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell_withInt_(spanCell, lastIndex - spanIndex));
          }
        }
      }
    }
  }
  return headers;
}

- (jint)getSpanIndexWithInt:(jint)i
                    withInt:(jint)j
withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headersData {
  jint spanIndex = i - 1;
  while (spanIndex >= 0 && IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(headersData), j)), spanIndex) == nil) {
    --spanIndex;
  }
  if (spanIndex >= 0) {
    OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *spanCell = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(headersData), j)), spanIndex);
    jint span = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(spanCell)) getLevelSpan];
    if (span > i - spanIndex) {
      return spanIndex;
    }
  }
  return -1;
}

- (void)fillNoDataCellWithInt:(jint)availableHeight {
  if (this$0_->whenNoDataCell_ == nil) {
    noDataCellPrinted_ = true;
  }
  else {
    if (availableHeight < [this$0_->whenNoDataCell_ getHeight]) {
      willOverflow_ = true;
    }
    else {
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(this$0_->whenNoDataCell_)) evaluateWithByte:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(this$0_->whenNoDataCell_)) prepareWithInt:availableHeight];
      willOverflow_ = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(this$0_->whenNoDataCell_)) willOverflow];
      if (!willOverflow_) {
        [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(this$0_->whenNoDataCell_)) setXWithInt:0];
        [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(this$0_->whenNoDataCell_)) setYWithInt:0];
        id<OrgOssPdfreporterEngineJRPrintFrame> printCell = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(this$0_->whenNoDataCell_)) fill];
        id<JavaUtilList> noDataRow = new_JavaUtilArrayList_initWithInt_(1);
        [noDataRow addWithId:printCell];
        [self addPrintRowWithJavaUtilList:noDataRow];
        yOffset_ += [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(this$0_->whenNoDataCell_)) getPrintHeight];
        noDataCellPrinted_ = true;
      }
    }
  }
}

- (id<JavaUtilList>)fillColumnHeadersWithInt:(jint)rowHeadersXOffset
                                     withInt:(jint)availableHeight {
  IOSObjectArray *columnHeaderRows = [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ ((IOSObjectArray *) nil_chk(this$0_->columnGroups_))->size_, lastColumnIndex_ - startColumnIndex_ + 1 } type:OrgOssPdfreporterEngineFillJRFillCellContents_class_()];
  [((id<JavaUtilList>) nil_chk(rowYs_)) clear];
  [((id<JavaUtilList>) nil_chk(rowYs_)) addWithId:JavaLangInteger_valueOfWithInt_(0)];
  if (printRowHeaders_ && this$0_->headerCell_ != nil) {
    OrgOssPdfreporterEngineFillJRFillCellContents *contents = OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillHeaderWithInt_(self, availableHeight);
    if (willOverflow_) {
      return nil;
    }
    (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(columnHeaderRows, ((IOSObjectArray *) nil_chk(this$0_->columnGroups_))->size_ - 1)), 0, contents);
  }
  for (rowIdx_ = 0; rowIdx_ < ((IOSObjectArray *) nil_chk(this$0_->columnGroups_))->size_; rowIdx_++) {
    for (jint columnIdx = startColumnIndex_; columnIdx < lastColumnIndex_; ++columnIdx) {
      IOSObjectArray *headers = [((id<JavaUtilList>) nil_chk(columnHeaders_)) getWithInt:columnIdx - startColumnIndex_];
      OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *cell = IOSObjectArray_Get(nil_chk(headers), rowIdx_);
      if (cell != nil) {
        OrgOssPdfreporterEngineFillJRFillCellContents *contents = OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareColumnHeaderWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell_withInt_withInt_withInt_(self, cell, columnIdx, rowHeadersXOffset, availableHeight);
        (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(columnHeaderRows, rowIdx_ + [cell getDepthSpan] - 1)), columnIdx - startColumnIndex_ + 1, contents);
        if (willOverflow_) {
          goto break_rows;
        }
      }
    }
    jint rowStretchHeight = OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_stretchColumnHeadersRowWithOrgOssPdfreporterEngineFillJRFillCellContentsArray_(self, IOSObjectArray_Get(columnHeaderRows, rowIdx_));
    [((id<JavaUtilList>) nil_chk(rowYs_)) addWithId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([rowYs_ getWithInt:rowIdx_])) intValue] + rowStretchHeight)];
  }
  break_rows: ;
  id<JavaUtilList> headerRows;
  if (willOverflow_) {
    headerRows = nil;
    OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_releaseColumnHeaderCellsWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2_(self, columnHeaderRows);
  }
  else {
    headerRows = OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillColumnHeadersWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2_(self, columnHeaderRows);
    yOffset_ += [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:((IOSObjectArray *) nil_chk(this$0_->columnGroups_))->size_])) intValue];
  }
  [self resetVariables];
  return headerRows;
}

- (void)setCountVarsWithInt:(jint)rowIdx
                    withInt:(jint)colIdx {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setCountVarsWithInt_withInt_(self, rowIdx, colIdx);
}

- (OrgOssPdfreporterEngineFillJRFillCellContents *)fillHeaderWithInt:(jint)availableHeight {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillHeaderWithInt_(self, availableHeight);
}

- (OrgOssPdfreporterEngineFillJRFillCellContents *)prepareColumnHeaderWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:(OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *)cell
                                                                                                                      withInt:(jint)columnIdx
                                                                                                                      withInt:(jint)xOffset
                                                                                                                      withInt:(jint)availableHeight {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareColumnHeaderWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell_withInt_withInt_withInt_(self, cell, columnIdx, xOffset, availableHeight);
}

- (jint)stretchColumnHeadersRowWithOrgOssPdfreporterEngineFillJRFillCellContentsArray:(IOSObjectArray *)headers {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_stretchColumnHeadersRowWithOrgOssPdfreporterEngineFillJRFillCellContentsArray_(self, headers);
}

- (id<JavaUtilList>)fillColumnHeadersWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2:(IOSObjectArray *)columnHeaderRows {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillColumnHeadersWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2_(self, columnHeaderRows);
}

- (void)releaseColumnHeaderCellsWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2:(IOSObjectArray *)columnHeaderRows {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_releaseColumnHeaderCellsWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2_(self, columnHeaderRows);
}

- (jint)fillRowsWithInt:(jint)xOffset
                withInt:(jint)availableHeight {
  [((id<JavaUtilList>) nil_chk(rowYs_)) clear];
  [((id<JavaUtilList>) nil_chk(rowYs_)) addWithId:JavaLangInteger_valueOfWithInt_(0)];
  for (rowIdx_ = 0; rowIdx_ < ((IOSObjectArray *) nil_chk(this$0_->cellData_))->size_ - startRowIndex_; ++rowIdx_) {
    OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_initPreparedRow(self);
    OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareRowWithInt_withInt_(self, xOffset, availableHeight);
    if (willOverflow_) {
      break;
    }
    OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillRow(self);
    [((id<JavaUtilList>) nil_chk(rowYs_)) addWithId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([rowYs_ getWithInt:rowIdx_])) intValue] + preparedRowHeight_)];
  }
  if (rowIdx_ < ((IOSObjectArray *) nil_chk(this$0_->cellData_))->size_ - startRowIndex_) {
    OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_releasePreparedRow(self);
    if (printRowHeaders_) {
      OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillContinuingRowHeadersWithInt_withInt_(self, xOffset, availableHeight);
    }
  }
  yOffset_ += [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_])) intValue];
  return rowIdx_ + startRowIndex_;
}

- (void)initPreparedRow {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_initPreparedRow(self);
}

- (void)removeFilledRowsWithInt:(jint)rowsToRemove {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_removeFilledRowsWithInt_(self, rowsToRemove);
}

- (void)releasePreparedRow {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_releasePreparedRow(self);
}

- (void)fillRow {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillRow(self);
}

- (void)prepareRowWithInt:(jint)xOffset
                  withInt:(jint)availableHeight {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareRowWithInt_withInt_(self, xOffset, availableHeight);
}

- (jboolean)prepareDataCellWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *)data
                                                                             withInt:(jint)column
                                                                             withInt:(jint)availableHeight
                                                                             withInt:(jint)xOffset {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareDataCellWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell_withInt_withInt_withInt_(self, data, column, availableHeight, xOffset);
}

- (jboolean)prepareRowHeaderWithInt:(jint)rowGroup
withOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:(OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *)cell
                            withInt:(jint)vSpan
                            withInt:(jint)availableHeight {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareRowHeaderWithInt_withOrgOssPdfreporterCrosstabsFillCalculationHeaderCell_withInt_withInt_(self, rowGroup, cell, vSpan, availableHeight);
}

- (jboolean)toCloseRowHeaderWithInt:(jint)rowGroup {
  return rowGroup < ((IOSObjectArray *) nil_chk(this$0_->rowGroups_))->size_ - 1 && IOSObjectArray_Get(nil_chk(spanHeaders_), rowGroup) != nil && [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(IOSObjectArray_Get(spanHeaders_, rowGroup))) getLevelSpan] + IOSIntArray_Get(nil_chk(spanHeadersStart_), rowGroup) == rowIdx_ + startRowIndex_ + 1;
}

- (void)removeExceedingSpanHeaders {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_removeExceedingSpanHeaders(self);
}

- (void)setBackSpanHeaders {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setBackSpanHeaders(self);
}

- (void)fillContinuingRowHeadersWithInt:(jint)xOffset
                                withInt:(jint)availableHeight {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillContinuingRowHeadersWithInt_withInt_(self, xOffset, availableHeight);
}

- (void)fillContinuingHeadersWithInt:(jint)lastRowHeight {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillContinuingHeadersWithInt_(self, lastRowHeight);
}

- (void)refillLastRowWithInt:(jint)xOffset
                     withInt:(jint)availableHeight {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_refillLastRowWithInt_withInt_(self, xOffset, availableHeight);
}

- (jboolean)prepareContinuingRowHeaderWithInt:(jint)rowGroup
                                      withInt:(jint)availableHeight {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareContinuingRowHeaderWithInt_withInt_(self, rowGroup, availableHeight);
}

- (void)addPrintRowWithJavaUtilList:(id<JavaUtilList>)printRow {
  [((id<JavaUtilList>) nil_chk(printRows_)) addWithId:printRow];
}

- (id<JavaUtilList>)getLastPrintRow {
  return [((id<JavaUtilList>) nil_chk(printRows_)) getWithInt:[printRows_ size] - 1];
}

- (void)setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:(IOSObjectArray *)groups
          withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:(IOSObjectArray *)bucketValues {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(groups))->size_; i++) {
    id value = nil;
    if (IOSObjectArray_Get(nil_chk(bucketValues), i) != nil && ![((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(IOSObjectArray_Get(bucketValues, i))) isTotal]) {
      value = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(IOSObjectArray_Get(bucketValues, i))) getValue];
    }
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabGroup *) nil_chk(IOSObjectArray_Get(groups, i))) getFillVariable])) setValueWithId:value];
  }
}

- (void)setGroupMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:(OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *)cell
                                                                            withBoolean:(jboolean)rowGroup {
  IOSObjectArray *totals = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) getTotals];
  for (jint m = 0; m < ((IOSObjectArray *) nil_chk(this$0_->measures_))->size_; m++) {
    for (jint row = 0; row <= ((IOSObjectArray *) nil_chk(this$0_->rowGroups_))->size_; row++) {
      for (jint col = 0; col <= ((IOSObjectArray *) nil_chk(this$0_->columnGroups_))->size_; col++) {
        IOSObjectArray *vals = rowGroup ? IOSObjectArray_Get(nil_chk(totals), row) : IOSObjectArray_Get(nil_chk(totals), col);
        if (row == ((IOSObjectArray *) nil_chk(this$0_->rowGroups_))->size_ && col == this$0_->columnGroups_->size_) {
          id value = [self measureValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:vals withInt:m];
          [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->measures_), m))) getFillVariable])) setValueWithId:value];
        }
        else if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(this$0_->retrieveTotal_), row)), col)) {
          OrgOssPdfreporterEngineFillJRFillVariable *totalVar = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(this$0_->totalVariables_), row)), col)), m);
          id value = [self measureValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:vals withInt:m];
          [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(totalVar)) setValueWithId:value];
        }
      }
    }
  }
}

- (void)setMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *)cell {
  IOSObjectArray *values = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *) nil_chk(cell)) getMesureValues];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(this$0_->measures_))->size_; i++) {
    id value = [self measureValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:values withInt:i];
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->measures_), i))) getFillVariable])) setValueWithId:value];
  }
  IOSObjectArray *totals = [cell getTotals];
  for (jint row = 0; row <= ((IOSObjectArray *) nil_chk(this$0_->rowGroups_))->size_; row++) {
    for (jint col = 0; col <= ((IOSObjectArray *) nil_chk(this$0_->columnGroups_))->size_; col++) {
      IOSObjectArray *vals = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(totals), row)), col);
      if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(this$0_->retrieveTotal_), row)), col)) {
        for (jint m = 0; m < ((IOSObjectArray *) nil_chk(this$0_->measures_))->size_; m++) {
          OrgOssPdfreporterEngineFillJRFillVariable *totalVar = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(this$0_->totalVariables_), row)), col)), m);
          id value = [self measureValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:vals withInt:m];
          [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(totalVar)) setValueWithId:value];
        }
      }
    }
  }
}

- (id)measureValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *)values
                                                                                           withInt:(jint)measureIdx {
  if (values == nil) {
    return nil;
  }
  id value;
  if ([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->measures_), measureIdx))) getPercentageType] == JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabPercentageEnum, GRAND_TOTAL)) {
    if ([((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk(IOSObjectArray_Get(values, measureIdx))) isInitialized]) {
      value = [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk(IOSObjectArray_Get(values, measureIdx))) getValue];
    }
    else {
      value = [((id<OrgOssPdfreporterCrosstabsFillJRPercentageCalculator>) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(IOSObjectArray_Get(nil_chk(this$0_->measures_), measureIdx))) getPercentageCalculator])) calculatePercentageWithOrgOssPdfreporterEngineFillJRCalculable:IOSObjectArray_Get(values, measureIdx) withOrgOssPdfreporterEngineFillJRCalculable:IOSObjectArray_Get(nil_chk(this$0_->grandTotals_), measureIdx)];
    }
  }
  else {
    value = [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk(IOSObjectArray_Get(values, measureIdx))) getValue];
  }
  return value;
}

- (void)resetVariables {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(this$0_->rowGroups_))->size_; i++) {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(IOSObjectArray_Get(this$0_->rowGroups_, i))) getFillVariable])) setValueWithId:nil];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(this$0_->columnGroups_))->size_; i++) {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk(IOSObjectArray_Get(this$0_->columnGroups_, i))) getFillVariable])) setValueWithId:nil];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(this$0_->measures_))->size_; i++) {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(IOSObjectArray_Get(this$0_->measures_, i))) getFillVariable])) setValueWithId:nil];
  }
  for (jint row = 0; row <= ((IOSObjectArray *) nil_chk(this$0_->rowGroups_))->size_; ++row) {
    for (jint col = 0; col <= ((IOSObjectArray *) nil_chk(this$0_->columnGroups_))->size_; ++col) {
      if (IOSBooleanArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(this$0_->retrieveTotal_), row)), col)) {
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(this$0_->measures_))->size_; i++) {
          [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(this$0_->totalVariables_), row)), col)), i))) setValueWithId:nil];
        }
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineFillJRFillCrosstab:", "CrosstabFiller", NULL, 0x4, NULL, NULL },
    { "initCrosstab", NULL, "V", 0x4, NULL, NULL },
    { "setRowHeadersXOffsets", NULL, "V", 0x4, NULL, NULL },
    { "computeOffsetsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:withBoolean:", "computeOffsets", "[I", 0x4, NULL, NULL },
    { "computeBreakableHeadersWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:withIntArray:withBoolean:withBoolean:", "computeBreakableHeaders", "[Z", 0x4, NULL, NULL },
    { "computeCountsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:", "computeCounts", "[I", 0x2, NULL, NULL },
    { "fillWithInt:", "fill", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "willOverflow", NULL, "Z", 0x4, NULL, NULL },
    { "ended", NULL, "Z", 0x4, NULL, NULL },
    { "fillVerticalCrosstabWithInt:", "fillVerticalCrosstab", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "addFilledRows", NULL, "V", 0x4, NULL, NULL },
    { "getGroupHeadersWithInt:withIntArray:withBooleanArray:withInt:withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:", "getGroupHeaders", "Ljava.util.List;", 0x4, NULL, "(I[I[ZI[[Lorg/oss/pdfreporter/crosstabs/fill/calculation/HeaderCell;[Lorg/oss/pdfreporter/crosstabs/fill/JRFillCrosstabGroup;)Ljava/util/List<[Lorg/oss/pdfreporter/crosstabs/fill/calculation/HeaderCell;>;" },
    { "getSpanIndexWithInt:withInt:withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:", "getSpanIndex", "I", 0x4, NULL, NULL },
    { "fillNoDataCellWithInt:", "fillNoDataCell", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "fillColumnHeadersWithInt:withInt:", "fillColumnHeaders", "Ljava.util.List;", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", "(II)Ljava/util/List<Ljava/util/List<Lorg/oss/pdfreporter/engine/JRPrintElement;>;>;" },
    { "setCountVarsWithInt:withInt:", "setCountVars", "V", 0x2, NULL, NULL },
    { "fillHeaderWithInt:", "fillHeader", "Lorg.oss.pdfreporter.engine.fill.JRFillCellContents;", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "prepareColumnHeaderWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:withInt:withInt:withInt:", "prepareColumnHeader", "Lorg.oss.pdfreporter.engine.fill.JRFillCellContents;", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "stretchColumnHeadersRowWithOrgOssPdfreporterEngineFillJRFillCellContentsArray:", "stretchColumnHeadersRow", "I", 0x2, NULL, NULL },
    { "fillColumnHeadersWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2:", "fillColumnHeaders", "Ljava.util.List;", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", "([[Lorg/oss/pdfreporter/engine/fill/JRFillCellContents;)Ljava/util/List<Ljava/util/List<Lorg/oss/pdfreporter/engine/JRPrintElement;>;>;" },
    { "releaseColumnHeaderCellsWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2:", "releaseColumnHeaderCells", "V", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "fillRowsWithInt:withInt:", "fillRows", "I", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "initPreparedRow", NULL, "V", 0x2, NULL, NULL },
    { "removeFilledRowsWithInt:", "removeFilledRows", "V", 0x2, NULL, NULL },
    { "releasePreparedRow", NULL, "V", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "fillRow", NULL, "V", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "prepareRowWithInt:withInt:", "prepareRow", "V", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "prepareDataCellWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell:withInt:withInt:withInt:", "prepareDataCell", "Z", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "prepareRowHeaderWithInt:withOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:withInt:withInt:", "prepareRowHeader", "Z", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "toCloseRowHeaderWithInt:", "toCloseRowHeader", "Z", 0x4, NULL, NULL },
    { "removeExceedingSpanHeaders", NULL, "V", 0x2, NULL, NULL },
    { "setBackSpanHeaders", NULL, "V", 0x2, NULL, NULL },
    { "fillContinuingRowHeadersWithInt:withInt:", "fillContinuingRowHeaders", "V", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "fillContinuingHeadersWithInt:", "fillContinuingHeaders", "V", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "refillLastRowWithInt:withInt:", "refillLastRow", "V", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "prepareContinuingRowHeaderWithInt:withInt:", "prepareContinuingRowHeader", "Z", 0x2, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "addPrintRowWithJavaUtilList:", "addPrintRow", "V", 0x4, NULL, "(Ljava/util/List<Lorg/oss/pdfreporter/engine/JRPrintElement;>;)V" },
    { "getLastPrintRow", NULL, "Ljava.util.List;", 0x4, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/engine/JRPrintElement;>;" },
    { "setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:", "setGroupVariables", "V", 0x4, NULL, NULL },
    { "setGroupMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:withBoolean:", "setGroupMeasureVariables", "V", 0x4, NULL, NULL },
    { "setMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell:", "setMeasureVariables", "V", 0x4, NULL, NULL },
    { "measureValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:withInt:", "measureValue", "Ljava.lang.Object;", 0x4, NULL, NULL },
    { "resetVariables", NULL, "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.oss.pdfreporter.engine.fill.JRFillCrosstab;", NULL, NULL, .constantValue.asLong = 0 },
    { "yOffset_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "yChunkOffset_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "willOverflow_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "rowHeadersXOffsets_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "columnBreakable_", NULL, 0x2, "[Z", NULL, NULL, .constantValue.asLong = 0 },
    { "rowBreakable_", NULL, 0x2, "[Z", NULL, NULL, .constantValue.asLong = 0 },
    { "columnCount_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "rowCount_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "columnXOffsets_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "noDataCellPrinted_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "startRowIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "startColumnIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lastColumnIndex_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "columnHeaders_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<[Lorg/oss/pdfreporter/crosstabs/fill/calculation/HeaderCell;>;", .constantValue.asLong = 0 },
    { "printRows_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/util/List<Lorg/oss/pdfreporter/engine/JRPrintElement;>;>;", .constantValue.asLong = 0 },
    { "spanHeaders_", NULL, 0x2, "[Lorg.oss.pdfreporter.crosstabs.fill.calculation.HeaderCell;", NULL, NULL, .constantValue.asLong = 0 },
    { "spanHeadersStart_", NULL, 0x2, "[I", NULL, NULL, .constantValue.asLong = 0 },
    { "rowYs_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/Integer;>;", .constantValue.asLong = 0 },
    { "rowIdx_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "preparedRow_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/engine/fill/JRFillCellContents;>;", .constantValue.asLong = 0 },
    { "preparedRowHeight_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "printRowHeaders_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "printColumnHeaders_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "rowCountVar_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.fill.JRFillVariable;", NULL, NULL, .constantValue.asLong = 0 },
    { "colCountVar_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.fill.JRFillVariable;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller = { 2, "CrosstabFiller", "org.oss.pdfreporter.engine.fill", "JRFillCrosstab", 0x4, 43, methods, 26, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller;
}

@end

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_initWithOrgOssPdfreporterEngineFillJRFillCrosstab_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, OrgOssPdfreporterEngineFillJRFillCrosstab *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->rowYs_ = new_JavaUtilArrayList_init();
  self->preparedRow_ = new_JavaUtilArrayList_init();
  [self setRowHeadersXOffsets];
  self->printRows_ = new_JavaUtilArrayList_init();
  self->rowCountVar_ = [((id<JavaUtilMap>) nil_chk(outer$->variablesMap_)) getWithId:OrgOssPdfreporterCrosstabsJRCrosstab_VARIABLE_ROW_COUNT];
  self->colCountVar_ = [((id<JavaUtilMap>) nil_chk(outer$->variablesMap_)) getWithId:OrgOssPdfreporterCrosstabsJRCrosstab_VARIABLE_COLUMN_COUNT];
}

OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *new_OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_initWithOrgOssPdfreporterEngineFillJRFillCrosstab_(OrgOssPdfreporterEngineFillJRFillCrosstab *outer$) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, initWithOrgOssPdfreporterEngineFillJRFillCrosstab_, outer$)
}

OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *create_OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_initWithOrgOssPdfreporterEngineFillJRFillCrosstab_(OrgOssPdfreporterEngineFillJRFillCrosstab *outer$) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller, initWithOrgOssPdfreporterEngineFillJRFillCrosstab_, outer$)
}

IOSIntArray *OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_computeCountsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, IOSObjectArray *headersData) {
  IOSIntArray *counts = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(headersData), 0)))->size_];
  IOSObjectArray *lastHeaders = IOSObjectArray_Get(headersData, headersData->size_ - 1);
  for (jint i = 0, c = 0; i < counts->size_; ++i) {
    OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *lastHeader = IOSObjectArray_Get(nil_chk(lastHeaders), i);
    if (lastHeader != nil && ![lastHeader isTotal]) {
      ++c;
    }
    *IOSIntArray_GetRef(counts, i) = c;
  }
  return counts;
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setCountVarsWithInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint rowIdx, jint colIdx) {
  if (rowIdx == -1) {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(self->rowCountVar_)) setValueWithId:nil];
  }
  else {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(self->rowCountVar_)) setValueWithId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nil_chk(self->rowCount_), rowIdx))];
  }
  if (colIdx == -1) {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(self->colCountVar_)) setValueWithId:nil];
  }
  else {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(self->colCountVar_)) setValueWithId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nil_chk(self->columnCount_), colIdx))];
  }
}

OrgOssPdfreporterEngineFillJRFillCellContents *OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillHeaderWithInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint availableHeight) {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setCountVarsWithInt_withInt_(self, -1, -1);
  OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(self->this$0_->headerCell_)) getWorkingClone];
  [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) evaluateWithByte:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
  [contents prepareWithInt:availableHeight];
  self->willOverflow_ = [contents willOverflow];
  if (!self->willOverflow_) {
    [contents setXWithInt:0];
    [contents setYWithInt:self->yOffset_];
    [contents setVerticalSpanWithInt:((IOSObjectArray *) nil_chk(self->this$0_->columnGroups_))->size_];
    [contents setHorizontalSpanWithInt:((IOSObjectArray *) nil_chk(self->this$0_->rowGroups_))->size_];
  }
  return contents;
}

OrgOssPdfreporterEngineFillJRFillCellContents *OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareColumnHeaderWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell_withInt_withInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *cell, jint columnIdx, jint xOffset, jint availableHeight) {
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *group = IOSObjectArray_Get(nil_chk(self->this$0_->columnGroups_), self->rowIdx_);
  OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) isTotal] ? [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk(group)) getFillTotalHeader] : [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk(group)) getFillHeader];
  jint width = IOSIntArray_Get(nil_chk(self->columnXOffsets_), columnIdx + [cell getLevelSpan]) - IOSIntArray_Get(self->columnXOffsets_, columnIdx);
  jint height = [contents getHeight];
  if (width <= 0 || height <= 0) {
    return nil;
  }
  OrgOssPdfreporterEngineFillJRFillCellContents *preparedContents = nil;
  jint rowY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_])) intValue];
  if (availableHeight >= rowY + height) {
    OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setCountVarsWithInt_withInt_(self, -1, columnIdx);
    [self setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:self->this$0_->columnGroups_ withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:[cell getBucketValues]];
    [self setGroupMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:cell withBoolean:false];
    contents = [contents getTransformedContentsWithInt:width withInt:height withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnum:[group getPositionValue] withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum:JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum, TOP)];
    jboolean firstOnRow = columnIdx == self->startColumnIndex_ && (!self->printRowHeaders_ || self->this$0_->headerCell_ == nil);
    contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getBoxContentsWithBoolean:firstOnRow && [self->this$0_ getRunDirectionValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeRunDirectionEnum, LTR) withBoolean:firstOnRow && [self->this$0_ getRunDirectionValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeRunDirectionEnum, RTL) withBoolean:false];
    contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getWorkingClone];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) evaluateWithByte:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
    [contents prepareWithInt:availableHeight - rowY];
    if ([contents willOverflow]) {
      self->willOverflow_ = true;
    }
    else {
      [contents setXWithInt:IOSIntArray_Get(nil_chk(self->columnXOffsets_), columnIdx) - IOSIntArray_Get(self->columnXOffsets_, self->startColumnIndex_) + xOffset];
      [contents setYWithInt:rowY + self->yOffset_];
      [contents setVerticalSpanWithInt:[cell getDepthSpan]];
      [contents setHorizontalSpanWithInt:[cell getLevelSpan]];
      preparedContents = contents;
    }
  }
  else {
    self->willOverflow_ = true;
  }
  return preparedContents;
}

jint OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_stretchColumnHeadersRowWithOrgOssPdfreporterEngineFillJRFillCellContentsArray_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, IOSObjectArray *headers) {
  jint rowY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_])) intValue];
  jint rowStretchHeight = 0;
  for (jint j = 0; j < ((IOSObjectArray *) nil_chk(headers))->size_; j++) {
    OrgOssPdfreporterEngineFillJRFillCellContents *contents = IOSObjectArray_Get(headers, j);
    if (contents != nil) {
      jint startRowY = rowY;
      if ([contents getVerticalSpan] > 1) {
        startRowY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_ - [contents getVerticalSpan] + 1])) intValue];
      }
      jint height = [contents getPrintHeight] - rowY + startRowY;
      if (height > rowStretchHeight) {
        rowStretchHeight = height;
      }
    }
  }
  for (jint j = 0; j < headers->size_; j++) {
    OrgOssPdfreporterEngineFillJRFillCellContents *contents = IOSObjectArray_Get(headers, j);
    if (contents != nil) {
      jint startRowY = rowY;
      if ([contents getVerticalSpan] > 1) {
        startRowY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_ - [contents getVerticalSpan] + 1])) intValue];
      }
      [contents stretchToWithInt:rowStretchHeight + rowY - startRowY];
    }
  }
  return rowStretchHeight;
}

id<JavaUtilList> OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillColumnHeadersWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, IOSObjectArray *columnHeaderRows) {
  id<JavaUtilList> headerRows = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(self->this$0_->columnGroups_))->size_);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(columnHeaderRows))->size_; ++i) {
    id<JavaUtilList> headerRow = new_JavaUtilArrayList_initWithInt_(self->lastColumnIndex_ - self->startColumnIndex_);
    [headerRows addWithId:headerRow];
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(columnHeaderRows, i)))->size_; j++) {
      OrgOssPdfreporterEngineFillJRFillCellContents *contents = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(columnHeaderRows, i)), j);
      if (contents != nil) {
        [headerRow addWithId:[contents fill]];
        [contents releaseWorkingClone];
      }
    }
  }
  return headerRows;
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_releaseColumnHeaderCellsWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, IOSObjectArray *columnHeaderRows) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(columnHeaderRows))->size_; ++i) {
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(columnHeaderRows, i)))->size_; j++) {
      OrgOssPdfreporterEngineFillJRFillCellContents *contents = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(columnHeaderRows, i)), j);
      if (contents != nil) {
        [contents rewind];
        [contents releaseWorkingClone];
      }
    }
  }
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_initPreparedRow(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self) {
  [((id<JavaUtilList>) nil_chk(self->preparedRow_)) clear];
  self->preparedRowHeight_ = 0;
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_removeFilledRowsWithInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint rowsToRemove) {
  if (rowsToRemove > 0) {
    for (jint i = 0; i < rowsToRemove; ++i) {
      (void) [((id<JavaUtilList>) nil_chk(self->printRows_)) removeWithInt:[self->printRows_ size] - 1];
      (void) [((id<JavaUtilList>) nil_chk(self->rowYs_)) removeWithInt:[self->rowYs_ size] - 1];
    }
    self->rowIdx_ -= rowsToRemove;
  }
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_releasePreparedRow(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self) {
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->preparedRow_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineFillJRFillCellContents *cell = [it next];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cell)) rewind];
    [cell releaseWorkingClone];
  }
  [((id<JavaUtilList>) nil_chk(self->preparedRow_)) clear];
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillRow(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self) {
  jint rowY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_])) intValue];
  id<JavaUtilList> rowPrints = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(self->preparedRow_)) size]);
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->preparedRow_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineFillJRFillCellContents *cell = [it next];
    jint spanHeight = 0;
    if ([((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cell)) getVerticalSpan] > 1) {
      spanHeight = rowY - [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_ - [cell getVerticalSpan] + 1])) intValue];
    }
    [cell stretchToWithInt:self->preparedRowHeight_ + spanHeight];
    [rowPrints addWithId:[cell fill]];
    [cell releaseWorkingClone];
  }
  [self addPrintRowWithJavaUtilList:rowPrints];
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareRowWithInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint xOffset, jint availableHeight) {
  for (jint col = self->startColumnIndex_; col < self->lastColumnIndex_; ++col) {
    OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *data = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->this$0_->cellData_), self->rowIdx_ + self->startRowIndex_)), col);
    jboolean overflow = OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareDataCellWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell_withInt_withInt_withInt_(self, data, col, availableHeight, xOffset);
    if (overflow) {
      self->willOverflow_ = true;
      return;
    }
  }
  [self resetVariables];
  if (self->printRowHeaders_) {
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(self->this$0_->rowGroups_))->size_; j++) {
      OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *cell = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->this$0_->rowHeadersData_), j)), self->rowIdx_ + self->startRowIndex_);
      jint vSpan = 0;
      if (cell == nil) {
        if ([self toCloseRowHeaderWithInt:j]) {
          cell = IOSObjectArray_Get(nil_chk(self->spanHeaders_), j);
          vSpan = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) getLevelSpan];
          if (IOSIntArray_Get(nil_chk(self->spanHeadersStart_), j) < self->startRowIndex_) {
            vSpan += IOSIntArray_Get(self->spanHeadersStart_, j) - self->startRowIndex_;
          }
        }
      }
      else {
        if ([cell getLevelSpan] > 1) {
          (void) IOSObjectArray_Set(nil_chk(self->spanHeaders_), j, cell);
          *IOSIntArray_GetRef(nil_chk(self->spanHeadersStart_), j) = self->rowIdx_ + self->startRowIndex_;
          continue;
        }
        vSpan = 1;
      }
      if (cell != nil) {
        jboolean overflow = OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareRowHeaderWithInt_withOrgOssPdfreporterCrosstabsFillCalculationHeaderCell_withInt_withInt_(self, j, cell, vSpan, availableHeight);
        if (overflow) {
          self->willOverflow_ = true;
          return;
        }
      }
    }
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(self->this$0_->rowGroups_))->size_; j++) {
      if (IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->this$0_->rowHeadersData_), j)), self->rowIdx_ + self->startRowIndex_) == nil && [self toCloseRowHeaderWithInt:j]) {
        (void) IOSObjectArray_Set(nil_chk(self->spanHeaders_), j, nil);
      }
    }
    [self resetVariables];
  }
}

jboolean OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareDataCellWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell_withInt_withInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *data, jint column, jint availableHeight, jint xOffset) {
  jint rowY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_])) intValue];
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabCell *cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(self->this$0_->crossCells_)) getWithInt:[((OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *) nil_chk(data)) getRowTotalGroupIndex] withInt:[data getColumnTotalGroupIndex]];
  OrgOssPdfreporterEngineFillJRFillCellContents *contents = cell == nil ? nil : [cell getFillContents];
  if (contents == nil || [contents getWidth] <= 0 || [contents getHeight] <= 0) {
    return false;
  }
  jboolean overflow = availableHeight < rowY + [contents getHeight];
  if (!overflow) {
    jboolean leftEmpty = self->startColumnIndex_ != 0 && ![self->this$0_ isRepeatRowHeaders];
    jboolean topEmpty = self->startRowIndex_ != 0 && ![self->this$0_ isRepeatColumnHeaders];
    OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setCountVarsWithInt_withInt_(self, self->rowIdx_ + self->startRowIndex_, column);
    [self setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:self->this$0_->rowGroups_ withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:[data getRowBucketValues]];
    [self setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:self->this$0_->columnGroups_ withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:[data getColumnBucketValues]];
    [self setMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell:data];
    jboolean firstOnRow = leftEmpty && column == self->startColumnIndex_;
    contents = [contents getBoxContentsWithBoolean:firstOnRow && [self->this$0_ getRunDirectionValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeRunDirectionEnum, LTR) withBoolean:firstOnRow && [self->this$0_ getRunDirectionValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeRunDirectionEnum, RTL) withBoolean:topEmpty && self->rowIdx_ == 0];
    contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getWorkingClone];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) evaluateWithByte:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
    [contents prepareWithInt:availableHeight - rowY];
    [((id<JavaUtilList>) nil_chk(self->preparedRow_)) addWithId:contents];
    overflow = [contents willOverflow];
    if (!overflow) {
      [contents setXWithInt:IOSIntArray_Get(nil_chk(self->columnXOffsets_), column) - IOSIntArray_Get(self->columnXOffsets_, self->startColumnIndex_) + xOffset];
      [contents setYWithInt:rowY + self->yOffset_];
      jint rowCellHeight = [contents getPrintHeight];
      if (rowCellHeight > self->preparedRowHeight_) {
        self->preparedRowHeight_ = rowCellHeight;
      }
    }
  }
  return overflow;
}

jboolean OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareRowHeaderWithInt_withOrgOssPdfreporterCrosstabsFillCalculationHeaderCell_withInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint rowGroup, OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *cell, jint vSpan, jint availableHeight) {
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *group = IOSObjectArray_Get(nil_chk(self->this$0_->rowGroups_), rowGroup);
  OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) isTotal] ? [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getFillTotalHeader] : [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getFillHeader];
  if ([contents getWidth] <= 0 || [contents getHeight] <= 0) {
    return false;
  }
  jint spanHeight = 0;
  jint headerY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_ - vSpan + 1])) intValue];
  if (vSpan > 1) {
    spanHeight += [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_])) intValue] - headerY;
  }
  jint rowHeight = spanHeight + self->preparedRowHeight_;
  jboolean stretchContents = [group getPositionValue] == JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum, STRETCH);
  jint contentsHeight = stretchContents ? rowHeight : [contents getHeight];
  jboolean headerOverflow = availableHeight < headerY + contentsHeight || rowHeight < [contents getHeight];
  if (!headerOverflow) {
    OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setCountVarsWithInt_withInt_(self, self->rowIdx_ + self->startRowIndex_ - vSpan + 1, -1);
    [self setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:self->this$0_->rowGroups_ withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:[cell getBucketValues]];
    [self setGroupMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:cell withBoolean:true];
    if (stretchContents) {
      contents = [contents getTransformedContentsWithInt:[contents getWidth] withInt:rowHeight withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnum:JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnum, LEFT) withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum:JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum, STRETCH)];
    }
    contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getBoxContentsWithBoolean:false withBoolean:false withBoolean:self->rowIdx_ + 1 == vSpan && (!self->printColumnHeaders_ || self->this$0_->headerCell_ == nil)];
    (void) [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getWorkingClone];
    [contents evaluateWithByte:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
    [contents prepareWithInt:availableHeight - headerY];
    [((id<JavaUtilList>) nil_chk(self->preparedRow_)) addWithId:contents];
    headerOverflow = [contents willOverflow];
    if (!headerOverflow) {
      [contents setXWithInt:IOSIntArray_Get(nil_chk(self->rowHeadersXOffsets_), rowGroup)];
      [contents setYWithInt:headerY + self->yOffset_];
      [contents setVerticalSpanWithInt:vSpan];
      [contents setHorizontalSpanWithInt:[cell getDepthSpan]];
      jint rowCellHeight = [contents getPrintHeight] - spanHeight;
      if (rowCellHeight > self->preparedRowHeight_) {
        self->preparedRowHeight_ = rowCellHeight;
      }
    }
  }
  if (headerOverflow) {
    OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_removeFilledRowsWithInt_(self, vSpan - 1);
  }
  return headerOverflow;
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_removeExceedingSpanHeaders(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self) {
  for (jint j = ((IOSObjectArray *) nil_chk(self->this$0_->rowGroups_))->size_ - 2; j >= 0; --j) {
    if (IOSObjectArray_Get(nil_chk(self->spanHeaders_), j) != nil && IOSIntArray_Get(nil_chk(self->spanHeadersStart_), j) >= self->rowIdx_ + self->startRowIndex_) {
      (void) IOSObjectArray_Set(self->spanHeaders_, j, nil);
    }
  }
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setBackSpanHeaders(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self) {
  for (jint j = ((IOSObjectArray *) nil_chk(self->this$0_->rowGroups_))->size_ - 2; j >= 0 && IOSObjectArray_Get(nil_chk(self->spanHeaders_), j) == nil; --j) {
    jint spanIndex = [self getSpanIndexWithInt:self->rowIdx_ + self->startRowIndex_ withInt:j withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:self->this$0_->rowHeadersData_];
    if (spanIndex >= 0) {
      (void) IOSObjectArray_Set(nil_chk(self->spanHeaders_), j, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->this$0_->rowHeadersData_), j)), spanIndex));
      *IOSIntArray_GetRef(nil_chk(self->spanHeadersStart_), j) = spanIndex;
    }
  }
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillContinuingRowHeadersWithInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint xOffset, jint availableHeight) {
  jboolean done = false;
  do {
    {
      OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_removeExceedingSpanHeaders(self);
      if (!IOSBooleanArray_Get(nil_chk(self->rowBreakable_), self->rowIdx_ + self->startRowIndex_)) {
        OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_removeFilledRowsWithInt_(self, 1);
        OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setBackSpanHeaders(self);
        continue;
      }
      OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_initPreparedRow(self);
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(self->this$0_->rowGroups_))->size_ - 1; ++j) {
        if (IOSObjectArray_Get(nil_chk(self->spanHeaders_), j) != nil) {
          jboolean headerOverflow = OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareContinuingRowHeaderWithInt_withInt_(self, j, availableHeight);
          if (headerOverflow) {
            OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_releasePreparedRow(self);
            goto continue_breakCrosstab;
          }
        }
      }
      if (![((id<JavaUtilList>) nil_chk(self->preparedRow_)) isEmpty]) {
        jint lastRowHeight = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_])) intValue] - [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_ - 1])) intValue];
        if (self->preparedRowHeight_ > lastRowHeight) {
          OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_refillLastRowWithInt_withInt_(self, xOffset, availableHeight);
        }
        else {
          OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillContinuingHeadersWithInt_(self, lastRowHeight);
        }
      }
      done = true;
    }
    continue_breakCrosstab: ;
  }
  while (!done && self->rowIdx_ > 0);
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillContinuingHeadersWithInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint lastRowHeight) {
  jint nextToLastHeaderY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_ - 1])) intValue];
  id<JavaUtilList> lastPrintRow = [self getLastPrintRow];
  for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(self->preparedRow_)) size]; ++j) {
    OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((id<JavaUtilList>) nil_chk(self->preparedRow_)) getWithInt:j];
    jint headerY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_ - [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getVerticalSpan]])) intValue];
    [contents stretchToWithInt:nextToLastHeaderY - headerY + lastRowHeight];
    [((id<JavaUtilList>) nil_chk(lastPrintRow)) addWithId:[contents fill]];
    [contents releaseWorkingClone];
  }
}

void OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_refillLastRowWithInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint xOffset, jint availableHeight) {
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_removeFilledRowsWithInt_(self, 1);
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setBackSpanHeaders(self);
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareRowWithInt_withInt_(self, xOffset, availableHeight);
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_fillRow(self);
  [((id<JavaUtilList>) nil_chk(self->rowYs_)) addWithId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([self->rowYs_ getWithInt:self->rowIdx_])) intValue] + self->preparedRowHeight_)];
  ++self->rowIdx_;
}

jboolean OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_prepareContinuingRowHeaderWithInt_withInt_(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *self, jint rowGroup, jint availableHeight) {
  OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *cell = IOSObjectArray_Get(nil_chk(self->spanHeaders_), rowGroup);
  jint vSpan = self->rowIdx_ + self->startRowIndex_ - IOSIntArray_Get(nil_chk(self->spanHeadersStart_), rowGroup);
  if (IOSIntArray_Get(self->spanHeadersStart_, rowGroup) < self->startRowIndex_) {
    vSpan += IOSIntArray_Get(self->spanHeadersStart_, rowGroup) - self->startRowIndex_;
  }
  jint headerY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_ - vSpan])) intValue];
  jint lastHeaderY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_])) intValue];
  jint headerHeight = lastHeaderY - headerY;
  jint nextToLastHeaderY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->rowYs_)) getWithInt:self->rowIdx_ - 1])) intValue];
  jint stretchHeight = nextToLastHeaderY - headerY;
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *group = IOSObjectArray_Get(nil_chk(self->this$0_->rowGroups_), rowGroup);
  OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) isTotal] ? [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getFillTotalHeader] : [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getFillHeader];
  jboolean stretchContents = [group getPositionValue] == JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum, STRETCH);
  jint contentsHeight = stretchContents ? headerHeight : [contents getHeight];
  jboolean headerOverflow = availableHeight < headerY + contentsHeight || headerHeight < [contents getHeight];
  if (!headerOverflow) {
    OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_setCountVarsWithInt_withInt_(self, self->rowIdx_ + self->startRowIndex_ - vSpan, -1);
    [self setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:self->this$0_->rowGroups_ withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:[cell getBucketValues]];
    [self setGroupMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:cell withBoolean:true];
    if (stretchContents) {
      contents = [contents getTransformedContentsWithInt:[contents getWidth] withInt:headerHeight withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnum:JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnum, LEFT) withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum:JreLoadEnum(OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum, STRETCH)];
    }
    contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getBoxContentsWithBoolean:false withBoolean:false withBoolean:self->rowIdx_ == vSpan && (!self->printColumnHeaders_ || self->this$0_->headerCell_ == nil)];
    (void) [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getWorkingClone];
    [contents evaluateWithByte:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
    [contents prepareWithInt:availableHeight - headerY];
    [((id<JavaUtilList>) nil_chk(self->preparedRow_)) addWithId:contents];
    headerOverflow = [contents willOverflow];
    if (!headerOverflow) {
      [contents setXWithInt:IOSIntArray_Get(nil_chk(self->rowHeadersXOffsets_), rowGroup)];
      [contents setYWithInt:headerY + self->yOffset_];
      [contents setVerticalSpanWithInt:vSpan];
      [contents setHorizontalSpanWithInt:[cell getDepthSpan]];
      jint rowHeight = [contents getPrintHeight] - stretchHeight;
      if (rowHeight > self->preparedRowHeight_) {
        self->preparedRowHeight_ = rowHeight;
      }
    }
  }
  if (headerOverflow) {
    OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller_removeFilledRowsWithInt_(self, vSpan);
  }
  return headerOverflow;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller)
