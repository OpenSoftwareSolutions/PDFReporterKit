//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillGraphicElement.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRGraphicElement.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRPen.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillGraphicElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/type/FillEnum.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/geometry/IColor.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation OrgOssPdfreporterEngineFillJRFillGraphicElement

- (instancetype)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                    withOrgOssPdfreporterEngineJRGraphicElement:(id<OrgOssPdfreporterEngineJRGraphicElement>)graphicElement
             withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillGraphicElement_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRGraphicElement_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, filler, graphicElement, factory);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterEngineFillJRFillGraphicElement:(OrgOssPdfreporterEngineFillJRFillGraphicElement *)graphicElement
                      withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillGraphicElement_initWithOrgOssPdfreporterEngineFillJRFillGraphicElement_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(self, graphicElement, factory);
  return self;
}

- (void)evaluateStyleWithByte:(jbyte)evaluation {
  [super evaluateStyleWithByte:evaluation];
  pen_ = nil;
  if (providerStyle_ != nil) {
    pen_ = [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(initPen_)) cloneWithOrgOssPdfreporterEngineJRPenContainer:self];
    OrgOssPdfreporterEngineUtilJRStyleResolver_appendPenWithOrgOssPdfreporterEngineJRPen_withOrgOssPdfreporterEngineJRPen_(pen_, [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getLinePen]);
  }
}

- (id<OrgOssPdfreporterEngineJRPen>)getLinePen {
  return pen_ == nil ? initPen_ : pen_;
}

- (OrgOssPdfreporterEngineTypeFillEnum *)getFillValue {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getFillValueWithOrgOssPdfreporterEngineJRCommonGraphicElement_(self);
}

- (OrgOssPdfreporterEngineTypeFillEnum *)getOwnFillValue {
  return providerStyle_ == nil || [providerStyle_ getOwnFillValue] == nil ? [((id<OrgOssPdfreporterEngineJRGraphicElement>) nil_chk(((id<OrgOssPdfreporterEngineJRGraphicElement>) cast_check(self->parent_, OrgOssPdfreporterEngineJRGraphicElement_class_())))) getOwnFillValue] : [providerStyle_ getOwnFillValue];
}

- (void)setFillWithOrgOssPdfreporterEngineTypeFillEnum:(OrgOssPdfreporterEngineTypeFillEnum *)fill {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (JavaLangFloat *)getDefaultLineWidth {
  return [((id<OrgOssPdfreporterEngineJRGraphicElement>) nil_chk(((id<OrgOssPdfreporterEngineJRGraphicElement>) cast_check(self->parent_, OrgOssPdfreporterEngineJRGraphicElement_class_())))) getDefaultLineWidth];
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [self getForecolor];
}

- (void)rewind {
}

- (jboolean)prepareWithInt:(jint)availableHeight
               withBoolean:(jboolean)isOverflow {
  jboolean willOverflow = false;
  [super prepareWithInt:availableHeight withBoolean:isOverflow];
  if (![self isToPrint]) {
    return willOverflow;
  }
  jboolean isToPrint = true;
  jboolean isReprinted = false;
  if (isOverflow && [self isAlreadyPrinted] && ![self isPrintWhenDetailOverflows]) {
    isToPrint = false;
  }
  if (isToPrint && [self isPrintWhenExpressionNull] && ![self isPrintRepeatedValues]) {
    if ((![self isPrintInFirstWholeBand] || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isFirstWholeOnPageColumn]) && ([self getPrintWhenGroupChanges] == nil || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isNewGroupWithOrgOssPdfreporterEngineJRGroup:[self getPrintWhenGroupChanges]]) && (!isOverflow || ![self isPrintWhenDetailOverflows])) {
      isToPrint = false;
    }
  }
  if (isToPrint && availableHeight < [self getRelativeY] + [self getHeight]) {
    isToPrint = false;
    willOverflow = true;
  }
  if (isToPrint && isOverflow && ([self isPrintWhenDetailOverflows] && ([self isAlreadyPrinted] || (![self isAlreadyPrinted] && ![self isPrintRepeatedValues])))) {
    isReprinted = true;
  }
  [self setToPrintWithBoolean:isToPrint];
  [self setReprintedWithBoolean:isReprinted];
  return willOverflow;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineFillJRBaseFiller:withOrgOssPdfreporterEngineJRGraphicElement:withOrgOssPdfreporterEngineFillJRFillObjectFactory:", "JRFillGraphicElement", NULL, 0x4, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineFillJRFillGraphicElement:withOrgOssPdfreporterEngineFillJRFillCloneFactory:", "JRFillGraphicElement", NULL, 0x4, NULL, NULL },
    { "evaluateStyleWithByte:", "evaluateStyle", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "getLinePen", NULL, "Lorg.oss.pdfreporter.engine.JRPen;", 0x1, NULL, NULL },
    { "getFillValue", NULL, "Lorg.oss.pdfreporter.engine.type.FillEnum;", 0x1, NULL, NULL },
    { "getOwnFillValue", NULL, "Lorg.oss.pdfreporter.engine.type.FillEnum;", 0x1, NULL, NULL },
    { "setFillWithOrgOssPdfreporterEngineTypeFillEnum:", "setFill", "V", 0x1, NULL, NULL },
    { "getDefaultLineWidth", NULL, "Ljava.lang.Float;", 0x1, NULL, NULL },
    { "getDefaultLineColor", NULL, "Lorg.oss.pdfreporter.geometry.IColor;", 0x1, NULL, NULL },
    { "rewind", NULL, "V", 0x1, NULL, NULL },
    { "prepareWithInt:withBoolean:", "prepare", "Z", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "initPen_", NULL, 0x14, "Lorg.oss.pdfreporter.engine.JRPen;", NULL, NULL, .constantValue.asLong = 0 },
    { "pen_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRPen;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillJRFillGraphicElement = { 2, "JRFillGraphicElement", "org.oss.pdfreporter.engine.fill", NULL, 0x401, 11, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillJRFillGraphicElement;
}

@end

void OrgOssPdfreporterEngineFillJRFillGraphicElement_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRGraphicElement_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRFillGraphicElement *self, OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterEngineJRGraphicElement> graphicElement, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  OrgOssPdfreporterEngineFillJRFillElement_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRElement_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, filler, graphicElement, factory);
  self->initPen_ = [((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRGraphicElement>) nil_chk(graphicElement)) getLinePen])) cloneWithOrgOssPdfreporterEngineJRPenContainer:self];
}

void OrgOssPdfreporterEngineFillJRFillGraphicElement_initWithOrgOssPdfreporterEngineFillJRFillGraphicElement_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(OrgOssPdfreporterEngineFillJRFillGraphicElement *self, OrgOssPdfreporterEngineFillJRFillGraphicElement *graphicElement, OrgOssPdfreporterEngineFillJRFillCloneFactory *factory) {
  OrgOssPdfreporterEngineFillJRFillElement_initWithOrgOssPdfreporterEngineFillJRFillElement_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(self, graphicElement, factory);
  self->initPen_ = [((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((OrgOssPdfreporterEngineFillJRFillGraphicElement *) nil_chk(graphicElement)) getLinePen])) cloneWithOrgOssPdfreporterEngineJRPenContainer:self];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillJRFillGraphicElement)
