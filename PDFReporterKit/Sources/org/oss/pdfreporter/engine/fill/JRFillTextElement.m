//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillTextElement.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRCommonText.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRFont.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRTextElement.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillTextElement.h"
#include "org/oss/pdfreporter/engine/fill/JRMeasuredText.h"
#include "org/oss/pdfreporter/engine/fill/JRTextMeasurer.h"
#include "org/oss/pdfreporter/engine/fonts/FontUtil.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/LineSpacingEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/util/JRSingletonCache.h"
#include "org/oss/pdfreporter/engine/util/JRStringUtil.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/engine/util/JRStyledTextParser.h"
#include "org/oss/pdfreporter/engine/util/JRTextMeasurerUtil.h"
#include "org/oss/pdfreporter/engine/util/MarkupProcessor.h"
#include "org/oss/pdfreporter/engine/util/MarkupProcessorFactory.h"
#include "org/oss/pdfreporter/font/text/TextAttribute.h"
#include "org/oss/pdfreporter/geometry/IColor.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgOssPdfreporterEngineFillJRFillTextElement () {
 @public
  jboolean isLeftToRight_;
  id<OrgOssPdfreporterEngineFillJRTextMeasurer> textMeasurer_;
  jfloat lineSpacingFactor_;
  jfloat leadingOffset_;
  jfloat textHeight_;
  jint elementStretchHeightDelta_;
  jint textStart_;
  jint textEnd_;
  IOSShortArray *lineBreakOffsets_;
  NSString *textTruncateSuffix_;
  NSString *rawText_;
  OrgOssPdfreporterEngineUtilJRStyledText *styledText_;
  id<JavaUtilMap> styledTextAttributesMap_;
  jboolean consumeSpaceOnOverflow_;
}

- (void)createTextMeasurer;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextElement, textMeasurer_, id<OrgOssPdfreporterEngineFillJRTextMeasurer>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextElement, lineBreakOffsets_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextElement, textTruncateSuffix_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextElement, rawText_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextElement, styledText_, OrgOssPdfreporterEngineUtilJRStyledText *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRFillTextElement, styledTextAttributesMap_, id<JavaUtilMap>)

inline OrgOssPdfreporterEngineUtilJRSingletonCache *OrgOssPdfreporterEngineFillJRFillTextElement_get_markupProcessorFactoryCache();
static OrgOssPdfreporterEngineUtilJRSingletonCache *OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessorFactoryCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFillJRFillTextElement, markupProcessorFactoryCache, OrgOssPdfreporterEngineUtilJRSingletonCache *)

inline id<JavaUtilMap> OrgOssPdfreporterEngineFillJRFillTextElement_get_markupProcessors();
static id<JavaUtilMap> OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessors;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFillJRFillTextElement, markupProcessors, id<JavaUtilMap>)

__attribute__((unused)) static void OrgOssPdfreporterEngineFillJRFillTextElement_createTextMeasurer(OrgOssPdfreporterEngineFillJRFillTextElement *self);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineFillJRFillTextElement)

NSString *OrgOssPdfreporterEngineFillJRFillTextElement_PROPERTY_CONSUME_SPACE_ON_OVERFLOW = @"net.sf.jasperreports.consume.space.on.overflow";

@implementation OrgOssPdfreporterEngineFillJRFillTextElement

+ (NSString *)PROPERTY_CONSUME_SPACE_ON_OVERFLOW {
  return OrgOssPdfreporterEngineFillJRFillTextElement_PROPERTY_CONSUME_SPACE_ON_OVERFLOW;
}

- (instancetype)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                       withOrgOssPdfreporterEngineJRTextElement:(id<OrgOssPdfreporterEngineJRTextElement>)textElement
             withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillTextElement_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRTextElement_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, filler, textElement, factory);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterEngineFillJRFillTextElement:(OrgOssPdfreporterEngineFillJRFillTextElement *)textElement
                   withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillTextElement_initWithOrgOssPdfreporterEngineFillJRFillTextElement_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(self, textElement, factory);
  return self;
}

- (void)createTextMeasurer {
  OrgOssPdfreporterEngineFillJRFillTextElement_createTextMeasurer(self);
}

- (void)ensureTextMeasurer {
  if (textMeasurer_ == nil) {
    OrgOssPdfreporterEngineFillJRFillTextElement_createTextMeasurer(self);
  }
}

- (void)evaluateStyleWithByte:(jbyte)evaluation {
  [super evaluateStyleWithByte:evaluation];
  lineBox_ = nil;
  paragraph_ = nil;
  if (providerStyle_ != nil) {
    lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(initLineBox_)) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    paragraph_ = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(initParagraph_)) cloneWithOrgOssPdfreporterEngineJRParagraphContainer:self];
    OrgOssPdfreporterEngineUtilJRStyleResolver_appendBoxWithOrgOssPdfreporterEngineJRLineBox_withOrgOssPdfreporterEngineJRLineBox_(lineBox_, [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getLineBox]);
    OrgOssPdfreporterEngineUtilJRStyleResolver_appendParagraphWithOrgOssPdfreporterEngineJRParagraph_withOrgOssPdfreporterEngineJRParagraph_(paragraph_, [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getParagraph]);
  }
}

- (OrgOssPdfreporterEngineTypeModeEnum *)getModeValue {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getModeWithOrgOssPdfreporterEngineJRCommonElement_withOrgOssPdfreporterEngineTypeModeEnum_(self, JreLoadEnum(OrgOssPdfreporterEngineTypeModeEnum, TRANSPARENT));
}

- (OrgOssPdfreporterEngineTypeHorizontalAlignEnum *)getHorizontalAlignmentValue {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getHorizontalAlignmentValueWithOrgOssPdfreporterEngineJRAlignment_(self);
}

- (OrgOssPdfreporterEngineTypeHorizontalAlignEnum *)getOwnHorizontalAlignmentValue {
  return providerStyle_ == nil || [providerStyle_ getOwnHorizontalAlignmentValue] == nil ? [((id<OrgOssPdfreporterEngineJRTextElement>) nil_chk(((id<OrgOssPdfreporterEngineJRTextElement>) cast_check(self->parent_, OrgOssPdfreporterEngineJRTextElement_class_())))) getOwnHorizontalAlignmentValue] : [providerStyle_ getOwnHorizontalAlignmentValue];
}

- (void)setHorizontalAlignmentWithOrgOssPdfreporterEngineTypeHorizontalAlignEnum:(OrgOssPdfreporterEngineTypeHorizontalAlignEnum *)horizontalAlignment {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (OrgOssPdfreporterEngineTypeVerticalAlignEnum *)getVerticalAlignmentValue {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getVerticalAlignmentValueWithOrgOssPdfreporterEngineJRAlignment_(self);
}

- (OrgOssPdfreporterEngineTypeVerticalAlignEnum *)getOwnVerticalAlignmentValue {
  return providerStyle_ == nil || [providerStyle_ getOwnVerticalAlignmentValue] == nil ? [((id<OrgOssPdfreporterEngineJRTextElement>) nil_chk(((id<OrgOssPdfreporterEngineJRTextElement>) cast_check(self->parent_, OrgOssPdfreporterEngineJRTextElement_class_())))) getOwnVerticalAlignmentValue] : [providerStyle_ getOwnVerticalAlignmentValue];
}

- (void)setVerticalAlignmentWithOrgOssPdfreporterEngineTypeVerticalAlignEnum:(OrgOssPdfreporterEngineTypeVerticalAlignEnum *)verticalAlignment {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (OrgOssPdfreporterEngineTypeRotationEnum *)getRotationValue {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getRotationValueWithOrgOssPdfreporterEngineJRCommonText_(self);
}

- (OrgOssPdfreporterEngineTypeRotationEnum *)getOwnRotationValue {
  return providerStyle_ == nil || [providerStyle_ getOwnRotationValue] == nil ? [((id<OrgOssPdfreporterEngineJRTextElement>) nil_chk(((id<OrgOssPdfreporterEngineJRTextElement>) cast_check(self->parent_, OrgOssPdfreporterEngineJRTextElement_class_())))) getOwnRotationValue] : [providerStyle_ getOwnRotationValue];
}

- (void)setRotationWithOrgOssPdfreporterEngineTypeRotationEnum:(OrgOssPdfreporterEngineTypeRotationEnum *)rotation {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (OrgOssPdfreporterEngineTypeLineSpacingEnum *)getLineSpacingValue {
  return [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([self getParagraph])) getLineSpacing];
}

- (OrgOssPdfreporterEngineTypeLineSpacingEnum *)getOwnLineSpacingValue {
  return [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([self getParagraph])) getOwnLineSpacing];
}

- (void)setLineSpacingWithOrgOssPdfreporterEngineTypeLineSpacingEnum:(OrgOssPdfreporterEngineTypeLineSpacingEnum *)lineSpacing {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (NSString *)getMarkup {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getMarkupWithOrgOssPdfreporterEngineJRCommonText_(self);
}

- (NSString *)getOwnMarkup {
  return providerStyle_ == nil || [providerStyle_ getOwnMarkup] == nil ? [((id<OrgOssPdfreporterEngineJRTextElement>) nil_chk(((id<OrgOssPdfreporterEngineJRTextElement>) cast_check(parent_, OrgOssPdfreporterEngineJRTextElement_class_())))) getOwnMarkup] : [providerStyle_ getOwnMarkup];
}

- (void)setMarkupWithNSString:(NSString *)markup {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<OrgOssPdfreporterEngineJRLineBox>)getLineBox {
  return lineBox_ == nil ? initLineBox_ : lineBox_;
}

- (id<OrgOssPdfreporterEngineJRParagraph>)getParagraph {
  return paragraph_ == nil ? initParagraph_ : paragraph_;
}

- (id<OrgOssPdfreporterEngineJRFont>)getFont {
  return self;
}

- (id<JavaUtilMap>)getStyledTextAttributes {
  id<OrgOssPdfreporterEngineJRStyle> style = [self getStyle];
  id<JavaUtilMap> styledTextAttributes = [((id<JavaUtilMap>) nil_chk(styledTextAttributesMap_)) getWithId:style];
  if (styledTextAttributes == nil) {
    styledTextAttributes = new_JavaUtilHashMap_init();
    (void) [((OrgOssPdfreporterEngineFontsFontUtil *) nil_chk(OrgOssPdfreporterEngineFontsFontUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext]))) getAttributesWithoutAwtFontWithJavaUtilMap:styledTextAttributes withOrgOssPdfreporterEngineJRFont:self];
    (void) [styledTextAttributes putWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, FOREGROUND) withId:[self getForecolor]];
    if ([self getModeValue] == JreLoadEnum(OrgOssPdfreporterEngineTypeModeEnum, OPAQUE)) {
      (void) [styledTextAttributes putWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, BACKGROUND) withId:[self getBackcolor]];
    }
    (void) [((id<JavaUtilMap>) nil_chk(styledTextAttributesMap_)) putWithId:style withId:styledTextAttributes];
  }
  return styledTextAttributes;
}

- (jfloat)getLineSpacingFactor {
  return lineSpacingFactor_;
}

- (void)setLineSpacingFactorWithFloat:(jfloat)lineSpacingFactor {
  self->lineSpacingFactor_ = lineSpacingFactor;
}

- (jfloat)getLeadingOffset {
  return leadingOffset_;
}

- (void)setLeadingOffsetWithFloat:(jfloat)leadingOffset {
  self->leadingOffset_ = leadingOffset;
}

- (OrgOssPdfreporterEngineTypeRunDirectionEnum *)getRunDirectionValue {
  return isLeftToRight_ ? JreLoadEnum(OrgOssPdfreporterEngineTypeRunDirectionEnum, LTR) : JreLoadEnum(OrgOssPdfreporterEngineTypeRunDirectionEnum, RTL);
}

- (jfloat)getTextHeight {
  return textHeight_;
}

- (void)setTextHeightWithFloat:(jfloat)textHeight {
  self->textHeight_ = textHeight;
}

- (jint)getTextStart {
  return textStart_;
}

- (void)setTextStartWithInt:(jint)textStart {
  self->textStart_ = textStart;
}

- (jint)getTextEnd {
  return textEnd_;
}

- (void)setTextEndWithInt:(jint)textEnd {
  self->textEnd_ = textEnd;
}

- (IOSShortArray *)getLineBreakOffsets {
  return lineBreakOffsets_;
}

- (void)setLineBreakOffsetsWithShortArray:(IOSShortArray *)lineBreakOffsets {
  self->lineBreakOffsets_ = lineBreakOffsets;
}

- (void)resetTextChunk {
  textStart_ = 0;
  textEnd_ = 0;
  textTruncateSuffix_ = nil;
  lineBreakOffsets_ = nil;
  elementStretchHeightDelta_ = 0;
}

- (NSString *)getRawText {
  return rawText_;
}

- (void)setRawTextWithNSString:(NSString *)rawText {
  self->rawText_ = rawText;
  styledText_ = nil;
}

- (void)reset {
  [super reset];
  isLeftToRight_ = true;
  lineSpacingFactor_ = 0;
  leadingOffset_ = 0;
  textHeight_ = 0;
  elementStretchHeightDelta_ = 0;
}

- (void)rewind {
  [self resetTextChunk];
}

- (OrgOssPdfreporterEngineUtilJRStyledText *)getStyledText {
  if (styledText_ == nil) {
    NSString *text = [self getRawText];
    if (text != nil) {
      styledText_ = [((OrgOssPdfreporterEngineUtilJRStyledTextParser *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getStyledTextParser])) getStyledTextWithJavaUtilMap:[self getStyledTextAttributes] withNSString:text withBoolean:![((NSString *) nil_chk(OrgOssPdfreporterEngineJRCommonText_MARKUP_NONE)) isEqual:[self getMarkup]] withJavaUtilLocale:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getLocale]];
    }
  }
  return styledText_;
}

- (NSString *)getText {
  OrgOssPdfreporterEngineUtilJRStyledText *tmpStyledText = [self getStyledText];
  if (tmpStyledText == nil) {
    return nil;
  }
  return [tmpStyledText getText];
}

- (void)chopTextElementWithInt:(jint)availableStretchHeight {
  [self ensureTextMeasurer];
  OrgOssPdfreporterEngineUtilJRStyledText *tmpStyledText = [self getStyledText];
  if (tmpStyledText == nil) {
    return;
  }
  if ([self getTextEnd] == ((jint) [((NSString *) nil_chk([tmpStyledText getText])) length])) {
    return;
  }
  jboolean canOverflow = [self canOverflow];
  id<OrgOssPdfreporterEngineFillJRMeasuredText> measuredText = [((id<OrgOssPdfreporterEngineFillJRTextMeasurer>) nil_chk(textMeasurer_)) measureWithOrgOssPdfreporterEngineUtilJRStyledText:tmpStyledText withInt:[self getTextEnd] withInt:availableStretchHeight withBoolean:canOverflow];
  isLeftToRight_ = [((id<OrgOssPdfreporterEngineFillJRMeasuredText>) nil_chk(measuredText)) isLeftToRight];
  [self setTextHeightWithFloat:[measuredText getTextHeight]];
  elementStretchHeightDelta_ = 0;
  if ([((OrgOssPdfreporterEngineTypeRotationEnum *) nil_chk([self getRotationValue])) isEqual:JreLoadEnum(OrgOssPdfreporterEngineTypeRotationEnum, NONE)]) {
    jint elementTextHeight = JreFpToInt([self getTextHeight]) + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getTopPadding])) intValue] + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getBottomPadding])) intValue];
    jboolean textEnded = [measuredText getTextOffset] >= ((jint) [((NSString *) nil_chk([tmpStyledText getText])) length]);
    if (textEnded || !canOverflow || !consumeSpaceOnOverflow_) {
      [self setStretchHeightWithInt:elementTextHeight];
    }
    else {
      jint stretchHeight = [self getHeight] + availableStretchHeight;
      [self setStretchHeightWithInt:stretchHeight];
      jint textStretchHeight = elementTextHeight > [self getHeight] ? elementTextHeight : [self getHeight];
      elementStretchHeightDelta_ = [self getStretchHeight] - textStretchHeight;
    }
  }
  else {
    [self setStretchHeightWithInt:[self getHeight]];
  }
  [self setTextStartWithInt:[self getTextEnd]];
  [self setTextEndWithInt:[measuredText getTextOffset]];
  [self setLineBreakOffsetsWithShortArray:[measuredText getLineBreakOffsets]];
  [self setTextTruncateSuffixWithNSString:[measuredText getTextSuffix]];
  [self setLineSpacingFactorWithFloat:[measuredText getLineSpacingFactor]];
  [self setLeadingOffsetWithFloat:[measuredText getLeadingOffset]];
}

- (jint)getPrintElementHeight {
  return [self getStretchHeight] - elementStretchHeightDelta_;
}

- (jboolean)canOverflow {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getFontName {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getFontNameWithOrgOssPdfreporterEngineJRFont_(self);
}

- (NSString *)getOwnFontName {
  return providerStyle_ == nil || [providerStyle_ getOwnFontName] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(((id<OrgOssPdfreporterEngineJRFont>) cast_check(parent_, OrgOssPdfreporterEngineJRFont_class_())))) getOwnFontName] : [providerStyle_ getOwnFontName];
}

- (void)setFontNameWithNSString:(NSString *)fontName {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isBold {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isBoldWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnBold {
  return providerStyle_ == nil || [providerStyle_ isOwnBold] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(((id<OrgOssPdfreporterEngineJRFont>) cast_check(parent_, OrgOssPdfreporterEngineJRFont_class_())))) isOwnBold] : [providerStyle_ isOwnBold];
}

- (void)setBoldWithBoolean:(jboolean)isBold {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setBoldWithJavaLangBoolean:(JavaLangBoolean *)isBold {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isItalic {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isItalicWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnItalic {
  return providerStyle_ == nil || [providerStyle_ isOwnItalic] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(((id<OrgOssPdfreporterEngineJRFont>) cast_check(parent_, OrgOssPdfreporterEngineJRFont_class_())))) isOwnItalic] : [providerStyle_ isOwnItalic];
}

- (void)setItalicWithBoolean:(jboolean)isItalic {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setItalicWithJavaLangBoolean:(JavaLangBoolean *)isItalic {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isUnderline {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isUnderlineWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnUnderline {
  return providerStyle_ == nil || [providerStyle_ isOwnUnderline] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(((id<OrgOssPdfreporterEngineJRFont>) cast_check(parent_, OrgOssPdfreporterEngineJRFont_class_())))) isOwnUnderline] : [providerStyle_ isOwnUnderline];
}

- (void)setUnderlineWithBoolean:(jboolean)isUnderline {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setUnderlineWithJavaLangBoolean:(JavaLangBoolean *)isUnderline {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isStrikeThrough {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isStrikeThroughWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnStrikeThrough {
  return providerStyle_ == nil || [providerStyle_ isOwnStrikeThrough] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(((id<OrgOssPdfreporterEngineJRFont>) cast_check(parent_, OrgOssPdfreporterEngineJRFont_class_())))) isOwnStrikeThrough] : [providerStyle_ isOwnStrikeThrough];
}

- (void)setStrikeThroughWithBoolean:(jboolean)isStrikeThrough {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setStrikeThroughWithJavaLangBoolean:(JavaLangBoolean *)isStrikeThrough {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jint)getFontSize {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getFontSizeWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangInteger *)getOwnFontSize {
  return providerStyle_ == nil || [providerStyle_ getOwnFontSize] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(((id<OrgOssPdfreporterEngineJRFont>) cast_check(parent_, OrgOssPdfreporterEngineJRFont_class_())))) getOwnFontSize] : [providerStyle_ getOwnFontSize];
}

- (void)setFontSizeWithInt:(jint)size {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setFontSizeWithJavaLangInteger:(JavaLangInteger *)size {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (NSString *)getPdfFontName {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getPdfFontNameWithOrgOssPdfreporterEngineJRFont_(self);
}

- (NSString *)getOwnPdfFontName {
  return providerStyle_ == nil || [providerStyle_ getOwnPdfFontName] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(((id<OrgOssPdfreporterEngineJRFont>) cast_check(parent_, OrgOssPdfreporterEngineJRFont_class_())))) getOwnPdfFontName] : [providerStyle_ getOwnPdfFontName];
}

- (void)setPdfFontNameWithNSString:(NSString *)pdfFontName {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (NSString *)getPdfEncoding {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_getPdfEncodingWithOrgOssPdfreporterEngineJRFont_(self);
}

- (NSString *)getOwnPdfEncoding {
  return providerStyle_ == nil || [providerStyle_ getOwnPdfEncoding] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(((id<OrgOssPdfreporterEngineJRFont>) cast_check(parent_, OrgOssPdfreporterEngineJRFont_class_())))) getOwnPdfEncoding] : [providerStyle_ getOwnPdfEncoding];
}

- (void)setPdfEncodingWithNSString:(NSString *)pdfEncoding {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isPdfEmbedded {
  return OrgOssPdfreporterEngineUtilJRStyleResolver_isPdfEmbeddedWithOrgOssPdfreporterEngineJRFont_(self);
}

- (JavaLangBoolean *)isOwnPdfEmbedded {
  return providerStyle_ == nil || [providerStyle_ isOwnPdfEmbedded] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(((id<OrgOssPdfreporterEngineJRFont>) cast_check(parent_, OrgOssPdfreporterEngineJRFont_class_())))) isOwnPdfEmbedded] : [providerStyle_ isOwnPdfEmbedded];
}

- (void)setPdfEmbeddedWithBoolean:(jboolean)isPdfEmbedded {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setPdfEmbeddedWithJavaLangBoolean:(JavaLangBoolean *)isPdfEmbedded {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [self getForecolor];
}

- (void)setHeightWithInt:(jint)height {
  [super setHeightWithInt:height];
  OrgOssPdfreporterEngineFillJRFillTextElement_createTextMeasurer(self);
}

- (void)setWidthWithInt:(jint)width {
  [super setWidthWithInt:width];
  OrgOssPdfreporterEngineFillJRFillTextElement_createTextMeasurer(self);
}

- (NSString *)processMarkupTextWithNSString:(NSString *)text {
  text = OrgOssPdfreporterEngineUtilJRStringUtil_replaceCRwithLFWithNSString_(text);
  if (text != nil) {
    NSString *markup = [self getMarkup];
    if (![((NSString *) nil_chk(OrgOssPdfreporterEngineJRCommonText_MARKUP_NONE)) isEqual:markup] && ![((NSString *) nil_chk(OrgOssPdfreporterEngineJRCommonText_MARKUP_STYLED_TEXT)) isEqual:markup]) {
      text = [((id<OrgOssPdfreporterEngineUtilMarkupProcessor>) nil_chk([self getMarkupProcessorWithNSString:markup])) convertWithNSString:text];
    }
  }
  return text;
}

- (id<OrgOssPdfreporterEngineUtilMarkupProcessor>)getMarkupProcessorWithNSString:(NSString *)markup {
  id<OrgOssPdfreporterEngineUtilMarkupProcessor> markupProcessor = [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessors)) getWithId:markup];
  if (markupProcessor == nil) {
    NSString *factoryClass = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getPropertiesUtil])) getPropertyWithNSString:JreStrcat("$$", OrgOssPdfreporterEngineUtilMarkupProcessorFactory_PROPERTY_MARKUP_PROCESSOR_FACTORY_PREFIX, markup)];
    if (factoryClass == nil) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(JreStrcat("$$$", @"No markup processor factory specifyed for '", markup, @"' markup."));
    }
    id<OrgOssPdfreporterEngineUtilMarkupProcessorFactory> factory = nil;
    @try {
      factory = [((OrgOssPdfreporterEngineUtilJRSingletonCache *) nil_chk(OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessorFactoryCache)) getCachedInstanceWithNSString:factoryClass];
    }
    @catch (OrgOssPdfreporterEngineJRException *e) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
    }
    markupProcessor = [((id<OrgOssPdfreporterEngineUtilMarkupProcessorFactory>) nil_chk(factory)) createMarkupProcessor];
    (void) [OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessors putWithId:markup withId:markupProcessor];
  }
  return markupProcessor;
}

- (void)setPrintTextWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)printText {
  jint startIndex = [self getTextStart];
  jint endIndex = [self getTextEnd];
  OrgOssPdfreporterEngineUtilJRStyledText *fullStyledText = [self getStyledText];
  NSString *fullText = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(fullStyledText)) getText];
  jboolean keepAllText = ![self canOverflow] && [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getPropertiesUtil])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:self withNSString:OrgOssPdfreporterEngineJRTextElement_PROPERTY_PRINT_KEEP_FULL_TEXT withBoolean:false];
  if (keepAllText) {
    if (startIndex != 0) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(@"Text start index != 0 on keep all text.");
    }
    if (![((NSString *) nil_chk(OrgOssPdfreporterEngineJRCommonText_MARKUP_NONE)) isEqual:[self getMarkup]]) {
      NSString *styledText = [((OrgOssPdfreporterEngineUtilJRStyledTextParser *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getStyledTextParser])) writeWithOrgOssPdfreporterEngineUtilJRStyledText:fullStyledText];
      [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(printText)) setTextWithNSString:styledText];
    }
    else {
      [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(printText)) setTextWithNSString:fullText];
    }
    if (endIndex < ((jint) [((NSString *) nil_chk(fullText)) length])) {
      [printText setTextTruncateIndexWithJavaLangInteger:JavaLangInteger_valueOfWithInt_(endIndex)];
    }
  }
  else {
    NSString *printedText;
    if (![((NSString *) nil_chk(OrgOssPdfreporterEngineJRCommonText_MARKUP_NONE)) isEqual:[self getMarkup]]) {
      printedText = [((OrgOssPdfreporterEngineUtilJRStyledTextParser *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getStyledTextParser])) writeWithOrgOssPdfreporterEngineUtilJRStyledText:fullStyledText withInt:startIndex withInt:endIndex];
    }
    else {
      printedText = [((NSString *) nil_chk(fullText)) substring:startIndex endIndex:endIndex];
    }
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(printText)) setTextWithNSString:printedText];
  }
  [printText setTextTruncateSuffixWithNSString:[self getTextTruncateSuffix]];
  [printText setLineBreakOffsetsWithShortArray:[self getLineBreakOffsets]];
}

- (NSString *)getTextTruncateSuffix {
  return textTruncateSuffix_;
}

- (void)setTextTruncateSuffixWithNSString:(NSString *)textTruncateSuffix {
  self->textTruncateSuffix_ = textTruncateSuffix;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillJRFillTextElement class]) {
    OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessorFactoryCache = new_OrgOssPdfreporterEngineUtilJRSingletonCache_initWithIOSClass_(OrgOssPdfreporterEngineUtilMarkupProcessorFactory_class_());
    OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessors = new_JavaUtilHashMap_init();
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineFillJRFillTextElement)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineFillJRBaseFiller:withOrgOssPdfreporterEngineJRTextElement:withOrgOssPdfreporterEngineFillJRFillObjectFactory:", "JRFillTextElement", NULL, 0x4, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineFillJRFillTextElement:withOrgOssPdfreporterEngineFillJRFillCloneFactory:", "JRFillTextElement", NULL, 0x4, NULL, NULL },
    { "createTextMeasurer", NULL, "V", 0x2, NULL, NULL },
    { "ensureTextMeasurer", NULL, "V", 0x4, NULL, NULL },
    { "evaluateStyleWithByte:", "evaluateStyle", "V", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "getModeValue", NULL, "Lorg.oss.pdfreporter.engine.type.ModeEnum;", 0x1, NULL, NULL },
    { "getHorizontalAlignmentValue", NULL, "Lorg.oss.pdfreporter.engine.type.HorizontalAlignEnum;", 0x1, NULL, NULL },
    { "getOwnHorizontalAlignmentValue", NULL, "Lorg.oss.pdfreporter.engine.type.HorizontalAlignEnum;", 0x1, NULL, NULL },
    { "setHorizontalAlignmentWithOrgOssPdfreporterEngineTypeHorizontalAlignEnum:", "setHorizontalAlignment", "V", 0x1, NULL, NULL },
    { "getVerticalAlignmentValue", NULL, "Lorg.oss.pdfreporter.engine.type.VerticalAlignEnum;", 0x1, NULL, NULL },
    { "getOwnVerticalAlignmentValue", NULL, "Lorg.oss.pdfreporter.engine.type.VerticalAlignEnum;", 0x1, NULL, NULL },
    { "setVerticalAlignmentWithOrgOssPdfreporterEngineTypeVerticalAlignEnum:", "setVerticalAlignment", "V", 0x1, NULL, NULL },
    { "getRotationValue", NULL, "Lorg.oss.pdfreporter.engine.type.RotationEnum;", 0x1, NULL, NULL },
    { "getOwnRotationValue", NULL, "Lorg.oss.pdfreporter.engine.type.RotationEnum;", 0x1, NULL, NULL },
    { "setRotationWithOrgOssPdfreporterEngineTypeRotationEnum:", "setRotation", "V", 0x1, NULL, NULL },
    { "getLineSpacingValue", NULL, "Lorg.oss.pdfreporter.engine.type.LineSpacingEnum;", 0x1, NULL, NULL },
    { "getOwnLineSpacingValue", NULL, "Lorg.oss.pdfreporter.engine.type.LineSpacingEnum;", 0x1, NULL, NULL },
    { "setLineSpacingWithOrgOssPdfreporterEngineTypeLineSpacingEnum:", "setLineSpacing", "V", 0x1, NULL, NULL },
    { "getMarkup", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOwnMarkup", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setMarkupWithNSString:", "setMarkup", "V", 0x1, NULL, NULL },
    { "getLineBox", NULL, "Lorg.oss.pdfreporter.engine.JRLineBox;", 0x1, NULL, NULL },
    { "getParagraph", NULL, "Lorg.oss.pdfreporter.engine.JRParagraph;", 0x1, NULL, NULL },
    { "getFont", NULL, "Lorg.oss.pdfreporter.engine.JRFont;", 0x1, NULL, NULL },
    { "getStyledTextAttributes", NULL, "Ljava.util.Map;", 0x4, NULL, "()Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;" },
    { "getLineSpacingFactor", NULL, "F", 0x4, NULL, NULL },
    { "setLineSpacingFactorWithFloat:", "setLineSpacingFactor", "V", 0x4, NULL, NULL },
    { "getLeadingOffset", NULL, "F", 0x4, NULL, NULL },
    { "setLeadingOffsetWithFloat:", "setLeadingOffset", "V", 0x4, NULL, NULL },
    { "getRunDirectionValue", NULL, "Lorg.oss.pdfreporter.engine.type.RunDirectionEnum;", 0x1, NULL, NULL },
    { "getTextHeight", NULL, "F", 0x4, NULL, NULL },
    { "setTextHeightWithFloat:", "setTextHeight", "V", 0x4, NULL, NULL },
    { "getTextStart", NULL, "I", 0x4, NULL, NULL },
    { "setTextStartWithInt:", "setTextStart", "V", 0x4, NULL, NULL },
    { "getTextEnd", NULL, "I", 0x4, NULL, NULL },
    { "setTextEndWithInt:", "setTextEnd", "V", 0x4, NULL, NULL },
    { "getLineBreakOffsets", NULL, "[S", 0x4, NULL, NULL },
    { "setLineBreakOffsetsWithShortArray:", "setLineBreakOffsets", "V", 0x4, NULL, NULL },
    { "resetTextChunk", NULL, "V", 0x4, NULL, NULL },
    { "getRawText", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "setRawTextWithNSString:", "setRawText", "V", 0x4, NULL, NULL },
    { "reset", NULL, "V", 0x4, NULL, NULL },
    { "rewind", NULL, "V", 0x4, NULL, NULL },
    { "getStyledText", NULL, "Lorg.oss.pdfreporter.engine.util.JRStyledText;", 0x4, NULL, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "chopTextElementWithInt:", "chopTextElement", "V", 0x4, NULL, NULL },
    { "getPrintElementHeight", NULL, "I", 0x4, NULL, NULL },
    { "canOverflow", NULL, "Z", 0x404, NULL, NULL },
    { "getFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOwnFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setFontNameWithNSString:", "setFontName", "V", 0x1, NULL, NULL },
    { "isBold", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnBold", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setBoldWithBoolean:", "setBold", "V", 0x1, NULL, NULL },
    { "setBoldWithJavaLangBoolean:", "setBold", "V", 0x1, NULL, NULL },
    { "isItalic", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnItalic", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setItalicWithBoolean:", "setItalic", "V", 0x1, NULL, NULL },
    { "setItalicWithJavaLangBoolean:", "setItalic", "V", 0x1, NULL, NULL },
    { "isUnderline", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnUnderline", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setUnderlineWithBoolean:", "setUnderline", "V", 0x1, NULL, NULL },
    { "setUnderlineWithJavaLangBoolean:", "setUnderline", "V", 0x1, NULL, NULL },
    { "isStrikeThrough", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnStrikeThrough", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setStrikeThroughWithBoolean:", "setStrikeThrough", "V", 0x1, NULL, NULL },
    { "setStrikeThroughWithJavaLangBoolean:", "setStrikeThrough", "V", 0x1, NULL, NULL },
    { "getFontSize", NULL, "I", 0x1, NULL, NULL },
    { "getOwnFontSize", NULL, "Ljava.lang.Integer;", 0x1, NULL, NULL },
    { "setFontSizeWithInt:", "setFontSize", "V", 0x1, NULL, NULL },
    { "setFontSizeWithJavaLangInteger:", "setFontSize", "V", 0x1, NULL, NULL },
    { "getPdfFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOwnPdfFontName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setPdfFontNameWithNSString:", "setPdfFontName", "V", 0x1, NULL, NULL },
    { "getPdfEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOwnPdfEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setPdfEncodingWithNSString:", "setPdfEncoding", "V", 0x1, NULL, NULL },
    { "isPdfEmbedded", NULL, "Z", 0x1, NULL, NULL },
    { "isOwnPdfEmbedded", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setPdfEmbeddedWithBoolean:", "setPdfEmbedded", "V", 0x1, NULL, NULL },
    { "setPdfEmbeddedWithJavaLangBoolean:", "setPdfEmbedded", "V", 0x1, NULL, NULL },
    { "getDefaultLineColor", NULL, "Lorg.oss.pdfreporter.geometry.IColor;", 0x1, NULL, NULL },
    { "setHeightWithInt:", "setHeight", "V", 0x1, NULL, NULL },
    { "setWidthWithInt:", "setWidth", "V", 0x1, NULL, NULL },
    { "processMarkupTextWithNSString:", "processMarkupText", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getMarkupProcessorWithNSString:", "getMarkupProcessor", "Lorg.oss.pdfreporter.engine.util.MarkupProcessor;", 0x4, NULL, NULL },
    { "setPrintTextWithOrgOssPdfreporterEngineJRPrintText:", "setPrintText", "V", 0x4, NULL, NULL },
    { "getTextTruncateSuffix", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "setTextTruncateSuffixWithNSString:", "setTextTruncateSuffix", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PROPERTY_CONSUME_SPACE_ON_OVERFLOW", "PROPERTY_CONSUME_SPACE_ON_OVERFLOW", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineFillJRFillTextElement_PROPERTY_CONSUME_SPACE_ON_OVERFLOW, NULL, .constantValue.asLong = 0 },
    { "markupProcessorFactoryCache", "markupProcessorFactoryCache", 0x1a, "Lorg.oss.pdfreporter.engine.util.JRSingletonCache;", &OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessorFactoryCache, "Lorg/oss/pdfreporter/engine/util/JRSingletonCache<Lorg/oss/pdfreporter/engine/util/MarkupProcessorFactory;>;", .constantValue.asLong = 0 },
    { "markupProcessors", "markupProcessors", 0x1a, "Ljava.util.Map;", &OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessors, "Ljava/util/Map<Ljava/lang/String;Lorg/oss/pdfreporter/engine/util/MarkupProcessor;>;", .constantValue.asLong = 0 },
    { "isLeftToRight_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "textMeasurer_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.fill.JRTextMeasurer;", NULL, NULL, .constantValue.asLong = 0 },
    { "lineSpacingFactor_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "leadingOffset_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "textHeight_", NULL, 0x2, "F", NULL, NULL, .constantValue.asLong = 0 },
    { "elementStretchHeightDelta_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "textStart_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "textEnd_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "lineBreakOffsets_", NULL, 0x2, "[S", NULL, NULL, .constantValue.asLong = 0 },
    { "textTruncateSuffix_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "rawText_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "styledText_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.util.JRStyledText;", NULL, NULL, .constantValue.asLong = 0 },
    { "styledTextAttributesMap_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/oss/pdfreporter/engine/JRStyle;Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;>;", .constantValue.asLong = 0 },
    { "initLineBox_", NULL, 0x14, "Lorg.oss.pdfreporter.engine.JRLineBox;", NULL, NULL, .constantValue.asLong = 0 },
    { "initParagraph_", NULL, 0x14, "Lorg.oss.pdfreporter.engine.JRParagraph;", NULL, NULL, .constantValue.asLong = 0 },
    { "consumeSpaceOnOverflow_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "lineBox_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRLineBox;", NULL, NULL, .constantValue.asLong = 0 },
    { "paragraph_", NULL, 0x4, "Lorg.oss.pdfreporter.engine.JRParagraph;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillJRFillTextElement = { 2, "JRFillTextElement", "org.oss.pdfreporter.engine.fill", NULL, 0x401, 89, methods, 21, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillJRFillTextElement;
}

@end

void OrgOssPdfreporterEngineFillJRFillTextElement_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRTextElement_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterEngineFillJRFillTextElement *self, OrgOssPdfreporterEngineFillJRBaseFiller *filler, id<OrgOssPdfreporterEngineJRTextElement> textElement, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  OrgOssPdfreporterEngineFillJRFillElement_initWithOrgOssPdfreporterEngineFillJRBaseFiller_withOrgOssPdfreporterEngineJRElement_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, filler, textElement, factory);
  self->isLeftToRight_ = true;
  self->styledTextAttributesMap_ = new_JavaUtilHashMap_init();
  self->initLineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRTextElement>) nil_chk(textElement)) getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
  self->initParagraph_ = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([textElement getParagraph])) cloneWithOrgOssPdfreporterEngineJRParagraphContainer:self];
  self->consumeSpaceOnOverflow_ = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk(OrgOssPdfreporterEngineJRPropertiesUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getJasperReportsContext]))) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:textElement withNSString:OrgOssPdfreporterEngineFillJRFillTextElement_PROPERTY_CONSUME_SPACE_ON_OVERFLOW withBoolean:true];
}

void OrgOssPdfreporterEngineFillJRFillTextElement_initWithOrgOssPdfreporterEngineFillJRFillTextElement_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(OrgOssPdfreporterEngineFillJRFillTextElement *self, OrgOssPdfreporterEngineFillJRFillTextElement *textElement, OrgOssPdfreporterEngineFillJRFillCloneFactory *factory) {
  OrgOssPdfreporterEngineFillJRFillElement_initWithOrgOssPdfreporterEngineFillJRFillElement_withOrgOssPdfreporterEngineFillJRFillCloneFactory_(self, textElement, factory);
  self->isLeftToRight_ = true;
  self->styledTextAttributesMap_ = new_JavaUtilHashMap_init();
  self->initLineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((OrgOssPdfreporterEngineFillJRFillTextElement *) nil_chk(textElement)) getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
  self->initParagraph_ = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([textElement getParagraph])) cloneWithOrgOssPdfreporterEngineJRParagraphContainer:self];
  self->consumeSpaceOnOverflow_ = textElement->consumeSpaceOnOverflow_;
}

void OrgOssPdfreporterEngineFillJRFillTextElement_createTextMeasurer(OrgOssPdfreporterEngineFillJRFillTextElement *self) {
  self->textMeasurer_ = [((OrgOssPdfreporterEngineUtilJRTextMeasurerUtil *) nil_chk(OrgOssPdfreporterEngineUtilJRTextMeasurerUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(self->filler_)) getJasperReportsContext]))) createTextMeasurerWithOrgOssPdfreporterEngineJRCommonText:self];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillJRFillTextElement)
