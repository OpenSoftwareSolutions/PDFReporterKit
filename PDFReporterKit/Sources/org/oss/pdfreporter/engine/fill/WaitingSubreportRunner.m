//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fill/WaitingSubreportRunner.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSubreport.h"
#include "org/oss/pdfreporter/engine/fill/JRSubreportRunResult.h"
#include "org/oss/pdfreporter/engine/fill/JRSubreportRunnable.h"
#include "org/oss/pdfreporter/engine/fill/WaitingSubreportRunner.h"

@interface OrgOssPdfreporterEngineFillWaitingSubreportRunner () {
 @public
  OrgOssPdfreporterEngineFillJRBaseFiller *subreportFiller_;
  jboolean filling_;
  jboolean suspended_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillWaitingSubreportRunner, subreportFiller_, OrgOssPdfreporterEngineFillJRBaseFiller *)

inline JavaUtilLoggingLogger *OrgOssPdfreporterEngineFillWaitingSubreportRunner_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFillWaitingSubreportRunner, logger, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineFillWaitingSubreportRunner)

@implementation OrgOssPdfreporterEngineFillWaitingSubreportRunner

- (instancetype)initWithOrgOssPdfreporterEngineFillJRFillSubreport:(OrgOssPdfreporterEngineFillJRFillSubreport *)fillSubreport
                       withOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)subreportFiller {
  OrgOssPdfreporterEngineFillWaitingSubreportRunner_initWithOrgOssPdfreporterEngineFillJRFillSubreport_withOrgOssPdfreporterEngineFillJRBaseFiller_(self, fillSubreport, subreportFiller);
  return self;
}

- (jboolean)isFilling {
  return filling_;
}

- (OrgOssPdfreporterEngineFillJRSubreportRunResult *)start {
  filling_ = true;
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger finestWithNSString:JreStrcat("$I$$", @"Fill ", ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_))->fillerId_, @": starting ", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])];
  }
  [new_JavaLangThread_initWithJavaLangRunnable_withNSString_(self, JreStrcat("$I", @"Fillerthread: ", ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_))->fillerId_)) start];
  return [self waitResult];
}

- (OrgOssPdfreporterEngineFillJRSubreportRunResult *)waitResult {
  while (![self isStarted] || ([self isRunning] && !suspended_)) {
    @try {
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger)) finestWithNSString:JreStrcat("$I$", @"Fill ", ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_))->fillerId_, @": waiting for fill result")];
      JavaLangThread_sleepWithLong_(50);
    }
    @catch (JavaLangInterruptedException *e) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_withNSException_(@"Error encountered while waiting on the report filling thread.", e);
    }
  }
  ;
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger finestWithNSString:JreStrcat("$I$", @"Fill ", ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_))->fillerId_, @": notified of fill result")];
  }
  return [self runResult];
}

- (OrgOssPdfreporterEngineFillJRSubreportRunResult *)resume {
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger finestWithNSString:JreStrcat("$I$", @"Fill ", ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_))->fillerId_, @": notifying to continue")];
  }
  suspended_ = false;
  return [self waitResult];
}

- (void)reset {
  filling_ = false;
}

- (void)cancel {
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger)) warningWithNSString:@"Unsupported cancel operation called"];
}

- (void)suspend {
  if (suspended_) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_(@"ILLEGAL STATE ALREADY SUSPENDED");
  }
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger finestWithNSString:JreStrcat("$I$", @"Fill ", ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_))->fillerId_, @": notifying on suspend")];
  }
  suspended_ = true;
  if ([OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger finestWithNSString:JreStrcat("$I$", @"Fill ", ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_))->fillerId_, @": waiting to continue")];
  }
  while (suspended_) {
    @try {
      [OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger finestWithNSString:JreStrcat("$I$", @"Fill ", ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_))->fillerId_, @": waiting for fill result")];
      JavaLangThread_sleepWithLong_(50);
    }
    @catch (JavaLangInterruptedException *e) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_withNSException_(@"Error encountered while waiting on the report filling thread.", e);
    }
  }
  ;
  if ([OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger finestWithNSString:JreStrcat("$I$", @"Fill ", ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_))->fillerId_, @": notified to continue")];
  }
}

- (void)run {
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger finestWithNSString:JreStrcat("$I$$", @"Fill ", ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_))->fillerId_, @": enter run ", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName])];
  }
  [super run];
  if ([OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
    [OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger finestWithNSString:JreStrcat("$I$", @"Fill ", ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_))->fillerId_, @": notifying of completion")];
  }
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillWaitingSubreportRunner class]) {
    OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterEngineFillWaitingSubreportRunner_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineFillWaitingSubreportRunner)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineFillJRFillSubreport:withOrgOssPdfreporterEngineFillJRBaseFiller:", "WaitingSubreportRunner", NULL, 0x1, NULL, NULL },
    { "isFilling", NULL, "Z", 0x1, NULL, NULL },
    { "start", NULL, "Lorg.oss.pdfreporter.engine.fill.JRSubreportRunResult;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "waitResult", NULL, "Lorg.oss.pdfreporter.engine.fill.JRSubreportRunResult;", 0x4, NULL, NULL },
    { "resume", NULL, "Lorg.oss.pdfreporter.engine.fill.JRSubreportRunResult;", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "reset", NULL, "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "cancel", NULL, "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "suspend", NULL, "V", 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "run", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterEngineFillWaitingSubreportRunner_logger, NULL, .constantValue.asLong = 0 },
    { "subreportFiller_", NULL, 0x12, "Lorg.oss.pdfreporter.engine.fill.JRBaseFiller;", NULL, NULL, .constantValue.asLong = 0 },
    { "filling_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "suspended_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillWaitingSubreportRunner = { 2, "WaitingSubreportRunner", "org.oss.pdfreporter.engine.fill", NULL, 0x1, 9, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillWaitingSubreportRunner;
}

@end

void OrgOssPdfreporterEngineFillWaitingSubreportRunner_initWithOrgOssPdfreporterEngineFillJRFillSubreport_withOrgOssPdfreporterEngineFillJRBaseFiller_(OrgOssPdfreporterEngineFillWaitingSubreportRunner *self, OrgOssPdfreporterEngineFillJRFillSubreport *fillSubreport, OrgOssPdfreporterEngineFillJRBaseFiller *subreportFiller) {
  OrgOssPdfreporterEngineFillJRSubreportRunnable_initWithOrgOssPdfreporterEngineFillJRFillSubreport_(self, fillSubreport);
  self->filling_ = false;
  self->suspended_ = false;
  self->subreportFiller_ = subreportFiller;
}

OrgOssPdfreporterEngineFillWaitingSubreportRunner *new_OrgOssPdfreporterEngineFillWaitingSubreportRunner_initWithOrgOssPdfreporterEngineFillJRFillSubreport_withOrgOssPdfreporterEngineFillJRBaseFiller_(OrgOssPdfreporterEngineFillJRFillSubreport *fillSubreport, OrgOssPdfreporterEngineFillJRBaseFiller *subreportFiller) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillWaitingSubreportRunner, initWithOrgOssPdfreporterEngineFillJRFillSubreport_withOrgOssPdfreporterEngineFillJRBaseFiller_, fillSubreport, subreportFiller)
}

OrgOssPdfreporterEngineFillWaitingSubreportRunner *create_OrgOssPdfreporterEngineFillWaitingSubreportRunner_initWithOrgOssPdfreporterEngineFillJRFillSubreport_withOrgOssPdfreporterEngineFillJRBaseFiller_(OrgOssPdfreporterEngineFillJRFillSubreport *fillSubreport, OrgOssPdfreporterEngineFillJRBaseFiller *subreportFiller) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillWaitingSubreportRunner, initWithOrgOssPdfreporterEngineFillJRFillSubreport_withOrgOssPdfreporterEngineFillJRBaseFiller_, fillSubreport, subreportFiller)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillWaitingSubreportRunner)
