//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fill/ComplexTextLineWrapper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRCommonText.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fill/ComplexTextLineWrapper.h"
#include "org/oss/pdfreporter/engine/fill/TextLayoutLine.h"
#include "org/oss/pdfreporter/engine/fill/TextLine.h"
#include "org/oss/pdfreporter/engine/fill/TextLineWrapper.h"
#include "org/oss/pdfreporter/engine/fill/TextMeasureContext.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/engine/util/MaxFontSizeFinder.h"
#include "org/oss/pdfreporter/font/factory/IFontFactory.h"
#include "org/oss/pdfreporter/font/text/IBreakIterator.h"
#include "org/oss/pdfreporter/font/text/ILineBreakMeasurer.h"
#include "org/oss/pdfreporter/font/text/ITextLayout.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/uses/java/awt/text/AttributedString.h"
#include "org/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator.h"
#include "org/oss/pdfreporter/uses/java/awt/text/ICharacterIterator.h"

@interface OrgOssPdfreporterEngineFillComplexTextLineWrapper () {
 @public
  id<OrgOssPdfreporterEngineFillTextMeasureContext> context_;
  OrgOssPdfreporterEngineUtilMaxFontSizeFinder *maxFontSizeFinder_;
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> allParagraphs_;
  id<JavaUtilMap> globalAttributes_;
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> paragraph_;
  id<OrgOssPdfreporterFontTextILineBreakMeasurer> lineMeasurer_;
  id<OrgOssPdfreporterFontFactoryIFontFactory> fontFactory_;
}

- (void)logTextWithInt:(jint)beginIndex
               withInt:(jint)endIndex
withOrgOssPdfreporterFontTextITextLayout:(id<OrgOssPdfreporterFontTextITextLayout>)textLayout;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillComplexTextLineWrapper, context_, id<OrgOssPdfreporterEngineFillTextMeasureContext>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillComplexTextLineWrapper, maxFontSizeFinder_, OrgOssPdfreporterEngineUtilMaxFontSizeFinder *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillComplexTextLineWrapper, allParagraphs_, id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillComplexTextLineWrapper, globalAttributes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillComplexTextLineWrapper, paragraph_, id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillComplexTextLineWrapper, lineMeasurer_, id<OrgOssPdfreporterFontTextILineBreakMeasurer>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillComplexTextLineWrapper, fontFactory_, id<OrgOssPdfreporterFontFactoryIFontFactory>)

inline JavaUtilLoggingLogger *OrgOssPdfreporterEngineFillComplexTextLineWrapper_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterEngineFillComplexTextLineWrapper_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFillComplexTextLineWrapper, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static void OrgOssPdfreporterEngineFillComplexTextLineWrapper_logTextWithInt_withInt_withOrgOssPdfreporterFontTextITextLayout_(OrgOssPdfreporterEngineFillComplexTextLineWrapper *self, jint beginIndex, jint endIndex, id<OrgOssPdfreporterFontTextITextLayout> textLayout);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineFillComplexTextLineWrapper)

@implementation OrgOssPdfreporterEngineFillComplexTextLineWrapper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineFillComplexTextLineWrapper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgOssPdfreporterEngineFillComplexTextLineWrapper:(OrgOssPdfreporterEngineFillComplexTextLineWrapper *)parent {
  OrgOssPdfreporterEngineFillComplexTextLineWrapper_initWithOrgOssPdfreporterEngineFillComplexTextLineWrapper_(self, parent);
  return self;
}

- (void)init__WithOrgOssPdfreporterEngineFillTextMeasureContext:(id<OrgOssPdfreporterEngineFillTextMeasureContext>)context {
  self->context_ = context;
  jboolean isStyledText = ![((NSString *) nil_chk(OrgOssPdfreporterEngineJRCommonText_MARKUP_NONE)) isEqual:[((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk([((id<OrgOssPdfreporterEngineFillTextMeasureContext>) nil_chk(context)) getElement])) getMarkup]];
  maxFontSizeFinder_ = OrgOssPdfreporterEngineUtilMaxFontSizeFinder_getInstanceWithBoolean_(isStyledText);
}

- (jboolean)startWithOrgOssPdfreporterEngineUtilJRStyledText:(OrgOssPdfreporterEngineUtilJRStyledText *)styledText {
  globalAttributes_ = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getGlobalAttributes];
  allParagraphs_ = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk([styledText getAwtAttributedStringWithOrgOssPdfreporterEngineJasperReportsContext:[((id<OrgOssPdfreporterEngineFillTextMeasureContext>) nil_chk(context_)) getJasperReportsContext] withBoolean:[((id<OrgOssPdfreporterEngineFillTextMeasureContext>) nil_chk(context_)) isIgnoreMissingFont]])) getIterator];
  return true;
}

- (void)startParagraphWithInt:(jint)paragraphStart
                      withInt:(jint)paragraphEnd
                  withBoolean:(jboolean)truncateAtChar {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString *text = new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(allParagraphs_, paragraphStart, paragraphEnd);
  [self startParagraphWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:text withBoolean:truncateAtChar];
}

- (void)startEmptyParagraphWithInt:(jint)paragraphStart {
  id<JavaUtilMap> attributes = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk([new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(allParagraphs_, paragraphStart, paragraphStart + 1) getIterator])) getAttributes];
  OrgOssPdfreporterUsesJavaAwtTextAttributedString *text = new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_withJavaUtilMap_(@" ", attributes);
  [self startParagraphWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:text withBoolean:false];
}

- (void)startParagraphWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)text
                                                               withBoolean:(jboolean)truncateAtChar {
  self->paragraph_ = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(text)) getIterator];
  id<OrgOssPdfreporterFontTextIBreakIterator> breakIter = truncateAtChar ? [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk(fontFactory_)) newCharacterBreakIterator] : [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk(fontFactory_)) newWordBreakIterator];
  lineMeasurer_ = [fontFactory_ newLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:text withOrgOssPdfreporterFontTextIBreakIterator:breakIter];
}

- (jint)paragraphPosition {
  return [((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer_)) getPosition];
}

- (jint)paragraphEnd {
  return [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(paragraph_)) getEndIndex];
}

- (id<OrgOssPdfreporterEngineFillTextLine>)nextLineWithFloat:(jfloat)width
                                                     withInt:(jint)endLimit
                                                 withBoolean:(jboolean)requireWord {
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillComplexTextLineWrapper_logger)) finestWithNSString:JreStrcat("$F$I$Z", @"width: ", width, @", endLimit: ", endLimit, @", requireWord: ", requireWord)];
  jint beginIndex = [((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer_)) getPosition];
  id<OrgOssPdfreporterFontTextITextLayout> textLayout = [((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer_)) nextLayoutWithFloat:width withInt:endLimit withBoolean:requireWord];
  jint endIndex = [((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer_)) getPosition];
  OrgOssPdfreporterEngineFillComplexTextLineWrapper_logTextWithInt_withInt_withOrgOssPdfreporterFontTextITextLayout_(self, beginIndex, endIndex, textLayout);
  return textLayout == nil ? nil : new_OrgOssPdfreporterEngineFillTextLayoutLine_initWithOrgOssPdfreporterFontTextITextLayout_(textLayout);
}

- (void)logTextWithInt:(jint)beginIndex
               withInt:(jint)endIndex
withOrgOssPdfreporterFontTextITextLayout:(id<OrgOssPdfreporterFontTextITextLayout>)textLayout {
  OrgOssPdfreporterEngineFillComplexTextLineWrapper_logTextWithInt_withInt_withOrgOssPdfreporterFontTextITextLayout_(self, beginIndex, endIndex, textLayout);
}

- (id<OrgOssPdfreporterEngineFillTextLine>)baseTextLineWithInt:(jint)index {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString *tmpText = new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(paragraph_, index, index + 1);
  id<OrgOssPdfreporterFontTextILineBreakMeasurer> lbm = [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk(fontFactory_)) newLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:tmpText];
  id<OrgOssPdfreporterFontTextITextLayout> tlyt = [((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lbm)) nextLayoutWithFloat:100];
  return new_OrgOssPdfreporterEngineFillTextLayoutLine_initWithOrgOssPdfreporterFontTextITextLayout_(tlyt);
}

- (jint)maxFontSizeWithInt:(jint)start
                   withInt:(jint)end {
  return [((OrgOssPdfreporterEngineUtilMaxFontSizeFinder *) nil_chk(maxFontSizeFinder_)) findMaxFontSizeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:[new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(paragraph_, start, end) getIterator] withInt:[((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk([((id<OrgOssPdfreporterEngineFillTextMeasureContext>) nil_chk(context_)) getElement])) getFontSize]];
}

- (NSString *)getLineTextWithInt:(jint)start
                         withInt:(jint)end {
  JavaLangStringBuilder *lineText = new_JavaLangStringBuilder_init();
  [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(allParagraphs_)) setIndexWithInt:start];
  while ([((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(allParagraphs_)) getIndex] < end && [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(allParagraphs_)) current] != 0x000a) {
    (void) [lineText appendWithChar:[((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(allParagraphs_)) current]];
    [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(allParagraphs_)) next];
  }
  return [lineText description];
}

- (jchar)charAtWithInt:(jint)index {
  return [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(allParagraphs_)) setIndexWithInt:index];
}

- (id<OrgOssPdfreporterEngineFillTextLineWrapper>)lastLineWrapperWithNSString:(NSString *)lineText
                                                                      withInt:(jint)start
                                                                      withInt:(jint)textLength
                                                                  withBoolean:(jboolean)truncateAtChar {
  OrgOssPdfreporterUsesJavaAwtTextAttributedString *attributedText = new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_(lineText);
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> textAttributes = [new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(allParagraphs_, start, start + textLength) getIterator];
  [self setAttributesWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:textAttributes withInt:0];
  [self setAttributesWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText withJavaUtilMap:globalAttributes_ withInt:textLength withInt:((jint) [((NSString *) nil_chk(lineText)) length])];
  OrgOssPdfreporterEngineFillComplexTextLineWrapper *lastLineWrapper = new_OrgOssPdfreporterEngineFillComplexTextLineWrapper_initWithOrgOssPdfreporterEngineFillComplexTextLineWrapper_(self);
  [lastLineWrapper startParagraphWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText withBoolean:truncateAtChar];
  return lastLineWrapper;
}

- (void)setAttributesWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)string
         withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)attributes
                                                                  withInt:(jint)stringOffset {
  for (jchar c = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(attributes)) first]; c != OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE; c = [attributes next]) {
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([attributes getAttributes])) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<JavaUtilMap_Entry> attributeEntry = [it next];
      OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *attribute = [((id<JavaUtilMap_Entry>) nil_chk(attributeEntry)) getKey];
      if ([attributes getRunStartWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute] == [attributes getIndex]) {
        id attributeValue = [attributeEntry getValue];
        [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(string)) addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute withId:attributeValue withInt:[attributes getIndex] + stringOffset withInt:[attributes getRunLimitWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute] + stringOffset];
      }
    }
  }
}

- (void)setAttributesWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)string
                                                          withJavaUtilMap:(id<JavaUtilMap>)attributes
                                                                  withInt:(jint)startIndex
                                                                  withInt:(jint)endIndex {
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(attributes)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = [it next];
    OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *attribute = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    id attributeValue = [entry_ getValue];
    [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(string)) addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute withId:attributeValue withInt:startIndex withInt:endIndex];
  }
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillComplexTextLineWrapper class]) {
    OrgOssPdfreporterEngineFillComplexTextLineWrapper_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterEngineFillComplexTextLineWrapper_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineFillComplexTextLineWrapper)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ComplexTextLineWrapper", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineFillComplexTextLineWrapper:", "ComplexTextLineWrapper", NULL, 0x4, NULL, NULL },
    { "init__WithOrgOssPdfreporterEngineFillTextMeasureContext:", "init", "V", 0x1, NULL, NULL },
    { "startWithOrgOssPdfreporterEngineUtilJRStyledText:", "start", "Z", 0x1, NULL, NULL },
    { "startParagraphWithInt:withInt:withBoolean:", "startParagraph", "V", 0x1, NULL, NULL },
    { "startEmptyParagraphWithInt:", "startEmptyParagraph", "V", 0x1, NULL, NULL },
    { "startParagraphWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:withBoolean:", "startParagraph", "V", 0x4, NULL, NULL },
    { "paragraphPosition", NULL, "I", 0x1, NULL, NULL },
    { "paragraphEnd", NULL, "I", 0x1, NULL, NULL },
    { "nextLineWithFloat:withInt:withBoolean:", "nextLine", "Lorg.oss.pdfreporter.engine.fill.TextLine;", 0x1, NULL, NULL },
    { "logTextWithInt:withInt:withOrgOssPdfreporterFontTextITextLayout:", "logText", "V", 0x2, NULL, NULL },
    { "baseTextLineWithInt:", "baseTextLine", "Lorg.oss.pdfreporter.engine.fill.TextLine;", 0x1, NULL, NULL },
    { "maxFontSizeWithInt:withInt:", "maxFontSize", "I", 0x1, NULL, NULL },
    { "getLineTextWithInt:withInt:", "getLineText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "charAtWithInt:", "charAt", "C", 0x1, NULL, NULL },
    { "lastLineWrapperWithNSString:withInt:withInt:withBoolean:", "lastLineWrapper", "Lorg.oss.pdfreporter.engine.fill.TextLineWrapper;", 0x1, NULL, NULL },
    { "setAttributesWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:withInt:", "setAttributes", "V", 0x4, NULL, NULL },
    { "setAttributesWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:withJavaUtilMap:withInt:withInt:", "setAttributes", "V", 0x4, NULL, "(Lorg/oss/pdfreporter/uses/java/awt/text/AttributedString;Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;II)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterEngineFillComplexTextLineWrapper_logger, NULL, .constantValue.asLong = 0 },
    { "context_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.fill.TextMeasureContext;", NULL, NULL, .constantValue.asLong = 0 },
    { "maxFontSizeFinder_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.util.MaxFontSizeFinder;", NULL, NULL, .constantValue.asLong = 0 },
    { "allParagraphs_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.java.awt.text.IAttributedCharacterIterator;", NULL, NULL, .constantValue.asLong = 0 },
    { "globalAttributes_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "paragraph_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.java.awt.text.IAttributedCharacterIterator;", NULL, NULL, .constantValue.asLong = 0 },
    { "lineMeasurer_", NULL, 0x2, "Lorg.oss.pdfreporter.font.text.ILineBreakMeasurer;", NULL, NULL, .constantValue.asLong = 0 },
    { "fontFactory_", NULL, 0x12, "Lorg.oss.pdfreporter.font.factory.IFontFactory;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillComplexTextLineWrapper = { 2, "ComplexTextLineWrapper", "org.oss.pdfreporter.engine.fill", NULL, 0x1, 18, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillComplexTextLineWrapper;
}

@end

void OrgOssPdfreporterEngineFillComplexTextLineWrapper_init(OrgOssPdfreporterEngineFillComplexTextLineWrapper *self) {
  NSObject_init(self);
  self->fontFactory_ = OrgOssPdfreporterRegistryApiRegistry_getFontFactory();
}

OrgOssPdfreporterEngineFillComplexTextLineWrapper *new_OrgOssPdfreporterEngineFillComplexTextLineWrapper_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillComplexTextLineWrapper, init)
}

OrgOssPdfreporterEngineFillComplexTextLineWrapper *create_OrgOssPdfreporterEngineFillComplexTextLineWrapper_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillComplexTextLineWrapper, init)
}

void OrgOssPdfreporterEngineFillComplexTextLineWrapper_initWithOrgOssPdfreporterEngineFillComplexTextLineWrapper_(OrgOssPdfreporterEngineFillComplexTextLineWrapper *self, OrgOssPdfreporterEngineFillComplexTextLineWrapper *parent) {
  NSObject_init(self);
  self->context_ = ((OrgOssPdfreporterEngineFillComplexTextLineWrapper *) nil_chk(parent))->context_;
  self->maxFontSizeFinder_ = parent->maxFontSizeFinder_;
  self->allParagraphs_ = parent->allParagraphs_;
  self->globalAttributes_ = parent->globalAttributes_;
  self->fontFactory_ = OrgOssPdfreporterRegistryApiRegistry_getFontFactory();
}

OrgOssPdfreporterEngineFillComplexTextLineWrapper *new_OrgOssPdfreporterEngineFillComplexTextLineWrapper_initWithOrgOssPdfreporterEngineFillComplexTextLineWrapper_(OrgOssPdfreporterEngineFillComplexTextLineWrapper *parent) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillComplexTextLineWrapper, initWithOrgOssPdfreporterEngineFillComplexTextLineWrapper_, parent)
}

OrgOssPdfreporterEngineFillComplexTextLineWrapper *create_OrgOssPdfreporterEngineFillComplexTextLineWrapper_initWithOrgOssPdfreporterEngineFillComplexTextLineWrapper_(OrgOssPdfreporterEngineFillComplexTextLineWrapper *parent) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillComplexTextLineWrapper, initWithOrgOssPdfreporterEngineFillComplexTextLineWrapper_, parent)
}

void OrgOssPdfreporterEngineFillComplexTextLineWrapper_logTextWithInt_withInt_withOrgOssPdfreporterFontTextITextLayout_(OrgOssPdfreporterEngineFillComplexTextLineWrapper *self, jint beginIndex, jint endIndex, id<OrgOssPdfreporterFontTextITextLayout> textLayout) {
  if (textLayout != nil) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillComplexTextLineWrapper_logger)) finestWithNSString:JreStrcat("$F$F", @"Space advance: ", [textLayout getAdvance], @", Visible space advance: ", [textLayout getVisibleAdvance])];
  }
  JavaLangStringBuilder *builder = new_JavaLangStringBuilder_init();
  OrgOssPdfreporterUsesJavaAwtTextAttributedString *attributedText = new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_withInt_withInt_(self->paragraph_, beginIndex, endIndex);
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> iterator = [attributedText getIterator];
  for (jchar c = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) first]; c != OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE; c = [iterator next]) {
    (void) [builder appendWithChar:c];
  }
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillComplexTextLineWrapper_logger)) finestWithNSString:JreStrcat("$I$I$$", @"Pos: ", beginIndex, @", next: ", endIndex, @", text: ", [builder description])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillComplexTextLineWrapper)
