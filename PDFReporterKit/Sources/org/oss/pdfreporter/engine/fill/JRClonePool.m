//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRClonePool.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/fill/JRClonePool.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"

@interface OrgOssPdfreporterEngineFillJRClonePool () {
 @public
  id<OrgOssPdfreporterEngineFillJRFillCloneable> original_;
  JavaUtilLinkedList *availableClones_;
  jboolean trackLockedClones_;
  id<JavaUtilSet> lockedClones_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRClonePool, original_, id<OrgOssPdfreporterEngineFillJRFillCloneable>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRClonePool, availableClones_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFillJRClonePool, lockedClones_, id<JavaUtilSet>)

@implementation OrgOssPdfreporterEngineFillJRClonePool

- (instancetype)initWithOrgOssPdfreporterEngineFillJRFillCloneable:(id<OrgOssPdfreporterEngineFillJRFillCloneable>)original
                                                       withBoolean:(jboolean)trackLockedClones
                                                       withBoolean:(jboolean)useOriginal {
  OrgOssPdfreporterEngineFillJRClonePool_initWithOrgOssPdfreporterEngineFillJRFillCloneable_withBoolean_withBoolean_(self, original, trackLockedClones, useOriginal);
  return self;
}

- (id)getClone {
  id<OrgOssPdfreporterEngineFillJRFillCloneable> clone;
  if ([((JavaUtilLinkedList *) nil_chk(availableClones_)) isEmpty]) {
    OrgOssPdfreporterEngineFillJRFillCloneFactory *factory = new_OrgOssPdfreporterEngineFillJRFillCloneFactory_init();
    clone = [((id<OrgOssPdfreporterEngineFillJRFillCloneable>) nil_chk(original_)) createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:factory];
  }
  else {
    clone = [availableClones_ removeFirst];
  }
  if (trackLockedClones_) {
    [((id<JavaUtilSet>) nil_chk(lockedClones_)) addWithId:clone];
  }
  return clone;
}

- (void)releaseCloneWithId:(id)clone {
  if (trackLockedClones_) {
    if (![((id<JavaUtilSet>) nil_chk(lockedClones_)) removeWithId:clone]) {
      @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSString_(@"Cannot release clone.");
    }
  }
  [((JavaUtilLinkedList *) nil_chk(availableClones_)) addLastWithId:(id<OrgOssPdfreporterEngineFillJRFillCloneable>) cast_check(clone, OrgOssPdfreporterEngineFillJRFillCloneable_class_())];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineFillJRFillCloneable:withBoolean:withBoolean:", "JRClonePool", NULL, 0x1, NULL, NULL },
    { "getClone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "releaseCloneWithId:", "releaseClone", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "original_", NULL, 0x12, "Lorg.oss.pdfreporter.engine.fill.JRFillCloneable;", NULL, NULL, .constantValue.asLong = 0 },
    { "availableClones_", NULL, 0x12, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lorg/oss/pdfreporter/engine/fill/JRFillCloneable;>;", .constantValue.asLong = 0 },
    { "trackLockedClones_", NULL, 0x12, "Z", NULL, NULL, .constantValue.asLong = 0 },
    { "lockedClones_", NULL, 0x12, "Ljava.util.Set;", NULL, "Ljava/util/Set<Lorg/oss/pdfreporter/engine/fill/JRFillCloneable;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFillJRClonePool = { 2, "JRClonePool", "org.oss.pdfreporter.engine.fill", NULL, 0x1, 3, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFillJRClonePool;
}

@end

void OrgOssPdfreporterEngineFillJRClonePool_initWithOrgOssPdfreporterEngineFillJRFillCloneable_withBoolean_withBoolean_(OrgOssPdfreporterEngineFillJRClonePool *self, id<OrgOssPdfreporterEngineFillJRFillCloneable> original, jboolean trackLockedClones, jboolean useOriginal) {
  NSObject_init(self);
  self->original_ = original;
  self->availableClones_ = new_JavaUtilLinkedList_init();
  self->trackLockedClones_ = trackLockedClones;
  if (trackLockedClones) {
    self->lockedClones_ = new_JavaUtilHashSet_init();
  }
  else {
    self->lockedClones_ = nil;
  }
  if (useOriginal) {
    [self->availableClones_ addWithId:original];
  }
}

OrgOssPdfreporterEngineFillJRClonePool *new_OrgOssPdfreporterEngineFillJRClonePool_initWithOrgOssPdfreporterEngineFillJRFillCloneable_withBoolean_withBoolean_(id<OrgOssPdfreporterEngineFillJRFillCloneable> original, jboolean trackLockedClones, jboolean useOriginal) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFillJRClonePool, initWithOrgOssPdfreporterEngineFillJRFillCloneable_withBoolean_withBoolean_, original, trackLockedClones, useOriginal)
}

OrgOssPdfreporterEngineFillJRClonePool *create_OrgOssPdfreporterEngineFillJRClonePool_initWithOrgOssPdfreporterEngineFillJRFillCloneable_withBoolean_withBoolean_(id<OrgOssPdfreporterEngineFillJRFillCloneable> original, jboolean trackLockedClones, jboolean useOriginal) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFillJRClonePool, initWithOrgOssPdfreporterEngineFillJRFillCloneable_withBoolean_withBoolean_, original, trackLockedClones, useOriginal)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFillJRClonePool)
