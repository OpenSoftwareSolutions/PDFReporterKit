//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/JRPropertiesMap.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRConstants.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/design/events/JRPropertyChangeSupport.h"
#include "org/oss/pdfreporter/net/IURL.h"
#include "org/oss/pdfreporter/uses/java/util/Properties.h"

@interface OrgOssPdfreporterEngineJRPropertiesMap () {
 @public
  id<JavaUtilMap> propertiesMap_;
  id<JavaUtilList> propertiesList_;
  OrgOssPdfreporterEngineJRPropertiesMap *base_;
  OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *eventSupport_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineJRPropertiesMap, propertiesMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineJRPropertiesMap, propertiesList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineJRPropertiesMap, base_, OrgOssPdfreporterEngineJRPropertiesMap *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineJRPropertiesMap, eventSupport_, OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *)

inline jlong OrgOssPdfreporterEngineJRPropertiesMap_get_serialVersionUID();
#define OrgOssPdfreporterEngineJRPropertiesMap_serialVersionUID 10200LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterEngineJRPropertiesMap, serialVersionUID, jlong)

__attribute__((unused)) static void OrgOssPdfreporterEngineJRPropertiesMap_init__(OrgOssPdfreporterEngineJRPropertiesMap *self);

NSString *OrgOssPdfreporterEngineJRPropertiesMap_PROPERTY_VALUE = @"value";

@implementation OrgOssPdfreporterEngineJRPropertiesMap

+ (NSString *)PROPERTY_VALUE {
  return OrgOssPdfreporterEngineJRPropertiesMap_PROPERTY_VALUE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineJRPropertiesMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap {
  OrgOssPdfreporterEngineJRPropertiesMap_initWithOrgOssPdfreporterEngineJRPropertiesMap_(self, propertiesMap);
  return self;
}

- (void)ensureInit {
  @synchronized(self) {
    if (propertiesMap_ == nil) {
      OrgOssPdfreporterEngineJRPropertiesMap_init__(self);
    }
  }
}

- (void)init__ {
  OrgOssPdfreporterEngineJRPropertiesMap_init__(self);
}

- (IOSObjectArray *)getPropertyNames {
  IOSObjectArray *names;
  if ([self hasOwnProperties]) {
    if (base_ == nil) {
      names = [((id<JavaUtilList>) nil_chk(propertiesList_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[propertiesList_ size] type:NSString_class_()]];
    }
    else {
      JavaUtilLinkedHashSet *namesSet = new_JavaUtilLinkedHashSet_init();
      [self collectPropertyNamesWithJavaUtilCollection:namesSet];
      names = [namesSet toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[namesSet size] type:NSString_class_()]];
    }
  }
  else if (base_ != nil) {
    names = [base_ getPropertyNames];
  }
  else {
    names = [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
  }
  return names;
}

- (void)collectPropertyNamesWithJavaUtilCollection:(id<JavaUtilCollection>)names {
  if (base_ != nil) {
    [base_ collectPropertyNamesWithJavaUtilCollection:names];
  }
  if (propertiesList_ != nil) {
    [((id<JavaUtilCollection>) nil_chk(names)) addAllWithJavaUtilCollection:propertiesList_];
  }
}

- (NSString *)getPropertyWithNSString:(NSString *)propName {
  NSString *val;
  if ([self hasOwnPropertyWithNSString:propName]) {
    val = [self getOwnPropertyWithNSString:propName];
  }
  else if (base_ != nil) {
    val = [base_ getPropertyWithNSString:propName];
  }
  else {
    val = nil;
  }
  return val;
}

- (jboolean)containsPropertyWithNSString:(NSString *)propName {
  return [self hasOwnPropertyWithNSString:propName] || (base_ != nil && [base_ containsPropertyWithNSString:propName]);
}

- (jboolean)hasOwnPropertyWithNSString:(NSString *)propName {
  return propertiesMap_ != nil && [propertiesMap_ containsKeyWithId:propName];
}

- (NSString *)getOwnPropertyWithNSString:(NSString *)propName {
  return propertiesMap_ != nil ? [propertiesMap_ getWithId:propName] : nil;
}

- (void)setPropertyWithNSString:(NSString *)propName
                   withNSString:(NSString *)value {
  id old = [self getOwnPropertyWithNSString:propName];
  [self ensureInit];
  if (![self hasOwnPropertyWithNSString:propName]) {
    [((id<JavaUtilList>) nil_chk(propertiesList_)) addWithId:propName];
  }
  (void) [((id<JavaUtilMap>) nil_chk(propertiesMap_)) putWithId:propName withId:value];
  if ([self hasEventSupport]) {
    [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineJRPropertiesMap_PROPERTY_VALUE withId:old withId:value];
  }
}

- (void)removePropertyWithNSString:(NSString *)propName {
  if ([self hasOwnPropertyWithNSString:propName]) {
    [((id<JavaUtilList>) nil_chk(propertiesList_)) removeWithId:propName];
    (void) [((id<JavaUtilMap>) nil_chk(propertiesMap_)) removeWithId:propName];
  }
}

- (OrgOssPdfreporterEngineJRPropertiesMap *)cloneProperties {
  return new_OrgOssPdfreporterEngineJRPropertiesMap_initWithOrgOssPdfreporterEngineJRPropertiesMap_(self);
}

- (id)clone {
  return [self cloneProperties];
}

- (NSString *)description {
  return propertiesMap_ == nil ? @"" : [propertiesMap_ description];
}

- (jboolean)hasProperties {
  return [self hasOwnProperties] || (base_ != nil && [base_ hasProperties]);
}

- (jboolean)hasOwnProperties {
  return propertiesList_ != nil && ![propertiesList_ isEmpty];
}

+ (OrgOssPdfreporterEngineJRPropertiesMap *)getPropertiesCloneWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder {
  return OrgOssPdfreporterEngineJRPropertiesMap_getPropertiesCloneWithOrgOssPdfreporterEngineJRPropertiesHolder_(propertiesHolder);
}

- (OrgOssPdfreporterEngineJRPropertiesMap *)getBaseProperties {
  return base_;
}

- (void)setBasePropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)base {
  self->base_ = base;
}

+ (OrgOssPdfreporterEngineJRPropertiesMap *)loadPropertiesWithOrgOssPdfreporterNetIURL:(id<OrgOssPdfreporterNetIURL>)location {
  return OrgOssPdfreporterEngineJRPropertiesMap_loadPropertiesWithOrgOssPdfreporterNetIURL_(location);
}

- (jboolean)hasEventSupport {
  return eventSupport_ != nil;
}

- (OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *)getEventSupport {
  @synchronized(self) {
    if (eventSupport_ == nil) {
      eventSupport_ = new_OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport_initWithId_(self);
    }
  }
  return eventSupport_;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JRPropertiesMap", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineJRPropertiesMap:", "JRPropertiesMap", NULL, 0x1, NULL, NULL },
    { "ensureInit", NULL, "V", 0x24, NULL, NULL },
    { "init__", "init", "V", 0x2, NULL, NULL },
    { "getPropertyNames", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "collectPropertyNamesWithJavaUtilCollection:", "collectPropertyNames", "V", 0x4, NULL, "(Ljava/util/Collection<Ljava/lang/String;>;)V" },
    { "getPropertyWithNSString:", "getProperty", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "containsPropertyWithNSString:", "containsProperty", "Z", 0x1, NULL, NULL },
    { "hasOwnPropertyWithNSString:", "hasOwnProperty", "Z", 0x4, NULL, NULL },
    { "getOwnPropertyWithNSString:", "getOwnProperty", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "setPropertyWithNSString:withNSString:", "setProperty", "V", 0x1, NULL, NULL },
    { "removePropertyWithNSString:", "removeProperty", "V", 0x1, NULL, NULL },
    { "cloneProperties", NULL, "Lorg.oss.pdfreporter.engine.JRPropertiesMap;", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "hasProperties", NULL, "Z", 0x1, NULL, NULL },
    { "hasOwnProperties", NULL, "Z", 0x1, NULL, NULL },
    { "getPropertiesCloneWithOrgOssPdfreporterEngineJRPropertiesHolder:", "getPropertiesClone", "Lorg.oss.pdfreporter.engine.JRPropertiesMap;", 0x9, NULL, NULL },
    { "getBaseProperties", NULL, "Lorg.oss.pdfreporter.engine.JRPropertiesMap;", 0x1, NULL, NULL },
    { "setBasePropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:", "setBaseProperties", "V", 0x1, NULL, NULL },
    { "loadPropertiesWithOrgOssPdfreporterNetIURL:", "loadProperties", "Lorg.oss.pdfreporter.engine.JRPropertiesMap;", 0x9, NULL, NULL },
    { "hasEventSupport", NULL, "Z", 0x4, NULL, NULL },
    { "getEventSupport", NULL, "Lorg.oss.pdfreporter.engine.design.events.JRPropertyChangeSupport;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "serialVersionUID", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgOssPdfreporterEngineJRPropertiesMap_serialVersionUID },
    { "PROPERTY_VALUE", "PROPERTY_VALUE", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineJRPropertiesMap_PROPERTY_VALUE, NULL, .constantValue.asLong = 0 },
    { "propertiesMap_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "propertiesList_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "base_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.JRPropertiesMap;", NULL, NULL, .constantValue.asLong = 0 },
    { "eventSupport_", NULL, 0x82, "Lorg.oss.pdfreporter.engine.design.events.JRPropertyChangeSupport;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineJRPropertiesMap = { 2, "JRPropertiesMap", "org.oss.pdfreporter.engine", NULL, 0x1, 23, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineJRPropertiesMap;
}

@end

void OrgOssPdfreporterEngineJRPropertiesMap_init(OrgOssPdfreporterEngineJRPropertiesMap *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineJRPropertiesMap *new_OrgOssPdfreporterEngineJRPropertiesMap_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineJRPropertiesMap, init)
}

OrgOssPdfreporterEngineJRPropertiesMap *create_OrgOssPdfreporterEngineJRPropertiesMap_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineJRPropertiesMap, init)
}

void OrgOssPdfreporterEngineJRPropertiesMap_initWithOrgOssPdfreporterEngineJRPropertiesMap_(OrgOssPdfreporterEngineJRPropertiesMap *self, OrgOssPdfreporterEngineJRPropertiesMap *propertiesMap) {
  OrgOssPdfreporterEngineJRPropertiesMap_init(self);
  self->base_ = ((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(propertiesMap))->base_;
  IOSObjectArray *propertyNames = [propertiesMap getPropertyNames];
  if (propertyNames != nil && propertyNames->size_ > 0) {
    for (jint i = 0; i < propertyNames->size_; i++) {
      [self setPropertyWithNSString:IOSObjectArray_Get(propertyNames, i) withNSString:[propertiesMap getPropertyWithNSString:IOSObjectArray_Get(propertyNames, i)]];
    }
  }
}

OrgOssPdfreporterEngineJRPropertiesMap *new_OrgOssPdfreporterEngineJRPropertiesMap_initWithOrgOssPdfreporterEngineJRPropertiesMap_(OrgOssPdfreporterEngineJRPropertiesMap *propertiesMap) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineJRPropertiesMap, initWithOrgOssPdfreporterEngineJRPropertiesMap_, propertiesMap)
}

OrgOssPdfreporterEngineJRPropertiesMap *create_OrgOssPdfreporterEngineJRPropertiesMap_initWithOrgOssPdfreporterEngineJRPropertiesMap_(OrgOssPdfreporterEngineJRPropertiesMap *propertiesMap) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineJRPropertiesMap, initWithOrgOssPdfreporterEngineJRPropertiesMap_, propertiesMap)
}

void OrgOssPdfreporterEngineJRPropertiesMap_init__(OrgOssPdfreporterEngineJRPropertiesMap *self) {
  self->propertiesMap_ = new_JavaUtilHashMap_initWithInt_withFloat_(4, 0.75f);
  self->propertiesList_ = new_JavaUtilArrayList_initWithInt_(2);
}

OrgOssPdfreporterEngineJRPropertiesMap *OrgOssPdfreporterEngineJRPropertiesMap_getPropertiesCloneWithOrgOssPdfreporterEngineJRPropertiesHolder_(id<OrgOssPdfreporterEngineJRPropertiesHolder> propertiesHolder) {
  OrgOssPdfreporterEngineJRPropertiesMap_initialize();
  OrgOssPdfreporterEngineJRPropertiesMap *clone;
  if ([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) hasProperties]) {
    clone = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([propertiesHolder getPropertiesMap])) cloneProperties];
  }
  else {
    clone = nil;
  }
  return clone;
}

OrgOssPdfreporterEngineJRPropertiesMap *OrgOssPdfreporterEngineJRPropertiesMap_loadPropertiesWithOrgOssPdfreporterNetIURL_(id<OrgOssPdfreporterNetIURL> location) {
  OrgOssPdfreporterEngineJRPropertiesMap_initialize();
  jboolean close = true;
  JavaIoInputStream *stream = nil;
  @try {
    stream = [((id<OrgOssPdfreporterNetIURL>) nil_chk(location)) openStream];
    OrgOssPdfreporterUsesJavaUtilProperties *props = new_OrgOssPdfreporterUsesJavaUtilProperties_init();
    [props load__WithJavaIoInputStream:stream];
    close = false;
    [((JavaIoInputStream *) nil_chk(stream)) close];
    OrgOssPdfreporterEngineJRPropertiesMap *properties = new_OrgOssPdfreporterEngineJRPropertiesMap_init();
    for (id<JavaUtilEnumeration> names = [props propertyNames]; [((id<JavaUtilEnumeration>) nil_chk(names)) hasMoreElements]; ) {
      NSString *name = (NSString *) cast_chk([names nextElement], [NSString class]);
      NSString *value = [props getPropertyWithNSString:name];
      [properties setPropertyWithNSString:name withNSString:value];
    }
    return properties;
  }
  @catch (JavaIoIOException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
  @finally {
    if (close && stream != nil) {
      @try {
        [stream close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineJRPropertiesMap)
