//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/SimpleJasperReportsContext.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/SimpleJasperReportsContext.h"

@interface OrgOssPdfreporterEngineSimpleJasperReportsContext () {
 @public
  id<OrgOssPdfreporterEngineJasperReportsContext> parent_;
  id<JavaUtilMap> values_;
  id<JavaUtilMap> properties_;
  id<JavaUtilMap> extensionsMap_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineSimpleJasperReportsContext, parent_, id<OrgOssPdfreporterEngineJasperReportsContext>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineSimpleJasperReportsContext, values_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineSimpleJasperReportsContext, properties_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineSimpleJasperReportsContext, extensionsMap_, id<JavaUtilMap>)

@implementation OrgOssPdfreporterEngineSimpleJasperReportsContext

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineSimpleJasperReportsContext_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)parent {
  OrgOssPdfreporterEngineSimpleJasperReportsContext_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, parent);
  return self;
}

- (void)setParentWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)parent {
  self->parent_ = parent;
}

- (id)getValueWithNSString:(NSString *)key {
  if ([((id<JavaUtilMap>) nil_chk(values_)) containsKeyWithId:key]) {
    return [((id<JavaUtilMap>) nil_chk(values_)) getWithId:key];
  }
  if (parent_ != nil) {
    return [parent_ getValueWithNSString:key];
  }
  return nil;
}

- (void)setValueWithNSString:(NSString *)key
                      withId:(id)value {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:value];
}

- (void)removeValueWithNSString:(NSString *)key {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) removeWithId:key];
}

- (id<JavaUtilList>)getExtensionsWithIOSClass:(IOSClass *)extensionType {
  if (extensionsMap_ == nil || ![extensionsMap_ containsKeyWithId:extensionType]) {
    if (parent_ == nil) {
      return nil;
    }
    else {
      return [parent_ getExtensionsWithIOSClass:extensionType];
    }
  }
  else {
    id<JavaUtilList> extensionsList = [extensionsMap_ getWithId:extensionType];
    if (parent_ == nil) {
      return extensionsList;
    }
    else {
      id<JavaUtilList> parentExtensions = [parent_ getExtensionsWithIOSClass:extensionType];
      if (extensionsList == nil || [extensionsList isEmpty]) {
        if (parentExtensions == nil || [parentExtensions isEmpty]) {
          return nil;
        }
        else {
          return parentExtensions;
        }
      }
      else {
        if (parentExtensions == nil || [parentExtensions isEmpty]) {
          return extensionsList;
        }
        else {
          id<JavaUtilList> returnedList = new_JavaUtilArrayList_init();
          [returnedList addAllWithJavaUtilCollection:extensionsList];
          [returnedList addAllWithJavaUtilCollection:parentExtensions];
          return returnedList;
        }
      }
    }
  }
}

- (void)setExtensionsWithIOSClass:(IOSClass *)extensionType
                 withJavaUtilList:(id<JavaUtilList>)extensions {
  if (extensionsMap_ == nil) {
    extensionsMap_ = new_JavaUtilHashMap_init();
  }
  (void) [extensionsMap_ putWithId:extensionType withId:extensions];
}

- (void)setExtensionsWithJavaUtilMap:(id<JavaUtilMap>)extensions {
  extensionsMap_ = extensions;
}

- (NSString *)getPropertyWithNSString:(NSString *)key {
  if (properties_ != nil && [properties_ containsKeyWithId:key]) {
    return [properties_ getWithId:key];
  }
  else {
    if (parent_ == nil) {
      return nil;
    }
    else {
      return [parent_ getPropertyWithNSString:key];
    }
  }
}

- (void)setPropertyWithNSString:(NSString *)key
                   withNSString:(NSString *)value {
  if (properties_ == nil) {
    properties_ = new_JavaUtilHashMap_init();
  }
  (void) [properties_ putWithId:key withId:value];
}

- (void)removePropertyWithNSString:(NSString *)key {
  if (properties_ != nil) {
    (void) [properties_ removeWithId:key];
  }
}

- (id<JavaUtilMap>)getProperties {
  if (properties_ == nil) {
    if (parent_ == nil) {
      return nil;
    }
    else {
      return [parent_ getProperties];
    }
  }
  else {
    if (parent_ == nil) {
      return properties_;
    }
    else {
      id<JavaUtilMap> parentProperties = [parent_ getProperties];
      if (properties_ == nil || [properties_ isEmpty]) {
        if (parentProperties == nil || [parentProperties isEmpty]) {
          return nil;
        }
        else {
          return parentProperties;
        }
      }
      else {
        if (parentProperties == nil || [parentProperties isEmpty]) {
          return properties_;
        }
        else {
          id<JavaUtilMap> returnedMap = new_JavaUtilHashMap_init();
          [returnedMap putAllWithJavaUtilMap:parentProperties];
          [returnedMap putAllWithJavaUtilMap:properties_];
          return returnedMap;
        }
      }
    }
  }
}

- (id<JavaUtilMap>)getPropertiesMap {
  return properties_;
}

- (void)setPropertiesMapWithJavaUtilMap:(id<JavaUtilMap>)propertiesMap {
  self->properties_ = propertiesMap;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SimpleJasperReportsContext", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineJasperReportsContext:", "SimpleJasperReportsContext", NULL, 0x1, NULL, NULL },
    { "setParentWithOrgOssPdfreporterEngineJasperReportsContext:", "setParent", "V", 0x1, NULL, NULL },
    { "getValueWithNSString:", "getValue", "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "setValueWithNSString:withId:", "setValue", "V", 0x1, NULL, NULL },
    { "removeValueWithNSString:", "removeValue", "V", 0x1, NULL, NULL },
    { "getExtensionsWithIOSClass:", "getExtensions", "Ljava.util.List;", 0x1, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Ljava/util/List<TT;>;" },
    { "setExtensionsWithIOSClass:withJavaUtilList:", "setExtensions", "V", 0x1, NULL, "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/util/List<+TT;>;)V" },
    { "setExtensionsWithJavaUtilMap:", "setExtensions", "V", 0x1, NULL, "(Ljava/util/Map<Ljava/lang/Class<*>;Ljava/util/List<*>;>;)V" },
    { "getPropertyWithNSString:", "getProperty", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setPropertyWithNSString:withNSString:", "setProperty", "V", 0x1, NULL, NULL },
    { "removePropertyWithNSString:", "removeProperty", "V", 0x1, NULL, NULL },
    { "getProperties", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" },
    { "getPropertiesMap", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" },
    { "setPropertiesMapWithJavaUtilMap:", "setPropertiesMap", "V", 0x1, NULL, "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.JasperReportsContext;", NULL, NULL, .constantValue.asLong = 0 },
    { "values_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "properties_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "extensionsMap_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Class<*>;Ljava/util/List<*>;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineSimpleJasperReportsContext = { 2, "SimpleJasperReportsContext", "org.oss.pdfreporter.engine", NULL, 0x1, 15, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineSimpleJasperReportsContext;
}

@end

void OrgOssPdfreporterEngineSimpleJasperReportsContext_init(OrgOssPdfreporterEngineSimpleJasperReportsContext *self) {
  OrgOssPdfreporterEngineSimpleJasperReportsContext_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance());
}

OrgOssPdfreporterEngineSimpleJasperReportsContext *new_OrgOssPdfreporterEngineSimpleJasperReportsContext_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineSimpleJasperReportsContext, init)
}

OrgOssPdfreporterEngineSimpleJasperReportsContext *create_OrgOssPdfreporterEngineSimpleJasperReportsContext_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineSimpleJasperReportsContext, init)
}

void OrgOssPdfreporterEngineSimpleJasperReportsContext_initWithOrgOssPdfreporterEngineJasperReportsContext_(OrgOssPdfreporterEngineSimpleJasperReportsContext *self, id<OrgOssPdfreporterEngineJasperReportsContext> parent) {
  NSObject_init(self);
  self->values_ = new_JavaUtilHashMap_init();
  self->parent_ = parent;
}

OrgOssPdfreporterEngineSimpleJasperReportsContext *new_OrgOssPdfreporterEngineSimpleJasperReportsContext_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> parent) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineSimpleJasperReportsContext, initWithOrgOssPdfreporterEngineJasperReportsContext_, parent)
}

OrgOssPdfreporterEngineSimpleJasperReportsContext *create_OrgOssPdfreporterEngineSimpleJasperReportsContext_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> parent) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineSimpleJasperReportsContext, initWithOrgOssPdfreporterEngineJasperReportsContext_, parent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineSimpleJasperReportsContext)
