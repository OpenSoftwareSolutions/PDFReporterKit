//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fonts/LazyFontFace.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/RuntimeException.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/fonts/FontFace.h"
#include "org/oss/pdfreporter/engine/fonts/FontFamily.h"
#include "org/oss/pdfreporter/engine/fonts/LazyFontFace.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontManager.h"
#include "org/oss/pdfreporter/font/factory/IFontFactory.h"
#include "org/oss/pdfreporter/net/IURL.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/repo/FileResourceLoader.h"

@interface OrgOssPdfreporterEngineFontsLazyFontFace () {
 @public
  id<OrgOssPdfreporterEngineFontsFontFamily> fontFamily_;
  OrgOssPdfreporterFontIFont_FontStyle *style_;
  id<OrgOssPdfreporterNetIURL> url_;
  id<OrgOssPdfreporterFontIFont> font_;
}

- (void)loadFont;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsLazyFontFace, fontFamily_, id<OrgOssPdfreporterEngineFontsFontFamily>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsLazyFontFace, style_, OrgOssPdfreporterFontIFont_FontStyle *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsLazyFontFace, url_, id<OrgOssPdfreporterNetIURL>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsLazyFontFace, font_, id<OrgOssPdfreporterFontIFont>)

inline JavaUtilLoggingLogger *OrgOssPdfreporterEngineFontsLazyFontFace_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterEngineFontsLazyFontFace_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsLazyFontFace, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static void OrgOssPdfreporterEngineFontsLazyFontFace_loadFont(OrgOssPdfreporterEngineFontsLazyFontFace *self);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineFontsLazyFontFace)

@implementation OrgOssPdfreporterEngineFontsLazyFontFace

- (instancetype)initWithOrgOssPdfreporterEngineFontsFontFamily:(id<OrgOssPdfreporterEngineFontsFontFamily>)fontFamily
                      withOrgOssPdfreporterFontIFont_FontStyle:(OrgOssPdfreporterFontIFont_FontStyle *)style
                                  withOrgOssPdfreporterNetIURL:(id<OrgOssPdfreporterNetIURL>)url {
  OrgOssPdfreporterEngineFontsLazyFontFace_initWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withOrgOssPdfreporterNetIURL_(self, fontFamily, style, url);
  return self;
}

+ (id<OrgOssPdfreporterEngineFontsFontFace>)getInstanceWithOrgOssPdfreporterEngineFontsFontFamily:(id<OrgOssPdfreporterEngineFontsFontFamily>)fontFamily
                                                         withOrgOssPdfreporterFontIFont_FontStyle:(OrgOssPdfreporterFontIFont_FontStyle *)style
                                                                                     withNSString:(NSString *)file {
  return OrgOssPdfreporterEngineFontsLazyFontFace_getInstanceWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withNSString_(fontFamily, style, file);
}

- (NSString *)getName {
  return [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(fontFamily_)) getName];
}

- (NSString *)getFile {
  return [((id<OrgOssPdfreporterNetIURL>) nil_chk(url_)) getPath];
}

- (id<OrgOssPdfreporterFontIFont>)getFont {
  if (font_ == nil) {
    OrgOssPdfreporterEngineFontsLazyFontFace_loadFont(self);
  }
  return font_;
}

- (void)loadFont {
  OrgOssPdfreporterEngineFontsLazyFontFace_loadFont(self);
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFontsLazyFontFace class]) {
    OrgOssPdfreporterEngineFontsLazyFontFace_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterEngineFontsLazyFontFace_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineFontsLazyFontFace)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterEngineFontsFontFamily:withOrgOssPdfreporterFontIFont_FontStyle:withOrgOssPdfreporterNetIURL:", "LazyFontFace", NULL, 0x0, NULL, NULL },
    { "getInstanceWithOrgOssPdfreporterEngineFontsFontFamily:withOrgOssPdfreporterFontIFont_FontStyle:withNSString:", "getInstance", "Lorg.oss.pdfreporter.engine.fonts.FontFace;", 0x9, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFile", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFont", NULL, "Lorg.oss.pdfreporter.font.IFont;", 0x1, NULL, NULL },
    { "loadFont", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterEngineFontsLazyFontFace_logger, NULL, .constantValue.asLong = 0 },
    { "fontFamily_", NULL, 0x12, "Lorg.oss.pdfreporter.engine.fonts.FontFamily;", NULL, NULL, .constantValue.asLong = 0 },
    { "style_", NULL, 0x12, "Lorg.oss.pdfreporter.font.IFont$FontStyle;", NULL, NULL, .constantValue.asLong = 0 },
    { "url_", NULL, 0x12, "Lorg.oss.pdfreporter.net.IURL;", NULL, NULL, .constantValue.asLong = 0 },
    { "font_", NULL, 0x2, "Lorg.oss.pdfreporter.font.IFont;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFontsLazyFontFace = { 2, "LazyFontFace", "org.oss.pdfreporter.engine.fonts", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFontsLazyFontFace;
}

@end

void OrgOssPdfreporterEngineFontsLazyFontFace_initWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withOrgOssPdfreporterNetIURL_(OrgOssPdfreporterEngineFontsLazyFontFace *self, id<OrgOssPdfreporterEngineFontsFontFamily> fontFamily, OrgOssPdfreporterFontIFont_FontStyle *style, id<OrgOssPdfreporterNetIURL> url) {
  NSObject_init(self);
  self->font_ = nil;
  self->fontFamily_ = fontFamily;
  self->style_ = style;
  self->url_ = url;
}

OrgOssPdfreporterEngineFontsLazyFontFace *new_OrgOssPdfreporterEngineFontsLazyFontFace_initWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withOrgOssPdfreporterNetIURL_(id<OrgOssPdfreporterEngineFontsFontFamily> fontFamily, OrgOssPdfreporterFontIFont_FontStyle *style, id<OrgOssPdfreporterNetIURL> url) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFontsLazyFontFace, initWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withOrgOssPdfreporterNetIURL_, fontFamily, style, url)
}

OrgOssPdfreporterEngineFontsLazyFontFace *create_OrgOssPdfreporterEngineFontsLazyFontFace_initWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withOrgOssPdfreporterNetIURL_(id<OrgOssPdfreporterEngineFontsFontFamily> fontFamily, OrgOssPdfreporterFontIFont_FontStyle *style, id<OrgOssPdfreporterNetIURL> url) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFontsLazyFontFace, initWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withOrgOssPdfreporterNetIURL_, fontFamily, style, url)
}

id<OrgOssPdfreporterEngineFontsFontFace> OrgOssPdfreporterEngineFontsLazyFontFace_getInstanceWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withNSString_(id<OrgOssPdfreporterEngineFontsFontFamily> fontFamily, OrgOssPdfreporterFontIFont_FontStyle *style, NSString *file) {
  OrgOssPdfreporterEngineFontsLazyFontFace_initialize();
  id<OrgOssPdfreporterNetIURL> url = OrgOssPdfreporterRepoFileResourceLoader_getURLWithNSString_(file);
  if (url == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"Font file: ", file, @" not found."));
  }
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFontsLazyFontFace_logger)) finestWithNSString:JreStrcat("$$$@$$", @"Add font resource: ", [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(fontFamily)) getName], @", Style: ", style, @", Resource: ", file)];
  return new_OrgOssPdfreporterEngineFontsLazyFontFace_initWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withOrgOssPdfreporterNetIURL_(fontFamily, style, url);
}

void OrgOssPdfreporterEngineFontsLazyFontFace_loadFont(OrgOssPdfreporterEngineFontsLazyFontFace *self) {
  id<OrgOssPdfreporterFontIFontManager> fontManager = [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getFontFactory())) getFontManager];
  self->font_ = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) loadFontWithNSString:[((id<OrgOssPdfreporterNetIURL>) nil_chk(self->url_)) getPath] withNSString:[((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(self->fontFamily_)) getPdfEncoding] withBoolean:[((JavaLangBoolean *) nil_chk([self->fontFamily_ isPdfEmbedded])) booleanValue] withNSString:[self->fontFamily_ getName] withOrgOssPdfreporterFontIFont_FontStyle:self->style_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFontsLazyFontFace)
