//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fonts/SimpleFontExtensionHelper.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fonts/FontFace.h"
#include "org/oss/pdfreporter/engine/fonts/FontFamily.h"
#include "org/oss/pdfreporter/engine/fonts/SimpleFontExtensionHelper.h"
#include "org/oss/pdfreporter/engine/fonts/SimpleFontExtensionsRegistryFactory.h"
#include "org/oss/pdfreporter/engine/fonts/SimpleFontFamily.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/repo/RepositoryUtil.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Document.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Element.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/NamedNodeMap.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Node.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/NodeList.h"
#include "org/oss/pdfreporter/xml/parsers/IDocumentBuilder.h"
#include "org/oss/pdfreporter/xml/parsers/IDocumentBuilderFactory.h"
#include "org/oss/pdfreporter/xml/parsers/IInputSource.h"
#include "org/oss/pdfreporter/xml/parsers/ParserConfigurationException.h"
#include "org/oss/pdfreporter/xml/parsers/XMLParseException.h"
#include "org/oss/pdfreporter/xml/parsers/factory/IXmlParserFactory.h"

@interface OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper () {
 @public
  id<OrgOssPdfreporterXmlParsersIDocumentBuilder> documentBuilder_;
}

- (instancetype)init;

- (id<JavaUtilList>)parseFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                              withOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)fontFamiliesNode;

- (id<OrgOssPdfreporterEngineFontsFontFamily>)parseFontFamilyWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                      withOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)fontFamilyNode;

- (id<JavaUtilMap>)parseExportFontsWithOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)exportFontsNode;

+ (void)addFontFamilyWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
   withOrgOssPdfreporterEngineFontsFontFamily:(id<OrgOssPdfreporterEngineFontsFontFamily>)fontFamily;

- (id<JavaUtilSet>)parseLocalesWithOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)localesNode;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, documentBuilder_, id<OrgOssPdfreporterXmlParsersIDocumentBuilder>)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_NODE_fontFamily();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_fontFamily = @"fontFamily";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, NODE_fontFamily, NSString *)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_NODE_normal();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_normal = @"normal";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, NODE_normal, NSString *)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_NODE_bold();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_bold = @"bold";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, NODE_bold, NSString *)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_NODE_italic();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_italic = @"italic";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, NODE_italic, NSString *)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_NODE_boldItalic();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_boldItalic = @"boldItalic";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, NODE_boldItalic, NSString *)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_NODE_pdfEncoding();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_pdfEncoding = @"pdfEncoding";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, NODE_pdfEncoding, NSString *)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_NODE_pdfEmbedded();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_pdfEmbedded = @"pdfEmbedded";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, NODE_pdfEmbedded, NSString *)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_NODE_exportFonts();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_exportFonts = @"exportFonts";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, NODE_exportFonts, NSString *)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_NODE_export();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_export = @"export";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, NODE_export, NSString *)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_NODE_locales();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_locales = @"locales";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, NODE_locales, NSString *)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_NODE_locale();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_locale = @"locale";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, NODE_locale, NSString *)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_ATTRIBUTE_name();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_ATTRIBUTE_name = @"name";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, ATTRIBUTE_name, NSString *)

inline NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_ATTRIBUTE_key();
static NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_ATTRIBUTE_key = @"key";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, ATTRIBUTE_key, NSString *)

inline OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_get_instance();
inline OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_set_instance(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *value);
static OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_instance;
J2OBJC_STATIC_FIELD_OBJ(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, instance, OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *)

__attribute__((unused)) static void OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_init(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *self);

__attribute__((unused)) static OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *new_OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *create_OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_init();

__attribute__((unused)) static id<JavaUtilList> OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterUsesOrgW3cDomNode_(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterUsesOrgW3cDomNode> fontFamiliesNode);

__attribute__((unused)) static id<OrgOssPdfreporterEngineFontsFontFamily> OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseFontFamilyWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterUsesOrgW3cDomNode_(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterUsesOrgW3cDomNode> fontFamilyNode);

__attribute__((unused)) static id<JavaUtilMap> OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseExportFontsWithOrgOssPdfreporterUsesOrgW3cDomNode_(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *self, id<OrgOssPdfreporterUsesOrgW3cDomNode> exportFontsNode);

__attribute__((unused)) static void OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_addFontFamilyWithJavaLangStringBuffer_withOrgOssPdfreporterEngineFontsFontFamily_(JavaLangStringBuffer *buffer, id<OrgOssPdfreporterEngineFontsFontFamily> fontFamily);

__attribute__((unused)) static id<JavaUtilSet> OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseLocalesWithOrgOssPdfreporterUsesOrgW3cDomNode_(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *self, id<OrgOssPdfreporterUsesOrgW3cDomNode> localesNode);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper)

NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_DEFAULT_ENCODING = @"UTF-8";

@implementation OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper

+ (NSString *)DEFAULT_ENCODING {
  return OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_DEFAULT_ENCODING;
}

+ (OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *)getInstance {
  return OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_getInstance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)loadFontFamiliesWithNSString:(NSString *)file {
  return [self loadFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext:OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance() withNSString:file];
}

- (id<JavaUtilList>)loadFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                       withNSString:(NSString *)file {
  JavaIoInputStream *is = nil;
  @try {
    is = [((OrgOssPdfreporterRepoRepositoryUtil *) nil_chk(OrgOssPdfreporterRepoRepositoryUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext))) getInputStreamFromLocationWithNSString:file];
    return [self loadFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withJavaIoInputStream:is];
  }
  @catch (OrgOssPdfreporterEngineJRException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
  @finally {
    if (is != nil) {
      @try {
        [is close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
}

- (id<JavaUtilList>)loadFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                              withJavaIoInputStream:(JavaIoInputStream *)is {
  id<JavaUtilList> fontFamilies = nil;
  @try {
    id<OrgOssPdfreporterUsesOrgW3cDomDocument> document = [((id<OrgOssPdfreporterXmlParsersIDocumentBuilder>) nil_chk(documentBuilder_)) parseWithOrgOssPdfreporterXmlParsersIInputSource:[((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk(OrgOssPdfreporterRegistryIRegistry_getIXmlParserFactory())) newInputSourceWithJavaIoReader:new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(is, @"UTF-8")]];
    fontFamilies = OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterUsesOrgW3cDomNode_(self, jasperReportsContext, [((id<OrgOssPdfreporterUsesOrgW3cDomDocument>) nil_chk(document)) getDocumentElement]);
  }
  @catch (OrgOssPdfreporterXmlParsersXMLParseException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
  return fontFamilies;
}

- (id<JavaUtilList>)loadFontFamiliesWithJavaIoInputStream:(JavaIoInputStream *)is {
  return [self loadFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext:OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance() withJavaIoInputStream:is];
}

- (id<JavaUtilList>)parseFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                              withOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)fontFamiliesNode {
  return OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterUsesOrgW3cDomNode_(self, jasperReportsContext, fontFamiliesNode);
}

- (id<OrgOssPdfreporterEngineFontsFontFamily>)parseFontFamilyWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                      withOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)fontFamilyNode {
  return OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseFontFamilyWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterUsesOrgW3cDomNode_(self, jasperReportsContext, fontFamilyNode);
}

- (id<JavaUtilMap>)parseExportFontsWithOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)exportFontsNode {
  return OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseExportFontsWithOrgOssPdfreporterUsesOrgW3cDomNode_(self, exportFontsNode);
}

+ (NSString *)getFontsXmlWithJavaUtilList:(id<JavaUtilList>)fontFamilies {
  return OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_getFontsXmlWithJavaUtilList_(fontFamilies);
}

+ (void)addFontFamilyWithJavaLangStringBuffer:(JavaLangStringBuffer *)buffer
   withOrgOssPdfreporterEngineFontsFontFamily:(id<OrgOssPdfreporterEngineFontsFontFamily>)fontFamily {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_addFontFamilyWithJavaLangStringBuffer_withOrgOssPdfreporterEngineFontsFontFamily_(buffer, fontFamily);
}

+ (void)writeFontsXmlWithNSString:(NSString *)destFileName
                 withJavaUtilList:(id<JavaUtilList>)fontFamilies {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontsXmlWithNSString_withJavaUtilList_(destFileName, fontFamilies);
}

+ (void)writeFontsXmlWithJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                           withJavaUtilList:(id<JavaUtilList>)fontFamilies {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontsXmlWithJavaIoOutputStream_withJavaUtilList_(outputStream, fontFamilies);
}

+ (void)writeFontExtensionsPropertiesWithNSString:(NSString *)fontsXmlLocation
                                     withNSString:(NSString *)destFileName {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontExtensionsPropertiesWithNSString_withNSString_(fontsXmlLocation, destFileName);
}

+ (void)writeFontExtensionsPropertiesWithNSString:(NSString *)fontFamiliesPropertyValue
                           withJavaIoOutputStream:(JavaIoOutputStream *)outputStream {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontExtensionsPropertiesWithNSString_withJavaIoOutputStream_(fontFamiliesPropertyValue, outputStream);
}

+ (void)writeFontExtensionsPropertiesWithNSString:(NSString *)fontRegistryFactoryPropertyName
                                     withNSString:(NSString *)fontRegistryFactoryPropertyValue
                                     withNSString:(NSString *)fontFamiliesPropertyName
                                     withNSString:(NSString *)fontFamiliesPropertyValue
                           withJavaIoOutputStream:(JavaIoOutputStream *)outputStream {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontExtensionsPropertiesWithNSString_withNSString_withNSString_withNSString_withJavaIoOutputStream_(fontRegistryFactoryPropertyName, fontRegistryFactoryPropertyValue, fontFamiliesPropertyName, fontFamiliesPropertyValue, outputStream);
}

- (id<JavaUtilSet>)parseLocalesWithOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)localesNode {
  return OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseLocalesWithOrgOssPdfreporterUsesOrgW3cDomNode_(self, localesNode);
}

- (void)errorWithOrgOssPdfreporterXmlParsersXMLParseException:(OrgOssPdfreporterXmlParsersXMLParseException *)e {
}

- (void)fatalErrorWithOrgOssPdfreporterXmlParsersXMLParseException:(OrgOssPdfreporterXmlParsersXMLParseException *)e {
}

- (void)warningWithOrgOssPdfreporterXmlParsersXMLParseException:(OrgOssPdfreporterXmlParsersXMLParseException *)e {
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper class]) {
    OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_instance = nil;
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstance", NULL, "Lorg.oss.pdfreporter.engine.fonts.SimpleFontExtensionHelper;", 0x9, NULL, NULL },
    { "init", "SimpleFontExtensionHelper", NULL, 0x2, NULL, NULL },
    { "loadFontFamiliesWithNSString:", "loadFontFamilies", "Ljava.util.List;", 0x1, NULL, "(Ljava/lang/String;)Ljava/util/List<Lorg/oss/pdfreporter/engine/fonts/FontFamily;>;" },
    { "loadFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext:withNSString:", "loadFontFamilies", "Ljava.util.List;", 0x1, NULL, "(Lorg/oss/pdfreporter/engine/JasperReportsContext;Ljava/lang/String;)Ljava/util/List<Lorg/oss/pdfreporter/engine/fonts/FontFamily;>;" },
    { "loadFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext:withJavaIoInputStream:", "loadFontFamilies", "Ljava.util.List;", 0x1, NULL, "(Lorg/oss/pdfreporter/engine/JasperReportsContext;Ljava/io/InputStream;)Ljava/util/List<Lorg/oss/pdfreporter/engine/fonts/FontFamily;>;" },
    { "loadFontFamiliesWithJavaIoInputStream:", "loadFontFamilies", "Ljava.util.List;", 0x1, NULL, "(Ljava/io/InputStream;)Ljava/util/List<Lorg/oss/pdfreporter/engine/fonts/FontFamily;>;" },
    { "parseFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext:withOrgOssPdfreporterUsesOrgW3cDomNode:", "parseFontFamilies", "Ljava.util.List;", 0x2, "Lorg.oss.pdfreporter.xml.parsers.XMLParseException;", "(Lorg/oss/pdfreporter/engine/JasperReportsContext;Lorg/oss/pdfreporter/uses/org/w3c/dom/Node;)Ljava/util/List<Lorg/oss/pdfreporter/engine/fonts/FontFamily;>;" },
    { "parseFontFamilyWithOrgOssPdfreporterEngineJasperReportsContext:withOrgOssPdfreporterUsesOrgW3cDomNode:", "parseFontFamily", "Lorg.oss.pdfreporter.engine.fonts.FontFamily;", 0x2, "Lorg.oss.pdfreporter.xml.parsers.XMLParseException;", NULL },
    { "parseExportFontsWithOrgOssPdfreporterUsesOrgW3cDomNode:", "parseExportFonts", "Ljava.util.Map;", 0x2, "Lorg.oss.pdfreporter.xml.parsers.XMLParseException;", "(Lorg/oss/pdfreporter/uses/org/w3c/dom/Node;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" },
    { "getFontsXmlWithJavaUtilList:", "getFontsXml", "Ljava.lang.String;", 0x9, NULL, "(Ljava/util/List<Lorg/oss/pdfreporter/engine/fonts/FontFamily;>;)Ljava/lang/String;" },
    { "addFontFamilyWithJavaLangStringBuffer:withOrgOssPdfreporterEngineFontsFontFamily:", "addFontFamily", "V", 0xa, NULL, NULL },
    { "writeFontsXmlWithNSString:withJavaUtilList:", "writeFontsXml", "V", 0x9, "Lorg.oss.pdfreporter.engine.JRException;", "(Ljava/lang/String;Ljava/util/List<Lorg/oss/pdfreporter/engine/fonts/FontFamily;>;)V" },
    { "writeFontsXmlWithJavaIoOutputStream:withJavaUtilList:", "writeFontsXml", "V", 0x9, "Lorg.oss.pdfreporter.engine.JRException;", "(Ljava/io/OutputStream;Ljava/util/List<Lorg/oss/pdfreporter/engine/fonts/FontFamily;>;)V" },
    { "writeFontExtensionsPropertiesWithNSString:withNSString:", "writeFontExtensionsProperties", "V", 0x9, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "writeFontExtensionsPropertiesWithNSString:withJavaIoOutputStream:", "writeFontExtensionsProperties", "V", 0x9, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "writeFontExtensionsPropertiesWithNSString:withNSString:withNSString:withNSString:withJavaIoOutputStream:", "writeFontExtensionsProperties", "V", 0x9, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "parseLocalesWithOrgOssPdfreporterUsesOrgW3cDomNode:", "parseLocales", "Ljava.util.Set;", 0x2, "Lorg.oss.pdfreporter.xml.parsers.XMLParseException;", "(Lorg/oss/pdfreporter/uses/org/w3c/dom/Node;)Ljava/util/Set<Ljava/lang/String;>;" },
    { "errorWithOrgOssPdfreporterXmlParsersXMLParseException:", "error", "V", 0x1, NULL, NULL },
    { "fatalErrorWithOrgOssPdfreporterXmlParsersXMLParseException:", "fatalError", "V", 0x1, NULL, NULL },
    { "warningWithOrgOssPdfreporterXmlParsersXMLParseException:", "warning", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_ENCODING", "DEFAULT_ENCODING", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_DEFAULT_ENCODING, NULL, .constantValue.asLong = 0 },
    { "NODE_fontFamily", "NODE_fontFamily", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_fontFamily, NULL, .constantValue.asLong = 0 },
    { "NODE_normal", "NODE_normal", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_normal, NULL, .constantValue.asLong = 0 },
    { "NODE_bold", "NODE_bold", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_bold, NULL, .constantValue.asLong = 0 },
    { "NODE_italic", "NODE_italic", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_italic, NULL, .constantValue.asLong = 0 },
    { "NODE_boldItalic", "NODE_boldItalic", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_boldItalic, NULL, .constantValue.asLong = 0 },
    { "NODE_pdfEncoding", "NODE_pdfEncoding", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_pdfEncoding, NULL, .constantValue.asLong = 0 },
    { "NODE_pdfEmbedded", "NODE_pdfEmbedded", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_pdfEmbedded, NULL, .constantValue.asLong = 0 },
    { "NODE_exportFonts", "NODE_exportFonts", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_exportFonts, NULL, .constantValue.asLong = 0 },
    { "NODE_export", "NODE_export", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_export, NULL, .constantValue.asLong = 0 },
    { "NODE_locales", "NODE_locales", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_locales, NULL, .constantValue.asLong = 0 },
    { "NODE_locale", "NODE_locale", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_locale, NULL, .constantValue.asLong = 0 },
    { "ATTRIBUTE_name", "ATTRIBUTE_name", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_ATTRIBUTE_name, NULL, .constantValue.asLong = 0 },
    { "ATTRIBUTE_key", "ATTRIBUTE_key", 0x1a, "Ljava.lang.String;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_ATTRIBUTE_key, NULL, .constantValue.asLong = 0 },
    { "instance", "instance", 0xa, "Lorg.oss.pdfreporter.engine.fonts.SimpleFontExtensionHelper;", &OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_instance, NULL, .constantValue.asLong = 0 },
    { "documentBuilder_", NULL, 0x2, "Lorg.oss.pdfreporter.xml.parsers.IDocumentBuilder;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper = { 2, "SimpleFontExtensionHelper", "org.oss.pdfreporter.engine.fonts", NULL, 0x11, 20, methods, 16, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper;
}

@end

OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_getInstance() {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_initialize();
  if (OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_instance == nil) {
    OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_instance = new_OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_init();
  }
  return OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_instance;
}

void OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_init(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *self) {
  NSObject_init(self);
  @try {
    id<OrgOssPdfreporterXmlParsersIDocumentBuilderFactory> factory = [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk(OrgOssPdfreporterRegistryIRegistry_getIXmlParserFactory())) newDocumentBuilderFactory];
    self->documentBuilder_ = [((id<OrgOssPdfreporterXmlParsersIDocumentBuilderFactory>) nil_chk(factory)) newDocumentBuilder];
    [((id<OrgOssPdfreporterXmlParsersIDocumentBuilder>) nil_chk(self->documentBuilder_)) setErrorHandlerWithOrgOssPdfreporterXmlParsersXMLErrorHandler:self];
  }
  @catch (OrgOssPdfreporterXmlParsersParserConfigurationException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
}

OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *new_OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, init)
}

OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *create_OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper, init)
}

id<JavaUtilList> OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseFontFamiliesWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterUsesOrgW3cDomNode_(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterUsesOrgW3cDomNode> fontFamiliesNode) {
  id<JavaUtilList> fontFamilies = new_JavaUtilArrayList_init();
  id<OrgOssPdfreporterUsesOrgW3cDomNodeList> nodeList = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(fontFamiliesNode)) getChildNodes];
  for (jint i = 0; i < [((id<OrgOssPdfreporterUsesOrgW3cDomNodeList>) nil_chk(nodeList)) getLength]; i++) {
    id<OrgOssPdfreporterUsesOrgW3cDomNode> node = [nodeList itemWithInt:i];
    if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_fontFamily)) isEqual:[node getNodeName]]) {
      [fontFamilies addWithId:OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseFontFamilyWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterUsesOrgW3cDomNode_(self, jasperReportsContext, node)];
    }
  }
  return fontFamilies;
}

id<OrgOssPdfreporterEngineFontsFontFamily> OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseFontFamilyWithOrgOssPdfreporterEngineJasperReportsContext_withOrgOssPdfreporterUsesOrgW3cDomNode_(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext, id<OrgOssPdfreporterUsesOrgW3cDomNode> fontFamilyNode) {
  OrgOssPdfreporterEngineFontsSimpleFontFamily *fontFamily = new_OrgOssPdfreporterEngineFontsSimpleFontFamily_initWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext);
  id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap> nodeAttrs = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(fontFamilyNode)) getAttributes];
  if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_ATTRIBUTE_name] != nil) {
    [fontFamily setNameWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([nodeAttrs getNamedItemWithNSString:OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_ATTRIBUTE_name])) getNodeValue]];
  }
  id<OrgOssPdfreporterUsesOrgW3cDomNodeList> nodeList = [fontFamilyNode getChildNodes];
  for (jint i = 0; i < [((id<OrgOssPdfreporterUsesOrgW3cDomNodeList>) nil_chk(nodeList)) getLength]; i++) {
    id<OrgOssPdfreporterUsesOrgW3cDomNode> node = [nodeList itemWithInt:i];
    if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE) {
      if ([((NSString *) nil_chk(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_normal)) isEqual:[node getNodeName]]) {
        [fontFamily setNormalWithNSString:[node getTextContent]];
      }
      else if ([((NSString *) nil_chk(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_bold)) isEqual:[node getNodeName]]) {
        [fontFamily setBoldWithNSString:[node getTextContent]];
      }
      else if ([((NSString *) nil_chk(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_italic)) isEqual:[node getNodeName]]) {
        [fontFamily setItalicWithNSString:[node getTextContent]];
      }
      else if ([((NSString *) nil_chk(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_boldItalic)) isEqual:[node getNodeName]]) {
        [fontFamily setBoldItalicWithNSString:[node getTextContent]];
      }
      else if ([((NSString *) nil_chk(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_pdfEncoding)) isEqual:[node getNodeName]]) {
        [fontFamily setPdfEncodingWithNSString:[node getTextContent]];
      }
      else if ([((NSString *) nil_chk(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_pdfEmbedded)) isEqual:[node getNodeName]]) {
        [fontFamily setPdfEmbeddedWithJavaLangBoolean:JavaLangBoolean_valueOfWithNSString_([node getTextContent])];
      }
      else if ([((NSString *) nil_chk(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_exportFonts)) isEqual:[node getNodeName]]) {
        [fontFamily setExportFontsWithJavaUtilMap:OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseExportFontsWithOrgOssPdfreporterUsesOrgW3cDomNode_(self, node)];
      }
      else if ([((NSString *) nil_chk(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_locales)) isEqual:[node getNodeName]]) {
        [fontFamily setLocalesWithJavaUtilSet:OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseLocalesWithOrgOssPdfreporterUsesOrgW3cDomNode_(self, node)];
      }
    }
  }
  return fontFamily;
}

id<JavaUtilMap> OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseExportFontsWithOrgOssPdfreporterUsesOrgW3cDomNode_(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *self, id<OrgOssPdfreporterUsesOrgW3cDomNode> exportFontsNode) {
  id<JavaUtilMap> exportFonts = new_JavaUtilHashMap_init();
  id<OrgOssPdfreporterUsesOrgW3cDomNodeList> nodeList = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(exportFontsNode)) getChildNodes];
  for (jint i = 0; i < [((id<OrgOssPdfreporterUsesOrgW3cDomNodeList>) nil_chk(nodeList)) getLength]; i++) {
    id<OrgOssPdfreporterUsesOrgW3cDomNode> node = [nodeList itemWithInt:i];
    if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_export)) isEqual:[node getNodeName]]) {
      id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap> nodeAttrs = [node getAttributes];
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_ATTRIBUTE_key] != nil) {
        (void) [exportFonts putWithId:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([nodeAttrs getNamedItemWithNSString:OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_ATTRIBUTE_key])) getNodeValue] withId:[node getTextContent]];
      }
    }
  }
  return exportFonts;
}

NSString *OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_getFontsXmlWithJavaUtilList_(id<JavaUtilList> fontFamilies) {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_initialize();
  JavaLangStringBuffer *buffer = nil;
  if (fontFamilies != nil) {
    buffer = new_JavaLangStringBuffer_init();
    (void) [buffer appendWithNSString:JreStrcat("$$$", @"<?xml version=\"1.0\" encoding=\"", OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_DEFAULT_ENCODING, @"\"?>\n")];
    (void) [buffer appendWithNSString:@"<fontFamilies>\n"];
    for (id<OrgOssPdfreporterEngineFontsFontFamily> __strong fontFamily in fontFamilies) {
      OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_addFontFamilyWithJavaLangStringBuffer_withOrgOssPdfreporterEngineFontsFontFamily_(buffer, fontFamily);
    }
    (void) [buffer appendWithNSString:@"</fontFamilies>\n"];
    return [buffer description];
  }
  else {
    return nil;
  }
}

void OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_addFontFamilyWithJavaLangStringBuffer_withOrgOssPdfreporterEngineFontsFontFamily_(JavaLangStringBuffer *buffer, id<OrgOssPdfreporterEngineFontsFontFamily> fontFamily) {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_initialize();
  if (fontFamily != nil) {
    if ([fontFamily getName] == nil) {
      return;
    }
    NSString *indent = @"  ";
    (void) [((JavaLangStringBuffer *) nil_chk(buffer)) appendWithNSString:JreStrcat("$$$$", indent, @"<fontFamily name=\"", [fontFamily getName], @"\">\n")];
    indent = @"    ";
    if ([fontFamily getNormalFace] != nil) {
      (void) [buffer appendWithNSString:JreStrcat("$$$$", indent, @"<normal>", [((id<OrgOssPdfreporterEngineFontsFontFace>) nil_chk([fontFamily getNormalFace])) getFile], @"</normal>\n")];
    }
    if ([fontFamily getBoldFace] != nil) {
      (void) [buffer appendWithNSString:JreStrcat("$$$$", indent, @"<bold>", [((id<OrgOssPdfreporterEngineFontsFontFace>) nil_chk([fontFamily getBoldFace])) getFile], @"</bold>\n")];
    }
    if ([fontFamily getItalicFace] != nil) {
      (void) [buffer appendWithNSString:JreStrcat("$$$$", indent, @"<italic>", [((id<OrgOssPdfreporterEngineFontsFontFace>) nil_chk([fontFamily getItalicFace])) getFile], @"</italic>\n")];
    }
    if ([fontFamily getBoldItalicFace] != nil) {
      (void) [buffer appendWithNSString:JreStrcat("$$$$", indent, @"<boldItalic>", [((id<OrgOssPdfreporterEngineFontsFontFace>) nil_chk([fontFamily getBoldItalicFace])) getFile], @"</boldItalic>\n")];
    }
    if ([fontFamily getPdfEncoding] != nil) {
      (void) [buffer appendWithNSString:JreStrcat("$$$$", indent, @"<pdfEncoding>", [fontFamily getPdfEncoding], @"</pdfEncoding>\n")];
    }
    if ([fontFamily isPdfEmbedded] != nil) {
      (void) [buffer appendWithNSString:JreStrcat("$$@$", indent, @"<pdfEmbedded>", [fontFamily isPdfEmbedded], @"</pdfEmbedded>\n")];
    }
    if ([fontFamily isKindOfClass:[OrgOssPdfreporterEngineFontsSimpleFontFamily class]]) {
      OrgOssPdfreporterEngineFontsSimpleFontFamily *simpleFontFamily = (OrgOssPdfreporterEngineFontsSimpleFontFamily *) cast_chk(fontFamily, [OrgOssPdfreporterEngineFontsSimpleFontFamily class]);
      id<JavaUtilMap> exportFonts = [simpleFontFamily getExportFonts];
      if (exportFonts != nil) {
        (void) [buffer appendWithNSString:JreStrcat("$$", indent, @"<exportFonts>\n")];
        indent = @"      ";
        for (NSString * __strong key in nil_chk([exportFonts keySet])) {
          (void) [buffer appendWithNSString:JreStrcat("$$$$$$", indent, @"<export key=\"", key, @"\">", [exportFonts getWithId:key], @"</export>\n")];
        }
        indent = @"    ";
        (void) [buffer appendWithNSString:JreStrcat("$$", indent, @"</exportFonts>\n")];
      }
      id<JavaUtilSet> locales = [simpleFontFamily getLocales];
      if (locales != nil) {
        (void) [buffer appendWithNSString:JreStrcat("$$", indent, @"<locales>\n")];
        indent = @"      ";
        for (NSString * __strong locale in locales) {
          (void) [buffer appendWithNSString:JreStrcat("$$$$", indent, @"<locale>", locale, @"</locale>\n")];
        }
        indent = @"    ";
        (void) [buffer appendWithNSString:JreStrcat("$$", indent, @"</locales>\n")];
      }
    }
    indent = @"  ";
    (void) [buffer appendWithNSString:JreStrcat("$$", indent, @"</fontFamily>\n\n")];
  }
}

void OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontsXmlWithNSString_withJavaUtilList_(NSString *destFileName, id<JavaUtilList> fontFamilies) {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_initialize();
  JavaIoFileOutputStream *fos = nil;
  @try {
    fos = new_JavaIoFileOutputStream_initWithNSString_(destFileName);
    OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontsXmlWithJavaIoOutputStream_withJavaUtilList_(fos, fontFamilies);
  }
  @catch (JavaIoIOException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(JreStrcat("$$", @"Error writing to file : ", destFileName), e);
  }
  @finally {
    if (fos != nil) {
      @try {
        [fos close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
}

void OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontsXmlWithJavaIoOutputStream_withJavaUtilList_(JavaIoOutputStream *outputStream, id<JavaUtilList> fontFamilies) {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_initialize();
  JavaIoWriter *out = nil;
  @try {
    out = new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(outputStream, OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_DEFAULT_ENCODING);
    [out writeWithNSString:OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_getFontsXmlWithJavaUtilList_(fontFamilies)];
    [out flush];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(@"Error writing to OutputStream : ", e);
  }
}

void OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontExtensionsPropertiesWithNSString_withNSString_(NSString *fontsXmlLocation, NSString *destFileName) {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_initialize();
  JavaIoFileOutputStream *fos = nil;
  @try {
    fos = new_JavaIoFileOutputStream_initWithNSString_withBoolean_(destFileName, false);
    OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontExtensionsPropertiesWithNSString_withJavaIoOutputStream_(fontsXmlLocation, fos);
  }
  @catch (JavaIoIOException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(JreStrcat("$$", @"Error writing to file : ", destFileName), e);
  }
  @finally {
    if (fos != nil) {
      @try {
        [fos close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
}

void OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontExtensionsPropertiesWithNSString_withJavaIoOutputStream_(NSString *fontFamiliesPropertyValue, JavaIoOutputStream *outputStream) {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_initialize();
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontExtensionsPropertiesWithNSString_withNSString_withNSString_withNSString_withJavaIoOutputStream_(OrgOssPdfreporterEngineFontsSimpleFontExtensionsRegistryFactory_PROPERTY_SIMPLE_FONT_FAMILIES_REGISTRY_FACTORY, [OrgOssPdfreporterEngineFontsSimpleFontExtensionsRegistryFactory_class_() getName], JreStrcat("$$", OrgOssPdfreporterEngineFontsSimpleFontExtensionsRegistryFactory_SIMPLE_FONT_FAMILIES_PROPERTY_PREFIX, @"location"), fontFamiliesPropertyValue, outputStream);
}

void OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_writeFontExtensionsPropertiesWithNSString_withNSString_withNSString_withNSString_withJavaIoOutputStream_(NSString *fontRegistryFactoryPropertyName, NSString *fontRegistryFactoryPropertyValue, NSString *fontFamiliesPropertyName, NSString *fontFamiliesPropertyValue, JavaIoOutputStream *outputStream) {
  OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_initialize();
  JavaIoWriter *out = nil;
  @try {
    out = new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(outputStream, OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_DEFAULT_ENCODING);
    [out writeWithNSString:JreStrcat("$C$C", fontRegistryFactoryPropertyName, '=', fontRegistryFactoryPropertyValue, 0x000a)];
    [out writeWithNSString:JreStrcat("$C$C", fontFamiliesPropertyName, '=', fontFamiliesPropertyValue, 0x000a)];
    [out flush];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgOssPdfreporterEngineJRException_initWithNSString_withNSException_(@"Error writing to OutputStream : ", e);
  }
  @finally {
    if (out != nil) {
      @try {
        [out close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
}

id<JavaUtilSet> OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_parseLocalesWithOrgOssPdfreporterUsesOrgW3cDomNode_(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper *self, id<OrgOssPdfreporterUsesOrgW3cDomNode> localesNode) {
  id<JavaUtilSet> locales = new_JavaUtilHashSet_init();
  id<OrgOssPdfreporterUsesOrgW3cDomNodeList> nodeList = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(localesNode)) getChildNodes];
  for (jint i = 0; i < [((id<OrgOssPdfreporterUsesOrgW3cDomNodeList>) nil_chk(nodeList)) getLength]; i++) {
    id<OrgOssPdfreporterUsesOrgW3cDomNode> node = [nodeList itemWithInt:i];
    if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper_NODE_locale)) isEqual:[node getNodeName]]) {
      [locales addWithId:[node getTextContent]];
    }
  }
  return locales;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFontsSimpleFontExtensionHelper)
