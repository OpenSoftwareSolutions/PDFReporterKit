//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/fonts/SimpleFontFamily.java
//

#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fonts/FontFace.h"
#include "org/oss/pdfreporter/engine/fonts/LazyFontFace.h"
#include "org/oss/pdfreporter/engine/fonts/SimpleFontFamily.h"
#include "org/oss/pdfreporter/engine/util/JRDataUtils.h"
#include "org/oss/pdfreporter/font/IFont.h"

@interface OrgOssPdfreporterEngineFontsSimpleFontFamily () {
 @public
  id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext_;
  NSString *name_;
  id<OrgOssPdfreporterEngineFontsFontFace> normalFace_;
  id<OrgOssPdfreporterEngineFontsFontFace> boldFace_;
  id<OrgOssPdfreporterEngineFontsFontFace> italicFace_;
  id<OrgOssPdfreporterEngineFontsFontFace> boldItalicFace_;
  NSString *normalPdfFont_;
  NSString *boldPdfFont_;
  NSString *italicPdfFont_;
  NSString *boldItalicPdfFont_;
  NSString *pdfEncoding_;
  JavaLangBoolean *isPdfEmbedded_;
  NSString *defaultExportFont_;
  id<JavaUtilMap> exportFonts_;
  id<JavaUtilSet> locales_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, jasperReportsContext_, id<OrgOssPdfreporterEngineJasperReportsContext>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, name_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, normalFace_, id<OrgOssPdfreporterEngineFontsFontFace>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, boldFace_, id<OrgOssPdfreporterEngineFontsFontFace>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, italicFace_, id<OrgOssPdfreporterEngineFontsFontFace>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, boldItalicFace_, id<OrgOssPdfreporterEngineFontsFontFace>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, normalPdfFont_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, boldPdfFont_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, italicPdfFont_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, boldItalicPdfFont_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, pdfEncoding_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, isPdfEmbedded_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, defaultExportFont_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, exportFonts_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineFontsSimpleFontFamily, locales_, id<JavaUtilSet>)

@implementation OrgOssPdfreporterEngineFontsSimpleFontFamily

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineFontsSimpleFontFamily_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  OrgOssPdfreporterEngineFontsSimpleFontFamily_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, jasperReportsContext);
  return self;
}

- (NSString *)getName {
  return name_;
}

- (void)setNameWithNSString:(NSString *)name {
  self->name_ = name;
}

- (void)setNormalWithNSString:(NSString *)normal {
  normalFace_ = OrgOssPdfreporterEngineFontsLazyFontFace_getInstanceWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withNSString_(self, JreLoadEnum(OrgOssPdfreporterFontIFont_FontStyle, PLAIN), normal);
}

- (void)setBoldWithNSString:(NSString *)bold {
  boldFace_ = OrgOssPdfreporterEngineFontsLazyFontFace_getInstanceWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withNSString_(self, JreLoadEnum(OrgOssPdfreporterFontIFont_FontStyle, BOLD), bold);
}

- (void)setItalicWithNSString:(NSString *)italic {
  italicFace_ = OrgOssPdfreporterEngineFontsLazyFontFace_getInstanceWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withNSString_(self, JreLoadEnum(OrgOssPdfreporterFontIFont_FontStyle, OBLIQUE), italic);
}

- (void)setBoldItalicWithNSString:(NSString *)boldItalic {
  boldItalicFace_ = OrgOssPdfreporterEngineFontsLazyFontFace_getInstanceWithOrgOssPdfreporterEngineFontsFontFamily_withOrgOssPdfreporterFontIFont_FontStyle_withNSString_(self, JreLoadEnum(OrgOssPdfreporterFontIFont_FontStyle, BOLD_OBLIQUE), boldItalic);
}

- (id<OrgOssPdfreporterEngineFontsFontFace>)getNormalFace {
  return normalFace_;
}

- (id<OrgOssPdfreporterEngineFontsFontFace>)getBoldFace {
  return boldFace_;
}

- (id<OrgOssPdfreporterEngineFontsFontFace>)getItalicFace {
  return italicFace_;
}

- (id<OrgOssPdfreporterEngineFontsFontFace>)getBoldItalicFace {
  return boldItalicFace_;
}

- (NSString *)getNormalPdfFont {
  return normalPdfFont_;
}

- (void)setNormalPdfFontWithNSString:(NSString *)normalPdfFont {
  self->normalPdfFont_ = normalPdfFont;
}

- (NSString *)getBoldPdfFont {
  return boldPdfFont_;
}

- (void)setBoldPdfFontWithNSString:(NSString *)boldPdfFont {
  self->boldPdfFont_ = boldPdfFont;
}

- (NSString *)getItalicPdfFont {
  return italicPdfFont_;
}

- (void)setItalicPdfFontWithNSString:(NSString *)italicPdfFont {
  self->italicPdfFont_ = italicPdfFont;
}

- (NSString *)getBoldItalicPdfFont {
  return boldItalicPdfFont_;
}

- (void)setBoldItalicPdfFontWithNSString:(NSString *)boldItalicPdfFont {
  self->boldItalicPdfFont_ = boldItalicPdfFont;
}

- (NSString *)getPdfEncoding {
  return pdfEncoding_;
}

- (void)setPdfEncodingWithNSString:(NSString *)pdfEncoding {
  self->pdfEncoding_ = pdfEncoding;
}

- (JavaLangBoolean *)isPdfEmbedded {
  return isPdfEmbedded_;
}

- (void)setPdfEmbeddedWithJavaLangBoolean:(JavaLangBoolean *)isPdfEmbedded {
  self->isPdfEmbedded_ = isPdfEmbedded;
}

- (NSString *)getDefaultExportFont {
  return defaultExportFont_;
}

- (void)setDefaultExportFontWithNSString:(NSString *)defaultExportFont {
  self->defaultExportFont_ = defaultExportFont;
}

- (id<JavaUtilMap>)getExportFonts {
  return exportFonts_;
}

- (void)setExportFontsWithJavaUtilMap:(id<JavaUtilMap>)exportFonts {
  self->exportFonts_ = exportFonts;
}

- (NSString *)getExportFontWithNSString:(NSString *)key {
  NSString *exportFont = exportFonts_ == nil ? nil : [exportFonts_ getWithId:key];
  return exportFont == nil ? defaultExportFont_ : exportFont;
}

- (id<JavaUtilSet>)getLocales {
  return locales_;
}

- (void)setLocalesWithJavaUtilSet:(id<JavaUtilSet>)locales {
  self->locales_ = locales;
}

- (jboolean)supportsLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return locales_ == nil || [locales_ isEmpty] || [((id<JavaUtilSet>) nil_chk(locales_)) containsWithId:OrgOssPdfreporterEngineUtilJRDataUtils_getLocaleCodeWithJavaUtilLocale_(locale)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SimpleFontFamily", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterEngineJasperReportsContext:", "SimpleFontFamily", NULL, 0x1, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setNameWithNSString:", "setName", "V", 0x1, NULL, NULL },
    { "setNormalWithNSString:", "setNormal", "V", 0x1, NULL, NULL },
    { "setBoldWithNSString:", "setBold", "V", 0x1, NULL, NULL },
    { "setItalicWithNSString:", "setItalic", "V", 0x1, NULL, NULL },
    { "setBoldItalicWithNSString:", "setBoldItalic", "V", 0x1, NULL, NULL },
    { "getNormalFace", NULL, "Lorg.oss.pdfreporter.engine.fonts.FontFace;", 0x1, NULL, NULL },
    { "getBoldFace", NULL, "Lorg.oss.pdfreporter.engine.fonts.FontFace;", 0x1, NULL, NULL },
    { "getItalicFace", NULL, "Lorg.oss.pdfreporter.engine.fonts.FontFace;", 0x1, NULL, NULL },
    { "getBoldItalicFace", NULL, "Lorg.oss.pdfreporter.engine.fonts.FontFace;", 0x1, NULL, NULL },
    { "getNormalPdfFont", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setNormalPdfFontWithNSString:", "setNormalPdfFont", "V", 0x1, NULL, NULL },
    { "getBoldPdfFont", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setBoldPdfFontWithNSString:", "setBoldPdfFont", "V", 0x1, NULL, NULL },
    { "getItalicPdfFont", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setItalicPdfFontWithNSString:", "setItalicPdfFont", "V", 0x1, NULL, NULL },
    { "getBoldItalicPdfFont", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setBoldItalicPdfFontWithNSString:", "setBoldItalicPdfFont", "V", 0x1, NULL, NULL },
    { "getPdfEncoding", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setPdfEncodingWithNSString:", "setPdfEncoding", "V", 0x1, NULL, NULL },
    { "isPdfEmbedded", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "setPdfEmbeddedWithJavaLangBoolean:", "setPdfEmbedded", "V", 0x1, NULL, NULL },
    { "getDefaultExportFont", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setDefaultExportFontWithNSString:", "setDefaultExportFont", "V", 0x1, NULL, NULL },
    { "getExportFonts", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" },
    { "setExportFontsWithJavaUtilMap:", "setExportFonts", "V", 0x1, NULL, "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V" },
    { "getExportFontWithNSString:", "getExportFont", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLocales", NULL, "Ljava.util.Set;", 0x1, NULL, "()Ljava/util/Set<Ljava/lang/String;>;" },
    { "setLocalesWithJavaUtilSet:", "setLocales", "V", 0x1, NULL, "(Ljava/util/Set<Ljava/lang/String;>;)V" },
    { "supportsLocaleWithJavaUtilLocale:", "supportsLocale", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "jasperReportsContext_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.JasperReportsContext;", NULL, NULL, .constantValue.asLong = 0 },
    { "name_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "normalFace_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.fonts.FontFace;", NULL, NULL, .constantValue.asLong = 0 },
    { "boldFace_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.fonts.FontFace;", NULL, NULL, .constantValue.asLong = 0 },
    { "italicFace_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.fonts.FontFace;", NULL, NULL, .constantValue.asLong = 0 },
    { "boldItalicFace_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.fonts.FontFace;", NULL, NULL, .constantValue.asLong = 0 },
    { "normalPdfFont_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "boldPdfFont_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "italicPdfFont_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "boldItalicPdfFont_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "pdfEncoding_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "isPdfEmbedded_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL, .constantValue.asLong = 0 },
    { "defaultExportFont_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "exportFonts_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", .constantValue.asLong = 0 },
    { "locales_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;", .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineFontsSimpleFontFamily = { 2, "SimpleFontFamily", "org.oss.pdfreporter.engine.fonts", NULL, 0x1, 32, methods, 15, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineFontsSimpleFontFamily;
}

@end

void OrgOssPdfreporterEngineFontsSimpleFontFamily_init(OrgOssPdfreporterEngineFontsSimpleFontFamily *self) {
  OrgOssPdfreporterEngineFontsSimpleFontFamily_initWithOrgOssPdfreporterEngineJasperReportsContext_(self, OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance());
}

OrgOssPdfreporterEngineFontsSimpleFontFamily *new_OrgOssPdfreporterEngineFontsSimpleFontFamily_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFontsSimpleFontFamily, init)
}

OrgOssPdfreporterEngineFontsSimpleFontFamily *create_OrgOssPdfreporterEngineFontsSimpleFontFamily_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFontsSimpleFontFamily, init)
}

void OrgOssPdfreporterEngineFontsSimpleFontFamily_initWithOrgOssPdfreporterEngineJasperReportsContext_(OrgOssPdfreporterEngineFontsSimpleFontFamily *self, id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  NSObject_init(self);
  self->jasperReportsContext_ = jasperReportsContext;
}

OrgOssPdfreporterEngineFontsSimpleFontFamily *new_OrgOssPdfreporterEngineFontsSimpleFontFamily_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineFontsSimpleFontFamily, initWithOrgOssPdfreporterEngineJasperReportsContext_, jasperReportsContext)
}

OrgOssPdfreporterEngineFontsSimpleFontFamily *create_OrgOssPdfreporterEngineFontsSimpleFontFamily_initWithOrgOssPdfreporterEngineJasperReportsContext_(id<OrgOssPdfreporterEngineJasperReportsContext> jasperReportsContext) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineFontsSimpleFontFamily, initWithOrgOssPdfreporterEngineJasperReportsContext_, jasperReportsContext)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineFontsSimpleFontFamily)
