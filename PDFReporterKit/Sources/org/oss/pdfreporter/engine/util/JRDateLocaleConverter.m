//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRDateLocaleConverter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/TimeZone.h"
#include "org/oss/pdfreporter/engine/util/JRDateLocaleConverter.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/text/ParseException.h"
#include "org/oss/pdfreporter/text/format/IDateFormat.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"

@interface OrgOssPdfreporterEngineUtilJRDateLocaleConverter () {
 @public
  JavaUtilTimeZone *timeZone_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineUtilJRDateLocaleConverter, timeZone_, JavaUtilTimeZone *)

@implementation OrgOssPdfreporterEngineUtilJRDateLocaleConverter

- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  OrgOssPdfreporterEngineUtilJRDateLocaleConverter_initWithJavaUtilTimeZone_(self, timeZone);
  return self;
}

- (id)parseWithId:(id)value
     withNSString:(NSString *)pattern {
  if ([value isKindOfClass:[JavaUtilDate class]]) {
    return value;
  }
  if ([value isKindOfClass:[JavaUtilCalendar class]]) {
    return [((JavaUtilCalendar *) nil_chk(((JavaUtilCalendar *) cast_chk(value, [JavaUtilCalendar class])))) getTime];
  }
  return [((id<OrgOssPdfreporterTextFormatIDateFormat>) nil_chk([((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getIFormatFactoryWithOrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatType_(JreLoadEnum(OrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatType, SIMPLE)))) newDateFormatWithNSString:nil withJavaUtilLocale:nil withJavaUtilTimeZone:timeZone_])) parseWithNSString:(NSString *) cast_chk(value, [NSString class])];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilTimeZone:", "JRDateLocaleConverter", NULL, 0x1, NULL, NULL },
    { "parseWithId:withNSString:", "parse", "Ljava.lang.Object;", 0x4, "Lorg.oss.pdfreporter.text.ParseException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "timeZone_", NULL, 0x2, "Ljava.util.TimeZone;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilJRDateLocaleConverter = { 2, "JRDateLocaleConverter", "org.oss.pdfreporter.engine.util", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineUtilJRDateLocaleConverter;
}

@end

void OrgOssPdfreporterEngineUtilJRDateLocaleConverter_initWithJavaUtilTimeZone_(OrgOssPdfreporterEngineUtilJRDateLocaleConverter *self, JavaUtilTimeZone *timeZone) {
  NSObject_init(self);
  self->timeZone_ = timeZone;
}

OrgOssPdfreporterEngineUtilJRDateLocaleConverter *new_OrgOssPdfreporterEngineUtilJRDateLocaleConverter_initWithJavaUtilTimeZone_(JavaUtilTimeZone *timeZone) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilJRDateLocaleConverter, initWithJavaUtilTimeZone_, timeZone)
}

OrgOssPdfreporterEngineUtilJRDateLocaleConverter *create_OrgOssPdfreporterEngineUtilJRDateLocaleConverter_initWithJavaUtilTimeZone_(JavaUtilTimeZone *timeZone) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilJRDateLocaleConverter, initWithJavaUtilTimeZone_, timeZone)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilJRDateLocaleConverter)
