//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/util/VersionComparator.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "org/oss/pdfreporter/engine/util/VersionComparator.h"

@implementation OrgOssPdfreporterEngineUtilVersionComparator

- (jint)compareWithId:(NSString *)currentVersion
               withId:(NSString *)oldVersion {
  if (oldVersion == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Reference version can't be null.");
  }
  if (currentVersion == nil || [currentVersion hasPrefix:oldVersion]) {
    return 1;
  }
  else {
    IOSObjectArray *oldVersionChunks = [oldVersion split:@"\\."];
    IOSObjectArray *currentVersionChunks = [currentVersion split:@"\\."];
    jint count = JavaLangMath_minWithInt_withInt_(((IOSObjectArray *) nil_chk(oldVersionChunks))->size_, ((IOSObjectArray *) nil_chk(currentVersionChunks))->size_);
    for (jint i = 0, old = 0, current = 0; i < count; i++) {
      @try {
        old = [((JavaLangInteger *) nil_chk(JavaLangInteger_valueOfWithNSString_(IOSObjectArray_Get(oldVersionChunks, i)))) intValue];
        current = [((JavaLangInteger *) nil_chk(JavaLangInteger_valueOfWithNSString_(IOSObjectArray_Get(currentVersionChunks, i)))) intValue];
        if (current != old) {
          return current - old;
        }
      }
      @catch (JavaLangNumberFormatException *e) {
        if ([((NSString *) nil_chk(IOSObjectArray_Get(currentVersionChunks, i))) compareToWithId:IOSObjectArray_Get(oldVersionChunks, i)] != 0) {
          return [((NSString *) nil_chk(IOSObjectArray_Get(currentVersionChunks, i))) compareToWithId:IOSObjectArray_Get(oldVersionChunks, i)];
        }
      }
    }
    return currentVersionChunks->size_ - oldVersionChunks->size_;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineUtilVersionComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "VersionComparator", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilVersionComparator = { 2, "VersionComparator", "org.oss.pdfreporter.engine.util", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/String;>;" };
  return &_OrgOssPdfreporterEngineUtilVersionComparator;
}

@end

void OrgOssPdfreporterEngineUtilVersionComparator_init(OrgOssPdfreporterEngineUtilVersionComparator *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineUtilVersionComparator *new_OrgOssPdfreporterEngineUtilVersionComparator_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilVersionComparator, init)
}

OrgOssPdfreporterEngineUtilVersionComparator *create_OrgOssPdfreporterEngineUtilVersionComparator_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilVersionComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilVersionComparator)
