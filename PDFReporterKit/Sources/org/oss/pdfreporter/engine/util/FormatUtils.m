//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/util/FormatUtils.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/Date.h"
#include "org/oss/pdfreporter/engine/util/FormatUtils.h"
#include "org/oss/pdfreporter/text/ParseException.h"
#include "org/oss/pdfreporter/text/format/IDateFormat.h"
#include "org/oss/pdfreporter/text/format/INumberFormat.h"

@implementation OrgOssPdfreporterEngineUtilFormatUtils

+ (NSNumber *)getFormattedNumberWithOrgOssPdfreporterTextFormatINumberFormat:(id<OrgOssPdfreporterTextFormatINumberFormat>)numberFormat
                                                                withNSString:(NSString *)fieldValue
                                                                withIOSClass:(IOSClass *)valueClass {
  return OrgOssPdfreporterEngineUtilFormatUtils_getFormattedNumberWithOrgOssPdfreporterTextFormatINumberFormat_withNSString_withIOSClass_(numberFormat, fieldValue, valueClass);
}

+ (JavaUtilDate *)getFormattedDateWithOrgOssPdfreporterTextFormatIDateFormat:(id<OrgOssPdfreporterTextFormatIDateFormat>)dateFormat
                                                                withNSString:(NSString *)fieldValue
                                                                withIOSClass:(IOSClass *)valueClass {
  return OrgOssPdfreporterEngineUtilFormatUtils_getFormattedDateWithOrgOssPdfreporterTextFormatIDateFormat_withNSString_withIOSClass_(dateFormat, fieldValue, valueClass);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineUtilFormatUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getFormattedNumberWithOrgOssPdfreporterTextFormatINumberFormat:withNSString:withIOSClass:", "getFormattedNumber", "Ljava.lang.Number;", 0x9, "Lorg.oss.pdfreporter.text.ParseException;", "(Lorg/oss/pdfreporter/text/format/INumberFormat;Ljava/lang/String;Ljava/lang/Class<*>;)Ljava/lang/Number;" },
    { "getFormattedDateWithOrgOssPdfreporterTextFormatIDateFormat:withNSString:withIOSClass:", "getFormattedDate", "Ljava.util.Date;", 0x9, "Lorg.oss.pdfreporter.text.ParseException;", "(Lorg/oss/pdfreporter/text/format/IDateFormat;Ljava/lang/String;Ljava/lang/Class<*>;)Ljava/util/Date;" },
    { "init", "FormatUtils", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilFormatUtils = { 2, "FormatUtils", "org.oss.pdfreporter.engine.util", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineUtilFormatUtils;
}

@end

NSNumber *OrgOssPdfreporterEngineUtilFormatUtils_getFormattedNumberWithOrgOssPdfreporterTextFormatINumberFormat_withNSString_withIOSClass_(id<OrgOssPdfreporterTextFormatINumberFormat> numberFormat, NSString *fieldValue, IOSClass *valueClass) {
  OrgOssPdfreporterEngineUtilFormatUtils_initialize();
  if ([((IOSClass *) nil_chk(valueClass)) isEqual:JavaLangByte_class_()]) {
    return new_JavaLangByte_initWithByte_([((NSNumber *) nil_chk(([((id<OrgOssPdfreporterTextFormatINumberFormat>) nil_chk(numberFormat)) parseWithNSString:fieldValue]))) charValue]);
  }
  else if ([valueClass isEqual:JavaLangInteger_class_()]) {
    return JavaLangInteger_valueOfWithInt_([((NSNumber *) nil_chk(([((id<OrgOssPdfreporterTextFormatINumberFormat>) nil_chk(numberFormat)) parseWithNSString:fieldValue]))) intValue]);
  }
  else if ([valueClass isEqual:JavaLangLong_class_()]) {
    return new_JavaLangLong_initWithLong_([((NSNumber *) nil_chk(([((id<OrgOssPdfreporterTextFormatINumberFormat>) nil_chk(numberFormat)) parseWithNSString:fieldValue]))) longLongValue]);
  }
  else if ([valueClass isEqual:JavaLangShort_class_()]) {
    return new_JavaLangShort_initWithShort_([((NSNumber *) nil_chk(([((id<OrgOssPdfreporterTextFormatINumberFormat>) nil_chk(numberFormat)) parseWithNSString:fieldValue]))) shortValue]);
  }
  else if ([valueClass isEqual:JavaLangDouble_class_()]) {
    return new_JavaLangDouble_initWithDouble_([((NSNumber *) nil_chk(([((id<OrgOssPdfreporterTextFormatINumberFormat>) nil_chk(numberFormat)) parseWithNSString:fieldValue]))) doubleValue]);
  }
  else if ([valueClass isEqual:JavaLangFloat_class_()]) {
    return new_JavaLangFloat_initWithFloat_([((NSNumber *) nil_chk(([((id<OrgOssPdfreporterTextFormatINumberFormat>) nil_chk(numberFormat)) parseWithNSString:fieldValue]))) floatValue]);
  }
  else if ([valueClass isEqual:JavaMathBigDecimal_class_()]) {
    return new_JavaMathBigDecimal_initWithNSString_([((NSNumber *) nil_chk(([((id<OrgOssPdfreporterTextFormatINumberFormat>) nil_chk(numberFormat)) parseWithNSString:fieldValue]))) description]);
  }
  else if ([valueClass isEqual:JavaMathBigInteger_class_()]) {
    return new_JavaMathBigInteger_initWithNSString_(NSString_valueOfLong_([((NSNumber *) nil_chk([((id<OrgOssPdfreporterTextFormatINumberFormat>) nil_chk(numberFormat)) parseWithNSString:fieldValue])) longLongValue]));
  }
  else if ([valueClass isEqual:NSNumber_class_()]) {
    return [((id<OrgOssPdfreporterTextFormatINumberFormat>) nil_chk(numberFormat)) parseWithNSString:fieldValue];
  }
  return nil;
}

JavaUtilDate *OrgOssPdfreporterEngineUtilFormatUtils_getFormattedDateWithOrgOssPdfreporterTextFormatIDateFormat_withNSString_withIOSClass_(id<OrgOssPdfreporterTextFormatIDateFormat> dateFormat, NSString *fieldValue, IOSClass *valueClass) {
  OrgOssPdfreporterEngineUtilFormatUtils_initialize();
  if ([((IOSClass *) nil_chk(valueClass)) isEqual:JavaUtilDate_class_()]) {
    return [((id<OrgOssPdfreporterTextFormatIDateFormat>) nil_chk(dateFormat)) parseWithNSString:fieldValue];
  }
  return nil;
}

void OrgOssPdfreporterEngineUtilFormatUtils_init(OrgOssPdfreporterEngineUtilFormatUtils *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineUtilFormatUtils *new_OrgOssPdfreporterEngineUtilFormatUtils_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilFormatUtils, init)
}

OrgOssPdfreporterEngineUtilFormatUtils *create_OrgOssPdfreporterEngineUtilFormatUtils_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilFormatUtils, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilFormatUtils)
