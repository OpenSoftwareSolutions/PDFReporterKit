//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRColorUtil.java
//

#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "org/oss/pdfreporter/engine/type/ColorEnum.h"
#include "org/oss/pdfreporter/engine/util/JRColorUtil.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/geometry/factory/IGeometryFactory.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"

@interface OrgOssPdfreporterEngineUtilJRColorUtil ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgOssPdfreporterEngineUtilJRColorUtil_init(OrgOssPdfreporterEngineUtilJRColorUtil *self);

__attribute__((unused)) static OrgOssPdfreporterEngineUtilJRColorUtil *new_OrgOssPdfreporterEngineUtilJRColorUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterEngineUtilJRColorUtil *create_OrgOssPdfreporterEngineUtilJRColorUtil_init();

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineUtilJRColorUtil)

jint OrgOssPdfreporterEngineUtilJRColorUtil_COLOR_MASK;

@implementation OrgOssPdfreporterEngineUtilJRColorUtil

+ (jint)COLOR_MASK {
  return OrgOssPdfreporterEngineUtilJRColorUtil_COLOR_MASK;
}

+ (NSString *)getColorHexaWithOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)color {
  return OrgOssPdfreporterEngineUtilJRColorUtil_getColorHexaWithOrgOssPdfreporterGeometryIColor_(color);
}

+ (id<OrgOssPdfreporterGeometryIColor>)getColorWithNSString:(NSString *)strColor
                        withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)defaultColor {
  return OrgOssPdfreporterEngineUtilJRColorUtil_getColorWithNSString_withOrgOssPdfreporterGeometryIColor_(strColor, defaultColor);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineUtilJRColorUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineUtilJRColorUtil class]) {
    OrgOssPdfreporterEngineUtilJRColorUtil_COLOR_MASK = JavaLangInteger_parseIntWithNSString_withInt_(@"FFFFFF", 16);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineUtilJRColorUtil)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getColorHexaWithOrgOssPdfreporterGeometryIColor:", "getColorHexa", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getColorWithNSString:withOrgOssPdfreporterGeometryIColor:", "getColor", "Lorg.oss.pdfreporter.geometry.IColor;", 0x9, NULL, NULL },
    { "init", "JRColorUtil", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "COLOR_MASK", "COLOR_MASK", 0x19, "I", &OrgOssPdfreporterEngineUtilJRColorUtil_COLOR_MASK, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilJRColorUtil = { 2, "JRColorUtil", "org.oss.pdfreporter.engine.util", NULL, 0x11, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineUtilJRColorUtil;
}

@end

NSString *OrgOssPdfreporterEngineUtilJRColorUtil_getColorHexaWithOrgOssPdfreporterGeometryIColor_(id<OrgOssPdfreporterGeometryIColor> color) {
  OrgOssPdfreporterEngineUtilJRColorUtil_initialize();
  NSString *hexa = [((NSString *) nil_chk(JavaLangInteger_toHexStringWithInt_([((id<OrgOssPdfreporterGeometryIColor>) nil_chk(color)) getRGB] & OrgOssPdfreporterEngineUtilJRColorUtil_COLOR_MASK))) uppercaseString];
  return [(JreStrcat("$$", @"000000", hexa)) substring:((jint) [((NSString *) nil_chk(hexa)) length])];
}

id<OrgOssPdfreporterGeometryIColor> OrgOssPdfreporterEngineUtilJRColorUtil_getColorWithNSString_withOrgOssPdfreporterGeometryIColor_(NSString *strColor, id<OrgOssPdfreporterGeometryIColor> defaultColor) {
  OrgOssPdfreporterEngineUtilJRColorUtil_initialize();
  id<OrgOssPdfreporterGeometryIColor> color = nil;
  if (strColor != nil && ((jint) [strColor length]) > 0) {
    jchar firstChar = [strColor charAtWithInt:0];
    if (firstChar == '#') {
      color = [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getGeometryFactory())) newColorWithInt:JavaLangInteger_parseIntWithNSString_withInt_([strColor substring:1], 16)];
    }
    else if ('0' <= firstChar && firstChar <= '9') {
      color = [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getGeometryFactory())) newColorWithInt:JavaLangInteger_parseIntWithNSString_(strColor)];
    }
    else {
      OrgOssPdfreporterEngineTypeColorEnum *colorEnum = OrgOssPdfreporterEngineTypeColorEnum_getByNameWithNSString_(strColor);
      if (colorEnum == nil) {
        color = defaultColor;
      }
      else {
        color = [colorEnum getColor];
      }
    }
  }
  return color;
}

void OrgOssPdfreporterEngineUtilJRColorUtil_init(OrgOssPdfreporterEngineUtilJRColorUtil *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineUtilJRColorUtil *new_OrgOssPdfreporterEngineUtilJRColorUtil_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilJRColorUtil, init)
}

OrgOssPdfreporterEngineUtilJRColorUtil *create_OrgOssPdfreporterEngineUtilJRColorUtil_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilJRColorUtil, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilJRColorUtil)
