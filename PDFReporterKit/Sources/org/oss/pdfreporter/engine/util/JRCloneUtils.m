//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRCloneUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/engine/JRCloneable.h"
#include "org/oss/pdfreporter/engine/util/JRCloneUtils.h"

@interface OrgOssPdfreporterEngineUtilJRCloneUtils ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgOssPdfreporterEngineUtilJRCloneUtils_init(OrgOssPdfreporterEngineUtilJRCloneUtils *self);

__attribute__((unused)) static OrgOssPdfreporterEngineUtilJRCloneUtils *new_OrgOssPdfreporterEngineUtilJRCloneUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterEngineUtilJRCloneUtils *create_OrgOssPdfreporterEngineUtilJRCloneUtils_init();

@implementation OrgOssPdfreporterEngineUtilJRCloneUtils

+ (id)nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable:(id<OrgOssPdfreporterEngineJRCloneable>)original {
  return OrgOssPdfreporterEngineUtilJRCloneUtils_nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable_(original);
}

+ (id<JavaUtilList>)cloneListWithJavaUtilList:(id<JavaUtilList>)items {
  return OrgOssPdfreporterEngineUtilJRCloneUtils_cloneListWithJavaUtilList_(items);
}

+ (IOSObjectArray *)cloneArrayWithOrgOssPdfreporterEngineJRCloneableArray:(IOSObjectArray *)items {
  return OrgOssPdfreporterEngineUtilJRCloneUtils_cloneArrayWithOrgOssPdfreporterEngineJRCloneableArray_(items);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineUtilJRCloneUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable:", "nullSafeClone", "TT;", 0x9, NULL, "<T::Lorg/oss/pdfreporter/engine/JRCloneable;>(TT;)TT;" },
    { "cloneListWithJavaUtilList:", "cloneList", "Ljava.util.List;", 0x9, NULL, "<T::Lorg/oss/pdfreporter/engine/JRCloneable;>(Ljava/util/List<TT;>;)Ljava/util/List<TT;>;" },
    { "cloneArrayWithOrgOssPdfreporterEngineJRCloneableArray:", "cloneArray", "[Lorg.oss.pdfreporter.engine.JRCloneable;", 0x9, NULL, "<T::Lorg/oss/pdfreporter/engine/JRCloneable;>([TT;)[TT;" },
    { "init", "JRCloneUtils", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilJRCloneUtils = { 2, "JRCloneUtils", "org.oss.pdfreporter.engine.util", NULL, 0x11, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineUtilJRCloneUtils;
}

@end

id OrgOssPdfreporterEngineUtilJRCloneUtils_nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable_(id<OrgOssPdfreporterEngineJRCloneable> original) {
  OrgOssPdfreporterEngineUtilJRCloneUtils_initialize();
  return original == nil ? nil : (id<OrgOssPdfreporterEngineJRCloneable>) cast_check([original clone], OrgOssPdfreporterEngineJRCloneable_class_());
}

id<JavaUtilList> OrgOssPdfreporterEngineUtilJRCloneUtils_cloneListWithJavaUtilList_(id<JavaUtilList> items) {
  OrgOssPdfreporterEngineUtilJRCloneUtils_initialize();
  id<JavaUtilList> clone;
  if (items == nil) {
    clone = nil;
  }
  else {
    clone = new_JavaUtilArrayList_initWithInt_([items size]);
    for (id<OrgOssPdfreporterEngineJRCloneable> __strong item in items) {
      [clone addWithId:OrgOssPdfreporterEngineUtilJRCloneUtils_nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable_(item)];
    }
  }
  return clone;
}

IOSObjectArray *OrgOssPdfreporterEngineUtilJRCloneUtils_cloneArrayWithOrgOssPdfreporterEngineJRCloneableArray_(IOSObjectArray *items) {
  OrgOssPdfreporterEngineUtilJRCloneUtils_initialize();
  IOSObjectArray *clone;
  if (items == nil) {
    clone = nil;
  }
  else {
    clone = [items clone];
    id<JavaUtilList> list = new_JavaUtilArrayList_initWithInt_(items->size_);
    {
      IOSObjectArray *a__ = items;
      id<OrgOssPdfreporterEngineJRCloneable> const *b__ = a__->buffer_;
      id<OrgOssPdfreporterEngineJRCloneable> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<OrgOssPdfreporterEngineJRCloneable> item = *b__++;
        [list addWithId:OrgOssPdfreporterEngineUtilJRCloneUtils_nullSafeCloneWithOrgOssPdfreporterEngineJRCloneable_(item)];
      }
    }
    clone = [list toArrayWithNSObjectArray:clone];
  }
  return clone;
}

void OrgOssPdfreporterEngineUtilJRCloneUtils_init(OrgOssPdfreporterEngineUtilJRCloneUtils *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineUtilJRCloneUtils *new_OrgOssPdfreporterEngineUtilJRCloneUtils_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilJRCloneUtils, init)
}

OrgOssPdfreporterEngineUtilJRCloneUtils *create_OrgOssPdfreporterEngineUtilJRCloneUtils_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilJRCloneUtils, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilJRCloneUtils)
