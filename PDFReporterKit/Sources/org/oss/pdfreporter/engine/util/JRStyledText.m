//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRStyledText.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fonts/FontUtil.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontManager.h"
#include "org/oss/pdfreporter/font/factory/IFontFactory.h"
#include "org/oss/pdfreporter/font/text/TextAttribute.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/uses/java/awt/text/AttributedString.h"
#include "org/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator.h"

@interface OrgOssPdfreporterEngineUtilJRStyledText () {
 @public
  JavaLangStringBuffer *sbuffer_;
  id<JavaUtilList> runs_;
  OrgOssPdfreporterUsesJavaAwtTextAttributedString *attributedString_;
  OrgOssPdfreporterUsesJavaAwtTextAttributedString *awtAttributedString_;
  id<JavaUtilMap> globalAttributes_;
  JavaUtilLocale *locale_;
}

- (OrgOssPdfreporterFontIFont_FontStyle *)getFontStyleFromAttributesWithJavaUtilMap:(id<JavaUtilMap>)attrs;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineUtilJRStyledText, sbuffer_, JavaLangStringBuffer *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineUtilJRStyledText, runs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineUtilJRStyledText, attributedString_, OrgOssPdfreporterUsesJavaAwtTextAttributedString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineUtilJRStyledText, awtAttributedString_, OrgOssPdfreporterUsesJavaAwtTextAttributedString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineUtilJRStyledText, globalAttributes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineUtilJRStyledText, locale_, JavaUtilLocale *)

inline id<JavaUtilSet> OrgOssPdfreporterEngineUtilJRStyledText_get_FONT_ATTRS();
static id<JavaUtilSet> OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterEngineUtilJRStyledText, FONT_ATTRS, id<JavaUtilSet>)

__attribute__((unused)) static OrgOssPdfreporterFontIFont_FontStyle *OrgOssPdfreporterEngineUtilJRStyledText_getFontStyleFromAttributesWithJavaUtilMap_(OrgOssPdfreporterEngineUtilJRStyledText *self, id<JavaUtilMap> attrs);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterEngineUtilJRStyledText)

NSString *OrgOssPdfreporterEngineUtilJRStyledText_PROPERTY_AWT_IGNORE_MISSING_FONT = @"net.sf.jasperreports.awt.ignore.missing.font";

@implementation OrgOssPdfreporterEngineUtilJRStyledText

+ (NSString *)PROPERTY_AWT_IGNORE_MISSING_FONT {
  return OrgOssPdfreporterEngineUtilJRStyledText_PROPERTY_AWT_IGNORE_MISSING_FONT;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineUtilJRStyledText_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgOssPdfreporterEngineUtilJRStyledText_initWithJavaUtilLocale_(self, locale);
  return self;
}

- (void)appendWithNSString:(NSString *)text {
  (void) [((JavaLangStringBuffer *) nil_chk(sbuffer_)) appendWithNSString:text];
  attributedString_ = nil;
  awtAttributedString_ = nil;
}

- (void)addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:(OrgOssPdfreporterEngineUtilJRStyledText_Run *)run {
  [((id<JavaUtilList>) nil_chk(runs_)) addWithId:run];
  attributedString_ = nil;
  awtAttributedString_ = nil;
}

- (jint)length {
  return [((JavaLangStringBuffer *) nil_chk(sbuffer_)) length];
}

- (NSString *)getText {
  return [((JavaLangStringBuffer *) nil_chk(sbuffer_)) description];
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (OrgOssPdfreporterUsesJavaAwtTextAttributedString *)getAttributedString {
  if (attributedString_ == nil) {
    attributedString_ = new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_([((JavaLangStringBuffer *) nil_chk(sbuffer_)) description]);
    for (jint i = [((id<JavaUtilList>) nil_chk(runs_)) size] - 1; i >= 0; i--) {
      OrgOssPdfreporterEngineUtilJRStyledText_Run *run = [((id<JavaUtilList>) nil_chk(runs_)) getWithInt:i];
      if (((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run))->startIndex_ != run->endIndex_ && run->attributes_ != nil) {
        [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(attributedString_)) addAttributesWithJavaUtilMap:run->attributes_ withInt:run->startIndex_ withInt:run->endIndex_];
      }
    }
  }
  return attributedString_;
}

- (OrgOssPdfreporterUsesJavaAwtTextAttributedString *)getAwtAttributedStringWithBoolean:(jboolean)ignoreMissingFont {
  return [self getAwtAttributedStringWithOrgOssPdfreporterEngineJasperReportsContext:OrgOssPdfreporterEngineDefaultJasperReportsContext_getInstance() withBoolean:ignoreMissingFont];
}

- (OrgOssPdfreporterUsesJavaAwtTextAttributedString *)getAwtAttributedStringWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                                                                withBoolean:(jboolean)ignoreMissingFont {
  if (awtAttributedString_ == nil) {
    awtAttributedString_ = new_OrgOssPdfreporterUsesJavaAwtTextAttributedString_initWithNSString_([((JavaLangStringBuffer *) nil_chk(sbuffer_)) description]);
    for (jint i = [((id<JavaUtilList>) nil_chk(runs_)) size] - 1; i >= 0; i--) {
      OrgOssPdfreporterEngineUtilJRStyledText_Run *run = [((id<JavaUtilList>) nil_chk(runs_)) getWithInt:i];
      if (((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run))->startIndex_ != run->endIndex_ && run->attributes_ != nil) {
        [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(awtAttributedString_)) addAttributesWithJavaUtilMap:run->attributes_ withInt:run->startIndex_ withInt:run->endIndex_];
      }
    }
    id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> iterator = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(awtAttributedString_)) getIterator];
    jint runLimit = 0;
    while (runLimit < [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getEndIndex] && (runLimit = [iterator getRunLimitWithJavaUtilSet:OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS]) <= [iterator getEndIndex]) {
      id<JavaUtilMap> attrs = [iterator getAttributes];
      NSString *familyName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(attrs)) getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, FAMILY)], [NSString class]);
      id<OrgOssPdfreporterFontIFont> awtFont = [((OrgOssPdfreporterEngineFontsFontUtil *) nil_chk(OrgOssPdfreporterEngineFontsFontUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext))) getAwtFontFromBundlesWithNSString:familyName withOrgOssPdfreporterFontIFont_FontStyle:OrgOssPdfreporterEngineUtilJRStyledText_getFontStyleFromAttributesWithJavaUtilMap_(self, attrs) withInt:[((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk([attrs getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, SIZE)], [JavaLangFloat class])))) intValue] withJavaUtilLocale:locale_ withBoolean:ignoreMissingFont];
      if (awtFont == nil) {
        [((OrgOssPdfreporterEngineFontsFontUtil *) nil_chk(OrgOssPdfreporterEngineFontsFontUtil_getInstanceWithOrgOssPdfreporterEngineJasperReportsContext_(jasperReportsContext))) checkAwtFontWithNSString:familyName withBoolean:ignoreMissingFont];
      }
      else {
        id<OrgOssPdfreporterFontIFontManager> fontManager = [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk(OrgOssPdfreporterRegistryApiRegistry_getFontFactory())) getFontManager];
        JavaLangInteger *superscript = (JavaLangInteger *) cast_chk([attrs getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, SUPERSCRIPT)], [JavaLangInteger class]);
        if ([((JavaLangInteger *) nil_chk(JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, SUPERSCRIPT_SUPER))) isEqual:superscript]) {
          awtFont = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getModifiedFontWithOrgOssPdfreporterFontIFont:awtFont withFloat:[awtFont getSize] withOrgOssPdfreporterFontIFont_FontDecoration:JreLoadEnum(OrgOssPdfreporterFontIFont_FontDecoration, SUPERSCRIPT)];
        }
        else if ([((JavaLangInteger *) nil_chk(JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, SUPERSCRIPT_SUB))) isEqual:superscript]) {
          awtFont = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getModifiedFontWithOrgOssPdfreporterFontIFont:awtFont withFloat:[awtFont getSize] withOrgOssPdfreporterFontIFont_FontDecoration:JreLoadEnum(OrgOssPdfreporterFontIFont_FontDecoration, SUBSCRIPT)];
        }
        [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(awtAttributedString_)) addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, FONT) withId:awtFont withInt:[iterator getIndex] withInt:runLimit];
      }
      [iterator setIndexWithInt:runLimit];
    }
  }
  return awtAttributedString_;
}

- (OrgOssPdfreporterFontIFont_FontStyle *)getFontStyleFromAttributesWithJavaUtilMap:(id<JavaUtilMap>)attrs {
  return OrgOssPdfreporterEngineUtilJRStyledText_getFontStyleFromAttributesWithJavaUtilMap_(self, attrs);
}

- (id<JavaUtilList>)getRuns {
  return runs_;
}

- (void)setGlobalAttributesWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  self->globalAttributes_ = attributes;
  [self addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:new_OrgOssPdfreporterEngineUtilJRStyledText_Run_initWithJavaUtilMap_withInt_withInt_(attributes, 0, [self length])];
}

- (id<JavaUtilMap>)getGlobalAttributes {
  return globalAttributes_;
}

- (id)clone {
  return [super clone];
}

+ (id<JavaUtilMap>)cloneAttributesMapWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  return OrgOssPdfreporterEngineUtilJRStyledText_cloneAttributesMapWithJavaUtilMap_(attributes);
}

- (OrgOssPdfreporterEngineUtilJRStyledText *)cloneText {
  @try {
    OrgOssPdfreporterEngineUtilJRStyledText *clone = (OrgOssPdfreporterEngineUtilJRStyledText *) cast_chk([super clone], [OrgOssPdfreporterEngineUtilJRStyledText class]);
    ((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(clone))->globalAttributes_ = OrgOssPdfreporterEngineUtilJRStyledText_cloneAttributesMapWithJavaUtilMap_(globalAttributes_);
    clone->runs_ = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(runs_)) size]);
    for (id<JavaUtilIterator> it = [runs_ iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      OrgOssPdfreporterEngineUtilJRStyledText_Run *run = [it next];
      OrgOssPdfreporterEngineUtilJRStyledText_Run *runClone = [((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)) cloneRun];
      [((id<JavaUtilList>) nil_chk(clone->runs_)) addWithId:runClone];
    }
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
}

- (void)insertWithNSString:(NSString *)str
            withShortArray:(IOSShortArray *)offsets {
  jint insertLength = ((jint) [((NSString *) nil_chk(str)) length]);
  JavaLangStringBuffer *newText = new_JavaLangStringBuffer_initWithInt_([((JavaLangStringBuffer *) nil_chk(sbuffer_)) length] + insertLength * ((IOSShortArray *) nil_chk(offsets))->size_);
  IOSCharArray *buffer = nil;
  jint offset = 0;
  for (jint i = 0; i < offsets->size_; i++) {
    jint charCount = IOSShortArray_Get(offsets, i);
    jint prevOffset = offset;
    offset += IOSShortArray_Get(offsets, i);
    if (buffer == nil || buffer->size_ < charCount) {
      buffer = [IOSCharArray newArrayWithLength:charCount];
    }
    [((JavaLangStringBuffer *) nil_chk(sbuffer_)) getCharsWithInt:prevOffset withInt:offset withCharArray:buffer withInt:0];
    (void) [newText appendWithCharArray:buffer withInt:0 withInt:charCount];
    (void) [newText appendWithNSString:str];
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(runs_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      OrgOssPdfreporterEngineUtilJRStyledText_Run *run = [it next];
      if (((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run))->startIndex_ >= offset) {
        run->startIndex_ += insertLength;
        run->endIndex_ += insertLength;
      }
      else if (run->endIndex_ >= offset) {
        run->endIndex_ += insertLength;
      }
    }
  }
  jint charCount = [((JavaLangStringBuffer *) nil_chk(sbuffer_)) length] - offset;
  if (buffer == nil || buffer->size_ < charCount) {
    buffer = [IOSCharArray newArrayWithLength:charCount];
  }
  [((JavaLangStringBuffer *) nil_chk(sbuffer_)) getCharsWithInt:offset withInt:[sbuffer_ length] withCharArray:buffer withInt:0];
  (void) [newText appendWithCharArray:buffer withInt:0 withInt:charCount];
  sbuffer_ = newText;
  attributedString_ = nil;
  awtAttributedString_ = nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineUtilJRStyledText class]) {
    OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS = new_JavaUtilHashSet_init();
    {
      [OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS addWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, FAMILY)];
      [OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS addWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, WEIGHT)];
      [OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS addWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, POSTURE)];
      [OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS addWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, SIZE)];
      [OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS addWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, SUPERSCRIPT)];
    }
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterEngineUtilJRStyledText)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JRStyledText", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilLocale:", "JRStyledText", NULL, 0x1, NULL, NULL },
    { "appendWithNSString:", "append", "V", 0x1, NULL, NULL },
    { "addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:", "addRun", "V", 0x1, NULL, NULL },
    { "length", NULL, "I", 0x1, NULL, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLocale", NULL, "Ljava.util.Locale;", 0x1, NULL, NULL },
    { "getAttributedString", NULL, "Lorg.oss.pdfreporter.uses.java.awt.text.AttributedString;", 0x1, NULL, NULL },
    { "getAwtAttributedStringWithBoolean:", "getAwtAttributedString", "Lorg.oss.pdfreporter.uses.java.awt.text.AttributedString;", 0x1, NULL, NULL },
    { "getAwtAttributedStringWithOrgOssPdfreporterEngineJasperReportsContext:withBoolean:", "getAwtAttributedString", "Lorg.oss.pdfreporter.uses.java.awt.text.AttributedString;", 0x1, NULL, NULL },
    { "getFontStyleFromAttributesWithJavaUtilMap:", "getFontStyleFromAttributes", "Lorg.oss.pdfreporter.font.IFont$FontStyle;", 0x2, NULL, "(Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;)Lorg/oss/pdfreporter/font/IFont$FontStyle;" },
    { "getRuns", NULL, "Ljava.util.List;", 0x1, NULL, "()Ljava/util/List<Lorg/oss/pdfreporter/engine/util/JRStyledText$Run;>;" },
    { "setGlobalAttributesWithJavaUtilMap:", "setGlobalAttributes", "V", 0x1, NULL, "(Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;)V" },
    { "getGlobalAttributes", NULL, "Ljava.util.Map;", 0x1, NULL, "()Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;" },
    { "clone", NULL, "Ljava.lang.Object;", 0x4, "Ljava.lang.CloneNotSupportedException;", NULL },
    { "cloneAttributesMapWithJavaUtilMap:", "cloneAttributesMap", "Ljava.util.Map;", 0xc, NULL, "(Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;)Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;" },
    { "cloneText", NULL, "Lorg.oss.pdfreporter.engine.util.JRStyledText;", 0x1, NULL, NULL },
    { "insertWithNSString:withShortArray:", "insert", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PROPERTY_AWT_IGNORE_MISSING_FONT", "PROPERTY_AWT_IGNORE_MISSING_FONT", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineUtilJRStyledText_PROPERTY_AWT_IGNORE_MISSING_FONT, NULL, .constantValue.asLong = 0 },
    { "FONT_ATTRS", "FONT_ATTRS", 0x1a, "Ljava.util.Set;", &OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS, "Ljava/util/Set<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;>;", .constantValue.asLong = 0 },
    { "sbuffer_", NULL, 0x2, "Ljava.lang.StringBuffer;", NULL, NULL, .constantValue.asLong = 0 },
    { "runs_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/engine/util/JRStyledText$Run;>;", .constantValue.asLong = 0 },
    { "attributedString_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.java.awt.text.AttributedString;", NULL, NULL, .constantValue.asLong = 0 },
    { "awtAttributedString_", NULL, 0x2, "Lorg.oss.pdfreporter.uses.java.awt.text.AttributedString;", NULL, NULL, .constantValue.asLong = 0 },
    { "globalAttributes_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "locale_", NULL, 0x2, "Ljava.util.Locale;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.engine.util.JRStyledText$Run;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilJRStyledText = { 2, "JRStyledText", "org.oss.pdfreporter.engine.util", NULL, 0x1, 18, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_OrgOssPdfreporterEngineUtilJRStyledText;
}

@end

void OrgOssPdfreporterEngineUtilJRStyledText_init(OrgOssPdfreporterEngineUtilJRStyledText *self) {
  OrgOssPdfreporterEngineUtilJRStyledText_initWithJavaUtilLocale_(self, nil);
}

OrgOssPdfreporterEngineUtilJRStyledText *new_OrgOssPdfreporterEngineUtilJRStyledText_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilJRStyledText, init)
}

OrgOssPdfreporterEngineUtilJRStyledText *create_OrgOssPdfreporterEngineUtilJRStyledText_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilJRStyledText, init)
}

void OrgOssPdfreporterEngineUtilJRStyledText_initWithJavaUtilLocale_(OrgOssPdfreporterEngineUtilJRStyledText *self, JavaUtilLocale *locale) {
  NSObject_init(self);
  self->sbuffer_ = new_JavaLangStringBuffer_init();
  self->runs_ = new_JavaUtilArrayList_init();
  self->locale_ = locale;
}

OrgOssPdfreporterEngineUtilJRStyledText *new_OrgOssPdfreporterEngineUtilJRStyledText_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilJRStyledText, initWithJavaUtilLocale_, locale)
}

OrgOssPdfreporterEngineUtilJRStyledText *create_OrgOssPdfreporterEngineUtilJRStyledText_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilJRStyledText, initWithJavaUtilLocale_, locale)
}

OrgOssPdfreporterFontIFont_FontStyle *OrgOssPdfreporterEngineUtilJRStyledText_getFontStyleFromAttributesWithJavaUtilMap_(OrgOssPdfreporterEngineUtilJRStyledText *self, id<JavaUtilMap> attrs) {
  jboolean bold = [((JavaLangFloat *) nil_chk(JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, WEIGHT_BOLD))) isEqual:[((id<JavaUtilMap>) nil_chk(attrs)) getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, WEIGHT)]];
  jboolean italic = [((JavaLangFloat *) nil_chk(JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, POSTURE_OBLIQUE))) isEqual:[attrs getWithId:JreLoadStatic(OrgOssPdfreporterFontTextTextAttribute, POSTURE)]];
  return bold && italic ? JreLoadEnum(OrgOssPdfreporterFontIFont_FontStyle, BOLD_OBLIQUE) : bold ? JreLoadEnum(OrgOssPdfreporterFontIFont_FontStyle, BOLD) : italic ? JreLoadEnum(OrgOssPdfreporterFontIFont_FontStyle, OBLIQUE) : JreLoadEnum(OrgOssPdfreporterFontIFont_FontStyle, PLAIN);
}

id<JavaUtilMap> OrgOssPdfreporterEngineUtilJRStyledText_cloneAttributesMapWithJavaUtilMap_(id<JavaUtilMap> attributes) {
  OrgOssPdfreporterEngineUtilJRStyledText_initialize();
  return attributes == nil ? nil : new_JavaUtilHashMap_initWithJavaUtilMap_(attributes);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilJRStyledText)

@implementation OrgOssPdfreporterEngineUtilJRStyledText_Run

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)attributes
                            withInt:(jint)startIndex
                            withInt:(jint)endIndex {
  OrgOssPdfreporterEngineUtilJRStyledText_Run_initWithJavaUtilMap_withInt_withInt_(self, attributes, startIndex, endIndex);
  return self;
}

- (id)clone {
  return [self cloneRun];
}

- (OrgOssPdfreporterEngineUtilJRStyledText_Run *)cloneRun {
  @try {
    OrgOssPdfreporterEngineUtilJRStyledText_Run *clone = (OrgOssPdfreporterEngineUtilJRStyledText_Run *) cast_chk([super clone], [OrgOssPdfreporterEngineUtilJRStyledText_Run class]);
    ((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(clone))->attributes_ = OrgOssPdfreporterEngineUtilJRStyledText_cloneAttributesMapWithJavaUtilMap_(attributes_);
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilMap:withInt:withInt:", "Run", NULL, 0x1, NULL, "(Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;II)V" },
    { "clone", NULL, "Ljava.lang.Object;", 0x4, NULL, NULL },
    { "cloneRun", NULL, "Lorg.oss.pdfreporter.engine.util.JRStyledText$Run;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "attributes_", NULL, 0x1, "Ljava.util.Map;", NULL, "Ljava/util/Map<Lorg/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator$Attribute;Ljava/lang/Object;>;", .constantValue.asLong = 0 },
    { "startIndex_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "endIndex_", NULL, 0x1, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilJRStyledText_Run = { 2, "Run", "org.oss.pdfreporter.engine.util", "JRStyledText", 0x9, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineUtilJRStyledText_Run;
}

@end

void OrgOssPdfreporterEngineUtilJRStyledText_Run_initWithJavaUtilMap_withInt_withInt_(OrgOssPdfreporterEngineUtilJRStyledText_Run *self, id<JavaUtilMap> attributes, jint startIndex, jint endIndex) {
  NSObject_init(self);
  self->attributes_ = attributes;
  self->startIndex_ = startIndex;
  self->endIndex_ = endIndex;
}

OrgOssPdfreporterEngineUtilJRStyledText_Run *new_OrgOssPdfreporterEngineUtilJRStyledText_Run_initWithJavaUtilMap_withInt_withInt_(id<JavaUtilMap> attributes, jint startIndex, jint endIndex) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilJRStyledText_Run, initWithJavaUtilMap_withInt_withInt_, attributes, startIndex, endIndex)
}

OrgOssPdfreporterEngineUtilJRStyledText_Run *create_OrgOssPdfreporterEngineUtilJRStyledText_Run_initWithJavaUtilMap_withInt_withInt_(id<JavaUtilMap> attributes, jint startIndex, jint endIndex) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilJRStyledText_Run, initWithJavaUtilMap_withInt_withInt_, attributes, startIndex, endIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilJRStyledText_Run)
