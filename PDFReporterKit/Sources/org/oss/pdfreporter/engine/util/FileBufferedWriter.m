//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/util/FileBufferedWriter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedWriter.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/Writer.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/util/FileBufferedOutputStream.h"
#include "org/oss/pdfreporter/engine/util/FileBufferedWriter.h"

@interface OrgOssPdfreporterEngineUtilFileBufferedWriter () {
 @public
  OrgOssPdfreporterEngineUtilFileBufferedOutputStream *fbos_;
  JavaIoWriter *osw_;
  jboolean isEmpty_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineUtilFileBufferedWriter, fbos_, OrgOssPdfreporterEngineUtilFileBufferedOutputStream *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineUtilFileBufferedWriter, osw_, JavaIoWriter *)

@implementation OrgOssPdfreporterEngineUtilFileBufferedWriter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineUtilFileBufferedWriter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isEmpty {
  return isEmpty_;
}

- (void)writeDataWithJavaIoWriter:(JavaIoWriter *)writer {
  JavaIoReader *reader = nil;
  @try {
    [self close];
    reader = new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_([((OrgOssPdfreporterEngineUtilFileBufferedOutputStream *) nil_chk(fbos_)) getDataInputStream], @"UTF-8");
    IOSCharArray *chars = [IOSCharArray newArrayWithLength:10000];
    jint ln = 0;
    while ((ln = [reader readWithCharArray:chars]) > 0) {
      [((JavaIoWriter *) nil_chk(writer)) writeWithCharArray:chars withInt:0 withInt:ln];
    }
    [((JavaIoWriter *) nil_chk(writer)) flush];
  }
  @catch (JavaIoIOException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
  @finally {
    if (reader != nil) {
      @try {
        [reader close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
}

- (void)dispose {
  [((OrgOssPdfreporterEngineUtilFileBufferedOutputStream *) nil_chk(fbos_)) dispose];
}

- (void)close {
  [((JavaIoWriter *) nil_chk(osw_)) close];
}

- (void)flush {
  [((JavaIoWriter *) nil_chk(osw_)) flush];
}

- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(jint)off
                   withInt:(jint)len {
  if (len > 0) {
    isEmpty_ = false;
  }
  [((JavaIoWriter *) nil_chk(osw_)) writeWithCharArray:cbuf withInt:off withInt:len];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "FileBufferedWriter", NULL, 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "writeDataWithJavaIoWriter:", "writeData", "V", 0x1, NULL, NULL },
    { "dispose", NULL, "V", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;", NULL },
    { "writeWithCharArray:withInt:withInt:", "write", "V", 0x1, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fbos_", NULL, 0x2, "Lorg.oss.pdfreporter.engine.util.FileBufferedOutputStream;", NULL, NULL, .constantValue.asLong = 0 },
    { "osw_", NULL, 0x2, "Ljava.io.Writer;", NULL, NULL, .constantValue.asLong = 0 },
    { "isEmpty_", NULL, 0x2, "Z", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilFileBufferedWriter = { 2, "FileBufferedWriter", "org.oss.pdfreporter.engine.util", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineUtilFileBufferedWriter;
}

@end

void OrgOssPdfreporterEngineUtilFileBufferedWriter_init(OrgOssPdfreporterEngineUtilFileBufferedWriter *self) {
  JavaIoWriter_init(self);
  self->isEmpty_ = true;
  self->fbos_ = new_OrgOssPdfreporterEngineUtilFileBufferedOutputStream_init();
  @try {
    self->osw_ = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(self->fbos_, @"UTF-8"));
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
}

OrgOssPdfreporterEngineUtilFileBufferedWriter *new_OrgOssPdfreporterEngineUtilFileBufferedWriter_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilFileBufferedWriter, init)
}

OrgOssPdfreporterEngineUtilFileBufferedWriter *create_OrgOssPdfreporterEngineUtilFileBufferedWriter_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilFileBufferedWriter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilFileBufferedWriter)
