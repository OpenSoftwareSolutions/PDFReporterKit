//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRStringUtil.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/StringTokenizer.h"
#include "org/oss/pdfreporter/engine/util/JRStringUtil.h"

@interface OrgOssPdfreporterEngineUtilJRStringUtil ()

+ (jint)appendTextWithNSString:(NSString *)text
      withJavaLangStringBuffer:(JavaLangStringBuffer *)ret
                       withInt:(jint)current
                       withInt:(jint)old;

+ (jboolean)isValidJavaIdentifierWithNSString:(NSString *)literal;

- (instancetype)init;

@end

__attribute__((unused)) static jint OrgOssPdfreporterEngineUtilJRStringUtil_appendTextWithNSString_withJavaLangStringBuffer_withInt_withInt_(NSString *text, JavaLangStringBuffer *ret, jint current, jint old);

__attribute__((unused)) static jboolean OrgOssPdfreporterEngineUtilJRStringUtil_isValidJavaIdentifierWithNSString_(NSString *literal);

__attribute__((unused)) static void OrgOssPdfreporterEngineUtilJRStringUtil_init(OrgOssPdfreporterEngineUtilJRStringUtil *self);

__attribute__((unused)) static OrgOssPdfreporterEngineUtilJRStringUtil *new_OrgOssPdfreporterEngineUtilJRStringUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterEngineUtilJRStringUtil *create_OrgOssPdfreporterEngineUtilJRStringUtil_init();

NSString *OrgOssPdfreporterEngineUtilJRStringUtil_JAVA_IDENTIFIER_PREFIX = @"j";

@implementation OrgOssPdfreporterEngineUtilJRStringUtil

+ (NSString *)JAVA_IDENTIFIER_PREFIX {
  return OrgOssPdfreporterEngineUtilJRStringUtil_JAVA_IDENTIFIER_PREFIX;
}

+ (NSString *)replaceCRwithLFWithNSString:(NSString *)text {
  return OrgOssPdfreporterEngineUtilJRStringUtil_replaceCRwithLFWithNSString_(text);
}

+ (NSString *)xmlEncodeWithNSString:(NSString *)text {
  return OrgOssPdfreporterEngineUtilJRStringUtil_xmlEncodeWithNSString_(text);
}

+ (NSString *)xmlEncodeWithNSString:(NSString *)text
                       withNSString:(NSString *)invalidCharReplacement {
  return OrgOssPdfreporterEngineUtilJRStringUtil_xmlEncodeWithNSString_withNSString_(text, invalidCharReplacement);
}

+ (jint)appendTextWithNSString:(NSString *)text
      withJavaLangStringBuffer:(JavaLangStringBuffer *)ret
                       withInt:(jint)current
                       withInt:(jint)old {
  return OrgOssPdfreporterEngineUtilJRStringUtil_appendTextWithNSString_withJavaLangStringBuffer_withInt_withInt_(text, ret, current, old);
}

+ (NSString *)htmlEncodeWithNSString:(NSString *)text {
  return OrgOssPdfreporterEngineUtilJRStringUtil_htmlEncodeWithNSString_(text);
}

+ (NSString *)getJavaIdentifierWithNSString:(NSString *)name {
  return OrgOssPdfreporterEngineUtilJRStringUtil_getJavaIdentifierWithNSString_(name);
}

+ (jboolean)isValidJavaIdentifierWithNSString:(NSString *)literal {
  return OrgOssPdfreporterEngineUtilJRStringUtil_isValidJavaIdentifierWithNSString_(literal);
}

+ (NSString *)escapeJavaStringLiteralWithNSString:(NSString *)text {
  return OrgOssPdfreporterEngineUtilJRStringUtil_escapeJavaStringLiteralWithNSString_(text);
}

+ (NSString *)escapeJavaScriptWithNSString:(NSString *)input {
  return OrgOssPdfreporterEngineUtilJRStringUtil_escapeJavaScriptWithNSString_(input);
}

+ (id<JavaUtilList>)getTabIndexesWithNSString:(NSString *)text {
  return OrgOssPdfreporterEngineUtilJRStringUtil_getTabIndexesWithNSString_(text);
}

+ (NSString *)getStringWithId:(id)value {
  return OrgOssPdfreporterEngineUtilJRStringUtil_getStringWithId_(value);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineUtilJRStringUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "replaceCRwithLFWithNSString:", "replaceCRwithLF", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "xmlEncodeWithNSString:", "xmlEncode", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "xmlEncodeWithNSString:withNSString:", "xmlEncode", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "appendTextWithNSString:withJavaLangStringBuffer:withInt:withInt:", "appendText", "I", 0xa, NULL, NULL },
    { "htmlEncodeWithNSString:", "htmlEncode", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getJavaIdentifierWithNSString:", "getJavaIdentifier", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "isValidJavaIdentifierWithNSString:", "isValidJavaIdentifier", "Z", 0xa, NULL, NULL },
    { "escapeJavaStringLiteralWithNSString:", "escapeJavaStringLiteral", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "escapeJavaScriptWithNSString:", "escapeJavaScript", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getTabIndexesWithNSString:", "getTabIndexes", "Ljava.util.List;", 0x9, NULL, "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/Integer;>;" },
    { "getStringWithId:", "getString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "init", "JRStringUtil", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "JAVA_IDENTIFIER_PREFIX", "JAVA_IDENTIFIER_PREFIX", 0x1c, "Ljava.lang.String;", &OrgOssPdfreporterEngineUtilJRStringUtil_JAVA_IDENTIFIER_PREFIX, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilJRStringUtil = { 2, "JRStringUtil", "org.oss.pdfreporter.engine.util", NULL, 0x11, 12, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineUtilJRStringUtil;
}

@end

NSString *OrgOssPdfreporterEngineUtilJRStringUtil_replaceCRwithLFWithNSString_(NSString *text) {
  OrgOssPdfreporterEngineUtilJRStringUtil_initialize();
  if (text != nil) {
    jint length = ((jint) [text length]);
    IOSCharArray *chars = [text toCharArray];
    jint r = 0;
    jboolean dirty = false;
    for (jint i = 0; i < length; ++i) {
      jchar ch = IOSCharArray_Get(nil_chk(chars), i);
      if (ch == 0x000d) {
        dirty = true;
        if (i + 1 < length && IOSCharArray_Get(chars, i + 1) == 0x000a) {
          r++;
        }
        else {
          *IOSCharArray_GetRef(chars, i - r) = 0x000a;
        }
      }
      else {
        *IOSCharArray_GetRef(chars, i - r) = ch;
      }
    }
    return dirty ? [NSString stringWithCharacters:chars offset:0 length:length - r] : text;
  }
  return nil;
}

NSString *OrgOssPdfreporterEngineUtilJRStringUtil_xmlEncodeWithNSString_(NSString *text) {
  OrgOssPdfreporterEngineUtilJRStringUtil_initialize();
  return OrgOssPdfreporterEngineUtilJRStringUtil_xmlEncodeWithNSString_withNSString_(text, nil);
}

NSString *OrgOssPdfreporterEngineUtilJRStringUtil_xmlEncodeWithNSString_withNSString_(NSString *text, NSString *invalidCharReplacement) {
  OrgOssPdfreporterEngineUtilJRStringUtil_initialize();
  if (text == nil || ((jint) [text length]) == 0) {
    return text;
  }
  jint length = ((jint) [text length]);
  JavaLangStringBuffer *ret = new_JavaLangStringBuffer_initWithInt_(length * 12 / 10);
  jint last = 0;
  for (jint i = 0; i < length; i++) {
    jchar c = [text charAtWithInt:i];
    if (JavaLangCharacter_isISOControlWithChar_(c) && c != 0x0009 && c != 0x000d && c != 0x000a) {
      last = OrgOssPdfreporterEngineUtilJRStringUtil_appendTextWithNSString_withJavaLangStringBuffer_withInt_withInt_(text, ret, i, last);
      if (invalidCharReplacement == nil) {
        (void) [ret appendWithChar:c];
      }
      else if ([@"" isEqual:invalidCharReplacement]) {
        continue;
      }
      else {
        (void) [ret appendWithNSString:invalidCharReplacement];
      }
    }
    else {
      switch (c) {
        case '&':
        last = OrgOssPdfreporterEngineUtilJRStringUtil_appendTextWithNSString_withJavaLangStringBuffer_withInt_withInt_(text, ret, i, last);
        (void) [ret appendWithNSString:@"&amp;"];
        break;
        case '>':
        last = OrgOssPdfreporterEngineUtilJRStringUtil_appendTextWithNSString_withJavaLangStringBuffer_withInt_withInt_(text, ret, i, last);
        (void) [ret appendWithNSString:@"&gt;"];
        break;
        case '<':
        last = OrgOssPdfreporterEngineUtilJRStringUtil_appendTextWithNSString_withJavaLangStringBuffer_withInt_withInt_(text, ret, i, last);
        (void) [ret appendWithNSString:@"&lt;"];
        break;
        case '"':
        last = OrgOssPdfreporterEngineUtilJRStringUtil_appendTextWithNSString_withJavaLangStringBuffer_withInt_withInt_(text, ret, i, last);
        (void) [ret appendWithNSString:@"&quot;"];
        break;
        case '\'':
        last = OrgOssPdfreporterEngineUtilJRStringUtil_appendTextWithNSString_withJavaLangStringBuffer_withInt_withInt_(text, ret, i, last);
        (void) [ret appendWithNSString:@"&apos;"];
        break;
        default:
        break;
      }
    }
  }
  OrgOssPdfreporterEngineUtilJRStringUtil_appendTextWithNSString_withJavaLangStringBuffer_withInt_withInt_(text, ret, length, last);
  return [ret description];
}

jint OrgOssPdfreporterEngineUtilJRStringUtil_appendTextWithNSString_withJavaLangStringBuffer_withInt_withInt_(NSString *text, JavaLangStringBuffer *ret, jint current, jint old) {
  OrgOssPdfreporterEngineUtilJRStringUtil_initialize();
  if (old < current) {
    (void) [((JavaLangStringBuffer *) nil_chk(ret)) appendWithNSString:[((NSString *) nil_chk(text)) substring:old endIndex:current]];
  }
  return current + 1;
}

NSString *OrgOssPdfreporterEngineUtilJRStringUtil_htmlEncodeWithNSString_(NSString *text) {
  OrgOssPdfreporterEngineUtilJRStringUtil_initialize();
  if (text == nil || ((jint) [text length]) == 0) {
    return text;
  }
  jint length = ((jint) [text length]);
  JavaLangStringBuffer *ret = new_JavaLangStringBuffer_initWithInt_(length * 12 / 10);
  jboolean isEncodeSpace = true;
  jint last = 0;
  for (jint i = 0; i < length; i++) {
    jchar c = [text charAtWithInt:i];
    switch (c) {
      case ' ':
      if (isEncodeSpace) {
        if (last < i) {
          (void) [ret appendWithNSString:[text substring:last endIndex:i]];
        }
        last = i + 1;
        (void) [ret appendWithNSString:@"&nbsp;"];
        isEncodeSpace = false;
      }
      else {
        isEncodeSpace = true;
      }
      break;
      case '&':
      if (last < i) {
        (void) [ret appendWithNSString:[text substring:last endIndex:i]];
      }
      last = i + 1;
      (void) [ret appendWithNSString:@"&amp;"];
      isEncodeSpace = false;
      break;
      case '>':
      if (last < i) {
        (void) [ret appendWithNSString:[text substring:last endIndex:i]];
      }
      last = i + 1;
      (void) [ret appendWithNSString:@"&gt;"];
      isEncodeSpace = false;
      break;
      case '<':
      if (last < i) {
        (void) [ret appendWithNSString:[text substring:last endIndex:i]];
      }
      last = i + 1;
      (void) [ret appendWithNSString:@"&lt;"];
      isEncodeSpace = false;
      break;
      case '"':
      if (last < i) {
        (void) [ret appendWithNSString:[text substring:last endIndex:i]];
      }
      last = i + 1;
      (void) [ret appendWithNSString:@"&quot;"];
      isEncodeSpace = false;
      break;
      case 0x000a:
      if (last < i) {
        (void) [ret appendWithNSString:[text substring:last endIndex:i]];
      }
      last = i + 1;
      (void) [ret appendWithNSString:@"<br/>"];
      isEncodeSpace = false;
      break;
      default:
      isEncodeSpace = false;
      break;
    }
  }
  if (last < length) {
    (void) [ret appendWithNSString:[text substring:last]];
  }
  return [ret description];
}

NSString *OrgOssPdfreporterEngineUtilJRStringUtil_getJavaIdentifierWithNSString_(NSString *name) {
  OrgOssPdfreporterEngineUtilJRStringUtil_initialize();
  if (OrgOssPdfreporterEngineUtilJRStringUtil_isValidJavaIdentifierWithNSString_(name)) {
    return name;
  }
  JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_initWithInt_(((jint) [((NSString *) nil_chk(name)) length]) + 5);
  IOSCharArray *literalChars = [IOSCharArray newArrayWithLength:((jint) [name length])];
  [name getChars:0 sourceEnd:literalChars->size_ destination:literalChars destinationBegin:0];
  for (jint i = 0; i < literalChars->size_; i++) {
    if (i == 0 && !JavaLangCharacter_isJavaIdentifierStartWithChar_(IOSCharArray_Get(literalChars, i))) {
      (void) [buffer appendWithNSString:OrgOssPdfreporterEngineUtilJRStringUtil_JAVA_IDENTIFIER_PREFIX];
      (void) [buffer appendWithInt:(jint) IOSCharArray_Get(literalChars, i)];
    }
    else if (i != 0 && !JavaLangCharacter_isJavaIdentifierPartWithChar_(IOSCharArray_Get(literalChars, i))) {
      (void) [buffer appendWithInt:(jint) IOSCharArray_Get(literalChars, i)];
    }
    else {
      (void) [buffer appendWithChar:IOSCharArray_Get(literalChars, i)];
    }
  }
  return [buffer description];
}

jboolean OrgOssPdfreporterEngineUtilJRStringUtil_isValidJavaIdentifierWithNSString_(NSString *literal) {
  OrgOssPdfreporterEngineUtilJRStringUtil_initialize();
  jboolean result = true;
  IOSCharArray *literalChars = [IOSCharArray newArrayWithLength:((jint) [((NSString *) nil_chk(literal)) length])];
  [literal getChars:0 sourceEnd:literalChars->size_ destination:literalChars destinationBegin:0];
  for (jint i = 0; i < literalChars->size_; i++) {
    if (i == 0 && !JavaLangCharacter_isJavaIdentifierStartWithChar_(IOSCharArray_Get(literalChars, i))) {
      result = false;
      break;
    }
    if (i != 0 && !JavaLangCharacter_isJavaIdentifierPartWithChar_(IOSCharArray_Get(literalChars, i))) {
      result = false;
      break;
    }
  }
  return result;
}

NSString *OrgOssPdfreporterEngineUtilJRStringUtil_escapeJavaStringLiteralWithNSString_(NSString *text) {
  OrgOssPdfreporterEngineUtilJRStringUtil_initialize();
  if (text == nil) {
    return text;
  }
  JavaLangStringBuffer *sbuffer = new_JavaLangStringBuffer_init();
  JavaUtilStringTokenizer *tkzer = new_JavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(text, @"\\\"\n\x0d\t", true);
  while ([tkzer hasMoreTokens]) {
    NSString *token = [tkzer nextToken];
    if ([@"\\" isEqual:token]) {
      (void) [sbuffer appendWithNSString:@"\\\\"];
    }
    else if ([@"\"" isEqual:token]) {
      (void) [sbuffer appendWithNSString:@"\\\""];
    }
    else if ([@"\n" isEqual:token]) {
      (void) [sbuffer appendWithNSString:@"\\n"];
    }
    else if ([@"\x0d" isEqual:token]) {
      (void) [sbuffer appendWithNSString:@"\\r"];
    }
    else if ([@"\t" isEqual:token]) {
      (void) [sbuffer appendWithNSString:@"\\t"];
    }
    else {
      (void) [sbuffer appendWithNSString:token];
    }
  }
  return [sbuffer description];
}

NSString *OrgOssPdfreporterEngineUtilJRStringUtil_escapeJavaScriptWithNSString_(NSString *input) {
  OrgOssPdfreporterEngineUtilJRStringUtil_initialize();
  if (input == nil) {
    return input;
  }
  JavaLangStringBuilder *filtered = new_JavaLangStringBuilder_initWithInt_(((jint) [input length]));
  jchar prevChar = 0x0000;
  jchar c;
  for (jint i = 0; i < ((jint) [input length]); i++) {
    c = [input charAtWithInt:i];
    if (c == '"') {
      (void) [filtered appendWithNSString:@"\\\""];
    }
    else if (c == '\'') {
      (void) [filtered appendWithNSString:@"\\'"];
    }
    else if (c == '\\') {
      (void) [filtered appendWithNSString:@"\\\\"];
    }
    else if (c == '/') {
      (void) [filtered appendWithNSString:@"\\/"];
    }
    else if (c == 0x0009) {
      (void) [filtered appendWithNSString:@"\\t"];
    }
    else if (c == 0x000a) {
      if (prevChar != 0x000d) {
        (void) [filtered appendWithNSString:@"\\n"];
      }
    }
    else if (c == 0x000d) {
      (void) [filtered appendWithNSString:@"\\n"];
    }
    else if (c == 0x000c) {
      (void) [filtered appendWithNSString:@"\\f"];
    }
    else {
      (void) [filtered appendWithChar:c];
    }
    prevChar = c;
  }
  return [filtered description];
}

id<JavaUtilList> OrgOssPdfreporterEngineUtilJRStringUtil_getTabIndexesWithNSString_(NSString *text) {
  OrgOssPdfreporterEngineUtilJRStringUtil_initialize();
  id<JavaUtilList> tabIndexes = nil;
  if (text != nil) {
    tabIndexes = new_JavaUtilArrayList_init();
    for (jint i = 0; i < ((jint) [text length]); i++) {
      if ([text charAtWithInt:i] == 0x0009) {
        [tabIndexes addWithId:JavaLangInteger_valueOfWithInt_(i)];
      }
    }
  }
  return tabIndexes;
}

NSString *OrgOssPdfreporterEngineUtilJRStringUtil_getStringWithId_(id value) {
  OrgOssPdfreporterEngineUtilJRStringUtil_initialize();
  return value == nil ? nil : [value description];
}

void OrgOssPdfreporterEngineUtilJRStringUtil_init(OrgOssPdfreporterEngineUtilJRStringUtil *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineUtilJRStringUtil *new_OrgOssPdfreporterEngineUtilJRStringUtil_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilJRStringUtil, init)
}

OrgOssPdfreporterEngineUtilJRStringUtil *create_OrgOssPdfreporterEngineUtilJRStringUtil_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilJRStringUtil, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilJRStringUtil)
