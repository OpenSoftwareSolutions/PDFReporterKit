//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRBoxUtil.java
//

#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "org/oss/pdfreporter/engine/JRBox.h"
#include "org/oss/pdfreporter/engine/JRBoxContainer.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/base/JRBoxPen.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/util/JRBoxUtil.h"
#include "org/oss/pdfreporter/engine/util/JRPenUtil.h"
#include "org/oss/pdfreporter/geometry/IColor.h"

@interface OrgOssPdfreporterEngineUtilJRBoxUtil ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgOssPdfreporterEngineUtilJRBoxUtil_init(OrgOssPdfreporterEngineUtilJRBoxUtil *self);

__attribute__((unused)) static OrgOssPdfreporterEngineUtilJRBoxUtil *new_OrgOssPdfreporterEngineUtilJRBoxUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterEngineUtilJRBoxUtil *create_OrgOssPdfreporterEngineUtilJRBoxUtil_init();

@implementation OrgOssPdfreporterEngineUtilJRBoxUtil

+ (id<OrgOssPdfreporterEngineJRLineBox>)copyBordersNoPaddingWithOrgOssPdfreporterEngineJRLineBox:(id<OrgOssPdfreporterEngineJRLineBox>)box
                                                                                     withBoolean:(jboolean)keepLeft
                                                                                     withBoolean:(jboolean)keepRight
                                                                                     withBoolean:(jboolean)keepTop
                                                                                     withBoolean:(jboolean)keepBottom
                                                            withOrgOssPdfreporterEngineJRLineBox:(id<OrgOssPdfreporterEngineJRLineBox>)complementaryBox {
  return OrgOssPdfreporterEngineUtilJRBoxUtil_copyBordersNoPaddingWithOrgOssPdfreporterEngineJRLineBox_withBoolean_withBoolean_withBoolean_withBoolean_withOrgOssPdfreporterEngineJRLineBox_(box, keepLeft, keepRight, keepTop, keepBottom, complementaryBox);
}

+ (void)resetWithOrgOssPdfreporterEngineJRLineBox:(id<OrgOssPdfreporterEngineJRLineBox>)box
                                      withBoolean:(jboolean)resetLeft
                                      withBoolean:(jboolean)resetRight
                                      withBoolean:(jboolean)resetTop
                                      withBoolean:(jboolean)resetBottom {
  OrgOssPdfreporterEngineUtilJRBoxUtil_resetWithOrgOssPdfreporterEngineJRLineBox_withBoolean_withBoolean_withBoolean_withBoolean_(box, resetLeft, resetRight, resetTop, resetBottom);
}

+ (void)setToBoxWithJavaLangByte:(JavaLangByte *)border
                withJavaLangByte:(JavaLangByte *)topBorder
                withJavaLangByte:(JavaLangByte *)leftBorder
                withJavaLangByte:(JavaLangByte *)bottomBorder
                withJavaLangByte:(JavaLangByte *)rightBorder
withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)borderColor
withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)topBorderColor
withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)leftBorderColor
withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)bottomBorderColor
withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)rightBorderColor
             withJavaLangInteger:(JavaLangInteger *)padding
             withJavaLangInteger:(JavaLangInteger *)topPadding
             withJavaLangInteger:(JavaLangInteger *)leftPadding
             withJavaLangInteger:(JavaLangInteger *)bottomPadding
             withJavaLangInteger:(JavaLangInteger *)rightPadding
withOrgOssPdfreporterEngineJRLineBox:(id<OrgOssPdfreporterEngineJRLineBox>)box {
  OrgOssPdfreporterEngineUtilJRBoxUtil_setToBoxWithJavaLangByte_withJavaLangByte_withJavaLangByte_withJavaLangByte_withJavaLangByte_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withJavaLangInteger_withJavaLangInteger_withJavaLangInteger_withJavaLangInteger_withJavaLangInteger_withOrgOssPdfreporterEngineJRLineBox_(border, topBorder, leftBorder, bottomBorder, rightBorder, borderColor, topBorderColor, leftBorderColor, bottomBorderColor, rightBorderColor, padding, topPadding, leftPadding, bottomPadding, rightPadding, box);
}

+ (void)rotateWithOrgOssPdfreporterEngineJRLineBox:(id<OrgOssPdfreporterEngineJRLineBox>)box
       withOrgOssPdfreporterEngineTypeRotationEnum:(OrgOssPdfreporterEngineTypeRotationEnum *)rotation {
  OrgOssPdfreporterEngineUtilJRBoxUtil_rotateWithOrgOssPdfreporterEngineJRLineBox_withOrgOssPdfreporterEngineTypeRotationEnum_(box, rotation);
}

+ (void)setBoxToLineBoxWithOrgOssPdfreporterEngineJRBox:(id<OrgOssPdfreporterEngineJRBox>)box
                   withOrgOssPdfreporterEngineJRLineBox:(id<OrgOssPdfreporterEngineJRLineBox>)lineBox {
  OrgOssPdfreporterEngineUtilJRBoxUtil_setBoxToLineBoxWithOrgOssPdfreporterEngineJRBox_withOrgOssPdfreporterEngineJRLineBox_(box, lineBox);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineUtilJRBoxUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "copyBordersNoPaddingWithOrgOssPdfreporterEngineJRLineBox:withBoolean:withBoolean:withBoolean:withBoolean:withOrgOssPdfreporterEngineJRLineBox:", "copyBordersNoPadding", "Lorg.oss.pdfreporter.engine.JRLineBox;", 0x9, NULL, NULL },
    { "resetWithOrgOssPdfreporterEngineJRLineBox:withBoolean:withBoolean:withBoolean:withBoolean:", "reset", "V", 0x9, NULL, NULL },
    { "setToBoxWithJavaLangByte:withJavaLangByte:withJavaLangByte:withJavaLangByte:withJavaLangByte:withOrgOssPdfreporterGeometryIColor:withOrgOssPdfreporterGeometryIColor:withOrgOssPdfreporterGeometryIColor:withOrgOssPdfreporterGeometryIColor:withOrgOssPdfreporterGeometryIColor:withJavaLangInteger:withJavaLangInteger:withJavaLangInteger:withJavaLangInteger:withJavaLangInteger:withOrgOssPdfreporterEngineJRLineBox:", "setToBox", "V", 0x9, NULL, NULL },
    { "rotateWithOrgOssPdfreporterEngineJRLineBox:withOrgOssPdfreporterEngineTypeRotationEnum:", "rotate", "V", 0x9, NULL, NULL },
    { "setBoxToLineBoxWithOrgOssPdfreporterEngineJRBox:withOrgOssPdfreporterEngineJRLineBox:", "setBoxToLineBox", "V", 0x9, NULL, NULL },
    { "init", "JRBoxUtil", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilJRBoxUtil = { 2, "JRBoxUtil", "org.oss.pdfreporter.engine.util", NULL, 0x11, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineUtilJRBoxUtil;
}

@end

id<OrgOssPdfreporterEngineJRLineBox> OrgOssPdfreporterEngineUtilJRBoxUtil_copyBordersNoPaddingWithOrgOssPdfreporterEngineJRLineBox_withBoolean_withBoolean_withBoolean_withBoolean_withOrgOssPdfreporterEngineJRLineBox_(id<OrgOssPdfreporterEngineJRLineBox> box, jboolean keepLeft, jboolean keepRight, jboolean keepTop, jboolean keepBottom, id<OrgOssPdfreporterEngineJRLineBox> complementaryBox) {
  OrgOssPdfreporterEngineUtilJRBoxUtil_initialize();
  id<OrgOssPdfreporterEngineJRLineBox> clone = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) cloneWithOrgOssPdfreporterEngineJRBoxContainer:[box getBoxContainer]];
  [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(clone)) setTopPaddingWithInt:0];
  [clone setLeftPaddingWithInt:0];
  [clone setBottomPaddingWithInt:0];
  [clone setRightPaddingWithInt:0];
  if (!keepLeft || [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([box getLeftPen])) getLineWidth])) floatValue] <= 0.0f) {
    if (complementaryBox != nil) {
      [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([clone getLeftPen])) setLineWidthWithJavaLangFloat:[((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([complementaryBox getLeftPen])) getLineWidth]];
      [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([clone getLeftPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:[((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([complementaryBox getLeftPen])) getLineColor]];
    }
    else {
      [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([clone getLeftPen])) setLineWidthWithFloat:0];
    }
  }
  if (!keepRight || [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([box getRightPen])) getLineWidth])) floatValue] <= 0.0f) {
    if (complementaryBox != nil) {
      [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([clone getRightPen])) setLineWidthWithJavaLangFloat:[((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([complementaryBox getRightPen])) getLineWidth]];
      [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([clone getRightPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:[((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([complementaryBox getRightPen])) getLineColor]];
    }
    else {
      [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([clone getRightPen])) setLineWidthWithFloat:0];
    }
  }
  if (!keepTop || [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([box getTopPen])) getLineWidth])) floatValue] <= 0.0f) {
    if (complementaryBox != nil) {
      [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([clone getTopPen])) setLineWidthWithJavaLangFloat:[((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([complementaryBox getTopPen])) getLineWidth]];
      [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([clone getTopPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:[((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([complementaryBox getTopPen])) getLineColor]];
    }
    else {
      [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([clone getTopPen])) setLineWidthWithFloat:0];
    }
  }
  if (!keepBottom || [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([box getBottomPen])) getLineWidth])) floatValue] <= 0.0f) {
    if (complementaryBox != nil) {
      [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([clone getBottomPen])) setLineWidthWithJavaLangFloat:[((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([complementaryBox getBottomPen])) getLineWidth]];
      [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([clone getBottomPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:[((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([complementaryBox getBottomPen])) getLineColor]];
    }
    else {
      [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([clone getBottomPen])) setLineWidthWithFloat:0];
    }
  }
  return clone;
}

void OrgOssPdfreporterEngineUtilJRBoxUtil_resetWithOrgOssPdfreporterEngineJRLineBox_withBoolean_withBoolean_withBoolean_withBoolean_(id<OrgOssPdfreporterEngineJRLineBox> box, jboolean resetLeft, jboolean resetRight, jboolean resetTop, jboolean resetBottom) {
  OrgOssPdfreporterEngineUtilJRBoxUtil_initialize();
  if (resetLeft) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getLeftPen])) setLineWidthWithFloat:0.0f];
  }
  if (resetRight) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getRightPen])) setLineWidthWithFloat:0.0f];
  }
  if (resetTop) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getTopPen])) setLineWidthWithFloat:0.0f];
  }
  if (resetBottom) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getBottomPen])) setLineWidthWithFloat:0.0f];
  }
}

void OrgOssPdfreporterEngineUtilJRBoxUtil_setToBoxWithJavaLangByte_withJavaLangByte_withJavaLangByte_withJavaLangByte_withJavaLangByte_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withJavaLangInteger_withJavaLangInteger_withJavaLangInteger_withJavaLangInteger_withJavaLangInteger_withOrgOssPdfreporterEngineJRLineBox_(JavaLangByte *border, JavaLangByte *topBorder, JavaLangByte *leftBorder, JavaLangByte *bottomBorder, JavaLangByte *rightBorder, id<OrgOssPdfreporterGeometryIColor> borderColor, id<OrgOssPdfreporterGeometryIColor> topBorderColor, id<OrgOssPdfreporterGeometryIColor> leftBorderColor, id<OrgOssPdfreporterGeometryIColor> bottomBorderColor, id<OrgOssPdfreporterGeometryIColor> rightBorderColor, JavaLangInteger *padding, JavaLangInteger *topPadding, JavaLangInteger *leftPadding, JavaLangInteger *bottomPadding, JavaLangInteger *rightPadding, id<OrgOssPdfreporterEngineJRLineBox> box) {
  OrgOssPdfreporterEngineUtilJRBoxUtil_initialize();
  OrgOssPdfreporterEngineUtilJRPenUtil_setLinePenFromPenWithJavaLangByte_withOrgOssPdfreporterEngineJRPen_(border, [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getPen]);
  OrgOssPdfreporterEngineUtilJRPenUtil_setLinePenFromPenWithJavaLangByte_withOrgOssPdfreporterEngineJRPen_(topBorder, [box getTopPen]);
  OrgOssPdfreporterEngineUtilJRPenUtil_setLinePenFromPenWithJavaLangByte_withOrgOssPdfreporterEngineJRPen_(leftBorder, [box getLeftPen]);
  OrgOssPdfreporterEngineUtilJRPenUtil_setLinePenFromPenWithJavaLangByte_withOrgOssPdfreporterEngineJRPen_(bottomBorder, [box getBottomPen]);
  OrgOssPdfreporterEngineUtilJRPenUtil_setLinePenFromPenWithJavaLangByte_withOrgOssPdfreporterEngineJRPen_(rightBorder, [box getRightPen]);
  [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([box getPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:borderColor];
  [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([box getTopPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:topBorderColor];
  [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([box getLeftPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:leftBorderColor];
  [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([box getBottomPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:bottomBorderColor];
  [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([box getRightPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:rightBorderColor];
  [box setPaddingWithJavaLangInteger:padding];
  [box setTopPaddingWithJavaLangInteger:topPadding];
  [box setLeftPaddingWithJavaLangInteger:leftPadding];
  [box setBottomPaddingWithJavaLangInteger:bottomPadding];
  [box setRightPaddingWithJavaLangInteger:rightPadding];
}

void OrgOssPdfreporterEngineUtilJRBoxUtil_rotateWithOrgOssPdfreporterEngineJRLineBox_withOrgOssPdfreporterEngineTypeRotationEnum_(id<OrgOssPdfreporterEngineJRLineBox> box, OrgOssPdfreporterEngineTypeRotationEnum *rotation) {
  OrgOssPdfreporterEngineUtilJRBoxUtil_initialize();
  switch ([rotation ordinal]) {
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_LEFT:
    {
      id<OrgOssPdfreporterEngineBaseJRBoxPen> topPen = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getTopPen];
      JavaLangInteger *topPadding = [box getTopPadding];
      [box copyTopPenWithOrgOssPdfreporterEngineBaseJRBoxPen:[box getLeftPen]];
      [box setTopPaddingWithJavaLangInteger:[box getLeftPadding]];
      [box copyLeftPenWithOrgOssPdfreporterEngineBaseJRBoxPen:[box getBottomPen]];
      [box setLeftPaddingWithJavaLangInteger:[box getBottomPadding]];
      [box copyBottomPenWithOrgOssPdfreporterEngineBaseJRBoxPen:[box getRightPen]];
      [box setBottomPaddingWithJavaLangInteger:[box getRightPadding]];
      [box copyRightPenWithOrgOssPdfreporterEngineBaseJRBoxPen:topPen];
      [box setRightPaddingWithJavaLangInteger:topPadding];
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_RIGHT:
    {
      id<OrgOssPdfreporterEngineBaseJRBoxPen> topPen = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getTopPen];
      JavaLangInteger *topPadding = [box getTopPadding];
      [box copyTopPenWithOrgOssPdfreporterEngineBaseJRBoxPen:[box getRightPen]];
      [box setTopPaddingWithJavaLangInteger:[box getRightPadding]];
      [box copyRightPenWithOrgOssPdfreporterEngineBaseJRBoxPen:[box getBottomPen]];
      [box setRightPaddingWithJavaLangInteger:[box getBottomPadding]];
      [box copyBottomPenWithOrgOssPdfreporterEngineBaseJRBoxPen:[box getLeftPen]];
      [box setBottomPaddingWithJavaLangInteger:[box getLeftPadding]];
      [box copyLeftPenWithOrgOssPdfreporterEngineBaseJRBoxPen:topPen];
      [box setLeftPaddingWithJavaLangInteger:topPadding];
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_UPSIDE_DOWN:
    {
      id<OrgOssPdfreporterEngineBaseJRBoxPen> topPen = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getTopPen];
      JavaLangInteger *topPadding = [box getTopPadding];
      [box copyTopPenWithOrgOssPdfreporterEngineBaseJRBoxPen:[box getBottomPen]];
      [box setTopPaddingWithJavaLangInteger:[box getBottomPadding]];
      [box copyBottomPenWithOrgOssPdfreporterEngineBaseJRBoxPen:topPen];
      [box setBottomPaddingWithJavaLangInteger:topPadding];
      id<OrgOssPdfreporterEngineBaseJRBoxPen> leftPen = [box getLeftPen];
      JavaLangInteger *leftPadding = [box getLeftPadding];
      [box copyLeftPenWithOrgOssPdfreporterEngineBaseJRBoxPen:[box getRightPen]];
      [box setLeftPaddingWithJavaLangInteger:[box getRightPadding]];
      [box copyRightPenWithOrgOssPdfreporterEngineBaseJRBoxPen:leftPen];
      [box setRightPaddingWithJavaLangInteger:leftPadding];
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_Enum_NONE:
    default:
    {
    }
  }
}

void OrgOssPdfreporterEngineUtilJRBoxUtil_setBoxToLineBoxWithOrgOssPdfreporterEngineJRBox_withOrgOssPdfreporterEngineJRLineBox_(id<OrgOssPdfreporterEngineJRBox> box, id<OrgOssPdfreporterEngineJRLineBox> lineBox) {
  OrgOssPdfreporterEngineUtilJRBoxUtil_initialize();
  OrgOssPdfreporterEngineUtilJRBoxUtil_setToBoxWithJavaLangByte_withJavaLangByte_withJavaLangByte_withJavaLangByte_withJavaLangByte_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withJavaLangInteger_withJavaLangInteger_withJavaLangInteger_withJavaLangInteger_withJavaLangInteger_withOrgOssPdfreporterEngineJRLineBox_([((id<OrgOssPdfreporterEngineJRBox>) nil_chk(box)) getOwnBorder], [box getOwnTopBorder], [box getOwnLeftBorder], [box getOwnBottomBorder], [box getOwnRightBorder], [box getOwnBorderColor], [box getOwnTopBorderColor], [box getOwnLeftBorderColor], [box getOwnBottomBorderColor], [box getOwnRightBorderColor], [box getOwnPadding], [box getOwnTopPadding], [box getOwnLeftPadding], [box getOwnBottomPadding], [box getOwnRightPadding], lineBox);
}

void OrgOssPdfreporterEngineUtilJRBoxUtil_init(OrgOssPdfreporterEngineUtilJRBoxUtil *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineUtilJRBoxUtil *new_OrgOssPdfreporterEngineUtilJRBoxUtil_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilJRBoxUtil, init)
}

OrgOssPdfreporterEngineUtilJRBoxUtil *create_OrgOssPdfreporterEngineUtilJRBoxUtil_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilJRBoxUtil, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilJRBoxUtil)
