//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRTypeSniffer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/oss/pdfreporter/engine/type/ImageTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRTypeSniffer.h"

@interface OrgOssPdfreporterEngineUtilJRTypeSniffer ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgOssPdfreporterEngineUtilJRTypeSniffer_init(OrgOssPdfreporterEngineUtilJRTypeSniffer *self);

__attribute__((unused)) static OrgOssPdfreporterEngineUtilJRTypeSniffer *new_OrgOssPdfreporterEngineUtilJRTypeSniffer_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterEngineUtilJRTypeSniffer *create_OrgOssPdfreporterEngineUtilJRTypeSniffer_init();

@implementation OrgOssPdfreporterEngineUtilJRTypeSniffer

+ (jboolean)isGIFWithByteArray:(IOSByteArray *)data {
  return OrgOssPdfreporterEngineUtilJRTypeSniffer_isGIFWithByteArray_(data);
}

+ (jboolean)isJPEGWithByteArray:(IOSByteArray *)data {
  return OrgOssPdfreporterEngineUtilJRTypeSniffer_isJPEGWithByteArray_(data);
}

+ (jboolean)isPNGWithByteArray:(IOSByteArray *)data {
  return OrgOssPdfreporterEngineUtilJRTypeSniffer_isPNGWithByteArray_(data);
}

+ (jboolean)isTIFFWithByteArray:(IOSByteArray *)data {
  return OrgOssPdfreporterEngineUtilJRTypeSniffer_isTIFFWithByteArray_(data);
}

+ (jbyte)getImageTypeWithByteArray:(IOSByteArray *)data {
  return OrgOssPdfreporterEngineUtilJRTypeSniffer_getImageTypeWithByteArray_(data);
}

+ (OrgOssPdfreporterEngineTypeImageTypeEnum *)getImageTypeValueWithByteArray:(IOSByteArray *)data {
  return OrgOssPdfreporterEngineUtilJRTypeSniffer_getImageTypeValueWithByteArray_(data);
}

+ (NSString *)getImageMimeTypeWithByte:(jbyte)imageType {
  return OrgOssPdfreporterEngineUtilJRTypeSniffer_getImageMimeTypeWithByte_(imageType);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineUtilJRTypeSniffer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isGIFWithByteArray:", "isGIF", "Z", 0x9, NULL, NULL },
    { "isJPEGWithByteArray:", "isJPEG", "Z", 0x9, NULL, NULL },
    { "isPNGWithByteArray:", "isPNG", "Z", 0x9, NULL, NULL },
    { "isTIFFWithByteArray:", "isTIFF", "Z", 0x9, NULL, NULL },
    { "getImageTypeWithByteArray:", "getImageType", "B", 0x9, NULL, NULL },
    { "getImageTypeValueWithByteArray:", "getImageTypeValue", "Lorg.oss.pdfreporter.engine.type.ImageTypeEnum;", 0x9, NULL, NULL },
    { "getImageMimeTypeWithByte:", "getImageMimeType", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "init", "JRTypeSniffer", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilJRTypeSniffer = { 2, "JRTypeSniffer", "org.oss.pdfreporter.engine.util", NULL, 0x11, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineUtilJRTypeSniffer;
}

@end

jboolean OrgOssPdfreporterEngineUtilJRTypeSniffer_isGIFWithByteArray_(IOSByteArray *data) {
  OrgOssPdfreporterEngineUtilJRTypeSniffer_initialize();
  if (((IOSByteArray *) nil_chk(data))->size_ < 3) {
    return false;
  }
  IOSByteArray *first = [IOSByteArray newArrayWithLength:3];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, first, 0, 3);
  if ([([NSString stringWithBytes:first]) equalsIgnoreCase:@"GIF"]) {
    return true;
  }
  return false;
}

jboolean OrgOssPdfreporterEngineUtilJRTypeSniffer_isJPEGWithByteArray_(IOSByteArray *data) {
  OrgOssPdfreporterEngineUtilJRTypeSniffer_initialize();
  if (((IOSByteArray *) nil_chk(data))->size_ < 2) {
    return false;
  }
  if (IOSByteArray_Get(data, 0) == -1 && IOSByteArray_Get(data, 1) == -40) {
    return true;
  }
  return false;
}

jboolean OrgOssPdfreporterEngineUtilJRTypeSniffer_isPNGWithByteArray_(IOSByteArray *data) {
  OrgOssPdfreporterEngineUtilJRTypeSniffer_initialize();
  if (((IOSByteArray *) nil_chk(data))->size_ < 8) {
    return false;
  }
  if (IOSByteArray_Get(data, 0) == -119 && IOSByteArray_Get(data, 1) == 80 && IOSByteArray_Get(data, 2) == 78 && IOSByteArray_Get(data, 3) == 71 && IOSByteArray_Get(data, 4) == 13 && IOSByteArray_Get(data, 5) == 10 && IOSByteArray_Get(data, 6) == 26 && IOSByteArray_Get(data, 7) == 10) {
    return true;
  }
  return false;
}

jboolean OrgOssPdfreporterEngineUtilJRTypeSniffer_isTIFFWithByteArray_(IOSByteArray *data) {
  OrgOssPdfreporterEngineUtilJRTypeSniffer_initialize();
  if (((IOSByteArray *) nil_chk(data))->size_ < 2) {
    return false;
  }
  if ((IOSByteArray_Get(data, 0) == 73 && IOSByteArray_Get(data, 1) == 73) || (IOSByteArray_Get(data, 0) == 77 && IOSByteArray_Get(data, 1) == 77)) {
    return true;
  }
  return false;
}

jbyte OrgOssPdfreporterEngineUtilJRTypeSniffer_getImageTypeWithByteArray_(IOSByteArray *data) {
  OrgOssPdfreporterEngineUtilJRTypeSniffer_initialize();
  return [((OrgOssPdfreporterEngineTypeImageTypeEnum *) nil_chk(OrgOssPdfreporterEngineUtilJRTypeSniffer_getImageTypeValueWithByteArray_(data))) getValue];
}

OrgOssPdfreporterEngineTypeImageTypeEnum *OrgOssPdfreporterEngineUtilJRTypeSniffer_getImageTypeValueWithByteArray_(IOSByteArray *data) {
  OrgOssPdfreporterEngineUtilJRTypeSniffer_initialize();
  if (OrgOssPdfreporterEngineUtilJRTypeSniffer_isGIFWithByteArray_(data)) {
    return JreLoadEnum(OrgOssPdfreporterEngineTypeImageTypeEnum, GIF);
  }
  else if (OrgOssPdfreporterEngineUtilJRTypeSniffer_isJPEGWithByteArray_(data)) {
    return JreLoadEnum(OrgOssPdfreporterEngineTypeImageTypeEnum, JPEG);
  }
  else if (OrgOssPdfreporterEngineUtilJRTypeSniffer_isPNGWithByteArray_(data)) {
    return JreLoadEnum(OrgOssPdfreporterEngineTypeImageTypeEnum, PNG);
  }
  else if (OrgOssPdfreporterEngineUtilJRTypeSniffer_isTIFFWithByteArray_(data)) {
    return JreLoadEnum(OrgOssPdfreporterEngineTypeImageTypeEnum, TIFF);
  }
  return JreLoadEnum(OrgOssPdfreporterEngineTypeImageTypeEnum, UNKNOWN);
}

NSString *OrgOssPdfreporterEngineUtilJRTypeSniffer_getImageMimeTypeWithByte_(jbyte imageType) {
  OrgOssPdfreporterEngineUtilJRTypeSniffer_initialize();
  OrgOssPdfreporterEngineTypeImageTypeEnum *imageTypeEnum = OrgOssPdfreporterEngineTypeImageTypeEnum_getByValueWithByte_(imageType);
  return imageTypeEnum == nil ? nil : [imageTypeEnum getMimeType];
}

void OrgOssPdfreporterEngineUtilJRTypeSniffer_init(OrgOssPdfreporterEngineUtilJRTypeSniffer *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineUtilJRTypeSniffer *new_OrgOssPdfreporterEngineUtilJRTypeSniffer_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilJRTypeSniffer, init)
}

OrgOssPdfreporterEngineUtilJRTypeSniffer *create_OrgOssPdfreporterEngineUtilJRTypeSniffer_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilJRTypeSniffer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilJRTypeSniffer)
