//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/util/Java15BigDecimalHandler.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigDecimal.h"
#include "java/math/MathContext.h"
#include "java/math/RoundingMode.h"
#include "org/oss/pdfreporter/engine/util/JRProperties.h"
#include "org/oss/pdfreporter/engine/util/Java15BigDecimalHandler.h"

@interface OrgOssPdfreporterEngineUtilJava15BigDecimalHandler () {
 @public
  jint minPrecision_;
  IOSObjectArray *mathContexts_;
}

+ (jint)readConfiguredPrecision;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterEngineUtilJava15BigDecimalHandler, mathContexts_, IOSObjectArray *)

__attribute__((unused)) static jint OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_readConfiguredPrecision();

NSString *OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_PROPERTY_MINIMUM_PRECISION = @"net.sf.jasperreports.big.decimal.minimum.precision";

@implementation OrgOssPdfreporterEngineUtilJava15BigDecimalHandler

+ (NSString *)PROPERTY_MINIMUM_PRECISION {
  return OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_PROPERTY_MINIMUM_PRECISION;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)minPrecision {
  OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_initWithInt_(self, minPrecision);
  return self;
}

+ (jint)readConfiguredPrecision {
  return OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_readConfiguredPrecision();
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)dividend
                              withJavaMathBigDecimal:(JavaMathBigDecimal *)divisor {
  jint precision = [self getDivisionPrecisionWithJavaMathBigDecimal:dividend withJavaMathBigDecimal:divisor];
  JavaMathMathContext *mathContext = [self getMathContextWithInt:precision];
  return [((JavaMathBigDecimal *) nil_chk(dividend)) divideWithJavaMathBigDecimal:divisor withJavaMathMathContext:mathContext];
}

- (jint)getDivisionPrecisionWithJavaMathBigDecimal:(JavaMathBigDecimal *)dividend
                            withJavaMathBigDecimal:(JavaMathBigDecimal *)divisor {
  jint precision = minPrecision_;
  if ([((JavaMathBigDecimal *) nil_chk(dividend)) precision] > precision) {
    precision = [dividend precision];
  }
  if ([((JavaMathBigDecimal *) nil_chk(divisor)) precision] > precision) {
    precision = [divisor precision];
  }
  return precision;
}

- (JavaMathMathContext *)getMathContextWithInt:(jint)precision {
  IOSObjectArray *contexts = mathContexts_;
  jint idx = precision - minPrecision_;
  if (contexts == nil || contexts->size_ < idx + 1) {
    IOSObjectArray *newContexts = [IOSObjectArray newArrayWithLength:idx + 1 type:JavaMathMathContext_class_()];
    if (contexts != nil) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(contexts, 0, newContexts, 0, contexts->size_);
    }
    mathContexts_ = newContexts;
    contexts = newContexts;
  }
  JavaMathMathContext *mathContext = IOSObjectArray_Get(contexts, idx);
  if (mathContext == nil) {
    mathContext = new_JavaMathMathContext_initWithInt_withJavaMathRoundingMode_(precision, JreLoadEnum(JavaMathRoundingMode, HALF_UP));
    (void) IOSObjectArray_Set(contexts, idx, mathContext);
  }
  return mathContext;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Java15BigDecimalHandler", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "Java15BigDecimalHandler", NULL, 0x1, NULL, NULL },
    { "readConfiguredPrecision", NULL, "I", 0xa, NULL, NULL },
    { "divideWithJavaMathBigDecimal:withJavaMathBigDecimal:", "divide", "Ljava.math.BigDecimal;", 0x1, NULL, NULL },
    { "getDivisionPrecisionWithJavaMathBigDecimal:withJavaMathBigDecimal:", "getDivisionPrecision", "I", 0x4, NULL, NULL },
    { "getMathContextWithInt:", "getMathContext", "Ljava.math.MathContext;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PROPERTY_MINIMUM_PRECISION", "PROPERTY_MINIMUM_PRECISION", 0x19, "Ljava.lang.String;", &OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_PROPERTY_MINIMUM_PRECISION, NULL, .constantValue.asLong = 0 },
    { "minPrecision_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "mathContexts_", NULL, 0x2, "[Ljava.math.MathContext;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilJava15BigDecimalHandler = { 2, "Java15BigDecimalHandler", "org.oss.pdfreporter.engine.util", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineUtilJava15BigDecimalHandler;
}

@end

void OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_init(OrgOssPdfreporterEngineUtilJava15BigDecimalHandler *self) {
  OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_initWithInt_(self, OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_readConfiguredPrecision());
}

OrgOssPdfreporterEngineUtilJava15BigDecimalHandler *new_OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilJava15BigDecimalHandler, init)
}

OrgOssPdfreporterEngineUtilJava15BigDecimalHandler *create_OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilJava15BigDecimalHandler, init)
}

void OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_initWithInt_(OrgOssPdfreporterEngineUtilJava15BigDecimalHandler *self, jint minPrecision) {
  NSObject_init(self);
  if (minPrecision <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"minPrecision must be positive");
  }
  self->minPrecision_ = minPrecision;
  self->mathContexts_ = [IOSObjectArray newArrayWithLength:0 type:JavaMathMathContext_class_()];
}

OrgOssPdfreporterEngineUtilJava15BigDecimalHandler *new_OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_initWithInt_(jint minPrecision) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilJava15BigDecimalHandler, initWithInt_, minPrecision)
}

OrgOssPdfreporterEngineUtilJava15BigDecimalHandler *create_OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_initWithInt_(jint minPrecision) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilJava15BigDecimalHandler, initWithInt_, minPrecision)
}

jint OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_readConfiguredPrecision() {
  OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_initialize();
  return OrgOssPdfreporterEngineUtilJRProperties_getIntegerPropertyWithNSString_(OrgOssPdfreporterEngineUtilJava15BigDecimalHandler_PROPERTY_MINIMUM_PRECISION);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilJava15BigDecimalHandler)
