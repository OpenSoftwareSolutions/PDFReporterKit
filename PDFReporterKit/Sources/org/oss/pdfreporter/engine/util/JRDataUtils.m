//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRDataUtils.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "org/oss/pdfreporter/engine/util/JRDataUtils.h"
#include "org/oss/pdfreporter/text/bundle/StringLocale.h"

@interface OrgOssPdfreporterEngineUtilJRDataUtils ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgOssPdfreporterEngineUtilJRDataUtils_init(OrgOssPdfreporterEngineUtilJRDataUtils *self);

__attribute__((unused)) static OrgOssPdfreporterEngineUtilJRDataUtils *new_OrgOssPdfreporterEngineUtilJRDataUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterEngineUtilJRDataUtils *create_OrgOssPdfreporterEngineUtilJRDataUtils_init();

@implementation OrgOssPdfreporterEngineUtilJRDataUtils

+ (jdouble)JULIAN_0000 {
  return OrgOssPdfreporterEngineUtilJRDataUtils_JULIAN_0000;
}

+ (jdouble)JULIAN_1900 {
  return OrgOssPdfreporterEngineUtilJRDataUtils_JULIAN_1900;
}

+ (NSString *)getLocaleCodeWithOrgOssPdfreporterTextBundleStringLocale:(OrgOssPdfreporterTextBundleStringLocale *)locale {
  return OrgOssPdfreporterEngineUtilJRDataUtils_getLocaleCodeWithOrgOssPdfreporterTextBundleStringLocale_(locale);
}

+ (OrgOssPdfreporterTextBundleStringLocale *)getLocaleWithNSString:(NSString *)code {
  return OrgOssPdfreporterEngineUtilJRDataUtils_getLocaleWithNSString_(code);
}

+ (NSString *)getTimeZoneIdWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz {
  return OrgOssPdfreporterEngineUtilJRDataUtils_getTimeZoneIdWithJavaUtilTimeZone_(tz);
}

+ (JavaUtilTimeZone *)getTimeZoneWithNSString:(NSString *)id_ {
  return OrgOssPdfreporterEngineUtilJRDataUtils_getTimeZoneWithNSString_(id_);
}

+ (jdouble)getExcelSerialDayNumberWithJavaUtilDate:(JavaUtilDate *)date
       withOrgOssPdfreporterTextBundleStringLocale:(OrgOssPdfreporterTextBundleStringLocale *)locale
                              withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  return OrgOssPdfreporterEngineUtilJRDataUtils_getExcelSerialDayNumberWithJavaUtilDate_withOrgOssPdfreporterTextBundleStringLocale_withJavaUtilTimeZone_(date, locale, timeZone);
}

+ (jdouble)getGregorianToJulianDayWithInt:(jint)year
                                  withInt:(jint)month
                                  withInt:(jint)day {
  return OrgOssPdfreporterEngineUtilJRDataUtils_getGregorianToJulianDayWithInt_withInt_withInt_(year, month, day);
}

+ (jboolean)isLeapYearWithInt:(jint)year {
  return OrgOssPdfreporterEngineUtilJRDataUtils_isLeapYearWithInt_(year);
}

+ (JavaUtilDate *)translateToTimezoneWithJavaUtilDate:(JavaUtilDate *)value
                                 withJavaUtilTimeZone:(JavaUtilTimeZone *)tz {
  return OrgOssPdfreporterEngineUtilJRDataUtils_translateToTimezoneWithJavaUtilDate_withJavaUtilTimeZone_(value, tz);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterEngineUtilJRDataUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getLocaleCodeWithOrgOssPdfreporterTextBundleStringLocale:", "getLocaleCode", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getLocaleWithNSString:", "getLocale", "Lorg.oss.pdfreporter.text.bundle.StringLocale;", 0x9, NULL, NULL },
    { "getTimeZoneIdWithJavaUtilTimeZone:", "getTimeZoneId", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getTimeZoneWithNSString:", "getTimeZone", "Ljava.util.TimeZone;", 0x9, NULL, NULL },
    { "getExcelSerialDayNumberWithJavaUtilDate:withOrgOssPdfreporterTextBundleStringLocale:withJavaUtilTimeZone:", "getExcelSerialDayNumber", "D", 0x9, NULL, NULL },
    { "getGregorianToJulianDayWithInt:withInt:withInt:", "getGregorianToJulianDay", "D", 0x9, NULL, NULL },
    { "isLeapYearWithInt:", "isLeapYear", "Z", 0x9, NULL, NULL },
    { "translateToTimezoneWithJavaUtilDate:withJavaUtilTimeZone:", "translateToTimezone", "Ljava.util.Date;", 0x9, NULL, NULL },
    { "init", "JRDataUtils", NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "JULIAN_0000", "JULIAN_0000", 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgOssPdfreporterEngineUtilJRDataUtils_JULIAN_0000 },
    { "JULIAN_1900", "JULIAN_1900", 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgOssPdfreporterEngineUtilJRDataUtils_JULIAN_1900 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterEngineUtilJRDataUtils = { 2, "JRDataUtils", "org.oss.pdfreporter.engine.util", NULL, 0x11, 9, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterEngineUtilJRDataUtils;
}

@end

NSString *OrgOssPdfreporterEngineUtilJRDataUtils_getLocaleCodeWithOrgOssPdfreporterTextBundleStringLocale_(OrgOssPdfreporterTextBundleStringLocale *locale) {
  OrgOssPdfreporterEngineUtilJRDataUtils_initialize();
  return [((OrgOssPdfreporterTextBundleStringLocale *) nil_chk(locale)) getLocaleString];
}

OrgOssPdfreporterTextBundleStringLocale *OrgOssPdfreporterEngineUtilJRDataUtils_getLocaleWithNSString_(NSString *code) {
  OrgOssPdfreporterEngineUtilJRDataUtils_initialize();
  return OrgOssPdfreporterTextBundleStringLocale_fromLocaleStringWithNSString_(code);
}

NSString *OrgOssPdfreporterEngineUtilJRDataUtils_getTimeZoneIdWithJavaUtilTimeZone_(JavaUtilTimeZone *tz) {
  OrgOssPdfreporterEngineUtilJRDataUtils_initialize();
  return [((JavaUtilTimeZone *) nil_chk(tz)) getID];
}

JavaUtilTimeZone *OrgOssPdfreporterEngineUtilJRDataUtils_getTimeZoneWithNSString_(NSString *id_) {
  OrgOssPdfreporterEngineUtilJRDataUtils_initialize();
  return JavaUtilTimeZone_getTimeZoneWithNSString_(id_);
}

jdouble OrgOssPdfreporterEngineUtilJRDataUtils_getExcelSerialDayNumberWithJavaUtilDate_withOrgOssPdfreporterTextBundleStringLocale_withJavaUtilTimeZone_(JavaUtilDate *date, OrgOssPdfreporterTextBundleStringLocale *locale, JavaUtilTimeZone *timeZone) {
  OrgOssPdfreporterEngineUtilJRDataUtils_initialize();
  JavaUtilGregorianCalendar *calendar = new_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_withJavaUtilLocale_(timeZone, [((OrgOssPdfreporterTextBundleStringLocale *) nil_chk(locale)) toLocale]);
  [calendar setTimeWithJavaUtilDate:date];
  jint year = [calendar getWithInt:JavaUtilCalendar_YEAR];
  jint month = [calendar getWithInt:JavaUtilCalendar_MONTH];
  jint day = [calendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH];
  jint hour = [calendar getWithInt:JavaUtilCalendar_HOUR_OF_DAY];
  jint min = [calendar getWithInt:JavaUtilCalendar_MINUTE];
  jint sec = [calendar getWithInt:JavaUtilCalendar_SECOND];
  jdouble result = OrgOssPdfreporterEngineUtilJRDataUtils_getGregorianToJulianDayWithInt_withInt_withInt_(year, month + 1, day) + (JavaLangMath_floorWithDouble_(sec + 60 * (min + 60 * hour) + 0.5) / 86400.0);
  return (result - OrgOssPdfreporterEngineUtilJRDataUtils_JULIAN_1900) + 1 + ((result > 2415078.5) ? 1 : 0);
}

jdouble OrgOssPdfreporterEngineUtilJRDataUtils_getGregorianToJulianDayWithInt_withInt_withInt_(jint year, jint month, jint day) {
  OrgOssPdfreporterEngineUtilJRDataUtils_initialize();
  return OrgOssPdfreporterEngineUtilJRDataUtils_JULIAN_0000 + (365 * (year - 1)) + JavaLangMath_floorWithDouble_((year - 1) / 4) - JavaLangMath_floorWithDouble_((year - 1) / 100) + JavaLangMath_floorWithDouble_((year - 1) / 400) + JavaLangMath_floorWithDouble_((((367 * month) - 362) / 12) + (month <= 2 ? 0 : (OrgOssPdfreporterEngineUtilJRDataUtils_isLeapYearWithInt_(year) ? -1 : -2)) + day);
}

jboolean OrgOssPdfreporterEngineUtilJRDataUtils_isLeapYearWithInt_(jint year) {
  OrgOssPdfreporterEngineUtilJRDataUtils_initialize();
  return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
}

JavaUtilDate *OrgOssPdfreporterEngineUtilJRDataUtils_translateToTimezoneWithJavaUtilDate_withJavaUtilTimeZone_(JavaUtilDate *value, JavaUtilTimeZone *tz) {
  OrgOssPdfreporterEngineUtilJRDataUtils_initialize();
  if (tz == nil) {
    return value;
  }
  JavaUtilTimeZone *defaultTz = JavaUtilTimeZone_getDefault();
  if ([((JavaUtilTimeZone *) nil_chk(defaultTz)) hasSameRulesWithJavaUtilTimeZone:tz]) {
    return value;
  }
  jlong time = [((JavaUtilDate *) nil_chk(value)) getTime];
  JavaUtilDate *adjustedDate = new_JavaUtilDate_initWithLong_(time + [tz getOffsetWithLong:time] - [defaultTz getOffsetWithLong:time]);
  return adjustedDate;
}

void OrgOssPdfreporterEngineUtilJRDataUtils_init(OrgOssPdfreporterEngineUtilJRDataUtils *self) {
  NSObject_init(self);
}

OrgOssPdfreporterEngineUtilJRDataUtils *new_OrgOssPdfreporterEngineUtilJRDataUtils_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterEngineUtilJRDataUtils, init)
}

OrgOssPdfreporterEngineUtilJRDataUtils *create_OrgOssPdfreporterEngineUtilJRDataUtils_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterEngineUtilJRDataUtils, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterEngineUtilJRDataUtils)
