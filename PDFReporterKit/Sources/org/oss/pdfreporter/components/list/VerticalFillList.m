//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/components/list/VerticalFillList.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/components/list/BaseFillList.h"
#include "org/oss/pdfreporter/components/list/FillDatasetRun.h"
#include "org/oss/pdfreporter/components/list/FillListContents.h"
#include "org/oss/pdfreporter/components/list/ListComponent.h"
#include "org/oss/pdfreporter/components/list/ListContents.h"
#include "org/oss/pdfreporter/components/list/VerticalFillList.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/component/FillPrepareResult.h"
#include "org/oss/pdfreporter/engine/fill/JRFillExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplatePrintFrame.h"

@interface OrgOssPdfreporterComponentsListVerticalFillList () {
 @public
  OrgOssPdfreporterComponentsListFillListContents *listContents_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterComponentsListVerticalFillList, listContents_, OrgOssPdfreporterComponentsListFillListContents *)

inline JavaUtilLoggingLogger *OrgOssPdfreporterComponentsListVerticalFillList_get_log();
static JavaUtilLoggingLogger *OrgOssPdfreporterComponentsListVerticalFillList_log;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterComponentsListVerticalFillList, log, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterComponentsListVerticalFillList)

@implementation OrgOssPdfreporterComponentsListVerticalFillList

- (instancetype)initWithOrgOssPdfreporterComponentsListListComponent:(id<OrgOssPdfreporterComponentsListListComponent>)component
                  withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  OrgOssPdfreporterComponentsListVerticalFillList_initWithOrgOssPdfreporterComponentsListListComponent_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, component, factory);
  return self;
}

- (OrgOssPdfreporterEngineComponentFillPrepareResult *)prepareWithInt:(jint)availableHeight {
  [self createPrintFrame];
  @try {
    jboolean hadData = false;
    jboolean overflow = false;
    if (filling_) {
      if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterComponentsListVerticalFillList_log)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
        [OrgOssPdfreporterComponentsListVerticalFillList_log fineWithNSString:@"Continuing list after overflow"];
      }
      hadData = true;
      overflow = [self fillContentsWithInt:availableHeight];
    }
    else {
      if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterComponentsListVerticalFillList_log)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
        [OrgOssPdfreporterComponentsListVerticalFillList_log fineWithNSString:@"Starting list rendering"];
      }
      if (fillStarted_) {
        if ([OrgOssPdfreporterComponentsListVerticalFillList_log isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
          [OrgOssPdfreporterComponentsListVerticalFillList_log fineWithNSString:@"List reprinted, rewinding data source"];
        }
        [((OrgOssPdfreporterComponentsListFillDatasetRun *) nil_chk(datasetRun_)) rewind];
      }
      [((OrgOssPdfreporterComponentsListFillDatasetRun *) nil_chk(datasetRun_)) start];
      fillStarted_ = true;
    }
    while (!overflow && [((OrgOssPdfreporterComponentsListFillDatasetRun *) nil_chk(datasetRun_)) next]) {
      hadData = true;
      [((OrgOssPdfreporterComponentsListFillListContents *) nil_chk(listContents_)) evaluateContents];
      overflow = [self fillContentsWithInt:availableHeight];
    }
    if (overflow) {
      if ([OrgOssPdfreporterComponentsListVerticalFillList_log isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
        [OrgOssPdfreporterComponentsListVerticalFillList_log fineWithNSString:@"List has overflowed"];
      }
      filling_ = true;
      return OrgOssPdfreporterEngineComponentFillPrepareResult_printStretchWithInt_withBoolean_(availableHeight, overflow);
    }
    else {
      if ([OrgOssPdfreporterComponentsListVerticalFillList_log isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE)]) {
        [OrgOssPdfreporterComponentsListVerticalFillList_log fineWithNSString:@"List has completed rendering"];
      }
      filling_ = false;
      [((OrgOssPdfreporterComponentsListFillDatasetRun *) nil_chk(datasetRun_)) end];
      if (!hadData) {
        return JreLoadStatic(OrgOssPdfreporterEngineComponentFillPrepareResult, NO_PRINT_NO_OVERFLOW);
      }
      return OrgOssPdfreporterEngineComponentFillPrepareResult_printStretchWithInt_withBoolean_([((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame_)) getHeight], false);
    }
  }
  @catch (OrgOssPdfreporterEngineJRException *e) {
    @throw new_OrgOssPdfreporterEngineJRRuntimeException_initWithNSException_(e);
  }
}

- (jboolean)fillContentsWithInt:(jint)availableHeight {
  jboolean overflow;
  jint contentsAvailableHeight = availableHeight - [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame_)) getHeight];
  if (contentsAvailableHeight < [((OrgOssPdfreporterComponentsListFillListContents *) nil_chk(listContents_)) getHeight]) {
    overflow = true;
  }
  else {
    [listContents_ prepareWithInt:contentsAvailableHeight];
    [listContents_ finalizeElementPositions];
    [listContents_ fillElementsWithOrgOssPdfreporterEngineJRPrintElementContainer:new_OrgOssPdfreporterComponentsListBaseFillList_AppendingPrintElementContainer_initWithOrgOssPdfreporterEngineJRPrintElementContainer_(printFrame_)];
    overflow = [listContents_ willOverflow];
  }
  return overflow;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterComponentsListVerticalFillList class]) {
    OrgOssPdfreporterComponentsListVerticalFillList_log = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterComponentsListVerticalFillList_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterComponentsListVerticalFillList)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterComponentsListListComponent:withOrgOssPdfreporterEngineFillJRFillObjectFactory:", "VerticalFillList", NULL, 0x1, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
    { "prepareWithInt:", "prepare", "Lorg.oss.pdfreporter.engine.component.FillPrepareResult;", 0x1, NULL, NULL },
    { "fillContentsWithInt:", "fillContents", "Z", 0x4, "Lorg.oss.pdfreporter.engine.JRException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "log", "log", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterComponentsListVerticalFillList_log, NULL, .constantValue.asLong = 0 },
    { "listContents_", NULL, 0x12, "Lorg.oss.pdfreporter.components.list.FillListContents;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterComponentsListVerticalFillList = { 2, "VerticalFillList", "org.oss.pdfreporter.components.list", NULL, 0x1, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterComponentsListVerticalFillList;
}

@end

void OrgOssPdfreporterComponentsListVerticalFillList_initWithOrgOssPdfreporterComponentsListListComponent_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(OrgOssPdfreporterComponentsListVerticalFillList *self, id<OrgOssPdfreporterComponentsListListComponent> component, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  OrgOssPdfreporterComponentsListBaseFillList_initWithOrgOssPdfreporterComponentsListListComponent_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(self, component, factory);
  OrgOssPdfreporterEngineFillJRFillObjectFactory *datasetFactory = new_OrgOssPdfreporterEngineFillJRFillObjectFactory_initWithOrgOssPdfreporterEngineFillJRFillObjectFactory_withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator_(factory, [self createDatasetExpressionEvaluator]);
  self->listContents_ = new_OrgOssPdfreporterComponentsListFillListContents_initWithOrgOssPdfreporterComponentsListListContents_withOrgOssPdfreporterEngineFillJRFillObjectFactory_([((id<OrgOssPdfreporterComponentsListListComponent>) nil_chk(component)) getContents], datasetFactory);
}

OrgOssPdfreporterComponentsListVerticalFillList *new_OrgOssPdfreporterComponentsListVerticalFillList_initWithOrgOssPdfreporterComponentsListListComponent_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(id<OrgOssPdfreporterComponentsListListComponent> component, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterComponentsListVerticalFillList, initWithOrgOssPdfreporterComponentsListListComponent_withOrgOssPdfreporterEngineFillJRFillObjectFactory_, component, factory)
}

OrgOssPdfreporterComponentsListVerticalFillList *create_OrgOssPdfreporterComponentsListVerticalFillList_initWithOrgOssPdfreporterComponentsListListComponent_withOrgOssPdfreporterEngineFillJRFillObjectFactory_(id<OrgOssPdfreporterComponentsListListComponent> component, OrgOssPdfreporterEngineFillJRFillObjectFactory *factory) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterComponentsListVerticalFillList, initWithOrgOssPdfreporterComponentsListListComponent_withOrgOssPdfreporterEngineFillJRFillObjectFactory_, component, factory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterComponentsListVerticalFillList)
