//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/components/list/ListComponentCompiler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "org/oss/pdfreporter/components/list/ListComponent.h"
#include "org/oss/pdfreporter/components/list/ListComponentCompiler.h"
#include "org/oss/pdfreporter/components/list/ListContents.h"
#include "org/oss/pdfreporter/components/list/StandardListComponent.h"
#include "org/oss/pdfreporter/engine/JRComponentElement.h"
#include "org/oss/pdfreporter/engine/JRDatasetRun.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/base/JRBaseObjectFactory.h"
#include "org/oss/pdfreporter/engine/component/Component.h"
#include "org/oss/pdfreporter/engine/design/JRVerifier.h"
#include "org/oss/pdfreporter/engine/type/PrintOrderEnum.h"

@implementation OrgOssPdfreporterComponentsListListComponentCompiler

- (void)collectExpressionsWithOrgOssPdfreporterEngineComponentComponent:(id<OrgOssPdfreporterEngineComponentComponent>)component
                       withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  id<OrgOssPdfreporterComponentsListListComponent> listComponent = (id<OrgOssPdfreporterComponentsListListComponent>) cast_check(component, OrgOssPdfreporterComponentsListListComponent_class_());
  id<OrgOssPdfreporterEngineJRDatasetRun> datasetRun = [((id<OrgOssPdfreporterComponentsListListComponent>) nil_chk(listComponent)) getDatasetRun];
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRDatasetRun:datasetRun];
  OrgOssPdfreporterEngineJRExpressionCollector *datasetCollector = [collector getDatasetCollectorWithNSString:[((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getDatasetName]];
  IOSObjectArray *elements = [((id<OrgOssPdfreporterComponentsListListContents>) nil_chk([listComponent getContents])) getElements];
  if (elements != nil) {
    for (jint i = 0; i < elements->size_; i++) {
      [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(IOSObjectArray_Get(elements, i))) collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:datasetCollector];
    }
  }
}

- (id<OrgOssPdfreporterEngineComponentComponent>)toCompiledComponentWithOrgOssPdfreporterEngineComponentComponent:(id<OrgOssPdfreporterEngineComponentComponent>)component
                                                               withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)baseFactory {
  id<OrgOssPdfreporterComponentsListListComponent> listComponent = (id<OrgOssPdfreporterComponentsListListComponent>) cast_check(component, OrgOssPdfreporterComponentsListListComponent_class_());
  OrgOssPdfreporterComponentsListStandardListComponent *compiledComponent = new_OrgOssPdfreporterComponentsListStandardListComponent_initWithOrgOssPdfreporterComponentsListListComponent_withOrgOssPdfreporterEngineBaseJRBaseObjectFactory_(listComponent, baseFactory);
  return compiledComponent;
}

- (void)verifyWithOrgOssPdfreporterEngineComponentComponent:(id<OrgOssPdfreporterEngineComponentComponent>)component
                withOrgOssPdfreporterEngineDesignJRVerifier:(OrgOssPdfreporterEngineDesignJRVerifier *)verifier {
  id<OrgOssPdfreporterComponentsListListComponent> listComponent = (id<OrgOssPdfreporterComponentsListListComponent>) cast_check(component, OrgOssPdfreporterComponentsListListComponent_class_());
  id<OrgOssPdfreporterEngineJRDatasetRun> datasetRun = [((id<OrgOssPdfreporterComponentsListListComponent>) nil_chk(listComponent)) getDatasetRun];
  if (datasetRun == nil) {
    [((OrgOssPdfreporterEngineDesignJRVerifier *) nil_chk(verifier)) addBrokenRuleWithNSString:@"No list subdataset run set" withId:listComponent];
  }
  else {
    [((OrgOssPdfreporterEngineDesignJRVerifier *) nil_chk(verifier)) verifyDatasetRunWithOrgOssPdfreporterEngineJRDatasetRun:datasetRun];
  }
  id<OrgOssPdfreporterComponentsListListContents> listContents = [listComponent getContents];
  if (listContents == nil) {
    [verifier addBrokenRuleWithNSString:@"No list contents set" withId:listComponent];
  }
  else {
    OrgOssPdfreporterEngineTypePrintOrderEnum *listPrintOrder = [listComponent getPrintOrderValue] == nil ? JreLoadEnum(OrgOssPdfreporterEngineTypePrintOrderEnum, VERTICAL) : [listComponent getPrintOrderValue];
    JavaLangBoolean *listIgnoreWidth = [listComponent getIgnoreWidth];
    jboolean ignoreWidth = listIgnoreWidth != nil && [listIgnoreWidth booleanValue];
    if ([listContents getHeight] < 0) {
      [verifier addBrokenRuleWithNSString:@"List contents height must be positive." withId:listContents];
    }
    jint elementWidth = [((id<OrgOssPdfreporterEngineJRComponentElement>) nil_chk([verifier getCurrentComponentElement])) getWidth];
    JavaLangInteger *width = [listContents getWidth];
    jint contentsWidth;
    if (width == nil) {
      contentsWidth = elementWidth;
      if (listPrintOrder == JreLoadEnum(OrgOssPdfreporterEngineTypePrintOrderEnum, HORIZONTAL)) {
        [verifier addBrokenRuleWithNSString:@"List contents width must be set for horizontal lists" withId:listContents];
      }
    }
    else {
      contentsWidth = [width intValue];
      if ([width intValue] <= 0) {
        [verifier addBrokenRuleWithNSString:@"List contents width must be positive." withId:listContents];
      }
      if (!ignoreWidth && listPrintOrder == JreLoadEnum(OrgOssPdfreporterEngineTypePrintOrderEnum, HORIZONTAL) && [width intValue] > elementWidth) {
        [verifier addBrokenRuleWithNSString:@"List contents width is larger than the list element width" withId:listComponent];
      }
    }
    IOSObjectArray *elements = [listContents getElements];
    if (elements != nil) {
      for (jint i = 0; i < elements->size_; i++) {
        id<OrgOssPdfreporterEngineJRElement> element = IOSObjectArray_Get(elements, i);
        [verifier verifyElementWithOrgOssPdfreporterEngineJRElement:element];
        if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getX] < 0 || [element getY] < 0) {
          [verifier addBrokenRuleWithNSString:@"Element must be placed at positive coordinates." withId:element];
        }
        if ([element getY] + [element getHeight] > [listContents getHeight]) {
          [verifier addBrokenRuleWithNSString:JreStrcat("$I$I$IC", @"Element reaches outside list contents height: y = ", [element getY], @", height = ", [element getHeight], @", list contents height = ", [listContents getHeight], '.') withId:element];
        }
        if ([element getX] + [element getWidth] > contentsWidth) {
          [verifier addBrokenRuleWithNSString:JreStrcat("$I$I$IC", @"Element reaches outside list contents width: x = ", [element getX], @", width = ", [element getWidth], @", list contents width = ", contentsWidth, '.') withId:element];
        }
      }
    }
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterComponentsListListComponentCompiler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "collectExpressionsWithOrgOssPdfreporterEngineComponentComponent:withOrgOssPdfreporterEngineJRExpressionCollector:", "collectExpressions", "V", 0x1, NULL, NULL },
    { "toCompiledComponentWithOrgOssPdfreporterEngineComponentComponent:withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:", "toCompiledComponent", "Lorg.oss.pdfreporter.engine.component.Component;", 0x1, NULL, NULL },
    { "verifyWithOrgOssPdfreporterEngineComponentComponent:withOrgOssPdfreporterEngineDesignJRVerifier:", "verify", "V", 0x1, NULL, NULL },
    { "init", "ListComponentCompiler", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterComponentsListListComponentCompiler = { 2, "ListComponentCompiler", "org.oss.pdfreporter.components.list", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterComponentsListListComponentCompiler;
}

@end

void OrgOssPdfreporterComponentsListListComponentCompiler_init(OrgOssPdfreporterComponentsListListComponentCompiler *self) {
  NSObject_init(self);
}

OrgOssPdfreporterComponentsListListComponentCompiler *new_OrgOssPdfreporterComponentsListListComponentCompiler_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterComponentsListListComponentCompiler, init)
}

OrgOssPdfreporterComponentsListListComponentCompiler *create_OrgOssPdfreporterComponentsListListComponentCompiler_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterComponentsListListComponentCompiler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterComponentsListListComponentCompiler)
