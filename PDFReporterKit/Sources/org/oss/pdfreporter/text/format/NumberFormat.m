//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/text/format/NumberFormat.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/text/DecimalFormat.h"
#include "java/text/NumberFormat.h"
#include "java/text/ParseException.h"
#include "java/util/Locale.h"
#include "org/oss/pdfreporter/text/ParseException.h"
#include "org/oss/pdfreporter/text/format/NumberFormat.h"

@interface OrgOssPdfreporterTextFormatNumberFormat () {
 @public
  JavaTextNumberFormat *format_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterTextFormatNumberFormat, format_, JavaTextNumberFormat *)

@implementation OrgOssPdfreporterTextFormatNumberFormat

- (instancetype)initWithNSString:(NSString *)pattern
              withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgOssPdfreporterTextFormatNumberFormat_initWithNSString_withJavaUtilLocale_(self, pattern, locale);
  return self;
}

- (id)parseObjectWithNSString:(NSString *)source {
  return [self parseWithNSString:source];
}

- (NSString *)formatWithId:(id)obj {
  return [((JavaTextNumberFormat *) nil_chk(format_)) formatWithId:obj];
}

- (NSNumber *)parseWithNSString:(NSString *)source {
  @try {
    return [((JavaTextNumberFormat *) nil_chk(format_)) parseWithNSString:source];
  }
  @catch (JavaTextParseException *e) {
    @throw new_OrgOssPdfreporterTextParseException_initWithNSString_([((JavaTextParseException *) nil_chk(e)) getMessage]);
  }
}

- (NSString *)formatWithLong:(jlong)number {
  return [((JavaTextNumberFormat *) nil_chk(format_)) formatWithLong:number];
}

- (NSString *)formatWithDouble:(jdouble)number {
  return [((JavaTextNumberFormat *) nil_chk(format_)) formatWithDouble:number];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withJavaUtilLocale:", "NumberFormat", NULL, 0x1, NULL, NULL },
    { "parseObjectWithNSString:", "parseObject", "Ljava.lang.Object;", 0x1, "Lorg.oss.pdfreporter.text.ParseException;", NULL },
    { "formatWithId:", "format", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "parseWithNSString:", "parse", "Ljava.lang.Number;", 0x1, "Lorg.oss.pdfreporter.text.ParseException;", NULL },
    { "formatWithLong:", "format", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "formatWithDouble:", "format", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "format_", NULL, 0x12, "Ljava.text.NumberFormat;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterTextFormatNumberFormat = { 2, "NumberFormat", "org.oss.pdfreporter.text.format", NULL, 0x1, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterTextFormatNumberFormat;
}

@end

void OrgOssPdfreporterTextFormatNumberFormat_initWithNSString_withJavaUtilLocale_(OrgOssPdfreporterTextFormatNumberFormat *self, NSString *pattern, JavaUtilLocale *locale) {
  NSObject_init(self);
  if (pattern != nil) {
    self->format_ = new_JavaTextDecimalFormat_initWithNSString_(pattern);
  }
  else if (locale != nil) {
    self->format_ = JavaTextNumberFormat_getNumberInstanceWithJavaUtilLocale_(locale);
  }
  else {
    self->format_ = new_JavaTextDecimalFormat_init();
  }
}

OrgOssPdfreporterTextFormatNumberFormat *new_OrgOssPdfreporterTextFormatNumberFormat_initWithNSString_withJavaUtilLocale_(NSString *pattern, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterTextFormatNumberFormat, initWithNSString_withJavaUtilLocale_, pattern, locale)
}

OrgOssPdfreporterTextFormatNumberFormat *create_OrgOssPdfreporterTextFormatNumberFormat_initWithNSString_withJavaUtilLocale_(NSString *pattern, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterTextFormatNumberFormat, initWithNSString_withJavaUtilLocale_, pattern, locale)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterTextFormatNumberFormat)
