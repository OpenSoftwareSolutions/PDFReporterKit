//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/text/format/LocaleConverter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "org/oss/pdfreporter/exception/ConversionException.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/text/ParseException.h"
#include "org/oss/pdfreporter/text/bundle/StringLocale.h"
#include "org/oss/pdfreporter/text/format/IDateFormat.h"
#include "org/oss/pdfreporter/text/format/INumberFormat.h"
#include "org/oss/pdfreporter/text/format/LocaleConverter.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"

@interface OrgOssPdfreporterTextFormatLocaleConverter ()

+ (NSNumber *)getNumberWithNSNumber:(NSNumber *)number
                       withIOSClass:(IOSClass *)c;

@end

__attribute__((unused)) static NSNumber *OrgOssPdfreporterTextFormatLocaleConverter_getNumberWithNSNumber_withIOSClass_(NSNumber *number, IOSClass *c);

@implementation OrgOssPdfreporterTextFormatLocaleConverter

+ (id)convertWithNSString:(NSString *)valueString
             withIOSClass:(IOSClass *)valueClass
withOrgOssPdfreporterTextBundleStringLocale:(OrgOssPdfreporterTextBundleStringLocale *)localestring
             withNSString:(NSString *)pattern {
  return OrgOssPdfreporterTextFormatLocaleConverter_convertWithNSString_withIOSClass_withOrgOssPdfreporterTextBundleStringLocale_withNSString_(valueString, valueClass, localestring, pattern);
}

+ (NSNumber *)getNumberWithNSNumber:(NSNumber *)number
                       withIOSClass:(IOSClass *)c {
  return OrgOssPdfreporterTextFormatLocaleConverter_getNumberWithNSNumber_withIOSClass_(number, c);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterTextFormatLocaleConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "convertWithNSString:withIOSClass:withOrgOssPdfreporterTextBundleStringLocale:withNSString:", "convert", "Ljava.lang.Object;", 0x9, NULL, "(Ljava/lang/String;Ljava/lang/Class<*>;Lorg/oss/pdfreporter/text/bundle/StringLocale;Ljava/lang/String;)Ljava/lang/Object;" },
    { "getNumberWithNSNumber:withIOSClass:", "getNumber", "Ljava.lang.Number;", 0xa, NULL, "(Ljava/lang/Number;Ljava/lang/Class<*>;)Ljava/lang/Number;" },
    { "init", "LocaleConverter", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterTextFormatLocaleConverter = { 2, "LocaleConverter", "org.oss.pdfreporter.text.format", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterTextFormatLocaleConverter;
}

@end

id OrgOssPdfreporterTextFormatLocaleConverter_convertWithNSString_withIOSClass_withOrgOssPdfreporterTextBundleStringLocale_withNSString_(NSString *valueString, IOSClass *valueClass, OrgOssPdfreporterTextBundleStringLocale *localestring, NSString *pattern) {
  OrgOssPdfreporterTextFormatLocaleConverter_initialize();
  JavaUtilLocale *locale = localestring == nil ? nil : [localestring toLocale];
  @try {
    id<OrgOssPdfreporterTextFormatFactoryIFormatFactory> factory = OrgOssPdfreporterRegistryApiRegistry_getIFormatFactoryWithOrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatType_(JreLoadEnum(OrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatType, SIMPLE));
    if ([((IOSClass *) nil_chk(valueClass)) isAssignableFrom:JavaUtilDate_class_()]) {
      return [((id<OrgOssPdfreporterTextFormatIDateFormat>) nil_chk([((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk(factory)) newDateFormatWithNSString:pattern withJavaUtilLocale:locale withJavaUtilTimeZone:nil])) parseWithNSString:valueString];
    }
    NSNumber *number = [((id<OrgOssPdfreporterTextFormatINumberFormat>) nil_chk([((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk(factory)) newNumberFormatWithNSString:pattern withJavaUtilLocale:locale])) parseWithNSString:valueString];
    return OrgOssPdfreporterTextFormatLocaleConverter_getNumberWithNSNumber_withIOSClass_(number, valueClass);
  }
  @catch (OrgOssPdfreporterTextParseException *e) {
    @throw new_OrgOssPdfreporterExceptionConversionException_initWithNSString_(JreStrcat("$$$$$$$@$$", @"Conversion of '", valueString, @"' to ", [((IOSClass *) nil_chk(valueClass)) getSimpleName], @" with pattern: ", pattern, @" and locale: ", locale, @" failed, ", [((OrgOssPdfreporterTextParseException *) nil_chk(e)) getMessage]));
  }
}

NSNumber *OrgOssPdfreporterTextFormatLocaleConverter_getNumberWithNSNumber_withIOSClass_(NSNumber *number, IOSClass *c) {
  OrgOssPdfreporterTextFormatLocaleConverter_initialize();
  if ([((IOSClass *) nil_chk(c)) isAssignableFrom:JavaMathBigDecimal_class_()]) {
    return new_JavaMathBigDecimal_initWithDouble_([((NSNumber *) nil_chk(number)) doubleValue]);
  }
  else if ([c isAssignableFrom:JavaMathBigInteger_class_()]) {
    return JavaMathBigInteger_valueOfWithLong_([((NSNumber *) nil_chk(number)) longLongValue]);
  }
  else if ([c isAssignableFrom:JavaLangDouble_class_()]) {
    return JavaLangDouble_valueOfWithDouble_([((NSNumber *) nil_chk(number)) doubleValue]);
  }
  else if ([c isAssignableFrom:JavaLangFloat_class_()]) {
    return new_JavaLangFloat_initWithDouble_([((NSNumber *) nil_chk(number)) doubleValue]);
  }
  else if ([c isAssignableFrom:JavaLangLong_class_()]) {
    return new_JavaLangLong_initWithLong_([((NSNumber *) nil_chk(number)) longLongValue]);
  }
  else if ([c isAssignableFrom:JavaLangInteger_class_()]) {
    return new_JavaLangInteger_initWithInt_([((NSNumber *) nil_chk(number)) intValue]);
  }
  else if ([c isAssignableFrom:JavaLangShort_class_()]) {
    return new_JavaLangShort_initWithShort_([((NSNumber *) nil_chk(number)) shortValue]);
  }
  else if ([c isAssignableFrom:JavaLangByte_class_()]) {
    return new_JavaLangByte_initWithByte_([((NSNumber *) nil_chk(number)) charValue]);
  }
  @throw new_OrgOssPdfreporterExceptionConversionException_initWithNSString_(JreStrcat("$@", @"Not supported Number type ", c));
}

void OrgOssPdfreporterTextFormatLocaleConverter_init(OrgOssPdfreporterTextFormatLocaleConverter *self) {
  NSObject_init(self);
}

OrgOssPdfreporterTextFormatLocaleConverter *new_OrgOssPdfreporterTextFormatLocaleConverter_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterTextFormatLocaleConverter, init)
}

OrgOssPdfreporterTextFormatLocaleConverter *create_OrgOssPdfreporterTextFormatLocaleConverter_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterTextFormatLocaleConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterTextFormatLocaleConverter)
