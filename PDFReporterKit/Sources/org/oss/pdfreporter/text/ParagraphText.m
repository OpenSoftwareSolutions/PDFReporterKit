//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/text/ParagraphText.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontMetric.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/text/IPositionedLine.h"
#include "org/oss/pdfreporter/text/ISplitListener.h"
#include "org/oss/pdfreporter/text/ParagraphText.h"
#include "org/oss/pdfreporter/text/ScaledLine.h"

@interface OrgOssPdfreporterTextParagraphText () {
 @public
  NSString *text_;
  id<OrgOssPdfreporterFontIFont> font_;
  id<OrgOssPdfreporterGeometryIColor> foreground_;
  id<OrgOssPdfreporterGeometryIColor> background_;
  id<OrgOssPdfreporterTextIPositionedLine> line_;
  id<OrgOssPdfreporterTextISplitListener> listener_;
  JavaLangFloat *width_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterTextParagraphText, text_, NSString *)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterTextParagraphText, font_, id<OrgOssPdfreporterFontIFont>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterTextParagraphText, foreground_, id<OrgOssPdfreporterGeometryIColor>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterTextParagraphText, background_, id<OrgOssPdfreporterGeometryIColor>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterTextParagraphText, line_, id<OrgOssPdfreporterTextIPositionedLine>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterTextParagraphText, listener_, id<OrgOssPdfreporterTextISplitListener>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterTextParagraphText, width_, JavaLangFloat *)

@implementation OrgOssPdfreporterTextParagraphText

- (instancetype)initWithNSString:(NSString *)text
  withOrgOssPdfreporterFontIFont:(id<OrgOssPdfreporterFontIFont>)font
withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)foreground
withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)background
withOrgOssPdfreporterTextIPositionedLine:(id<OrgOssPdfreporterTextIPositionedLine>)line {
  OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterTextIPositionedLine_(self, text, font, foreground, background, line);
  return self;
}

- (instancetype)initWithNSString:(NSString *)text
withOrgOssPdfreporterTextParagraphText:(OrgOssPdfreporterTextParagraphText *)template_ {
  OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterTextParagraphText_(self, text, template_);
  return self;
}

- (instancetype)initWithNSString:(NSString *)text
  withOrgOssPdfreporterFontIFont:(id<OrgOssPdfreporterFontIFont>)font
withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)foreground {
  OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_(self, text, font, foreground);
  return self;
}

- (NSString *)getText {
  return text_;
}

- (jint)getLength {
  return ((jint) [((NSString *) nil_chk(text_)) length]);
}

- (jfloat)getWidth {
  if (width_ == nil) {
    width_ = new_JavaLangFloat_initWithFloat_([((id<OrgOssPdfreporterFontIFontMetric>) nil_chk([((id<OrgOssPdfreporterFontIFont>) nil_chk(font_)) getMetric])) getWidthWithNSString:[self getText]] * [((id<OrgOssPdfreporterFontIFont>) nil_chk([self getFont])) getSize] / 1000);
  }
  return [width_ floatValue];
}

- (jint)measureTextWithFloat:(jfloat)wrappingwidth
                 withBoolean:(jboolean)wordwrap {
  return [((id<OrgOssPdfreporterFontIFontMetric>) nil_chk([((id<OrgOssPdfreporterFontIFont>) nil_chk(font_)) getMetric])) measureTextWithNSString:text_ withInt:JreFpToInt((wrappingwidth * 1000 / [font_ getSize])) withBoolean:wordwrap];
}

- (id<OrgOssPdfreporterFontIFont>)getFont {
  return font_;
}

- (id<OrgOssPdfreporterGeometryIColor>)getForeground {
  return foreground_;
}

- (id<OrgOssPdfreporterGeometryIColor>)getBackground {
  return background_;
}

- (id<OrgOssPdfreporterTextIPositionedLine>)getLine {
  return line_ == nil ? nil : [((OrgOssPdfreporterTextIPositionedLine_LineType *) nil_chk([line_ getType])) isEqual:JreLoadEnum(OrgOssPdfreporterTextIPositionedLine_LineType, ABSOLUTE)] ? ((id) line_) : new_OrgOssPdfreporterTextScaledLine_initWithOrgOssPdfreporterTextIPositionedLine_withFloat_(line_, [((id<OrgOssPdfreporterFontIFont>) nil_chk([self getFont])) getSize]);
}

- (void)setSplitListenerWithOrgOssPdfreporterTextISplitListener:(id<OrgOssPdfreporterTextISplitListener>)listener {
  self->listener_ = listener;
}

- (OrgOssPdfreporterTextParagraphText *)splitWithInt:(jint)charIndex {
  if (charIndex == 0) {
    charIndex = 1;
  }
  OrgOssPdfreporterTextParagraphText *left = new_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterTextParagraphText_([((NSString *) nil_chk(text_)) substring:0 endIndex:charIndex], self);
  OrgOssPdfreporterTextParagraphText *right = new_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterTextParagraphText_([text_ substring:charIndex], self);
  if (listener_ != nil) {
    [listener_ splitWithId:self withId:left withId:right];
  }
  return left;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withOrgOssPdfreporterFontIFont:withOrgOssPdfreporterGeometryIColor:withOrgOssPdfreporterGeometryIColor:withOrgOssPdfreporterTextIPositionedLine:", "ParagraphText", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withOrgOssPdfreporterTextParagraphText:", "ParagraphText", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withOrgOssPdfreporterFontIFont:withOrgOssPdfreporterGeometryIColor:", "ParagraphText", NULL, 0x1, NULL, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLength", NULL, "I", 0x1, NULL, NULL },
    { "getWidth", NULL, "F", 0x1, NULL, NULL },
    { "measureTextWithFloat:withBoolean:", "measureText", "I", 0x1, NULL, NULL },
    { "getFont", NULL, "Lorg.oss.pdfreporter.font.IFont;", 0x1, NULL, NULL },
    { "getForeground", NULL, "Lorg.oss.pdfreporter.geometry.IColor;", 0x1, NULL, NULL },
    { "getBackground", NULL, "Lorg.oss.pdfreporter.geometry.IColor;", 0x1, NULL, NULL },
    { "getLine", NULL, "Lorg.oss.pdfreporter.text.IPositionedLine;", 0x1, NULL, NULL },
    { "setSplitListenerWithOrgOssPdfreporterTextISplitListener:", "setSplitListener", "V", 0x1, NULL, "(Lorg/oss/pdfreporter/text/ISplitListener<Lorg/oss/pdfreporter/text/ParagraphText;>;)V" },
    { "splitWithInt:", "split", "Lorg.oss.pdfreporter.text.ParagraphText;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "text_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL, .constantValue.asLong = 0 },
    { "font_", NULL, 0x12, "Lorg.oss.pdfreporter.font.IFont;", NULL, NULL, .constantValue.asLong = 0 },
    { "foreground_", NULL, 0x12, "Lorg.oss.pdfreporter.geometry.IColor;", NULL, NULL, .constantValue.asLong = 0 },
    { "background_", NULL, 0x12, "Lorg.oss.pdfreporter.geometry.IColor;", NULL, NULL, .constantValue.asLong = 0 },
    { "line_", NULL, 0x12, "Lorg.oss.pdfreporter.text.IPositionedLine;", NULL, NULL, .constantValue.asLong = 0 },
    { "listener_", NULL, 0x2, "Lorg.oss.pdfreporter.text.ISplitListener;", NULL, "Lorg/oss/pdfreporter/text/ISplitListener<Lorg/oss/pdfreporter/text/ParagraphText;>;", .constantValue.asLong = 0 },
    { "width_", NULL, 0x2, "Ljava.lang.Float;", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterTextParagraphText = { 2, "ParagraphText", "org.oss.pdfreporter.text", NULL, 0x11, 13, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterTextParagraphText;
}

@end

void OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterTextIPositionedLine_(OrgOssPdfreporterTextParagraphText *self, NSString *text, id<OrgOssPdfreporterFontIFont> font, id<OrgOssPdfreporterGeometryIColor> foreground, id<OrgOssPdfreporterGeometryIColor> background, id<OrgOssPdfreporterTextIPositionedLine> line) {
  NSObject_init(self);
  self->listener_ = nil;
  self->width_ = nil;
  self->text_ = text;
  self->font_ = font;
  self->foreground_ = foreground;
  self->background_ = background;
  self->line_ = line;
}

OrgOssPdfreporterTextParagraphText *new_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterTextIPositionedLine_(NSString *text, id<OrgOssPdfreporterFontIFont> font, id<OrgOssPdfreporterGeometryIColor> foreground, id<OrgOssPdfreporterGeometryIColor> background, id<OrgOssPdfreporterTextIPositionedLine> line) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterTextParagraphText, initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterTextIPositionedLine_, text, font, foreground, background, line)
}

OrgOssPdfreporterTextParagraphText *create_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterTextIPositionedLine_(NSString *text, id<OrgOssPdfreporterFontIFont> font, id<OrgOssPdfreporterGeometryIColor> foreground, id<OrgOssPdfreporterGeometryIColor> background, id<OrgOssPdfreporterTextIPositionedLine> line) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterTextParagraphText, initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterTextIPositionedLine_, text, font, foreground, background, line)
}

void OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterTextParagraphText_(OrgOssPdfreporterTextParagraphText *self, NSString *text, OrgOssPdfreporterTextParagraphText *template_) {
  OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterTextIPositionedLine_(self, text, [((OrgOssPdfreporterTextParagraphText *) nil_chk(template_)) getFont], [template_ getForeground], [template_ getBackground], [template_ getLine]);
}

OrgOssPdfreporterTextParagraphText *new_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterTextParagraphText_(NSString *text, OrgOssPdfreporterTextParagraphText *template_) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterTextParagraphText, initWithNSString_withOrgOssPdfreporterTextParagraphText_, text, template_)
}

OrgOssPdfreporterTextParagraphText *create_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterTextParagraphText_(NSString *text, OrgOssPdfreporterTextParagraphText *template_) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterTextParagraphText, initWithNSString_withOrgOssPdfreporterTextParagraphText_, text, template_)
}

void OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_(OrgOssPdfreporterTextParagraphText *self, NSString *text, id<OrgOssPdfreporterFontIFont> font, id<OrgOssPdfreporterGeometryIColor> foreground) {
  OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterGeometryIColor_withOrgOssPdfreporterTextIPositionedLine_(self, text, font, foreground, nil, nil);
}

OrgOssPdfreporterTextParagraphText *new_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_(NSString *text, id<OrgOssPdfreporterFontIFont> font, id<OrgOssPdfreporterGeometryIColor> foreground) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterTextParagraphText, initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_, text, font, foreground)
}

OrgOssPdfreporterTextParagraphText *create_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_(NSString *text, id<OrgOssPdfreporterFontIFont> font, id<OrgOssPdfreporterGeometryIColor> foreground) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterTextParagraphText, initWithNSString_withOrgOssPdfreporterFontIFont_withOrgOssPdfreporterGeometryIColor_, text, font, foreground)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterTextParagraphText)
