//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/text/Paragraph.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/text/ISplitListener.h"
#include "org/oss/pdfreporter/text/Paragraph.h"
#include "org/oss/pdfreporter/text/ParagraphText.h"

@interface OrgOssPdfreporterTextParagraph () {
 @public
  id<JavaUtilList> textList_;
  id<JavaUtilMap> beginPosMap_;
  jint lastBeginPos_;
}

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterTextParagraph, textList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterTextParagraph, beginPosMap_, id<JavaUtilMap>)

@interface OrgOssPdfreporterTextParagraph_SplitableIterator : NSObject < JavaUtilIterator, OrgOssPdfreporterTextISplitListener > {
 @public
  id<JavaUtilList> textList_;
  jint index_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)original;

- (jboolean)hasNext;

- (OrgOssPdfreporterTextParagraphText *)next;

- (void)remove;

- (void)splitWithId:(OrgOssPdfreporterTextParagraphText *)before
             withId:(OrgOssPdfreporterTextParagraphText *)left
             withId:(OrgOssPdfreporterTextParagraphText *)right;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgOssPdfreporterTextParagraph_SplitableIterator)

J2OBJC_FIELD_SETTER(OrgOssPdfreporterTextParagraph_SplitableIterator, textList_, id<JavaUtilList>)

__attribute__((unused)) static void OrgOssPdfreporterTextParagraph_SplitableIterator_initWithJavaUtilList_(OrgOssPdfreporterTextParagraph_SplitableIterator *self, id<JavaUtilList> original);

__attribute__((unused)) static OrgOssPdfreporterTextParagraph_SplitableIterator *new_OrgOssPdfreporterTextParagraph_SplitableIterator_initWithJavaUtilList_(id<JavaUtilList> original) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgOssPdfreporterTextParagraph_SplitableIterator *create_OrgOssPdfreporterTextParagraph_SplitableIterator_initWithJavaUtilList_(id<JavaUtilList> original);

J2OBJC_TYPE_LITERAL_HEADER(OrgOssPdfreporterTextParagraph_SplitableIterator)

@implementation OrgOssPdfreporterTextParagraph

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgOssPdfreporterTextParagraph_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)textList {
  OrgOssPdfreporterTextParagraph_initWithJavaUtilList_(self, textList);
  return self;
}

- (void)addWithOrgOssPdfreporterTextParagraphText:(OrgOssPdfreporterTextParagraphText *)text {
  [((id<JavaUtilList>) nil_chk(self->textList_)) addWithId:text];
  (void) [((id<JavaUtilMap>) nil_chk(self->beginPosMap_)) putWithId:new_JavaLangInteger_initWithInt_(lastBeginPos_) withId:text];
  self->lastBeginPos_ += [((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getLength];
}

- (void)addAllWithJavaUtilList:(id<JavaUtilList>)all {
  for (OrgOssPdfreporterTextParagraphText * __strong text in nil_chk(all)) {
    [self addWithOrgOssPdfreporterTextParagraphText:text];
  }
}

- (id<JavaUtilIterator>)iterator {
  return new_OrgOssPdfreporterTextParagraph_SplitableIterator_initWithJavaUtilList_(textList_);
}

- (OrgOssPdfreporterTextParagraph *)subParagraphWithInt:(jint)beginIndex
                                                withInt:(jint)endIndex {
  if (beginIndex < 0 || endIndex < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Index cannot be before first paragraph text.");
  }
  if (endIndex < beginIndex) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"End starts before begin index.");
  }
  OrgOssPdfreporterTextParagraph *subParagraph = new_OrgOssPdfreporterTextParagraph_init();
  jint start = 0;
  for (OrgOssPdfreporterTextParagraphText * __strong text in nil_chk(textList_)) {
    jint end = start + [((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getLength];
    if (beginIndex >= start && beginIndex < end) {
      if (endIndex > start && endIndex <= end) {
        [subParagraph addWithOrgOssPdfreporterTextParagraphText:new_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterTextParagraphText_([((NSString *) nil_chk([text getText])) substring:beginIndex - start endIndex:endIndex - start], text)];
        return subParagraph;
      }
      if (beginIndex == start) {
        [subParagraph addWithOrgOssPdfreporterTextParagraphText:text];
      }
      else {
        [subParagraph addWithOrgOssPdfreporterTextParagraphText:new_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterTextParagraphText_([((NSString *) nil_chk([text getText])) substring:beginIndex - start], text)];
      }
    }
    if (beginIndex < start && endIndex > end) {
      [subParagraph addWithOrgOssPdfreporterTextParagraphText:text];
    }
    if (endIndex > start && endIndex <= end) {
      if (endIndex == start) {
        [subParagraph addWithOrgOssPdfreporterTextParagraphText:text];
      }
      else {
        [subParagraph addWithOrgOssPdfreporterTextParagraphText:new_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterTextParagraphText_([((NSString *) nil_chk([text getText])) substring:0 endIndex:endIndex - start], text)];
      }
      return subParagraph;
    }
    start = end;
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Index cannot be past last paragraph text.");
}

- (OrgOssPdfreporterTextParagraph *)subParagraphWithInt:(jint)beginIndex {
  if (beginIndex < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Index cannot be before first paragraph text.");
  }
  OrgOssPdfreporterTextParagraph *subParagraph = new_OrgOssPdfreporterTextParagraph_init();
  jint start = 0;
  jint index = 0;
  for (OrgOssPdfreporterTextParagraphText * __strong text in nil_chk(textList_)) {
    jint end = start + [((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getLength];
    if (beginIndex >= start && beginIndex < end) {
      if (beginIndex == start) {
        [subParagraph addAllWithJavaUtilList:[textList_ subListWithInt:index withInt:[textList_ size]]];
      }
      else {
        [subParagraph addWithOrgOssPdfreporterTextParagraphText:new_OrgOssPdfreporterTextParagraphText_initWithNSString_withOrgOssPdfreporterTextParagraphText_([((NSString *) nil_chk([text getText])) substring:beginIndex - start], text)];
        [subParagraph addAllWithJavaUtilList:[textList_ subListWithInt:index + 1 withInt:[textList_ size]]];
      }
      return subParagraph;
    }
    start = end;
    index++;
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Index cannot be past last paragraph text.");
}

- (NSString *)getText {
  JavaLangStringBuilder *builder = new_JavaLangStringBuilder_init();
  for (OrgOssPdfreporterTextParagraphText * __strong text in nil_chk(textList_)) {
    (void) [builder appendWithNSString:[((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getText]];
  }
  return [builder description];
}

- (OrgOssPdfreporterTextParagraphText *)getFirstParagraphText {
  return [((id<JavaUtilList>) nil_chk(textList_)) isEmpty] ? nil : [textList_ getWithInt:0];
}

- (OrgOssPdfreporterTextParagraphText *)getLastParagraphText {
  return [((id<JavaUtilList>) nil_chk(textList_)) isEmpty] ? nil : [textList_ getWithInt:[textList_ size] - 1];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Paragraph", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilList:", "Paragraph", NULL, 0x1, NULL, "(Ljava/util/List<Lorg/oss/pdfreporter/text/ParagraphText;>;)V" },
    { "addWithOrgOssPdfreporterTextParagraphText:", "add", "V", 0x1, NULL, NULL },
    { "addAllWithJavaUtilList:", "addAll", "V", 0x1, NULL, "(Ljava/util/List<Lorg/oss/pdfreporter/text/ParagraphText;>;)V" },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, "()Ljava/util/Iterator<Lorg/oss/pdfreporter/text/ParagraphText;>;" },
    { "subParagraphWithInt:withInt:", "subParagraph", "Lorg.oss.pdfreporter.text.Paragraph;", 0x1, NULL, NULL },
    { "subParagraphWithInt:", "subParagraph", "Lorg.oss.pdfreporter.text.Paragraph;", 0x1, NULL, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFirstParagraphText", NULL, "Lorg.oss.pdfreporter.text.ParagraphText;", 0x1, NULL, NULL },
    { "getLastParagraphText", NULL, "Lorg.oss.pdfreporter.text.ParagraphText;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "textList_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/text/ParagraphText;>;", .constantValue.asLong = 0 },
    { "beginPosMap_", NULL, 0x12, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Integer;Lorg/oss/pdfreporter/text/ParagraphText;>;", .constantValue.asLong = 0 },
    { "lastBeginPos_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const char *inner_classes[] = {"Lorg.oss.pdfreporter.text.Paragraph$SplitableIterator;"};
  static const J2ObjcClassInfo _OrgOssPdfreporterTextParagraph = { 2, "Paragraph", "org.oss.pdfreporter.text", NULL, 0x11, 10, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, "Ljava/lang/Object;Ljava/lang/Iterable<Lorg/oss/pdfreporter/text/ParagraphText;>;" };
  return &_OrgOssPdfreporterTextParagraph;
}

@end

void OrgOssPdfreporterTextParagraph_init(OrgOssPdfreporterTextParagraph *self) {
  NSObject_init(self);
  self->textList_ = new_JavaUtilArrayList_init();
  self->beginPosMap_ = new_JavaUtilHashMap_init();
  self->lastBeginPos_ = 0;
}

OrgOssPdfreporterTextParagraph *new_OrgOssPdfreporterTextParagraph_init() {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterTextParagraph, init)
}

OrgOssPdfreporterTextParagraph *create_OrgOssPdfreporterTextParagraph_init() {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterTextParagraph, init)
}

void OrgOssPdfreporterTextParagraph_initWithJavaUtilList_(OrgOssPdfreporterTextParagraph *self, id<JavaUtilList> textList) {
  OrgOssPdfreporterTextParagraph_init(self);
  [self addAllWithJavaUtilList:textList];
}

OrgOssPdfreporterTextParagraph *new_OrgOssPdfreporterTextParagraph_initWithJavaUtilList_(id<JavaUtilList> textList) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterTextParagraph, initWithJavaUtilList_, textList)
}

OrgOssPdfreporterTextParagraph *create_OrgOssPdfreporterTextParagraph_initWithJavaUtilList_(id<JavaUtilList> textList) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterTextParagraph, initWithJavaUtilList_, textList)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterTextParagraph)

@implementation OrgOssPdfreporterTextParagraph_SplitableIterator

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)original {
  OrgOssPdfreporterTextParagraph_SplitableIterator_initWithJavaUtilList_(self, original);
  return self;
}

- (jboolean)hasNext {
  return index_ < [((id<JavaUtilList>) nil_chk(textList_)) size];
}

- (OrgOssPdfreporterTextParagraphText *)next {
  OrgOssPdfreporterTextParagraphText *current = [((id<JavaUtilList>) nil_chk(textList_)) getWithInt:index_++];
  [((OrgOssPdfreporterTextParagraphText *) nil_chk(current)) setSplitListenerWithOrgOssPdfreporterTextISplitListener:self];
  return current;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)splitWithId:(OrgOssPdfreporterTextParagraphText *)before
             withId:(OrgOssPdfreporterTextParagraphText *)left
             withId:(OrgOssPdfreporterTextParagraphText *)right {
  jint oldIndex = [((id<JavaUtilList>) nil_chk(textList_)) indexOfWithId:before];
  (void) [textList_ setWithInt:oldIndex withId:left];
  [textList_ addWithInt:oldIndex + 1 withId:right];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:", "SplitableIterator", NULL, 0x0, NULL, "(Ljava/util/List<Lorg/oss/pdfreporter/text/ParagraphText;>;)V" },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Lorg.oss.pdfreporter.text.ParagraphText;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "splitWithId:withId:withId:", "split", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "textList_", NULL, 0x12, "Ljava.util.List;", NULL, "Ljava/util/List<Lorg/oss/pdfreporter/text/ParagraphText;>;", .constantValue.asLong = 0 },
    { "index_", NULL, 0x0, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterTextParagraph_SplitableIterator = { 2, "SplitableIterator", "org.oss.pdfreporter.text", "Paragraph", 0xa, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Iterator<Lorg/oss/pdfreporter/text/ParagraphText;>;Lorg/oss/pdfreporter/text/ISplitListener<Lorg/oss/pdfreporter/text/ParagraphText;>;" };
  return &_OrgOssPdfreporterTextParagraph_SplitableIterator;
}

@end

void OrgOssPdfreporterTextParagraph_SplitableIterator_initWithJavaUtilList_(OrgOssPdfreporterTextParagraph_SplitableIterator *self, id<JavaUtilList> original) {
  NSObject_init(self);
  self->index_ = 0;
  self->textList_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(original);
}

OrgOssPdfreporterTextParagraph_SplitableIterator *new_OrgOssPdfreporterTextParagraph_SplitableIterator_initWithJavaUtilList_(id<JavaUtilList> original) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterTextParagraph_SplitableIterator, initWithJavaUtilList_, original)
}

OrgOssPdfreporterTextParagraph_SplitableIterator *create_OrgOssPdfreporterTextParagraph_SplitableIterator_initWithJavaUtilList_(id<JavaUtilList> original) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterTextParagraph_SplitableIterator, initWithJavaUtilList_, original)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterTextParagraph_SplitableIterator)
