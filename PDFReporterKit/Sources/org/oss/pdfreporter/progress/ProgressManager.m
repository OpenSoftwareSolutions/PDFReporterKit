//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-core/src/org/oss/pdfreporter/progress/ProgressManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Float.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/List.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/extensions/ExtensionsEnvironment.h"
#include "org/oss/pdfreporter/extensions/ExtensionsRegistry.h"
#include "org/oss/pdfreporter/progress/IProgressHandler.h"
#include "org/oss/pdfreporter/progress/ProgressManager.h"

@interface OrgOssPdfreporterProgressProgressManager () {
 @public
  id<OrgOssPdfreporterProgressIProgressHandler> handler_;
  OrgOssPdfreporterProgressIProgressHandler_ProgressState *state_;
  jint maxRecords_, logTriggerRecordsInterval_;
  jlong startTime_;
  jlong timeElapsed_;
  jint recordsComplete_;
}

- (void)progressWithBoolean:(jboolean)force;

- (void)notifyProgress;

@end

J2OBJC_FIELD_SETTER(OrgOssPdfreporterProgressProgressManager, handler_, id<OrgOssPdfreporterProgressIProgressHandler>)
J2OBJC_FIELD_SETTER(OrgOssPdfreporterProgressProgressManager, state_, OrgOssPdfreporterProgressIProgressHandler_ProgressState *)

inline JavaUtilLoggingLogger *OrgOssPdfreporterProgressProgressManager_get_logger();
static JavaUtilLoggingLogger *OrgOssPdfreporterProgressProgressManager_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgOssPdfreporterProgressProgressManager, logger, JavaUtilLoggingLogger *)

inline jlong OrgOssPdfreporterProgressProgressManager_get_LOG_TRIGGER_TIME_INTERVALL();
#define OrgOssPdfreporterProgressProgressManager_LOG_TRIGGER_TIME_INTERVALL 250LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterProgressProgressManager, LOG_TRIGGER_TIME_INTERVALL, jlong)

inline jint OrgOssPdfreporterProgressProgressManager_get_LOG_TRIGGER_PERCENT_INTERVALL();
#define OrgOssPdfreporterProgressProgressManager_LOG_TRIGGER_PERCENT_INTERVALL 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgOssPdfreporterProgressProgressManager, LOG_TRIGGER_PERCENT_INTERVALL, jint)

__attribute__((unused)) static void OrgOssPdfreporterProgressProgressManager_progressWithBoolean_(OrgOssPdfreporterProgressProgressManager *self, jboolean force);

__attribute__((unused)) static void OrgOssPdfreporterProgressProgressManager_notifyProgress(OrgOssPdfreporterProgressProgressManager *self);

J2OBJC_INITIALIZED_DEFN(OrgOssPdfreporterProgressProgressManager)

@implementation OrgOssPdfreporterProgressProgressManager

- (instancetype)initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState:(OrgOssPdfreporterProgressIProgressHandler_ProgressState *)state
                                                                        withInt:(jint)maxRecords {
  OrgOssPdfreporterProgressProgressManager_initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_withInt_(self, state, maxRecords);
  return self;
}

- (instancetype)initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState:(OrgOssPdfreporterProgressIProgressHandler_ProgressState *)state {
  OrgOssPdfreporterProgressProgressManager_initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_(self, state);
  return self;
}

- (void)progress {
  OrgOssPdfreporterProgressProgressManager_progressWithBoolean_(self, false);
}

- (void)progressWithInt:(jint)recordCount {
  if (maxRecords_ == -1) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Cannot calculate percentage without knowing total record count.");
  }
  if (recordCount - recordsComplete_ >= logTriggerRecordsInterval_) {
    recordsComplete_ = recordCount;
    OrgOssPdfreporterProgressProgressManager_progressWithBoolean_(self, true);
  }
}

- (void)done {
  recordsComplete_ = maxRecords_;
  timeElapsed_ = JavaLangSystem_currentTimeMillis() - startTime_;
  OrgOssPdfreporterProgressProgressManager_notifyProgress(self);
}

- (void)progressWithBoolean:(jboolean)force {
  OrgOssPdfreporterProgressProgressManager_progressWithBoolean_(self, force);
}

- (void)notifyProgress {
  OrgOssPdfreporterProgressProgressManager_notifyProgress(self);
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterProgressProgressManager class]) {
    OrgOssPdfreporterProgressProgressManager_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([OrgOssPdfreporterProgressProgressManager_class_() getName]);
    J2OBJC_SET_INITIALIZED(OrgOssPdfreporterProgressProgressManager)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState:withInt:", "ProgressManager", NULL, 0x1, NULL, NULL },
    { "initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState:", "ProgressManager", NULL, 0x1, NULL, NULL },
    { "progress", NULL, "V", 0x1, NULL, NULL },
    { "progressWithInt:", "progress", "V", 0x1, NULL, NULL },
    { "done", NULL, "V", 0x1, NULL, NULL },
    { "progressWithBoolean:", "progress", "V", 0x2, NULL, NULL },
    { "notifyProgress", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "logger", 0x1a, "Ljava.util.logging.Logger;", &OrgOssPdfreporterProgressProgressManager_logger, NULL, .constantValue.asLong = 0 },
    { "LOG_TRIGGER_TIME_INTERVALL", "LOG_TRIGGER_TIME_INTERVALL", 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgOssPdfreporterProgressProgressManager_LOG_TRIGGER_TIME_INTERVALL },
    { "LOG_TRIGGER_PERCENT_INTERVALL", "LOG_TRIGGER_PERCENT_INTERVALL", 0x1a, "I", NULL, NULL, .constantValue.asInt = OrgOssPdfreporterProgressProgressManager_LOG_TRIGGER_PERCENT_INTERVALL },
    { "handler_", NULL, 0x12, "Lorg.oss.pdfreporter.progress.IProgressHandler;", NULL, NULL, .constantValue.asLong = 0 },
    { "state_", NULL, 0x12, "Lorg.oss.pdfreporter.progress.IProgressHandler$ProgressState;", NULL, NULL, .constantValue.asLong = 0 },
    { "maxRecords_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "logTriggerRecordsInterval_", NULL, 0x12, "I", NULL, NULL, .constantValue.asLong = 0 },
    { "startTime_", NULL, 0x12, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "timeElapsed_", NULL, 0x2, "J", NULL, NULL, .constantValue.asLong = 0 },
    { "recordsComplete_", NULL, 0x2, "I", NULL, NULL, .constantValue.asLong = 0 },
  };
  static const J2ObjcClassInfo _OrgOssPdfreporterProgressProgressManager = { 2, "ProgressManager", "org.oss.pdfreporter.progress", NULL, 0x1, 7, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgOssPdfreporterProgressProgressManager;
}

@end

void OrgOssPdfreporterProgressProgressManager_initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_withInt_(OrgOssPdfreporterProgressProgressManager *self, OrgOssPdfreporterProgressIProgressHandler_ProgressState *state, jint maxRecords) {
  NSObject_init(self);
  id<JavaUtilList> handlers = [((id<OrgOssPdfreporterExtensionsExtensionsRegistry>) nil_chk(OrgOssPdfreporterExtensionsExtensionsEnvironment_getExtensionsRegistry())) getExtensionsWithIOSClass:OrgOssPdfreporterProgressIProgressHandler_class_()];
  self->handler_ = [((id<JavaUtilList>) nil_chk(handlers)) isEmpty] ? nil : [handlers getWithInt:0];
  self->state_ = state;
  self->maxRecords_ = maxRecords;
  self->logTriggerRecordsInterval_ = maxRecords * OrgOssPdfreporterProgressProgressManager_LOG_TRIGGER_PERCENT_INTERVALL / 100;
  self->recordsComplete_ = 0;
  self->startTime_ = JavaLangSystem_currentTimeMillis();
}

OrgOssPdfreporterProgressProgressManager *new_OrgOssPdfreporterProgressProgressManager_initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_withInt_(OrgOssPdfreporterProgressIProgressHandler_ProgressState *state, jint maxRecords) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterProgressProgressManager, initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_withInt_, state, maxRecords)
}

OrgOssPdfreporterProgressProgressManager *create_OrgOssPdfreporterProgressProgressManager_initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_withInt_(OrgOssPdfreporterProgressIProgressHandler_ProgressState *state, jint maxRecords) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterProgressProgressManager, initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_withInt_, state, maxRecords)
}

void OrgOssPdfreporterProgressProgressManager_initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_(OrgOssPdfreporterProgressProgressManager *self, OrgOssPdfreporterProgressIProgressHandler_ProgressState *state) {
  OrgOssPdfreporterProgressProgressManager_initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_withInt_(self, state, -1);
}

OrgOssPdfreporterProgressProgressManager *new_OrgOssPdfreporterProgressProgressManager_initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_(OrgOssPdfreporterProgressIProgressHandler_ProgressState *state) {
  J2OBJC_NEW_IMPL(OrgOssPdfreporterProgressProgressManager, initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_, state)
}

OrgOssPdfreporterProgressProgressManager *create_OrgOssPdfreporterProgressProgressManager_initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_(OrgOssPdfreporterProgressIProgressHandler_ProgressState *state) {
  J2OBJC_CREATE_IMPL(OrgOssPdfreporterProgressProgressManager, initWithOrgOssPdfreporterProgressIProgressHandler_ProgressState_, state)
}

void OrgOssPdfreporterProgressProgressManager_progressWithBoolean_(OrgOssPdfreporterProgressProgressManager *self, jboolean force) {
  jlong elapsed = JavaLangSystem_currentTimeMillis() - self->startTime_;
  if (elapsed - self->timeElapsed_ >= OrgOssPdfreporterProgressProgressManager_LOG_TRIGGER_TIME_INTERVALL || force) {
    self->timeElapsed_ = elapsed;
    OrgOssPdfreporterProgressProgressManager_notifyProgress(self);
  }
}

void OrgOssPdfreporterProgressProgressManager_notifyProgress(OrgOssPdfreporterProgressProgressManager *self) {
  jfloat percentComplete = 100.0f * self->recordsComplete_ / self->maxRecords_;
  if (self->handler_ != nil) {
    [self->handler_ progressWithOrgOssPdfreporterProgressIProgressHandler_ProgressState:self->state_ withFloat:percentComplete withLong:self->timeElapsed_];
  }
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterProgressProgressManager_logger)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINER)]) {
    NSString *stateString = [((OrgOssPdfreporterProgressIProgressHandler_ProgressState *) nil_chk(self->state_)) description];
    [OrgOssPdfreporterProgressProgressManager_logger finerWithNSString:JreStrcat("$@$", @"Progress ", self->state_, NSString_formatWithNSString_withNSObjectArray_(JreStrcat("$I$", @"%1$", (10 - ((jint) [((NSString *) nil_chk(stateString)) length])), @"c %2$,.2f%% done, time elapsed: %3$TM:%3$TS.%3$TL"), [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangCharacter_valueOfWithChar_(':'), JavaLangFloat_valueOfWithFloat_(percentComplete), JavaLangLong_valueOfWithLong_(self->timeElapsed_) } count:3 type:NSObject_class_()]))];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgOssPdfreporterProgressProgressManager)
